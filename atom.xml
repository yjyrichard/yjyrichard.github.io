<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangjiayu</title>
  
  
  <link href="https://yjyrichard.github.io/atom.xml" rel="self"/>
  
  <link href="https://yjyrichard.github.io/"/>
  <updated>2025-05-29T12:19:01.449Z</updated>
  <id>https://yjyrichard.github.io/</id>
  
  <author>
    <name>Yangjiayu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语学习01-名词</title>
    <link href="https://yjyrichard.github.io/posts/b5c6903b.html"/>
    <id>https://yjyrichard.github.io/posts/b5c6903b.html</id>
    <published>2025-05-29T11:17:42.829Z</published>
    <updated>2025-05-29T12:19:01.449Z</updated>
    
    <content type="html"><![CDATA[<h1>英语学习01 🚀✨</h1><p><strong>梅花香自苦寒来</strong></p><p><em>In order to feel alive, I have to do things that make me feel uncomfortable, because growth cannot bloom in the safety of familiarity. As human beings, we become who we are through challenges— edges that fray our limits, storms that teach us resilience, and unknowns that force us to rewrite our definitions of courage. Comfort may cradle the body, but it starves the soul; only by leaning into discomfort do we meet the raw, unscripted versions of ourselves, sculpted not by ease, but by the friction of becoming.</em></p><blockquote><p>in order to feel alive,<br>i have to do things that make me feel uncomfortable,<br>because…<br>as human beings,<br>we become who we are through challenges.</p></blockquote><p>feel alive 有滋有味的活着</p><p>do things that make me feel uncomfortable 折磨自己</p><p>we become who we are through challenges 高手从磨难中来</p><p>译文：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;为了感受到自己活着，</span><br><span class="line">我必须去做那些让我不适的事，</span><br><span class="line">因为成长无法在熟悉的安全感中绽放。</span><br><span class="line">作为人类，</span><br><span class="line">我们通过挑战成为如今的自己——</span><br><span class="line">磨损边界的峭壁，</span><br><span class="line">教会坚韧的暴雨，</span><br><span class="line">以及迫使我们重写勇气定义的未知。</span><br><span class="line">舒适或许能抚慰身体，</span><br><span class="line">却使灵魂饥渴；</span><br><span class="line">唯有主动迎向不适，</span><br><span class="line">才能遇见未经修饰的、最本真的自我——</span><br><span class="line">它们不是被安逸雕琢，</span><br><span class="line">而是被蜕变时的摩擦铸就。&quot;</span><br></pre></td></tr></table></figure><p>正式进入今日学习 ~</p><hr><h2 id="名词-📚">名词 📚</h2><h3 id="名词的介绍-🧐">名词的介绍 🧐</h3><p>从今天开始我们将进入英语语法的学习，学习完你的英语听，说，读，写都会有全方位的提升。</p><p>我们知道英语语法分为：词法 和 句法</p><p>今天我们先来讲词法 =&gt; <strong>名词</strong> : 或物名称的词</p><p>名词又分为专有名词 和 普通名词两种</p><p>专有名词：人名，地名，机构，组织</p><p>举个栗子：</p><blockquote><p>Michael Jackson</p><p>China  【这里注意 当表达意思为瓷器的时候不能用大写，而是用china】</p><p>the Great Wall</p></blockquote><p>💡 tips(提示) : 为什么the 的t不大写呢？</p><p>🤔 可能会问：什么是实词呀？</p><p>🌟 实词的主要特点</p><ol><li><strong>意义实在</strong> 能明确指向具体事物、动作、状态或性质（如&quot;山、跑、美丽&quot;）。</li><li><strong>独立充当成分</strong> 可单独作主语、谓语、宾语等（如：&quot;太阳升起&quot;中，&quot;太阳&quot;是名词作主语，&quot;升起&quot;是动词作谓语）。</li><li><strong>可被修饰</strong> 能受副词、形容词等修饰（如&quot;快速奔跑&quot;中，“快速&quot;修饰动词&quot;奔跑”）。</li></ol><p>📊 实词的分类</p><ol><li><strong>名词</strong> 表示人、事物、时间、地点等（例：老师、书本、春天、北京）。</li><li><strong>动词</strong> 表示动作、行为、变化（例：思考、生长、成为）。</li><li><strong>形容词</strong> 表示性质、状态（例：纯净、焦虑、鲜红）。</li><li><strong>数词</strong> 表示数量或顺序（例：三、第一、百分之二十）。</li><li><strong>量词</strong> 表示事物或动作的单位（例：个、次、场）。</li><li><strong>代词</strong> 代替名词或名词性成分（例：我、这、谁）。</li></ol><p>📢 实词 vs 虚词</p><table><thead><tr><th></th><th>实词</th><th>虚词</th></tr></thead><tbody><tr><td><strong>意义</strong></td><td>具体（如山、爱、五）</td><td>抽象（如的、吗、因为）</td></tr><tr><td><strong>功能</strong></td><td>独立成句成分</td><td>连接/辅助实词构成语法关系</td></tr><tr><td><strong>数量</strong></td><td>开放类（可无限新增）</td><td>封闭类（数量固定）</td></tr></tbody></table><p>🎯 例句观察</p><p><strong>句子</strong>：“那个穿红裙的女孩轻轻唱了三首歌。”</p><ul><li><strong>实词</strong>：穿（动词）、红裙（名词）、女孩（名词）、唱（动词）、三（数词）、首（量词）、歌（名词）</li><li><strong>虚词</strong>：那个（指示代词中的虚指成分）、地（结构助词）、了（动态助词）</li></ul><p>普通名词分为可数名词和不可数名词</p><p>这里可数和不可数可不是我们脑子中的可不可数，而是要根据英语语法意义来判断</p><p>比如钱 好像我们日常生活中觉得钱是可以数的清，但是我们要从语法意义，语法意义上是不可数的</p><p>💧 可数名词：</p><ul><li>个体名词：apple,dog,desk</li><li>集体名词: family,group,team</li></ul><p>但是还有既可以是个体名词也可以是集体名词的名词，比如：family表示家人的意思的时候就是个体名词，如果当他表示家庭的时候就是集体名词</p><p>咱们举个例子：</p><blockquote><p>One of my families is an actress.(个体)</p><p>I have a big family.（集体）</p></blockquote><p>💧 不可数名词：</p><ul><li>物质名词：water,air ,rice</li><li>抽象名词：love,friendship,health</li></ul><p>那我们要往死里背吗？做题如何区分呢？最容易弄混的就是个体名词和物质名词</p><p>🧠 传授你一个小技巧：</p><p>个体名词咱们是可以想出具体形状的：比如car ,flower</p><p>物质名词：是没有形状的：比如water(你想呀可以是装在长方体是长方体，装在碗里又是另外一个形状了)，air</p><p>🖼️ 总结一下名词的分类：</p><p><img src="https://photo.459122.xyz/i/47b6484eabe2ef20dd25653f3d241083.png" alt="image-20250529194823638"></p><p>📢 注意：</p><blockquote><h3 id="📢-关于「不可数名词」的误解澄清">📢 关于「不可数名词」的误解澄清</h3><p>不可数名词的核心定义是 <strong>“语法上无法直接用数词（如「一、二」）单独计数的名词”</strong>，和「有没有固定形状、能不能描述」<strong>没有直接关系</strong>。</p></blockquote><h3 id="名词变复数-🔄">名词变复数 🔄</h3><p>我们最常见的复数就是+s ,简单举几个例子</p><p>student – students</p><p>one student          250 students</p><p>apple   —  apples</p><p>bag — bags</p><p>但是呢，名词变复数还有3种特殊加法</p><ol><li>以-s,-x,-sh,-ch 结尾的可数名词 复数加es  bus–buses,box–boxes,watch–watches</li><li>以辅音字母加y结尾的词，先把y变成i,再加es country–countries  baby–babies  元音 a e i o u 加y结尾的词，复数加s   toy – toys   monkey – monkeys</li><li>以f ,fe结尾的词，要变f,fe为ves  leaf–leaves  wife–wives  这样的词还有half,self,knife,wolf,shelf,life,thief</li></ol><p>🔥第三点有点难记，来点&quot;咒语&quot;：</p><blockquote><p>半片  树叶  自己黄</p><p>half  leaf    self</p><p>妻子  拿到  去杀狼</p><p>wife knife  wolf</p><p>小偷  架后 逃命亡</p><p>thief  shelf  life</p></blockquote><p>👀注意：有三个特殊的roof – roofs (屋顶)，belif – belifs （信仰）， proof – proofs （证据） ==》 复数直接+s</p><p>前面说完了一般变化和特殊变化，接下来希望学习 =》任性的变化：不按常理出牌的变化</p><p>🤪 <strong>任性一号</strong>：元音字母翻脸</p><p>man --》 men     woman --》women   foot–》 feet 这里注意foot不仅有脚的意思还有英尺的意思。</p><p>😎 <strong>任性二号</strong>：我不变，我不变，我就是不变</p><p>也就是单数和复数都是一样的</p><p>比如fish,单复数都一样，但是如果我们写fishes表示啥呢？这个时候表示的是一群不同的🐟</p><p>sheep，Chinese,deer,Japanese等都是单复数同形的</p><p>🐭 <strong>任性三号</strong>：一只老鼠 mouse vs 好多只老鼠 mice</p><p>🍅 <strong>任性四号</strong>：黑人英雄站在火山口吃土豆西红柿和芒果</p><p>一般情况下以o结尾的名词变复数都是直接加s</p><p>zoo --》 zoos  radio–&gt; radios</p><p>但是咱们的&quot;黑人英雄站在火山口吃土豆西红柿和芒果&quot; 的复数是加es</p><p><img src="https://photo.459122.xyz/i/1347623b8f71c8260662d8357e89f007.png" alt="image-20250529200237295"></p><p>🤫温馨提示：Negro对黑人有侮辱的意思，不要在外说哦！</p><h2 id="🤩-闯关小练习来啦！-🥳">🤩 闯关小练习来啦！ 🥳</h2><p>准备好了吗？让我们来检验一下今天的学习成果吧！💪</p><h3 id="🧩-模块一：名词小侦探-🕵️‍♀️">🧩 模块一：名词小侦探 🕵️‍♀️</h3><p><strong>任务1：火眼金睛辨专名</strong> 👀</p><p>下面的词语中，哪些是专有名词，哪些是普通名词呢？把它们找出来吧！</p><ol><li>Beijing</li><li>dog</li><li>Mrs. Green</li><li>book</li><li>the Yellow River</li><li>happiness</li><li>apple</li><li>Christmas</li></ol><p><strong>任务2：可数不可数，我来分清楚！</strong> ⚖️</p><p>请判断下列普通名词是可数名词 © 还是不可数名词 (U)？</p><ol><li>water ( )</li><li>student ( )</li><li>advice ( )</li><li>car ( )</li><li>rice ( )</li><li>friendship ( )</li><li>idea ( )</li><li>money ( )</li><li>news ( )</li><li>orange ( )</li></ol><h3 id="🪄-模块二：复数魔法棒-🌟">🪄 模块二：复数魔法棒 🌟</h3><p><strong>任务1：小小变形师</strong> ✍️</p><p>请写出下列名词的复数形式：</p><ol><li>box __________</li><li>photo __________</li><li>lady __________</li><li>toy __________</li><li>leaf __________</li><li>roof __________</li><li>man __________</li><li>sheep __________</li><li>Chinese __________</li><li>potato __________</li><li>child __________ (这个是小彩蛋哦，课上没细讲，看看你能不能猜对！)</li><li>foot __________</li><li>watch __________</li><li>half __________</li><li>hero __________</li></ol><p><strong>任务2：句子升级</strong> 🚀</p><p>用所给名词的正确形式（单数或复数）填空，让句子更完整！</p><ol><li>There are many _________ (bus) on the road.</li><li>My mother bought two _________ (kilo) of _________ (apple).</li><li>Look! There are some _________ (deer) in the forest.</li><li>He has three _________ (watch).</li><li>These _________ (woman) are all teachers.</li><li>Can you see the _________ (leaf) on the tree?</li><li>We have many _________ (shelf) in our classroom.</li><li>My _________ (foot) are tired after walking.</li></ol><hr><h2 id="🗝️-答案和超级解析！-🎉">🗝️ 答案和超级解析！ 🎉</h2><p>小侦探，魔法师，做得怎么样呀？来看看标准答案吧！🤩</p><h3 id="🧩-模块一：名词小侦探-🕵️‍♀️-2">🧩 模块一：名词小侦探 🕵️‍♀️</h3><p><strong>任务1：火眼金睛辨专名</strong> 👀</p><ul><li><strong>专有名词 (需要首字母大写哦！)</strong> ✨:<ol><li>Beijing (地名)</li><li>Mrs. Green (人名)</li><li>the Yellow River (地名，记得 “the” 后面的实词首字母要大写！)</li><li>Christmas (节日名称)</li></ol></li><li><strong>普通名词</strong> 🧸:<ol><li>dog</li><li>book</li><li>happiness (抽象名词)</li><li>apple</li></ol></li></ul><p><strong>任务2：可数不可数，我来分清楚！</strong> ⚖️</p><ol><li>water (U) - 💧水是物质名词，没有固定的形状，通常不可数哦！</li><li>student © - 🧑‍🎓学生是一个一个的，可以数清楚！</li><li>advice (U) - 💡建议是抽象的，通常不可数。可以说 a piece of advice (一条建议)。</li><li>car © - 🚗汽车有具体的形状，可以一辆一辆地数！</li><li>rice (U) - 🍚米饭由很多小颗粒组成，是物质名词，通常不可数。</li><li>friendship (U) - ❤️友谊是抽象的情感，不可数。</li><li>idea © - 🤔想法、主意是可以一个一个列出来的，可数！</li><li>money (U) - 💰钱在英语中是不可数名词哦！虽然我们可以数多少元、多少角，但 “money” 这个词本身是不可数的。可以说 some money。</li><li>news (U) - 📰消息、新闻，虽然看起来像复数，但它其实是不可数名词哦！一条新闻是 a piece of news。</li><li>orange © - 🍊橘子是可以一个一个数的！</li></ol><h3 id="🪄-模块二：复数魔法棒-🌟-2">🪄 模块二：复数魔法棒 🌟</h3><p><strong>任务1：小小变形师</strong> ✍️</p><ol><li>box → <strong>boxes</strong> (嘿！以-x结尾，要加-es！🚌)</li><li>photo → <strong>photos</strong> (叮！这是以o结尾但直接加-s的常见词哦！📸)</li><li>lady → <strong>ladies</strong> (规则：辅音字母+y结尾，变y为i再加-es！💃)</li><li>toy → <strong>toys</strong> (规则：元音字母+y结尾，直接加-s！🧸)</li><li>leaf → <strong>leaves</strong> (咒语时刻：“半片树叶自己黄”，f结尾变ves！🍁)</li><li>roof → <strong>roofs</strong> (特别注意！roof是f结尾直接+s的三个特殊词之一！🏠)</li><li>man → <strong>men</strong> (任性一号！元音字母翻脸啦！👨‍🦰 → 👨‍👨‍👦‍👦)</li><li>sheep → <strong>sheep</strong> (任性二号！我就是不变！🐑🐑)</li><li>Chinese → <strong>Chinese</strong> (任性二号！我也是不变！中国人，单复数都一样！🇨🇳)</li><li>potato → <strong>potatoes</strong> (任性四号！英雄爱吃土豆，o结尾加-es！🥔)</li><li>child → <strong>children</strong> (小彩蛋揭晓！这是一个不规则变化，要记住哦！👶 → 👧👦)</li><li>foot → <strong>feet</strong> (任性一号又来啦！元音变化！🦶 → 👣)</li><li>watch → <strong>watches</strong> (以-ch结尾，加-es！🕰️)</li><li>half → <strong>halves</strong> (咒语：“半片树叶自己黄”，f结尾变ves！🌓)</li><li>hero → <strong>heroes</strong> (任性四号！英雄，o结尾加-es！🦸‍♂️)</li></ol><p><strong>任务2：句子升级</strong> 🚀</p><ol><li>There are many <strong>buses</strong> on the road. (路上有很多公交车。bus以s结尾，复数加es。)</li><li>My mother bought two <strong>kilos</strong> of <strong>apples</strong>. (我妈妈买了两公斤苹果。kilo是以o结尾直接加s的；apple是规则复数+s。)</li><li>Look! There are some <strong>deer</strong> in the forest. (看！森林里有一些鹿。deer是单复数同形的哦！)</li><li>He has three <strong>watches</strong>. (他有三块手表。watch以ch结尾，复数加es。)</li><li>These <strong>women</strong> are all teachers. (这些女士都是老师。woman是任性一号，变元音！)</li><li>Can you see the <strong>leaves</strong> on the tree? (你能看见树上的叶子吗？leaf以f结尾，变f为ves。)</li><li>We have many <strong>shelves</strong> in our classroom. (我们的教室里有很多架子。shelf以f结尾，变f为ves，来自咒语“小偷架后逃命亡”。)</li><li>My <strong>feet</strong> are tired after walking. (走路后我的脚累了。foot是任性一号，变元音！)</li></ol><p>棒棒哒！🎉🎉 你已经完成了所有的练习！希望这些小练习能让你对名词的知识掌握得更牢固！继续加油哦！💖</p>]]></content>
    
    
    <summary type="html">名词</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>机器学习期末设计</title>
    <link href="https://yjyrichard.github.io/posts/81c54482.html"/>
    <id>https://yjyrichard.github.io/posts/81c54482.html</id>
    <published>2025-05-28T05:16:50.378Z</published>
    <updated>2025-05-29T12:18:04.537Z</updated>
    
    <content type="html"><![CDATA[<h1>预测锻炼期间燃烧卡路里的数据分析与建模</h1><h2 id="一、确定业务目标">一、确定业务目标</h2><p>本项目旨在通过分析锻炼相关数据，建立模型预测锻炼期间燃烧的卡路里量。这项研究具有重要的现实意义：</p><ol><li><strong>个性化健康管理</strong>：准确预测卡路里消耗可以帮助个人调整锻炼计划，达到健康减重或保持体重的目标。</li><li><strong>健身效果评估</strong>：为健身爱好者提供量化的锻炼效果评估，优化锻炼方案。</li><li><strong>智能健康设备开发</strong>：为智能手环、手表等健康监测设备提供更准确的卡路里消耗算法。</li><li><strong>健康应用支持</strong>：为健康和健身应用提供更精准的能量消耗预测功能。</li></ol><p>本项目的具体目标是：</p><ul><li>分析各项身体指标和运动特征与卡路里消耗的关系</li><li>构建高精度的卡路里消耗预测模型</li><li>评估不同机器学习算法的预测效果</li><li>提供可用于实际应用的预测模型</li></ul><h2 id="二、获取数据">二、获取数据</h2><p>数据来源于Kaggle平台的&quot;Calories Burnt Prediction&quot;数据集。该数据集包含以下文件：</p><ol><li><strong>train.csv</strong>：训练数据集，包含锻炼相关特征和卡路里消耗量</li><li><strong>test.csv</strong>：测试数据集，包含锻炼相关特征，需要预测卡路里消耗量</li><li><strong>sample_submission.csv</strong>：提交格式样例</li></ol><p>数据集包含以下特征：</p><ul><li><strong>id</strong>：记录ID</li><li><strong>Sex</strong>：性别（male/female）</li><li><strong>Age</strong>：年龄</li><li><strong>Height</strong>：身高（厘米）</li><li><strong>Weight</strong>：体重（千克）</li><li><strong>Duration</strong>：锻炼持续时间（分钟）</li><li><strong>Heart_Rate</strong>：心率（次/分钟）</li><li><strong>Body_Temp</strong>：体温（摄氏度）</li><li><strong>Calories</strong>：燃烧的卡路里（仅在训练集中提供）</li></ul><p>这个是一个当前正在举办的比赛，地址：<a href="https://www.kaggle.com/competitions/playground-series-s5e5/overview">Predict Calorie Expenditure | Kaggle</a></p><h2 id="三、数据预处理和探索性分析">三、数据预处理和探索性分析</h2><h3 id="3-1-数据预处理">3.1 数据预处理</h3><p>数据预处理阶段包括以下步骤：</p><ol><li><p><strong>数据加载与检查</strong>：</p><ul><li>加载训练和测试数据集</li><li>检查数据集大小和基本信息</li><li>查看数据类型和统计摘要</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 1. 数据获取</span></span><br><span class="line">train_data, test_data = load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 数据预处理</span></span><br><span class="line">train_data = preprocess_data(train_data)</span><br><span class="line">test_data = preprocess_data(test_data, is_train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载训练集和测试集数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练数据, 测试数据)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在加载数据...&quot;</span>)</span><br><span class="line">        train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">        test_data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练集大小：<span class="subst">&#123;train_data.shape&#125;</span>, 测试集大小：<span class="subst">&#123;test_data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528101850943.png" alt="image-20250528101850943"></p><p>读取这个数据的前五行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前五行</span></span><br><span class="line"><span class="built_in">print</span>(train_data.head())</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528101622498.png" alt="image-20250528101622498"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在进行数据预处理...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据副本，避免修改原始数据</span></span><br><span class="line">df = data.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数据基本信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n数据基本信息:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数据统计摘要</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n数据统计摘要:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528102208243.png" alt="image-20250528102208243"></p></li><li><p><strong>缺失值处理</strong>：</p><ul><li>检查各特征的缺失值</li><li>使用适当的方法填充缺失值（若有）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n检查缺失值:&quot;</span>)</span><br><span class="line">missing_values = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(missing_values[missing_values &gt; <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值（如果有）</span></span><br><span class="line"><span class="keyword">if</span> df.isnull().<span class="built_in">sum</span>().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 对数值型特征使用均值填充，分类特征使用众数填充</span></span><br><span class="line">    num_features = df.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">    cat_features = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> num_features:</span><br><span class="line">        <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            df[col].fillna(df[col].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> cat_features:</span><br><span class="line">        <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            df[col].fillna(df[col].mode()[<span class="number">0</span>], inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>特征编码</strong>：</p><ul><li>将分类特征（如性别）编码为数值形式</li><li>男性编码为1，女性编码为0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 性别编码：将性别特征转换为数值</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">    df[<span class="string">&#x27;Sex&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除ID列，因为它不是预测的特征</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">    df = df.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示处理后的数据信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n预处理后的数据信息:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528103836338.png" alt="image-20250528103836338"></p></li><li><p><strong>特征工程</strong>：</p><ul><li>使用StandardScaler对数值特征进行标准化处理（模型训练和评估当中）</li><li>使模型训练更稳定，提高收敛速度</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征工程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建新特征以提高模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 预处理后的数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 包含新特征的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行特征工程...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程前数据形状: <span class="subst">&#123;data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录原始特征列表</span></span><br><span class="line">        original_features = df.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 创建BMI特征（体重指数）</span></span><br><span class="line">        df[<span class="string">&#x27;BMI&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / ((df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 创建心率与年龄的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] / df[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 创建锻炼强度指标</span></span><br><span class="line">        df[<span class="string">&#x27;Exercise_Intensity&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] * df[<span class="string">&#x27;Duration&#x27;</span>] / <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 创建体温与心率的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>] = df[<span class="string">&#x27;Body_Temp&#x27;</span>] / df[<span class="string">&#x27;Heart_Rate&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 体重与身高的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Weight_Height_Ratio&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / (df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取新创建的特征列表</span></span><br><span class="line">        new_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> df.columns <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> original_features]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程完成，创建了 <span class="subst">&#123;<span class="built_in">len</span>(new_features)&#125;</span> 个新特征:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> new_features:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - <span class="subst">&#123;feature&#125;</span>: 均值=<span class="subst">&#123;df[feature].mean():<span class="number">.4</span>f&#125;</span>, 标准差=<span class="subst">&#123;df[feature].std():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程后数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528104847152.png" alt="image-20250528104847152"></p><h3 id="3-2-探索性数据分析">3.2 探索性数据分析</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 探索性数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploratory_data_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行探索性数据分析</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要分析的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行探索性数据分析...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 对于大数据集，可以使用采样减少计算量</span></span><br><span class="line">        sample_size = <span class="built_in">min</span>(<span class="number">10000</span>, <span class="built_in">len</span>(data))</span><br><span class="line">        data_sample = data.sample(n=sample_size, random_state=<span class="number">42</span>) <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用<span class="subst">&#123;<span class="string">&#x27;采样数据&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> <span class="string">&#x27;完整数据&#x27;</span>&#125;</span>进行可视化分析，样本大小: <span class="subst">&#123;<span class="built_in">len</span>(data_sample)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分阶段执行可视化</span></span><br><span class="line">        plot_basic_distributions(data_sample)</span><br><span class="line">        plot_correlations(data_sample)</span><br><span class="line">        plot_feature_relationships(data_sample)</span><br><span class="line">        plot_categorical_analysis(data_sample)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;探索性数据分析完成，图表已保存到 &#x27;plots&#x27; 文件夹&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;探索性数据分析过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>探索性数据分析阶段包括以下内容：</p><ol><li><p><strong>目标变量分析</strong>：</p><ul><li>卡路里消耗的分布情况</li><li>异常值检测</li></ul></li><li><p><strong>特征分析</strong>：</p><ul><li>各特征的分布情况</li><li>箱线图检查异常值</li></ul></li><li><p><strong>相关性分析</strong>：</p><ul><li>特征间的相关性热力图</li><li>各特征与卡路里消耗的相关性</li></ul></li><li><p><strong>特征与目标变量的关系</strong>：</p><ul><li>各特征与卡路里消耗的散点图</li><li>性别对卡路里消耗的影响</li><li>年龄与卡路里消耗的关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_basic_distributions</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制基本分布图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成基本分布图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 目标变量分布</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.histplot(data[<span class="string">&#x27;Calories&#x27;</span>], kde=<span class="literal">True</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;卡路里&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;频率&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/calories_distribution.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 特征分布图（在一个图中展示所有数值特征）</span></span><br><span class="line">        numerical_features = data.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">        numerical_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> numerical_features <span class="keyword">if</span> col != <span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        fig, axes = plt.subplots(nrows=(<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>), </span><br><span class="line">                                ncols=<span class="number">3</span>, figsize=(<span class="number">15</span>, <span class="number">3</span>*((<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>))))</span><br><span class="line">        axes = axes.flatten()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, feature <span class="keyword">in</span> <span class="built_in">enumerate</span>(numerical_features):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(axes):</span><br><span class="line">                sns.histplot(data[feature], kde=<span class="literal">True</span>, ax=axes[i])</span><br><span class="line">                axes[i].set_title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 分布&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐藏未使用的子图</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(axes)):</span><br><span class="line">            axes[j].set_visible(<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_distributions.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;基本分布图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成基本分布图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/calories_distribution.png" alt=""></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/feature_distributions.png" alt=""></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_correlations</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制相关性分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成相关性分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 相关性热力图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">10</span>))</span><br><span class="line">        correlation_matrix = data.corr()</span><br><span class="line">        sns.heatmap(correlation_matrix, annot=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, fmt=<span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征相关性热力图&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/correlation_heatmap.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征与目标变量的相关性条形图</span></span><br><span class="line">        correlations = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].drop(<span class="string">&#x27;Calories&#x27;</span>).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">        sns.barplot(x=correlations.values, y=correlations.index)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征与卡路里消耗的相关性&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;相关系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_target_correlation.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;相关性分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成相关性分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528105807741.png" alt="image-20250528105807741"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528110104710.png" alt="image-20250528110104710"></p><p>发现新特征没啥用，后续训练模型的时候也就没使用这些新的特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_feature_relationships</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制特征关系图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成特征关系图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 只为相关性最高的前5个特征生成散点图</span></span><br><span class="line">        correlation_with_target = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].<span class="built_in">abs</span>().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        top_features = correlation_with_target.index[<span class="number">1</span>:<span class="number">6</span>]  <span class="comment"># 排除Calories自身</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> tqdm(top_features, desc=<span class="string">&quot;生成特征散点图&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">                sns.scatterplot(x=feature, y=<span class="string">&#x27;Calories&#x27;</span>, data=data, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">                plt.title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 与卡路里消耗的关系&#x27;</span>)</span><br><span class="line">                plt.savefig(<span class="string">f&#x27;plots/<span class="subst">&#123;feature&#125;</span>_vs_calories.png&#x27;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  生成 <span class="subst">&#123;feature&#125;</span> 散点图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 继续处理下一个特征</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成一个包含所有重要特征的配对图</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在生成特征配对图（这可能需要一些时间）...&quot;</span>)</span><br><span class="line">            sns.pairplot(data[<span class="built_in">list</span>(top_features) + [<span class="string">&#x27;Calories&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>]], </span><br><span class="line">                        hue=<span class="string">&#x27;Sex&#x27;</span>, </span><br><span class="line">                        diag_kind=<span class="string">&#x27;kde&#x27;</span>,</span><br><span class="line">                        plot_kws=&#123;<span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">                        height=<span class="number">2.5</span>)</span><br><span class="line">            plt.savefig(<span class="string">&#x27;plots/features_pairplot.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  生成特征配对图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;特征关系图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成特征关系图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528110659212.png" alt="image-20250528110659212"></p><p>它直观验证了 <strong>“时长是卡路里消耗的核心驱动”</strong>，同时暴露了 <strong>“性别影响弱”</strong> 和 <strong>“异常点风险”</strong>。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528110952874.png" alt="image-20250528110952874"></p><p><strong>心率是卡路里消耗的核心驱动</strong></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111148683.png" alt="image-20250528111148683"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111234824.png" alt="image-20250528111234824"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111310170.png" alt="image-20250528111310170"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111347335.png" alt="image-20250528111347335"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_categorical_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制分类特征分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成分类特征分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Sex&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同性别的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/sex_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建年龄分组</span></span><br><span class="line">        data_copy = data.copy()</span><br><span class="line">        data_copy[<span class="string">&#x27;Age_Group&#x27;</span>] = pd.cut(data_copy[<span class="string">&#x27;Age&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">100</span>], labels=[<span class="string">&#x27;&lt;30&#x27;</span>, <span class="string">&#x27;30-45&#x27;</span>, <span class="string">&#x27;45-60&#x27;</span>, <span class="string">&#x27;&gt;60&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 年龄组与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Age_Group&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data_copy, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同年龄组的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/age_group_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;分类特征分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成分类特征分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111535038.png" alt="image-20250528111535038"></p><p><strong>性别单独对卡路里消耗的区分度极弱</strong></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111609986.png" alt="image-20250528111613739"></p><p><strong>年龄对卡路里消耗的影响随性别变化，且高龄组存在特殊高消耗模式</strong></p><h2 id="四、建模和模型评价">四、建模和模型评价</h2><h3 id="4-1-建模策略">4.1 建模策略</h3><p>我们选择了以下四种回归算法进行建模：</p><ol><li><p><strong>决策树回归</strong>：</p><ul><li>优点：易于理解和解释，可捕捉非线性关系</li><li>缺点：可能过拟合，预测精度有限</li></ul></li><li><p><strong>随机森林回归</strong>：</p><ul><li>优点：集成多个决策树，降低方差，提高稳定性</li><li>缺点：计算开销大，模型解释性较差</li></ul></li><li><p><strong>XGBoost回归</strong>：</p><ul><li>优点：梯度提升框架，处理复杂非线性关系效果好</li><li>缺点：调参复杂，计算资源需求高</li></ul></li><li><p><strong>线性回归</strong>：</p><ul><li>优点：简单易懂，计算效率高</li><li>缺点：无法捕捉复杂的非线性关系</li></ul></li></ol><h3 id="4-2-模型训练与评估">4.2 模型训练与评估</h3><p>对于每个模型，我们采用以下步骤：</p><ol><li>将数据分割为训练集（80%）和验证集（20%）</li><li>使用训练集训练模型</li><li>在验证集上评估模型性能</li><li>比较不同模型的性能指标</li></ol><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87.png" alt="导出图片"></p><p>评估指标包括：</p><ul><li><strong>均方误差（MSE）</strong></li><li><strong>均方根误差（RMSE）</strong></li><li><strong>平均绝对误差（MAE）</strong></li><li><strong>决定系数（R²）</strong></li></ul><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515154202938.png" alt="image-20250515154202938"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515154219339.png" alt="image-20250515154219339"></p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">卡路里消耗预测 - 数据分析课程设计</span></span><br><span class="line"><span class="string">本代码用于预测锻炼期间燃烧了多少卡路里</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入时间模块</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  <span class="comment"># 导入tqdm用于进度显示</span></span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子，确保结果可重现</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">use_sampling=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始卡路里消耗预测数据分析...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1. 数据获取</span></span><br><span class="line">    train_data, test_data = load_data()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 数据预处理</span></span><br><span class="line">    train_data = preprocess_data(train_data)</span><br><span class="line">    test_data = preprocess_data(test_data, is_train=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 特征工程（新增步骤）</span></span><br><span class="line">    train_data = feature_engineering(train_data)</span><br><span class="line">    test_data = feature_engineering(test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.1 绘制工程特征与目标变量的关系（仅使用训练集）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在可视化工程特征与目标变量的关系...&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 获取工程特征列表</span></span><br><span class="line">    engineered_features = [<span class="string">&#x27;BMI&#x27;</span>, <span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>, <span class="string">&#x27;Exercise_Intensity&#x27;</span>, </span><br><span class="line">                          <span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>, <span class="string">&#x27;Weight_Height_Ratio&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算工程特征与目标变量的相关性</span></span><br><span class="line">    feature_correlations = train_data[engineered_features + [<span class="string">&#x27;Calories&#x27;</span>]].corr()[<span class="string">&#x27;Calories&#x27;</span>].drop(<span class="string">&#x27;Calories&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制相关性条形图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">    sns.barplot(x=feature_correlations.values, y=feature_correlations.index)</span><br><span class="line">    plt.title(<span class="string">&#x27;工程特征与卡路里消耗的相关性&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;相关系数&#x27;</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.savefig(<span class="string">&#x27;plots/engineered_features_correlation.png&#x27;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 探索性数据分析</span></span><br><span class="line">    exploratory_data_analysis(train_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 特征与目标变量分离</span></span><br><span class="line">    X_train, y_train = train_data.drop(<span class="string">&#x27;Calories&#x27;</span>, axis=<span class="number">1</span>), train_data[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6. 建模和模型评价</span></span><br><span class="line">    sample_limit = <span class="number">100000</span> <span class="keyword">if</span> use_sampling <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 如果使用采样，设置为10万条记录</span></span><br><span class="line">    best_model, best_score = model_training_and_evaluation(X_train, y_train, sample_limit)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 7. 使用最佳模型进行预测并生成提交文件</span></span><br><span class="line">    generate_submission(best_model, test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;卡路里消耗预测数据分析完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载训练集和测试集数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练数据, 测试数据)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在加载数据...&quot;</span>)</span><br><span class="line">        train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">        test_data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练集大小：<span class="subst">&#123;train_data.shape&#125;</span>, 测试集大小：<span class="subst">&#123;test_data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_data</span>(<span class="params">data, is_train=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对数据进行预处理</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要处理的数据</span></span><br><span class="line"><span class="string">        is_train (bool): 是否为训练数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 预处理后的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行数据预处理...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本，避免修改原始数据</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据基本信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据基本信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据统计摘要</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据统计摘要:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.describe())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查缺失值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n检查缺失值:&quot;</span>)</span><br><span class="line">        missing_values = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="built_in">print</span>(missing_values[missing_values &gt; <span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理缺失值（如果有）</span></span><br><span class="line">        <span class="keyword">if</span> df.isnull().<span class="built_in">sum</span>().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 对数值型特征使用均值填充，分类特征使用众数填充</span></span><br><span class="line">            num_features = df.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">            cat_features = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> num_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> cat_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mode()[<span class="number">0</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别编码：将性别特征转换为数值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df[<span class="string">&#x27;Sex&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除ID列，因为它不是预测的特征</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df = df.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示处理后的数据信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预处理后的数据信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据预处理过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探索性数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploratory_data_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行探索性数据分析</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要分析的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行探索性数据分析...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 对于大数据集，可以使用采样减少计算量（可选）</span></span><br><span class="line">        sample_size = <span class="built_in">min</span>(<span class="number">10000</span>, <span class="built_in">len</span>(data))</span><br><span class="line">        data_sample = data.sample(n=sample_size, random_state=<span class="number">42</span>) <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用<span class="subst">&#123;<span class="string">&#x27;采样数据&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> <span class="string">&#x27;完整数据&#x27;</span>&#125;</span>进行可视化分析，样本大小: <span class="subst">&#123;<span class="built_in">len</span>(data_sample)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分阶段执行可视化</span></span><br><span class="line">        plot_basic_distributions(data_sample)</span><br><span class="line">        plot_correlations(data_sample)</span><br><span class="line">        plot_feature_relationships(data_sample)</span><br><span class="line">        plot_categorical_analysis(data_sample)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;探索性数据分析完成，图表已保存到 &#x27;plots&#x27; 文件夹&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;探索性数据分析过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_basic_distributions</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制基本分布图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成基本分布图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 目标变量分布</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.histplot(data[<span class="string">&#x27;Calories&#x27;</span>], kde=<span class="literal">True</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;卡路里&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;频率&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/calories_distribution.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 特征分布图（在一个图中展示所有数值特征）</span></span><br><span class="line">        numerical_features = data.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">        numerical_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> numerical_features <span class="keyword">if</span> col != <span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        fig, axes = plt.subplots(nrows=(<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>), </span><br><span class="line">                                ncols=<span class="number">3</span>, figsize=(<span class="number">15</span>, <span class="number">3</span>*((<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>))))</span><br><span class="line">        axes = axes.flatten()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, feature <span class="keyword">in</span> <span class="built_in">enumerate</span>(numerical_features):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(axes):</span><br><span class="line">                sns.histplot(data[feature], kde=<span class="literal">True</span>, ax=axes[i])</span><br><span class="line">                axes[i].set_title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 分布&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐藏未使用的子图</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(axes)):</span><br><span class="line">            axes[j].set_visible(<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_distributions.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;基本分布图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成基本分布图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_correlations</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制相关性分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成相关性分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 相关性热力图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">10</span>))</span><br><span class="line">        correlation_matrix = data.corr()</span><br><span class="line">        sns.heatmap(correlation_matrix, annot=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, fmt=<span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征相关性热力图&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/correlation_heatmap.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征与目标变量的相关性条形图</span></span><br><span class="line">        correlations = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].drop(<span class="string">&#x27;Calories&#x27;</span>).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">        sns.barplot(x=correlations.values, y=correlations.index)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征与卡路里消耗的相关性&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;相关系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_target_correlation.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;相关性分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成相关性分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_feature_relationships</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制特征关系图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成特征关系图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 只为相关性最高的前5个特征生成散点图</span></span><br><span class="line">        correlation_with_target = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].<span class="built_in">abs</span>().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        top_features = correlation_with_target.index[<span class="number">1</span>:<span class="number">6</span>]  <span class="comment"># 排除Calories自身</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> tqdm(top_features, desc=<span class="string">&quot;生成特征散点图&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">                sns.scatterplot(x=feature, y=<span class="string">&#x27;Calories&#x27;</span>, data=data, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">                plt.title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 与卡路里消耗的关系&#x27;</span>)</span><br><span class="line">                plt.savefig(<span class="string">f&#x27;plots/<span class="subst">&#123;feature&#125;</span>_vs_calories.png&#x27;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  生成 <span class="subst">&#123;feature&#125;</span> 散点图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 继续处理下一个特征</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成一个包含所有重要特征的配对图</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在生成特征配对图（这可能需要一些时间）...&quot;</span>)</span><br><span class="line">            sns.pairplot(data[<span class="built_in">list</span>(top_features) + [<span class="string">&#x27;Calories&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>]], </span><br><span class="line">                        hue=<span class="string">&#x27;Sex&#x27;</span>, </span><br><span class="line">                        diag_kind=<span class="string">&#x27;kde&#x27;</span>,</span><br><span class="line">                        plot_kws=&#123;<span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">                        height=<span class="number">2.5</span>)</span><br><span class="line">            plt.savefig(<span class="string">&#x27;plots/features_pairplot.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  生成特征配对图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;特征关系图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成特征关系图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_categorical_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制分类特征分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成分类特征分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Sex&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同性别的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/sex_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建年龄分组</span></span><br><span class="line">        data_copy = data.copy()</span><br><span class="line">        data_copy[<span class="string">&#x27;Age_Group&#x27;</span>] = pd.cut(data_copy[<span class="string">&#x27;Age&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">100</span>], labels=[<span class="string">&#x27;&lt;30&#x27;</span>, <span class="string">&#x27;30-45&#x27;</span>, <span class="string">&#x27;45-60&#x27;</span>, <span class="string">&#x27;&gt;60&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 年龄组与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Age_Group&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data_copy, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同年龄组的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/age_group_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;分类特征分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成分类特征分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练和评估</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_training_and_evaluation</span>(<span class="params">X, y, sample_limit=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    训练多个模型并评估性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (DataFrame): 特征数据，包括原始特征和通过特征工程创建的新特征</span></span><br><span class="line"><span class="string">        y (Series): 目标变量（卡路里消耗量）</span></span><br><span class="line"><span class="string">        sample_limit (int, optional): 可选的数据采样限制，如果指定，将随机采样数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳得分)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行模型训练和评估...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 可选的数据采样</span></span><br><span class="line">        <span class="keyword">if</span> sample_limit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(X) &gt; sample_limit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;数据集较大，进行随机采样（<span class="subst">&#123;sample_limit&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(X)&#125;</span>条记录）...&quot;</span>)</span><br><span class="line">            sample_idx = np.random.choice(<span class="built_in">len</span>(X), sample_limit, replace=<span class="literal">False</span>)</span><br><span class="line">            X = X.iloc[sample_idx].copy()</span><br><span class="line">            y = y.iloc[sample_idx].copy()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;采样后数据形状: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;使用完整数据集: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割数据为训练集和验证集</span></span><br><span class="line">        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">        X_val_scaled = scaler.transform(X_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存特征名称，用于后续的特征重要性分析</span></span><br><span class="line">        feature_names = X.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义要训练的模型</span></span><br><span class="line">        models = &#123;</span><br><span class="line">            <span class="string">&quot;决策树回归&quot;</span>: DecisionTreeRegressor(random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&quot;随机森林回归&quot;</span>: RandomForestRegressor(</span><br><span class="line">                random_state=<span class="number">42</span>, </span><br><span class="line">                n_estimators=<span class="number">50</span>,     <span class="comment"># 减少树的数量（从100减少到50）</span></span><br><span class="line">                max_depth=<span class="number">20</span>,        <span class="comment"># 限制树的最大深度</span></span><br><span class="line">                min_samples_split=<span class="number">10</span>,<span class="comment"># 增加分裂所需的最小样本数</span></span><br><span class="line">                n_jobs=-<span class="number">1</span>,           <span class="comment"># 使用所有可用的CPU核心</span></span><br><span class="line">                verbose=<span class="number">1</span>            <span class="comment"># 显示训练进度</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="string">&quot;XGBoost回归&quot;</span>: XGBRegressor(random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&quot;线性回归&quot;</span>: LinearRegression()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用于存储各模型评估结果</span></span><br><span class="line">        results = &#123;&#125;</span><br><span class="line">        best_model = <span class="literal">None</span></span><br><span class="line">        best_score = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)  <span class="comment"># 使用RMSE作为评估指标，值越小越好</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练和评估每个模型</span></span><br><span class="line">        <span class="keyword">for</span> name, model <span class="keyword">in</span> models.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n正在训练 <span class="subst">&#123;name&#125;</span> 模型...&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 训练模型</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            model.fit(X_train_scaled, y_train)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            training_time = end_time - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 在验证集上进行预测</span></span><br><span class="line">            y_pred = model.predict(X_val_scaled)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算评估指标</span></span><br><span class="line">            mse = mean_squared_error(y_val, y_pred)</span><br><span class="line">            rmse = np.sqrt(mse)</span><br><span class="line">            mae = mean_absolute_error(y_val, y_pred)</span><br><span class="line">            r2 = r2_score(y_val, y_pred)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 存储结果</span></span><br><span class="line">            results[name] = &#123;</span><br><span class="line">                <span class="string">&#x27;MSE&#x27;</span>: mse,</span><br><span class="line">                <span class="string">&#x27;RMSE&#x27;</span>: rmse,</span><br><span class="line">                <span class="string">&#x27;MAE&#x27;</span>: mae,</span><br><span class="line">                <span class="string">&#x27;R²&#x27;</span>: r2,</span><br><span class="line">                <span class="string">&#x27;model&#x27;</span>: model,</span><br><span class="line">                <span class="string">&#x27;training_time&#x27;</span>: training_time</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 输出评估结果</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> 评估结果:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  均方误差 (MSE): <span class="subst">&#123;mse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  平均绝对误差 (MAE): <span class="subst">&#123;mae:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  训练时间: <span class="subst">&#123;training_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新最佳模型</span></span><br><span class="line">            <span class="keyword">if</span> rmse &lt; best_score:</span><br><span class="line">                best_score = rmse</span><br><span class="line">                best_model = model</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比较模型性能并可视化</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较:&quot;</span>)</span><br><span class="line">        metrics = [<span class="string">&#x27;MSE&#x27;</span>, <span class="string">&#x27;RMSE&#x27;</span>, <span class="string">&#x27;MAE&#x27;</span>, <span class="string">&#x27;R²&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> metric <span class="keyword">in</span> metrics:</span><br><span class="line">            plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">            model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">            <span class="keyword">if</span> metric == <span class="string">&#x27;R²&#x27;</span>:</span><br><span class="line">                <span class="comment"># R²越高越好</span></span><br><span class="line">                metric_values = [results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">                colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> val == <span class="built_in">max</span>([results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> metric_values]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 其他指标越低越好</span></span><br><span class="line">                metric_values = [results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">                colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> val == <span class="built_in">min</span>([results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> metric_values]</span><br><span class="line">            </span><br><span class="line">            plt.bar(model_names, metric_values, color=colors)</span><br><span class="line">            plt.title(<span class="string">f&#x27;不同模型的<span class="subst">&#123;metric&#125;</span>比较&#x27;</span>)</span><br><span class="line">            plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">            plt.ylabel(metric)</span><br><span class="line">            plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">            plt.tight_layout()</span><br><span class="line">            plt.savefig(<span class="string">f&#x27;plots/model_comparison_<span class="subst">&#123;metric&#125;</span>.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 可视化模型训练时间</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        training_times = [results[name][<span class="string">&#x27;training_time&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> t == <span class="built_in">min</span>(training_times) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> t <span class="keyword">in</span> training_times]</span><br><span class="line">        </span><br><span class="line">        plt.bar(model_names, training_times, color=colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同模型的训练时间比较&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;训练时间 (秒)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/model_comparison_training_time.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 时间-性能权衡分析（RMSE/时间）</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        rmse_values = [results[name][<span class="string">&#x27;RMSE&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        efficiency = [rmse / time <span class="keyword">for</span> rmse, time <span class="keyword">in</span> <span class="built_in">zip</span>(rmse_values, training_times)]</span><br><span class="line">        colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> e == <span class="built_in">min</span>(efficiency) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> e <span class="keyword">in</span> efficiency]</span><br><span class="line">        </span><br><span class="line">        plt.bar(model_names, efficiency, color=colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;模型效率分析 (RMSE/训练时间)&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;效率指标 (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/model_comparison_efficiency.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析特征重要性（仅对支持特征重要性的模型）</span></span><br><span class="line">        best_model_name = [name <span class="keyword">for</span> name, res <span class="keyword">in</span> results.items() <span class="keyword">if</span> res[<span class="string">&#x27;model&#x27;</span>] == best_model][<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n最佳模型是: <span class="subst">&#123;best_model_name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最佳RMSE: <span class="subst">&#123;best_score:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析最佳模型的特征重要性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(best_model, <span class="string">&#x27;feature_importances_&#x27;</span>):</span><br><span class="line">            plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">            importances = best_model.feature_importances_</span><br><span class="line">            indices = np.argsort(importances)[::-<span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">            plt.title(<span class="string">f&#x27;<span class="subst">&#123;best_model_name&#125;</span>模型的特征重要性&#x27;</span>)</span><br><span class="line">            plt.bar(<span class="built_in">range</span>(X.shape[<span class="number">1</span>]), importances[indices], align=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">            plt.xticks(<span class="built_in">range</span>(X.shape[<span class="number">1</span>]), [feature_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices], rotation=<span class="number">90</span>)</span><br><span class="line">            plt.tight_layout()</span><br><span class="line">            plt.savefig(<span class="string">&#x27;plots/best_model_feature_importance.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n特征重要性排序:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i, idx <span class="keyword">in</span> <span class="built_in">enumerate</span>(indices):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>. <span class="subst">&#123;feature_names[idx]&#125;</span>: <span class="subst">&#123;importances[idx]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存最佳模型</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;models&#x27;</span>):</span><br><span class="line">                os.makedirs(<span class="string">&#x27;models&#x27;</span>)</span><br><span class="line">            joblib.dump(best_model, <span class="string">&#x27;models/best_model.pkl&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n最佳模型已保存到: models/best_model.pkl&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;保存模型时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_model, best_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;模型训练和评估过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成提交文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_submission</span>(<span class="params">model, test_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用训练好的模型生成提交文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model: 训练好的模型</span></span><br><span class="line"><span class="string">        test_data (DataFrame): 测试数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成提交文件...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存测试集的ID</span></span><br><span class="line">        test_ids = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_test_scaled = scaler.fit_transform(test_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        predictions = model.predict(X_test_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保预测值为非负数（卡路里不可能为负）</span></span><br><span class="line">        predictions = np.maximum(predictions, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建提交文件</span></span><br><span class="line">        submission = pd.DataFrame(&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: test_ids,</span><br><span class="line">            <span class="string">&#x27;Calories&#x27;</span>: predictions</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        submission.to_csv(<span class="string">&#x27;submission.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提交文件已生成: submission.csv，包含 <span class="subst">&#123;<span class="built_in">len</span>(submission)&#125;</span> 个预测结果&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示预测值的基本统计信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预测结果统计信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最小值: <span class="subst">&#123;predictions.<span class="built_in">min</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最大值: <span class="subst">&#123;predictions.<span class="built_in">max</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;平均值: <span class="subst">&#123;predictions.mean():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;中位数: <span class="subst">&#123;np.median(predictions):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;标准差: <span class="subst">&#123;predictions.std():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成提交文件过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征工程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建新特征以提高模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 预处理后的数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 包含新特征的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行特征工程...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程前数据形状: <span class="subst">&#123;data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录原始特征列表</span></span><br><span class="line">        original_features = df.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 创建BMI特征（体重指数）</span></span><br><span class="line">        df[<span class="string">&#x27;BMI&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / ((df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 创建心率与年龄的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] / df[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 创建锻炼强度指标</span></span><br><span class="line">        df[<span class="string">&#x27;Exercise_Intensity&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] * df[<span class="string">&#x27;Duration&#x27;</span>] / <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 创建体温与心率的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>] = df[<span class="string">&#x27;Body_Temp&#x27;</span>] / df[<span class="string">&#x27;Heart_Rate&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 体重与身高的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Weight_Height_Ratio&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / (df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取新创建的特征列表</span></span><br><span class="line">        new_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> df.columns <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> original_features]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程完成，创建了 <span class="subst">&#123;<span class="built_in">len</span>(new_features)&#125;</span> 个新特征:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> new_features:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - <span class="subst">&#123;feature&#125;</span>: 均值=<span class="subst">&#123;df[feature].mean():<span class="number">.4</span>f&#125;</span>, 标准差=<span class="subst">&#123;df[feature].std():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程后数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 是否使用数据采样来加速训练（开发阶段设为True，最终模型训练设为False）</span></span><br><span class="line">    USE_SAMPLING = <span class="literal">False</span></span><br><span class="line">    main(use_sampling=USE_SAMPLING) </span><br></pre></td></tr></table></figure><h2 id="五、模型优化">五、模型优化</h2><h3 id="5-1-超参数调优">5.1 超参数调优</h3><p>针对不同算法，我们使用网格搜索或随机搜索进行超参数调优：</p><ol><li><p><strong>决策树优化</strong>：</p><ul><li>参数：max_depth, min_samples_split, min_samples_leaf, max_features</li><li>使用GridSearchCV进行网格搜索</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_decision_tree</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化决策树回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化决策树回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格 - 适度减少参数空间但保留关键选项</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>],  <span class="comment"># 恢复None选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>]  <span class="comment"># 保留所有特征选择方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型</span></span><br><span class="line">        dt = DecisionTreeRegressor(random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对于决策树，恢复使用GridSearchCV以确保找到最优参数</span></span><br><span class="line">        <span class="comment"># 决策树训练速度相对较快，即使数据量大也可接受网格搜索</span></span><br><span class="line">        grid_search = GridSearchCV(</span><br><span class="line">            estimator=dt,</span><br><span class="line">            param_grid=param_grid,</span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        grid_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树网格搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = grid_search.best_params_</span><br><span class="line">        best_dt = grid_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_dt.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_dt.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;决策树 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/dt_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_dt, <span class="string">&#x27;models/decision_tree_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_dt, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化决策树模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>随机森林优化</strong>：</p><ul><li>参数：n_estimators, max_depth, min_samples_split, min_samples_leaf, max_features</li><li>使用RandomizedSearchCV进行随机搜索</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_random_forest</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化随机森林回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化随机森林回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于随机森林计算开销大，即使数据量大也使用随机搜索而非网格搜索</span></span><br><span class="line">        param_distributions = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>],  <span class="comment"># 恢复200作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],  <span class="comment"># 恢复None和30选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],  <span class="comment"># 恢复10作为选项</span></span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],  <span class="comment"># 恢复4作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>],  <span class="comment"># 恢复log2作为选项</span></span><br><span class="line">            <span class="string">&#x27;bootstrap&#x27;</span>: [<span class="literal">True</span>],  <span class="comment"># 使用bootstrap抽样</span></span><br><span class="line">            <span class="string">&#x27;max_samples&#x27;</span>: [<span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>]  <span class="comment"># 控制每棵树使用的样本比例</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU</span></span><br><span class="line">        rf = RandomForestRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索 - 增加n_iter以提高搜索质量</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=rf,</span><br><span class="line">            param_distributions=param_distributions,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 恢复原始的20次尝试以提高搜索质量</span></span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_rf = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_rf.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_rf.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;随机森林 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/rf_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_rf, <span class="string">&#x27;models/random_forest_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_rf, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化随机森林模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></li><li><p><strong>XGBoost优化</strong>：</p><ul><li>参数：n_estimators, max_depth, learning_rate, subsample, colsample_bytree, gamma</li><li>使用RandomizedSearchCV进行随机搜索</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_xgboost</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化XGBoost回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化XGBoost回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">            <span class="string">&#x27;learning_rate&#x27;</span>: [<span class="number">0.01</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.2</span>],</span><br><span class="line">            <span class="string">&#x27;subsample&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;colsample_bytree&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;gamma&#x27;</span>: [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU和更快的tree_method</span></span><br><span class="line">        xgb_model = xgb.XGBRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>, tree_method=<span class="string">&#x27;hist&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=xgb_model,</span><br><span class="line">            param_distributions=param_grid,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 尝试20种组合</span></span><br><span class="line">            cv=<span class="number">5</span>,</span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_xgb = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_xgb.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_xgb.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;XGBoost - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/xgb_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_xgb, <span class="string">&#x27;models/xgboost_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_xgb, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化XGBoost模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>线性回归</strong>：</p><ul><li>线性回归没有需要调优的超参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_linear_regression</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化线性回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练好的模型, None, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化线性回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 线性回归没有超参数需要调优，直接训练模型</span></span><br><span class="line">        lr = LinearRegression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        lr.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线性回归训练耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = lr.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制系数</span></span><br><span class="line">        coefficients = lr.coef_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=coefficients, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;线性回归 - 特征系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/lr_coefficients.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(lr, <span class="string">&#x27;models/linear_regression.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lr, <span class="literal">None</span>, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化线性回归模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-特征重要性分析">5.2 特征重要性分析</h3><p>通过分析各模型的特征重要性，我们发现：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515152921306.png" alt="image-20250515152921306"></p><h3 id="5-3-优化后的模型比较">5.3 优化后的模型比较</h3><p>我们对比了所有优化后的模型性能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compare_optimized_models</span>(<span class="params">results</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    比较优化后的模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        results (dict): 包含各模型结果的字典</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: 基于RMSLE的最佳模型名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;比较优化后的模型性能...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取模型名称和评估指标</span></span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        rmse_values = [results[name][<span class="string">&#x27;rmse&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        rmsle_values = [results[name][<span class="string">&#x27;rmsle&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSE的最佳模型</span></span><br><span class="line">        best_rmse_idx = np.argmin(rmse_values)</span><br><span class="line">        rmse_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSLE的最佳模型（竞赛评估指标）</span></span><br><span class="line">        best_rmsle_idx = np.argmin(rmsle_values)</span><br><span class="line">        rmsle_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmse_values, color=rmse_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSE)&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmse.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSLE比较图（竞赛评估指标）</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmsle_values, color=rmsle_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSLE) - 竞赛评估指标&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSLE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmsle.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出比较结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSE):&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmse_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSLE) - 竞赛评估指标:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmsle_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果RMSE和RMSLE选出的最佳模型不同，输出说明</span></span><br><span class="line">        <span class="keyword">if</span> best_rmse_idx != best_rmsle_idx:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n注意: 基于RMSE的最佳模型是 <span class="subst">&#123;model_names[best_rmse_idx]&#125;</span>，而基于RMSLE的最佳模型是 <span class="subst">&#123;model_names[best_rmsle_idx]&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;由于竞赛使用RMSLE作为评估指标，我们将选择基于RMSLE的最佳模型。&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回基于RMSLE的最佳模型名称</span></span><br><span class="line">        <span class="keyword">return</span> model_names[best_rmsle_idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;比较优化后的模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153858400.png" alt="image-20250515153858400"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153916182.png" alt="image-20250515153916182"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153934775.png" alt="image-20250515153934775"></p><p>优化的完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">卡路里消耗预测 - 模型优化</span></span><br><span class="line"><span class="string">本代码用于优化预测模型的超参数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子，确保结果可重现</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rmsle</span>(<span class="params">y_true, y_pred</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算Root Mean Squared Logarithmic Error (RMSLE)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        y_true: 真实值</span></span><br><span class="line"><span class="string">        y_pred: 预测值</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        float: RMSLE值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 确保输入值为正数（避免对负数取对数）</span></span><br><span class="line">    y_true = np.maximum(y_true, <span class="number">0</span>)</span><br><span class="line">    y_pred = np.maximum(y_pred, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算RMSLE</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.mean(np.power(np.log1p(y_pred) - np.log1p(y_true), <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_preprocessed_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载预处理后的训练数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (X_train, X_val, y_train, y_val) - 训练特征、验证特征、训练目标、验证目标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 加载训练数据</span></span><br><span class="line">        train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 数据预处理</span></span><br><span class="line">        <span class="comment"># 删除id列</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> train_data.columns:</span><br><span class="line">            train_data.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别编码</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> train_data.columns:</span><br><span class="line">            train_data[<span class="string">&#x27;Sex&#x27;</span>] = train_data[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分离特征和目标变量</span></span><br><span class="line">        X = train_data.drop(<span class="string">&#x27;Calories&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">        y = train_data[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割数据为训练集和验证集</span></span><br><span class="line">        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">        X_val_scaled = scaler.transform(X_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存scaler，用于后续预测</span></span><br><span class="line">        joblib.dump(scaler, <span class="string">&#x27;scaler.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> X_train_scaled, X_val_scaled, y_train, y_val</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载和预处理数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_decision_tree</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化决策树回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化决策树回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格 - 适度减少参数空间但保留关键选项</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>],  <span class="comment"># 恢复None选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>]  <span class="comment"># 保留所有特征选择方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型</span></span><br><span class="line">        dt = DecisionTreeRegressor(random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对于决策树，恢复使用GridSearchCV以确保找到最优参数</span></span><br><span class="line">        <span class="comment"># 决策树训练速度相对较快，即使数据量大也可接受网格搜索</span></span><br><span class="line">        grid_search = GridSearchCV(</span><br><span class="line">            estimator=dt,</span><br><span class="line">            param_grid=param_grid,</span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        grid_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树网格搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = grid_search.best_params_</span><br><span class="line">        best_dt = grid_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_dt.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_dt.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;决策树 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/dt_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_dt, <span class="string">&#x27;models/decision_tree_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_dt, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化决策树模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_random_forest</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化随机森林回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化随机森林回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于随机森林计算开销大，即使数据量大也使用随机搜索而非网格搜索</span></span><br><span class="line">        param_distributions = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>],  <span class="comment"># 恢复200作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],  <span class="comment"># 恢复None和30选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],  <span class="comment"># 恢复10作为选项</span></span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],  <span class="comment"># 恢复4作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>],  <span class="comment"># 恢复log2作为选项</span></span><br><span class="line">            <span class="string">&#x27;bootstrap&#x27;</span>: [<span class="literal">True</span>],  <span class="comment"># 使用bootstrap抽样</span></span><br><span class="line">            <span class="string">&#x27;max_samples&#x27;</span>: [<span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>]  <span class="comment"># 控制每棵树使用的样本比例</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU</span></span><br><span class="line">        rf = RandomForestRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索 - 增加n_iter以提高搜索质量</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=rf,</span><br><span class="line">            param_distributions=param_distributions,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 恢复原始的20次尝试以提高搜索质量</span></span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_rf = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_rf.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_rf.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;随机森林 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/rf_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_rf, <span class="string">&#x27;models/random_forest_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_rf, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化随机森林模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_xgboost</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化XGBoost回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化XGBoost回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">            <span class="string">&#x27;learning_rate&#x27;</span>: [<span class="number">0.01</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.2</span>],</span><br><span class="line">            <span class="string">&#x27;subsample&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;colsample_bytree&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;gamma&#x27;</span>: [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU和更快的tree_method</span></span><br><span class="line">        xgb_model = xgb.XGBRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>, tree_method=<span class="string">&#x27;hist&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=xgb_model,</span><br><span class="line">            param_distributions=param_grid,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 尝试20种组合</span></span><br><span class="line">            cv=<span class="number">5</span>,</span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_xgb = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_xgb.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_xgb.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;XGBoost - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/xgb_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_xgb, <span class="string">&#x27;models/xgboost_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_xgb, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化XGBoost模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_linear_regression</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化线性回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练好的模型, None, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化线性回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 线性回归没有超参数需要调优，直接训练模型</span></span><br><span class="line">        lr = LinearRegression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        lr.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线性回归训练耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = lr.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制系数</span></span><br><span class="line">        coefficients = lr.coef_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=coefficients, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;线性回归 - 特征系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/lr_coefficients.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(lr, <span class="string">&#x27;models/linear_regression.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lr, <span class="literal">None</span>, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化线性回归模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_optimized_models</span>(<span class="params">results</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    比较优化后的模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        results (dict): 包含各模型结果的字典</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: 基于RMSLE的最佳模型名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;比较优化后的模型性能...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取模型名称和评估指标</span></span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        rmse_values = [results[name][<span class="string">&#x27;rmse&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        rmsle_values = [results[name][<span class="string">&#x27;rmsle&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSE的最佳模型</span></span><br><span class="line">        best_rmse_idx = np.argmin(rmse_values)</span><br><span class="line">        rmse_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSLE的最佳模型（竞赛评估指标）</span></span><br><span class="line">        best_rmsle_idx = np.argmin(rmsle_values)</span><br><span class="line">        rmsle_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmse_values, color=rmse_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSE)&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmse.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSLE比较图（竞赛评估指标）</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmsle_values, color=rmsle_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSLE) - 竞赛评估指标&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSLE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmsle.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出比较结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSE):&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmse_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSLE) - 竞赛评估指标:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmsle_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果RMSE和RMSLE选出的最佳模型不同，输出说明</span></span><br><span class="line">        <span class="keyword">if</span> best_rmse_idx != best_rmsle_idx:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n注意: 基于RMSE的最佳模型是 <span class="subst">&#123;model_names[best_rmse_idx]&#125;</span>，而基于RMSLE的最佳模型是 <span class="subst">&#123;model_names[best_rmsle_idx]&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;由于竞赛使用RMSLE作为评估指标，我们将选择基于RMSLE的最佳模型。&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回基于RMSLE的最佳模型名称</span></span><br><span class="line">        <span class="keyword">return</span> model_names[best_rmsle_idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;比较优化后的模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_submission_with_best_model</span>(<span class="params">best_model_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用最佳模型生成提交文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        best_model_name (str): 最佳模型的名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用最佳模型 <span class="subst">&#123;best_model_name&#125;</span> 生成提交文件...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载最佳模型</span></span><br><span class="line">        model_file = <span class="string">f&#x27;models/<span class="subst">&#123;best_model_name&#125;</span>.joblib&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(model_file):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误：找不到模型文件 <span class="subst">&#123;model_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        best_model = joblib.load(model_file)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载测试数据</span></span><br><span class="line">        test_data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">        test_ids = test_data[<span class="string">&#x27;id&#x27;</span>].copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预处理测试数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> test_data.columns:</span><br><span class="line">            test_data.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> test_data.columns:</span><br><span class="line">            test_data[<span class="string">&#x27;Sex&#x27;</span>] = test_data[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载scaler</span></span><br><span class="line">        scaler = joblib.load(<span class="string">&#x27;scaler.joblib&#x27;</span>)</span><br><span class="line">        X_test_scaled = scaler.transform(test_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        predictions = best_model.predict(X_test_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建提交文件</span></span><br><span class="line">        submission = pd.DataFrame(&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: test_ids,</span><br><span class="line">            <span class="string">&#x27;Calories&#x27;</span>: predictions</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        submission_file = <span class="string">f&#x27;submission_<span class="subst">&#123;best_model_name&#125;</span>.csv&#x27;</span></span><br><span class="line">        submission.to_csv(submission_file, index=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提交文件已生成: <span class="subst">&#123;submission_file&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成提交文件过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始模型优化流程...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存模型和图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;models&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;models&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载预处理后的数据</span></span><br><span class="line">        X_train, X_val, y_train, y_val = load_preprocessed_data()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 优化各模型并存储结果</span></span><br><span class="line">        results = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 决策树</span></span><br><span class="line">        dt_model, dt_params, dt_rmse, dt_rmsle = optimize_decision_tree(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;decision_tree_best&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: dt_model, <span class="string">&#x27;params&#x27;</span>: dt_params, <span class="string">&#x27;rmse&#x27;</span>: dt_rmse, <span class="string">&#x27;rmsle&#x27;</span>: dt_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机森林</span></span><br><span class="line">        rf_model, rf_params, rf_rmse, rf_rmsle = optimize_random_forest(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;random_forest_best&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: rf_model, <span class="string">&#x27;params&#x27;</span>: rf_params, <span class="string">&#x27;rmse&#x27;</span>: rf_rmse, <span class="string">&#x27;rmsle&#x27;</span>: rf_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># XGBoost</span></span><br><span class="line">        xgb_model, xgb_params, xgb_rmse, xgb_rmsle = optimize_xgboost(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;xgboost_best&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: xgb_model, <span class="string">&#x27;params&#x27;</span>: xgb_params, <span class="string">&#x27;rmse&#x27;</span>: xgb_rmse, <span class="string">&#x27;rmsle&#x27;</span>: xgb_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 线性回归</span></span><br><span class="line">        lr_model, lr_params, lr_rmse, lr_rmsle = optimize_linear_regression(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;linear_regression&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: lr_model, <span class="string">&#x27;params&#x27;</span>: lr_params, <span class="string">&#x27;rmse&#x27;</span>: lr_rmse, <span class="string">&#x27;rmsle&#x27;</span>: lr_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比较优化后的模型</span></span><br><span class="line">        best_model_name = compare_optimized_models(results)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用最佳模型生成提交文件</span></span><br><span class="line">        generate_submission_with_best_model(best_model_name)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型优化流程完成！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制流程图的代码（由于Mermaid需要在Markdown中呈现，这里只生成文本文件）</span></span><br><span class="line">        generate_flow_diagrams()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;模型优化过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_flow_diagrams</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成各算法的流程图文本文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 决策树流程图</span></span><br><span class="line">    dt_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; E[定义参数网格]</span></span><br><span class="line"><span class="string">    E --&gt; F[创建决策树基础模型]</span></span><br><span class="line"><span class="string">    F --&gt; G[使用GridSearchCV进行网格搜索]</span></span><br><span class="line"><span class="string">    G --&gt; H[获取最佳参数]</span></span><br><span class="line"><span class="string">    H --&gt; I[使用最佳参数训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征重要性]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存最佳模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#eeeeee,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机森林流程图</span></span><br><span class="line">    rf_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; E[定义参数分布]</span></span><br><span class="line"><span class="string">    E --&gt; F[创建随机森林基础模型]</span></span><br><span class="line"><span class="string">    F --&gt; G[使用RandomizedSearchCV进行随机搜索]</span></span><br><span class="line"><span class="string">    G --&gt; H[获取最佳参数]</span></span><br><span class="line"><span class="string">    H --&gt; I[使用最佳参数训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征重要性]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存最佳模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#eeeeee,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># XGBoost流程图</span></span><br><span class="line">    xgb_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; E[定义参数网格]</span></span><br><span class="line"><span class="string">    E --&gt; F[创建XGBoost基础模型]</span></span><br><span class="line"><span class="string">    F --&gt; G[使用RandomizedSearchCV进行随机搜索]</span></span><br><span class="line"><span class="string">    G --&gt; H[获取最佳参数]</span></span><br><span class="line"><span class="string">    H --&gt; I[使用最佳参数训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征重要性]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存最佳模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#eeeeee,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 线性回归流程图</span></span><br><span class="line">    lr_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; F[创建线性回归模型]</span></span><br><span class="line"><span class="string">    F --&gt; I[训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征系数]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型比较流程图</span></span><br><span class="line">    compare_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载所有优化后的模型]</span></span><br><span class="line"><span class="string">    B --&gt; C[计算每个模型的RMSE]</span></span><br><span class="line"><span class="string">    C --&gt; D[计算每个模型的RMSLE]</span></span><br><span class="line"><span class="string">    D --&gt; E[绘制RMSE比较图]</span></span><br><span class="line"><span class="string">    E --&gt; F[绘制RMSLE比较图]</span></span><br><span class="line"><span class="string">    F --&gt; G[基于RMSLE选择最佳模型]</span></span><br><span class="line"><span class="string">    G --&gt; H[使用最佳模型生成提交文件]</span></span><br><span class="line"><span class="string">    H --&gt; I[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style D fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style F fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存流程图文本</span></span><br><span class="line">    os.makedirs(<span class="string">&#x27;flowcharts&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/decision_tree_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(dt_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/random_forest_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(rf_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/xgboost_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(xgb_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/linear_regression_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(lr_flow)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/model_comparison_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(compare_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;流程图文本文件已生成在 &#x27;flowcharts&#x27; 文件夹中&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><h2 id="六、模型应用">六、模型应用</h2><h3 id="6-1-最终模型选择">6.1 最终模型选择</h3><p>XGBoost</p><h3 id="6-2-模型实际应用场景">6.2 模型实际应用场景</h3><p>该预测模型可应用于以下场景：</p><ol><li>健身应用中的卡路里消耗预测功能</li><li>智能手表、手环等可穿戴设备的能量消耗算法</li><li>个性化健身计划制定工具</li><li>健康管理系统的锻炼评估组件</li></ol><h2 id="七、数据分析结论">七、数据分析结论</h2><h3 id="7-1-主要发现">7.1 主要发现</h3><p>通过本项目的数据分析和建模，我们得出以下主要发现：同上面</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153934775.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试设置中文字体</span></span><br><span class="line">    font = FontProperties(fname=<span class="string">r&quot;C:\Windows\Fonts\SimHei.ttf&quot;</span>, size=<span class="number">14</span>)</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  </span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;警告: 未能设置中文字体，图表中的中文可能显示为方块&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型性能数据</span></span><br><span class="line">models = [<span class="string">&#x27;XGBoost&#x27;</span>, <span class="string">&#x27;随机森林&#x27;</span>, <span class="string">&#x27;决策树&#x27;</span>, <span class="string">&#x27;线性回归&#x27;</span>]  <span class="comment"># 调整顺序，确保随机森林显示正确</span></span><br><span class="line">rmse_scores = [<span class="number">3.6246</span>, <span class="number">3.7526</span>, <span class="number">5.9721</span>, <span class="number">11.0588</span>]  <span class="comment"># 对应调整顺序</span></span><br><span class="line">r2_scores = [<span class="number">0.9966</span>, <span class="number">0.9964</span>, <span class="number">0.9908</span>, <span class="number">0.9684</span>]  <span class="comment"># 对应调整顺序</span></span><br><span class="line">rmsle_scores = [<span class="number">0.0622</span>, <span class="number">0.0627</span>, <span class="number">0.0896</span>, <span class="number">0.5652</span>]  <span class="comment"># 对应调整顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DataFrame以便于数据处理</span></span><br><span class="line">results_df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;模型&#x27;</span>: models,</span><br><span class="line">    <span class="string">&#x27;RMSE&#x27;</span>: rmse_scores,</span><br><span class="line">    <span class="string">&#x27;R平方&#x27;</span>: r2_scores,</span><br><span class="line">    <span class="string">&#x27;RMSLE (竞赛评估指标)&#x27;</span>: rmsle_scores</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印比较表格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型性能比较表：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(results_df.to_string(index=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出每个指标的最佳模型</span></span><br><span class="line">best_rmse_model = models[np.argmin(rmse_scores)]</span><br><span class="line">best_r2_model = models[np.argmax(r2_scores)]</span><br><span class="line">best_rmsle_model = models[np.argmin(rmsle_scores)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n各指标最佳模型：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;RMSE 最低的模型: <span class="subst">&#123;best_rmse_model&#125;</span> (RMSE = <span class="subst">&#123;<span class="built_in">min</span>(rmse_scores):<span class="number">.4</span>f&#125;</span>)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;R平方 最高的模型: <span class="subst">&#123;best_r2_model&#125;</span> (R平方 = <span class="subst">&#123;<span class="built_in">max</span>(r2_scores):<span class="number">.4</span>f&#125;</span>)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;RMSLE 最低的模型: <span class="subst">&#123;best_rmsle_model&#125;</span> (RMSLE = <span class="subst">&#123;<span class="built_in">min</span>(rmsle_scores):<span class="number">.4</span>f&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算各模型的综合排名</span></span><br><span class="line"><span class="comment"># 为每个指标计算排名（RMSE和RMSLE越低越好，R²越高越好）</span></span><br><span class="line">rmse_rank = np.argsort(rmse_scores).argsort()</span><br><span class="line">r2_rank = np.argsort(-np.array(r2_scores)).argsort()  <span class="comment"># 负号使得R²越高排名越靠前</span></span><br><span class="line">rmsle_rank = np.argsort(rmsle_scores).argsort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均排名</span></span><br><span class="line">avg_rank = (rmse_rank + r2_rank + rmsle_rank) / <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加排名信息到DataFrame</span></span><br><span class="line">results_df[<span class="string">&#x27;RMSE排名&#x27;</span>] = rmse_rank + <span class="number">1</span>  <span class="comment"># +1使排名从1开始</span></span><br><span class="line">results_df[<span class="string">&#x27;R平方排名&#x27;</span>] = r2_rank + <span class="number">1</span></span><br><span class="line">results_df[<span class="string">&#x27;RMSLE排名&#x27;</span>] = rmsle_rank + <span class="number">1</span></span><br><span class="line">results_df[<span class="string">&#x27;平均排名&#x27;</span>] = avg_rank + <span class="number">1</span></span><br><span class="line">results_df = results_df.sort_values(<span class="string">&#x27;平均排名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n综合排名（考虑所有指标）：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(results_df[[<span class="string">&#x27;模型&#x27;</span>, <span class="string">&#x27;RMSE排名&#x27;</span>, <span class="string">&#x27;R平方排名&#x27;</span>, <span class="string">&#x27;RMSLE排名&#x27;</span>, <span class="string">&#x27;平均排名&#x27;</span>]].to_string(index=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义更好的颜色方案</span></span><br><span class="line">colors = [<span class="string">&#x27;#3498db&#x27;</span>, <span class="string">&#x27;#2ecc71&#x27;</span>, <span class="string">&#x27;#9b59b6&#x27;</span>, <span class="string">&#x27;#e74c3c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化比较</span></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. RMSE比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">ax1 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;RMSE&#x27;</span>, data=results_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型RMSE比较（越低越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;RMSE&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Y轴的最大值，用于计算标签位置</span></span><br><span class="line">y_max = <span class="built_in">max</span>(rmse_scores) * <span class="number">1.15</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, y_max)  <span class="comment"># 设置Y轴范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(rmse_scores):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max * <span class="number">0.02</span>)  <span class="comment"># 柱子顶部上方2%的位置</span></span><br><span class="line">    ax1.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.4</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. R平方比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax2 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;R平方&#x27;</span>, data=results_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型R平方比较（越高越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;R平方&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Y轴范围，从0.95开始以突出差异</span></span><br><span class="line">y_min_r2 = <span class="built_in">min</span>(r2_scores) * <span class="number">0.99</span></span><br><span class="line">y_max_r2 = <span class="number">1.001</span></span><br><span class="line">plt.ylim(y_min_r2, y_max_r2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子顶部上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(r2_scores):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max_r2 - v) * <span class="number">0.3</span>  <span class="comment"># 柱子顶部上方</span></span><br><span class="line">    ax2.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.4</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. RMSLE比较（竞赛评估指标）</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">ax3 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;RMSLE (竞赛评估指标)&#x27;</span>, data=results_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型RMSLE比较（竞赛评估指标，越低越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;RMSLE&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Y轴的最大值，用于计算标签位置</span></span><br><span class="line">y_max_rmsle = <span class="built_in">max</span>(rmsle_scores) * <span class="number">1.15</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, y_max_rmsle)  <span class="comment"># 设置Y轴范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(rmsle_scores):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max_rmsle * <span class="number">0.02</span>)  <span class="comment"># 柱子顶部上方2%的位置</span></span><br><span class="line">    ax3.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.4</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 综合排名比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">sorted_df = results_df.sort_values(<span class="string">&#x27;平均排名&#x27;</span>, ascending=<span class="literal">True</span>)</span><br><span class="line">ax4 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;平均排名&#x27;</span>, data=sorted_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型综合排名（越低越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均排名&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Y轴范围</span></span><br><span class="line">y_max_rank = <span class="number">5</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, y_max_rank)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(sorted_df[<span class="string">&#x27;平均排名&#x27;</span>]):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max_rank * <span class="number">0.05</span>)  <span class="comment"># 柱子顶部上方5%的位置</span></span><br><span class="line">    ax4.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.2</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加总体标题</span></span><br><span class="line">plt.suptitle(<span class="string">&#x27;卡路里消耗预测模型性能比较&#x27;</span>, fontsize=<span class="number">18</span>, fontproperties=font, y=<span class="number">0.98</span>)</span><br><span class="line">plt.tight_layout(rect=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.95</span>])  <span class="comment"># 调整布局，为总标题留出空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图表</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;模型性能比较.png&#x27;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图表</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终结论</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n最终结论：&quot;</span>)</span><br><span class="line">best_model = results_df.iloc[<span class="number">0</span>][<span class="string">&#x27;模型&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;综合各项指标，<span class="subst">&#123;best_model&#125;</span>模型表现最优。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> best_model == <span class="string">&quot;XGBoost&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">具体优势：</span></span><br><span class="line"><span class="string">1. XGBoost模型RMSE最低（3.6246），意味着预测误差最小</span></span><br><span class="line"><span class="string">2. R平方值最高（0.9966），说明模型解释了约99.66%的目标变量方差</span></span><br><span class="line"><span class="string">3. RMSLE值最低（0.0622），在竞赛评估指标上表现最佳</span></span><br><span class="line"><span class="string">4. 综合排名第一</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">推荐在最终提交中使用XGBoost模型预测结果。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> best_model == <span class="string">&quot;随机森林&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">具体优势：</span></span><br><span class="line"><span class="string">1. 随机森林模型RMSE仅次于XGBoost（3.7526）</span></span><br><span class="line"><span class="string">2. R平方值接近XGBoost（0.9964）</span></span><br><span class="line"><span class="string">3. RMSLE值仅略高于XGBoost（0.0627）</span></span><br><span class="line"><span class="string">4. 综合排名第二，但与XGBoost非常接近</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">推荐在最终提交中使用随机森林模型预测结果，或与XGBoost模型结果进行集成。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>) </span><br></pre></td></tr></table></figure><h3 id="7-2-未来改进方向">7.2 未来改进方向</h3><p>本项目还可在以下方面进行改进：</p><ol><li>收集更多维度的数据，如锻炼类型、强度等</li><li>尝试更多高级算法，如神经网络、集成学习等</li><li>引入时间序列特征，考虑锻炼连续性的影响</li><li>结合领域知识，开发更专业的特征工程方法</li></ol><p>上周刚搜到神经网络 今天上课就要求写了 哈哈哈哈…</p><p>那来看看神经网络代码：</p><p>说一下大概干了什么事情：</p><ol><li>神经网络建模与优化：</li></ol><ul><li><p>模型选择：我选择了Scikit-learn库中的MLPRegressor（多层感知机回归器）作为主要的神经网络模型。</p></li><li><p>数据标准化：由于神经网络对输入特征的尺度非常敏感，在将数据送入模型前，我们使用了StandardScaler对所有特征进行了标准化处理。</p></li><li><p>基准建立与调优：首先，我们训练了一个基础配置的神经网络模型，以了解其大致性能。然后，为了找到最优的模型配置，我们采用了网格搜索（GridSearchCV）的方法，对神经网络的关键超参数（如隐藏层结构、激活函数、正则化强度和初始学习率）进行了系统的调优。调优过程中使用了3折交叉验证，并以负均方误差作为评估标准。</p></li><li><p>性能评估：对于调优后的最佳神经网络模型，我们在独立的验证集上评估了其性能，主要关注的指标包括均方根误差（RMSE）、R²决定系数以及均方根对数误差（RMSLE）。脚本中还计算了这些指标，并将它们与一个预先训练好的XGBoost模型的性能进行了对比。</p></li></ul><p>2.结果可视化与分析：为了更直观地理解模型性能，脚本生成了多种可视化图表。包括：</p><ul><li><p>不同模型（基础神经网络、调优后神经网络、XGBoost）在各项评估指标上的对比条形图。</p></li><li><p>调优后神经网络的预测值与实际值的对比散点图。</p></li><li><p>模型预测残差的分布图和残差与预测值的关系图，用于分析模型的偏差和潜在问题。</p></li></ul><p>3.模型应用与输出：最后，利用训练好的最佳神经网络模型和相应的特征缩放器，对测试数据集进行预测，并生成了符合竞赛提交格式要求的CSV文件。</p><p>具体分析：</p><p><code>train_neural_network</code> 函数</p><p>一开始也是数据分割与标准化，这里可以看下面的完整代码，可以说一下的是：神经网络对输入特征的尺度非常敏感。如果特征尺度差异很大，训练过程可能会变得缓慢且不稳定。<code>StandardScaler</code>将每个特征转换为均值为0，标准差为1的分布。<strong>注意</strong>：缩放器（<code>scaler</code>）是在训练集上<code>fit_transform</code>的，然后用同样的缩放器在验证集（以及后续的测试集）上<code>transform</code>，以避免数据泄露。</p><h3 id="基线模型训练">基线模型训练</h3><p>首先，训练了一个具有基础配置的<code>MLPRegressor</code>，以建立一个性能基准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># ...</span></span><br><span class="line">    base_nn = MLPRegressor(</span><br><span class="line">        hidden_layer_sizes=(<span class="number">100</span>,),  <span class="comment"># 一个隐藏层，100个神经元</span></span><br><span class="line">        activation=<span class="string">&#x27;relu&#x27;</span>,          <span class="comment"># ReLU激活函数</span></span><br><span class="line">        solver=<span class="string">&#x27;adam&#x27;</span>,              <span class="comment"># Adam优化器</span></span><br><span class="line">        alpha=<span class="number">0.0001</span>,               <span class="comment"># L2正则化参数</span></span><br><span class="line">        max_iter=<span class="number">500</span>,               <span class="comment"># 增加最大迭代次数</span></span><br><span class="line">        early_stopping=<span class="literal">True</span>,        <span class="comment"># 启用早停机制</span></span><br><span class="line">        validation_fraction=<span class="number">0.1</span>,    <span class="comment"># 用于早停的验证集比例</span></span><br><span class="line">        tol=<span class="number">1e-4</span>,                   <span class="comment"># 收敛容忍度</span></span><br><span class="line">        random_state=<span class="number">42</span>,</span><br><span class="line">        verbose=<span class="literal">True</span>                <span class="comment"># 显示训练进度</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    start_time = time.time()</span><br><span class="line">    base_nn.fit(X_train_scaled, y_train)</span><br><span class="line">    base_training_time = time.time() - start_time</span><br><span class="line">    </span><br><span class="line">    y_pred_base = base_nn.predict(X_val_scaled)</span><br><span class="line">    base_mse = mean_squared_error(y_val, y_pred_base)</span><br><span class="line">    base_rmse = np.sqrt(base_mse)</span><br><span class="line">    base_mae = mean_absolute_error(y_val, y_pred_base)</span><br><span class="line">    base_r2 = r2_score(y_val, y_pred_base)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">基础神经网络模型评估结果:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;base_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;base_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>关键参数解释：</p><ul><li><code>hidden_layer_sizes=(100,)</code>: 定义了一个包含100个神经元的隐藏层。</li><li><code>activation='relu'</code>: 使用ReLU作为激活函数，它有助于缓解梯度消失问题。</li><li><code>solver='adam'</code>: Adam是一种高效的优化算法。</li><li><code>alpha=0.0001</code>: L2正则化参数，用于防止过拟合。</li><li><code>max_iter=500</code>: 最大迭代次数。</li><li><code>early_stopping=True</code>: 早停机制，当验证集性能不再提升时停止训练，防止过拟合。</li></ul><p>训练完成后，模型在验证集上进行评估，计算RMSE（均方根误差）和R²（决定系数）等指标。</p><h3 id="追求卓越：超参数调优-GridSearchCV">追求卓越：超参数调优 (<code>GridSearchCV</code>)</h3><p>为了获得更好的性能，脚本使用<code>GridSearchCV</code>进行超参数调优。这会自动尝试参数网格中的不同组合，并通过交叉验证找到最佳配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">   param_grid = &#123;</span><br><span class="line">       <span class="string">&#x27;hidden_layer_sizes&#x27;</span>: [(<span class="number">50</span>,), (<span class="number">100</span>,), (<span class="number">50</span>, <span class="number">25</span>)],  <span class="comment"># 不同的网络结构</span></span><br><span class="line">       <span class="string">&#x27;activation&#x27;</span>: [<span class="string">&#x27;relu&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>],                   <span class="comment"># 不同的激活函数</span></span><br><span class="line">       <span class="string">&#x27;alpha&#x27;</span>: [<span class="number">0.0001</span>, <span class="number">0.001</span>, <span class="number">0.01</span>],                   <span class="comment"># 不同的正则化强度</span></span><br><span class="line">       <span class="string">&#x27;learning_rate_init&#x27;</span>: [<span class="number">0.001</span>, <span class="number">0.01</span>]               <span class="comment"># 不同的学习率</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   nn_model = MLPRegressor(</span><br><span class="line">       solver=<span class="string">&#x27;adam&#x27;</span>, max_iter=<span class="number">500</span>, early_stopping=<span class="literal">True</span>,</span><br><span class="line">       validation_fraction=<span class="number">0.1</span>, tol=<span class="number">1e-4</span>, random_state=<span class="number">42</span>, verbose=<span class="literal">False</span></span><br><span class="line">   )</span><br><span class="line">   </span><br><span class="line">   grid_search = GridSearchCV(</span><br><span class="line">       estimator=nn_model, param_grid=param_grid, cv=<span class="number">3</span>,</span><br><span class="line">       scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>, n_jobs=-<span class="number">1</span>, verbose=<span class="number">2</span></span><br><span class="line">   )</span><br><span class="line">   </span><br><span class="line">   grid_search.fit(X_train_scaled, y_train)</span><br><span class="line">   </span><br><span class="line">   best_params = grid_search.best_params_</span><br><span class="line">   best_model = grid_search.best_estimator_</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><code>GridSearchCV</code>会尝试<code>param_grid</code>中定义的所有超参数组合。这里：</p><ul><li><code>cv=3</code>: 表示使用3折交叉验证。</li><li><code>scoring='neg_mean_squared_error'</code>: 评估指标为负均方误差（因为GridSearchCV试图最大化得分，而我们希望最小化MSE）。</li><li><code>n_jobs=-1</code>: 使用所有可用的CPU核心并行计算。</li></ul><h3 id="最佳模型评估与比较">最佳模型评估与比较</h3><p>找到最佳超参数后，用最佳模型<code>best_model</code>在验证集上进行预测和评估。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">    y_pred_best = best_model.predict(X_val_scaled)</span><br><span class="line">    best_mse = mean_squared_error(y_val, y_pred_best)</span><br><span class="line">    best_rmse = np.sqrt(best_mse)</span><br><span class="line">    best_mae = mean_absolute_error(y_val, y_pred_best)</span><br><span class="line">    best_r2 = r2_score(y_val, y_pred_best)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算RMSLE (Root Mean Squared Logarithmic Error)</span></span><br><span class="line">    <span class="comment"># RMSLE = sqrt( (1/n) * sum( (log(pred_i + 1) - log(actual_i + 1))^2 ) )</span></span><br><span class="line">    <span class="comment"># 添加1是为了避免log(0)的问题，并且因为卡路里消耗量通常是正数</span></span><br><span class="line">    base_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val) - np.log1p(y_pred_base), <span class="number">2</span>))) <span class="comment"># 修正：y_val和y_pred_base都应+1</span></span><br><span class="line">    best_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val) - np.log1p(y_pred_best), <span class="number">2</span>))) <span class="comment"># 修正：y_val和y_pred_best都应+1</span></span><br><span class="line">    <span class="comment"># 更正后的RMSLE计算 (如脚本中所示，但y_pred_base也应+1):</span></span><br><span class="line">    <span class="comment"># base_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + 1) - np.log1p(y_pred_base + 1), 2)))</span></span><br><span class="line">    <span class="comment"># best_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + 1) - np.log1p(y_pred_best + 1), 2)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">最佳神经网络模型评估结果:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;best_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;best_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>我把前面四个模型最好的模型也就是XGBoost与之对比,引入了<code>XGBOOST_RMSE</code>, <code>XGBOOST_R2</code>, <code>XGBOOST_RMSLE</code>这些常量，它们代表了一个预先训练好的XGBoost模型的性能指标。这允许我将神经网络模型的性能与一个强大的基准模型进行比较。RMSLE（均方根对数误差）是另一个重要的回归评估指标，尤其适用于目标变量数量级跨度较大或我们更关注预测百分比误差的情况。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124744490.png" alt="image-20250528124744490"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124806904.png" alt="image-20250528124806904"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124835120.png" alt="image-20250528124835120"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124855657.png" alt="image-20250528124855657"></p><h3 id="深入洞察：预测结果可视化">深入洞察：预测结果可视化</h3><p>为了更深入地理解模型的行为，我做了以下可视化图表：</p><ol><li><strong>预测值 vs. 实际值</strong>:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">   <span class="comment"># 随机选择100个样本点进行可视化</span></span><br><span class="line">   sample_indices = np.random.choice(<span class="built_in">len</span>(y_val), <span class="built_in">min</span>(<span class="number">100</span>, <span class="built_in">len</span>(y_val)), replace=<span class="literal">False</span>)</span><br><span class="line">   y_val_sample = y_val.iloc[sample_indices]</span><br><span class="line">   y_pred_sample = y_pred_best[sample_indices]</span><br><span class="line">   </span><br><span class="line">   plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">   plt.scatter(y_val_sample, y_pred_sample, alpha=<span class="number">0.7</span>)</span><br><span class="line">   plt.plot([y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], [y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], <span class="string">&#x27;r--&#x27;</span>) <span class="comment"># 对角线</span></span><br><span class="line">   <span class="comment"># ... 设置标题和标签 ...</span></span><br><span class="line">   show_figure(plt.gcf())</span><br><span class="line">   <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125033313.png" alt="image-20250528125033313"></p><p><strong>残差分布</strong>: 残差是实际值与预测值之差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">   residuals = y_val - y_pred_best</span><br><span class="line">   plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">   sns.histplot(residuals, kde=<span class="literal">True</span>) <span class="comment"># 直方图和核密度估计</span></span><br><span class="line">   plt.axvline(x=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>) <span class="comment"># 零点线</span></span><br><span class="line">   <span class="comment"># ... 设置标题和标签 ...</span></span><br><span class="line">   show_figure(plt.gcf())</span><br><span class="line">   <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125132720.png" alt="image-20250528125132720"></p><p><strong>残差 vs. 预测值</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.scatter(y_pred_best, residuals, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.axhline(y=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>) <span class="comment"># 水平零线</span></span><br><span class="line"><span class="comment"># ... 设置标题和标签 ...</span></span><br><span class="line">show_figure(plt.gcf())</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125224921.png" alt="image-20250528125224921"></p><h3 id="模型保存">模型保存</h3><p>训练和调优完成后，将最佳模型和特征缩放器保存到磁盘，以便将来重用，而无需重新训练。(详细见下面完整代码) 后面还有一个生成竞赛的提交文件的代码</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">卡路里消耗预测 - 神经网络模型实现</span></span><br><span class="line"><span class="string">本代码使用Scikit-learn的MLPRegressor实现神经网络模型预测锻炼期间燃烧的卡路里</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="comment"># XGBoost模型的性能指标（基于之前的训练结果）</span></span><br><span class="line">XGBOOST_RMSE = <span class="number">3.6246</span>    <span class="comment"># XGBoost模型的均方根误差</span></span><br><span class="line">XGBOOST_R2 = <span class="number">0.9966</span>      <span class="comment"># XGBoost模型的R²值</span></span><br><span class="line">XGBOOST_RMSLE = <span class="number">0.0622</span>   <span class="comment"># XGBoost模型的均方根对数误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 使用更可靠的方式设置中文字体</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line">    <span class="keyword">import</span> platform</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 常见中文字体列表，按照可用性顺序排列</span></span><br><span class="line">    chinese_fonts = [</span><br><span class="line">        <span class="string">&#x27;SimHei&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="string">&#x27;SimSun&#x27;</span>, <span class="string">&#x27;STSong&#x27;</span>, <span class="string">&#x27;WenQuanYi Zen Hei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;AR PL UMing CN&#x27;</span>, <span class="string">&#x27;AR PL UKai CN&#x27;</span>, <span class="string">&#x27;KaiTi&#x27;</span>, <span class="string">&#x27;FangSong&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置rcParams</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查已有字体</span></span><br><span class="line">    system_fonts = <span class="built_in">set</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> fm.fontManager.ttflist])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;系统内可用字体数量: <span class="subst">&#123;<span class="built_in">len</span>(system_fonts)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查找可用的中文字体</span></span><br><span class="line">    available_chinese_font = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> font <span class="keyword">in</span> chinese_fonts:</span><br><span class="line">        <span class="keyword">if</span> font <span class="keyword">in</span> system_fonts:</span><br><span class="line">            available_chinese_font = font</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找到可用中文字体: <span class="subst">&#123;font&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> available_chinese_font:</span><br><span class="line">        plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [available_chinese_font] + plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]</span><br><span class="line">        CHINESE_FONTS_AVAILABLE = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试重建字体缓存</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到中文字体，尝试重建字体缓存...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">            _rebuild()</span><br><span class="line">            <span class="comment"># 重新检查字体</span></span><br><span class="line">            system_fonts = <span class="built_in">set</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> fm.fontManager.ttflist])</span><br><span class="line">            <span class="keyword">for</span> font <span class="keyword">in</span> chinese_fonts:</span><br><span class="line">                <span class="keyword">if</span> font <span class="keyword">in</span> system_fonts:</span><br><span class="line">                    available_chinese_font = font</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;重建缓存后找到可用中文字体: <span class="subst">&#123;font&#125;</span>&quot;</span>)</span><br><span class="line">                    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [available_chinese_font] + plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]</span><br><span class="line">                    CHINESE_FONTS_AVAILABLE = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;重建字体缓存失败，图表中文将使用FontProperties方式处理&quot;</span>)</span><br><span class="line">            CHINESE_FONTS_AVAILABLE = <span class="literal">False</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 如果设置失败，使用默认字体，不显示中文</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;字体设置失败，错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 恢复默认设置</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial&#x27;</span>]</span><br><span class="line">    <span class="comment"># 修改图表标题和标签为英文</span></span><br><span class="line">    CHINESE_FONTS_AVAILABLE = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置matplotlib参数，使图表直接显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;interactive&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">10</span>, <span class="number">6</span>)  <span class="comment"># 设置默认图表大小</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">100</span>  <span class="comment"># 设置默认DPI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子，确保结果可重现</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个辅助函数，用于在条形图上显示数值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_value_labels</span>(<span class="params">ax, spacing=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在条形图上添加数值标签</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        ax: matplotlib轴对象</span></span><br><span class="line"><span class="string">        spacing: 标签与条形顶部的距离</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 对于ax中的每个条形</span></span><br><span class="line">    <span class="keyword">for</span> rect <span class="keyword">in</span> ax.patches:</span><br><span class="line">        <span class="comment"># 获取条形的高度</span></span><br><span class="line">        height = rect.get_height()</span><br><span class="line">        <span class="comment"># 在条形顶部添加文本</span></span><br><span class="line">        ax.annotate(<span class="string">f&#x27;<span class="subst">&#123;height:<span class="number">.4</span>f&#125;</span>&#x27;</span>,  <span class="comment"># 文本内容</span></span><br><span class="line">                    xy=(rect.get_x() + rect.get_width() / <span class="number">2</span>, height),  <span class="comment"># 文本位置</span></span><br><span class="line">                    xytext=(<span class="number">0</span>, spacing),  <span class="comment"># 文本偏移</span></span><br><span class="line">                    textcoords=<span class="string">&quot;offset points&quot;</span>,  <span class="comment"># 偏移类型</span></span><br><span class="line">                    ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)  <span class="comment"># 对齐方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个函数，用于显示图表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_figure</span>(<span class="params">fig, filename=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    显示图表</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        fig: matplotlib图表对象</span></span><br><span class="line"><span class="string">        filename: 可选参数，被忽略</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示图表</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个辅助函数，用于在绘图时使用中文字体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_chinese_font</span>(<span class="params">ax, title=<span class="literal">None</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    为图表设置中文字体</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        ax: matplotlib轴对象</span></span><br><span class="line"><span class="string">        title: 标题文本</span></span><br><span class="line"><span class="string">        xlabel: x轴标签文本</span></span><br><span class="line"><span class="string">        ylabel: y轴标签文本</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 如果没有可用的中文字体，尝试使用FontProperties</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="comment"># 尝试几个常用中文字体</span></span><br><span class="line">        font_paths = [</span><br><span class="line">            <span class="comment"># 系统字体路径</span></span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/truetype/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/chinese/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/windows/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc&#x27;</span>,</span><br><span class="line">            <span class="comment"># Windows常用路径</span></span><br><span class="line">            <span class="string">&#x27;C:/Windows/Fonts/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;C:/Windows/Fonts/simhei.ttf&#x27;</span>,</span><br><span class="line">            <span class="comment"># Mac常用路径</span></span><br><span class="line">            <span class="string">&#x27;/Library/Fonts/Arial Unicode.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/System/Library/Fonts/PingFang.ttc&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试找到可用的字体文件</span></span><br><span class="line">        font_prop = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> font_path <span class="keyword">in</span> font_paths:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(font_path):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    font_prop = fm.FontProperties(fname=font_path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;使用字体文件: <span class="subst">&#123;font_path&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果仍然没有找到字体，使用系统默认字体</span></span><br><span class="line">        <span class="keyword">if</span> font_prop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无法找到中文字体文件，将尝试使用系统默认字体&quot;</span>)</span><br><span class="line">            font_prop = fm.FontProperties()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置标题和标签</span></span><br><span class="line">        <span class="keyword">if</span> title:</span><br><span class="line">            ax.set_title(title, fontproperties=font_prop)</span><br><span class="line">        <span class="keyword">if</span> xlabel:</span><br><span class="line">            ax.set_xlabel(xlabel, fontproperties=font_prop)</span><br><span class="line">        <span class="keyword">if</span> ylabel:</span><br><span class="line">            ax.set_ylabel(ylabel, fontproperties=font_prop)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果有可用的中文字体，直接设置标题和标签</span></span><br><span class="line">        <span class="keyword">if</span> title:</span><br><span class="line">            ax.set_title(title)</span><br><span class="line">        <span class="keyword">if</span> xlabel:</span><br><span class="line">            ax.set_xlabel(xlabel)</span><br><span class="line">        <span class="keyword">if</span> ylabel:</span><br><span class="line">            ax.set_ylabel(ylabel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">use_sampling=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始卡路里消耗预测神经网络模型训练...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Starting calorie consumption prediction neural network model training...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1. 数据获取</span></span><br><span class="line">    train_data, test_data = load_data()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 数据预处理</span></span><br><span class="line">    train_data = preprocess_data(train_data)</span><br><span class="line">    test_data = preprocess_data(test_data, is_train=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 特征工程</span></span><br><span class="line">    train_data = feature_engineering(train_data)</span><br><span class="line">    test_data = feature_engineering(test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 特征与目标变量分离</span></span><br><span class="line">    X_train, y_train = train_data.drop(<span class="string">&#x27;Calories&#x27;</span>, axis=<span class="number">1</span>), train_data[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 神经网络模型训练和评估</span></span><br><span class="line">    sample_limit = <span class="number">100000</span> <span class="keyword">if</span> use_sampling <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 如果使用采样，设置为10万条记录</span></span><br><span class="line">    best_nn_model, best_nn_score, best_r2, best_rmsle = train_neural_network(X_train, y_train, sample_limit)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6. 使用最佳模型进行预测并生成提交文件</span></span><br><span class="line">    generate_submission(best_nn_model, test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 7. 输出神经网络与XGBoost模型的比较结果</span></span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n=== 神经网络与XGBoost模型性能比较 ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型性能指标比较：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;模型名称&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;R²&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSLE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n=== Neural Network vs XGBoost Model Performance Comparison ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Model Performance Metrics:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;Model Name&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;R²&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSLE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;神经网络(调优后)&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;best_nn_score:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_r2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_rmsle:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;XGBoost&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;XGBOOST_RMSE:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_R2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_RMSLE:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;Neural Network (Tuned)&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;best_nn_score:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_r2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_rmsle:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;XGBoost&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;XGBOOST_RMSE:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_R2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_RMSLE:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 比较结果分析</span></span><br><span class="line">    nn_better_rmse = best_nn_score &lt; XGBOOST_RMSE</span><br><span class="line">    nn_better_r2 = best_r2 &gt; XGBOOST_R2</span><br><span class="line">    nn_better_rmsle = best_rmsle &lt; XGBOOST_RMSLE</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n结论:&quot;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&quot;\nConclusion:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> nn_better_rmse <span class="keyword">and</span> nn_better_r2 <span class="keyword">and</span> nn_better_rmsle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;神经网络模型在所有指标上均优于XGBoost模型。&quot;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&quot;Neural Network model outperforms XGBoost model on all metrics.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> nn_better_rmse <span class="keyword">and</span> <span class="keyword">not</span> nn_better_r2 <span class="keyword">and</span> <span class="keyword">not</span> nn_better_rmsle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;XGBoost模型在所有指标上均优于神经网络模型。&quot;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&quot;XGBoost model outperforms Neural Network model on all metrics.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;模型性能比较：&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSE: <span class="subst">&#123;<span class="string">&#x27;神经网络&#x27;</span> <span class="keyword">if</span> nn_better_rmse <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> 模型表现更好&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- R²: <span class="subst">&#123;<span class="string">&#x27;神经网络&#x27;</span> <span class="keyword">if</span> nn_better_r2 <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> 模型表现更好&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSLE: <span class="subst">&#123;<span class="string">&#x27;神经网络&#x27;</span> <span class="keyword">if</span> nn_better_rmsle <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> 模型表现更好&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Model performance comparison:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSE: <span class="subst">&#123;<span class="string">&#x27;Neural Network&#x27;</span> <span class="keyword">if</span> nn_better_rmse <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> model performs better&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- R²: <span class="subst">&#123;<span class="string">&#x27;Neural Network&#x27;</span> <span class="keyword">if</span> nn_better_r2 <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> model performs better&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSLE: <span class="subst">&#123;<span class="string">&#x27;Neural Network&#x27;</span> <span class="keyword">if</span> nn_better_rmsle <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> model performs better&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n卡路里消耗预测神经网络模型训练完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nCalorie consumption prediction neural network model training completed!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载训练集和测试集数据，支持本地路径和Kaggle路径</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练数据, 测试数据)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在加载数据...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义可能的数据路径</span></span><br><span class="line">        possible_train_paths = [</span><br><span class="line">            <span class="string">&#x27;/kaggle/input/playground-series-s5e5/train.csv&#x27;</span>,  <span class="comment"># Kaggle路径</span></span><br><span class="line">            <span class="string">&#x27;train.csv&#x27;</span>  <span class="comment"># 本地路径</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        possible_test_paths = [</span><br><span class="line">            <span class="string">&#x27;/kaggle/input/playground-series-s5e5/test.csv&#x27;</span>,  <span class="comment"># Kaggle路径</span></span><br><span class="line">            <span class="string">&#x27;test.csv&#x27;</span>  <span class="comment"># 本地路径</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试加载训练数据</span></span><br><span class="line">        train_data = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> possible_train_paths:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">                    train_data = pd.read_csv(path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;path&#125;</span> 加载训练数据&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;尝试从 <span class="subst">&#123;path&#125;</span> 加载训练数据失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> train_data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">&quot;无法找到训练数据文件，请确保train.csv存在于正确位置&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试加载测试数据</span></span><br><span class="line">        test_data = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> possible_test_paths:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">                    test_data = pd.read_csv(path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;path&#125;</span> 加载测试数据&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;尝试从 <span class="subst">&#123;path&#125;</span> 加载测试数据失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> test_data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">&quot;无法找到测试数据文件，请确保test.csv存在于正确位置&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练集大小：<span class="subst">&#123;train_data.shape&#125;</span>, 测试集大小：<span class="subst">&#123;test_data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_data</span>(<span class="params">data, is_train=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对数据进行预处理</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要处理的数据</span></span><br><span class="line"><span class="string">        is_train (bool): 是否为训练数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 预处理后的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行数据预处理...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本，避免修改原始数据</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据基本信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据基本信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据统计摘要</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据统计摘要:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.describe())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查缺失值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n检查缺失值:&quot;</span>)</span><br><span class="line">        missing_values = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="built_in">print</span>(missing_values[missing_values &gt; <span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理缺失值（如果有）</span></span><br><span class="line">        <span class="keyword">if</span> df.isnull().<span class="built_in">sum</span>().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 对数值型特征使用均值填充，分类特征使用众数填充</span></span><br><span class="line">            num_features = df.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">            cat_features = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> num_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> cat_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mode()[<span class="number">0</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别编码：将性别特征转换为数值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df[<span class="string">&#x27;Sex&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除ID列，因为它不是预测的特征</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df = df.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示处理后的数据信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预处理后的数据信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据预处理过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征工程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建新特征以提高模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 预处理后的数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 包含新特征的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行特征工程...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程前数据形状: <span class="subst">&#123;data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录原始特征列表</span></span><br><span class="line">        original_features = df.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 创建BMI特征（体重指数）</span></span><br><span class="line">        df[<span class="string">&#x27;BMI&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / ((df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 创建心率与年龄的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] / df[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 创建锻炼强度指标</span></span><br><span class="line">        df[<span class="string">&#x27;Exercise_Intensity&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] * df[<span class="string">&#x27;Duration&#x27;</span>] / <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 创建体温与心率的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>] = df[<span class="string">&#x27;Body_Temp&#x27;</span>] / df[<span class="string">&#x27;Heart_Rate&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 体重与身高的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Weight_Height_Ratio&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / (df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取新创建的特征列表</span></span><br><span class="line">        new_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> df.columns <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> original_features]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程完成，创建了 <span class="subst">&#123;<span class="built_in">len</span>(new_features)&#125;</span> 个新特征:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> new_features:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - <span class="subst">&#123;feature&#125;</span>: 均值=<span class="subst">&#123;df[feature].mean():<span class="number">.4</span>f&#125;</span>, 标准差=<span class="subst">&#123;df[feature].std():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程后数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模型训练和评估</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_neural_network</span>(<span class="params">X, y, sample_limit=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    训练神经网络模型并评估性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (DataFrame): 特征数据</span></span><br><span class="line"><span class="string">        y (Series): 目标变量（卡路里消耗量）</span></span><br><span class="line"><span class="string">        sample_limit (int, optional): 可选的数据采样限制，如果指定，将随机采样数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳得分, 最佳R², 最佳RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行神经网络模型训练和评估...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 可选的数据采样</span></span><br><span class="line">        <span class="keyword">if</span> sample_limit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(X) &gt; sample_limit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;数据集较大，进行随机采样（<span class="subst">&#123;sample_limit&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(X)&#125;</span>条记录）...&quot;</span>)</span><br><span class="line">            sample_idx = np.random.choice(<span class="built_in">len</span>(X), sample_limit, replace=<span class="literal">False</span>)</span><br><span class="line">            X = X.iloc[sample_idx].copy()</span><br><span class="line">            y = y.iloc[sample_idx].copy()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;采样后数据形状: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;使用完整数据集: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割数据为训练集和验证集</span></span><br><span class="line">        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放（神经网络对特征缩放非常敏感）</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">        X_val_scaled = scaler.transform(X_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存特征名称，用于后续分析</span></span><br><span class="line">        feature_names = X.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 首先创建一个基础神经网络模型，了解性能基线</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n训练基础神经网络模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建基础神经网络模型</span></span><br><span class="line">        <span class="comment"># hidden_layer_sizes=(100,): 一个隐藏层，包含100个神经元</span></span><br><span class="line">        <span class="comment"># activation=&#x27;relu&#x27;: 使用ReLU激活函数，这是目前最常用的激活函数，计算效率高且能解决梯度消失问题</span></span><br><span class="line">        <span class="comment"># solver=&#x27;adam&#x27;: 使用Adam优化器，一种自适应学习率的优化算法，适合大多数问题</span></span><br><span class="line">        <span class="comment"># alpha=0.0001: L2正则化参数，用于防止过拟合</span></span><br><span class="line">        <span class="comment"># max_iter=500: 最大迭代次数，增加以确保收敛</span></span><br><span class="line">        <span class="comment"># early_stopping=True: 启用早停机制，在验证集性能不再提升时停止训练</span></span><br><span class="line">        <span class="comment"># validation_fraction=0.1: 用于早停的验证集比例</span></span><br><span class="line">        <span class="comment"># tol=1e-4: 收敛容忍度，增加可以放宽收敛条件</span></span><br><span class="line">        <span class="comment"># random_state=42: 随机种子，确保结果可重现</span></span><br><span class="line">        base_nn = MLPRegressor(</span><br><span class="line">            hidden_layer_sizes=(<span class="number">100</span>,),  <span class="comment"># 一个隐藏层，100个神经元</span></span><br><span class="line">            activation=<span class="string">&#x27;relu&#x27;</span>,          <span class="comment"># ReLU激活函数</span></span><br><span class="line">            solver=<span class="string">&#x27;adam&#x27;</span>,              <span class="comment"># Adam优化器</span></span><br><span class="line">            alpha=<span class="number">0.0001</span>,               <span class="comment"># L2正则化参数</span></span><br><span class="line">            max_iter=<span class="number">500</span>,               <span class="comment"># 增加最大迭代次数</span></span><br><span class="line">            early_stopping=<span class="literal">True</span>,        <span class="comment"># 启用早停机制</span></span><br><span class="line">            validation_fraction=<span class="number">0.1</span>,    <span class="comment"># 用于早停的验证集比例</span></span><br><span class="line">            tol=<span class="number">1e-4</span>,                   <span class="comment"># 收敛容忍度</span></span><br><span class="line">            random_state=<span class="number">42</span>,</span><br><span class="line">            verbose=<span class="literal">True</span>                <span class="comment"># 显示训练进度</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练基础模型</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        base_nn.fit(X_train_scaled, y_train)</span><br><span class="line">        base_training_time = time.time() - start_time</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上进行预测</span></span><br><span class="line">        y_pred_base = base_nn.predict(X_val_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算评估指标</span></span><br><span class="line">        base_mse = mean_squared_error(y_val, y_pred_base)</span><br><span class="line">        base_rmse = np.sqrt(base_mse)</span><br><span class="line">        base_mae = mean_absolute_error(y_val, y_pred_base)</span><br><span class="line">        base_r2 = r2_score(y_val, y_pred_base)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出基础模型评估结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n基础神经网络模型评估结果:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方误差 (MSE): <span class="subst">&#123;base_mse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;base_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  平均绝对误差 (MAE): <span class="subst">&#123;base_mae:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;base_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  训练时间: <span class="subst">&#123;base_training_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 接下来，通过网格搜索寻找最佳超参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n正在进行神经网络超参数调优...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个过程可能需要一些时间，请耐心等待...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义参数网格</span></span><br><span class="line">        <span class="comment"># hidden_layer_sizes: 隐藏层的结构，例如(50,)表示一个隐藏层有50个神经元，(50, 25)表示两个隐藏层，分别有50和25个神经元</span></span><br><span class="line">        <span class="comment"># activation: 激活函数，常用的有&#x27;relu&#x27;、&#x27;tanh&#x27;和&#x27;logistic&#x27;</span></span><br><span class="line">        <span class="comment"># alpha: L2正则化参数，用于防止过拟合</span></span><br><span class="line">        <span class="comment"># learning_rate_init: 初始学习率，控制权重更新的步长</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;hidden_layer_sizes&#x27;</span>: [(<span class="number">50</span>,), (<span class="number">100</span>,), (<span class="number">50</span>, <span class="number">25</span>)],  <span class="comment"># 不同的网络结构</span></span><br><span class="line">            <span class="string">&#x27;activation&#x27;</span>: [<span class="string">&#x27;relu&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>],                   <span class="comment"># 不同的激活函数</span></span><br><span class="line">            <span class="string">&#x27;alpha&#x27;</span>: [<span class="number">0.0001</span>, <span class="number">0.001</span>, <span class="number">0.01</span>],                   <span class="comment"># 不同的正则化强度</span></span><br><span class="line">            <span class="string">&#x27;learning_rate_init&#x27;</span>: [<span class="number">0.001</span>, <span class="number">0.01</span>]               <span class="comment"># 不同的学习率</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建一个基础模型用于网格搜索</span></span><br><span class="line">        nn_model = MLPRegressor(</span><br><span class="line">            solver=<span class="string">&#x27;adam&#x27;</span>,      <span class="comment"># 使用Adam优化器</span></span><br><span class="line">            max_iter=<span class="number">500</span>,       <span class="comment"># 增加最大迭代次数</span></span><br><span class="line">            early_stopping=<span class="literal">True</span>, <span class="comment"># 启用早停机制</span></span><br><span class="line">            validation_fraction=<span class="number">0.1</span>, <span class="comment"># 用于早停的验证集比例</span></span><br><span class="line">            tol=<span class="number">1e-4</span>,           <span class="comment"># 收敛容忍度</span></span><br><span class="line">            random_state=<span class="number">42</span>,</span><br><span class="line">            verbose=<span class="literal">False</span>       <span class="comment"># 不显示训练进度，因为GridSearchCV会训练多个模型</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用网格搜索寻找最佳参数</span></span><br><span class="line">        <span class="comment"># 注意：这里使用了较少的参数组合以减少计算时间，实际应用中可以尝试更多组合</span></span><br><span class="line">        grid_search = GridSearchCV(</span><br><span class="line">            estimator=nn_model,</span><br><span class="line">            param_grid=param_grid,</span><br><span class="line">            cv=<span class="number">3</span>,               <span class="comment"># 3折交叉验证</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,  <span class="comment"># 使用负MSE作为评分标准（越高越好）</span></span><br><span class="line">            n_jobs=-<span class="number">1</span>,          <span class="comment"># 使用所有可用的CPU核心</span></span><br><span class="line">            verbose=<span class="number">2</span>           <span class="comment"># 显示详细信息</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 执行网格搜索</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        grid_search.fit(X_train_scaled, y_train)</span><br><span class="line">        grid_search_time = time.time() - start_time</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = grid_search.best_params_</span><br><span class="line">        best_model = grid_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n网格搜索完成!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;网格搜索耗时: <span class="subst">&#123;grid_search_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用最佳模型在验证集上进行预测</span></span><br><span class="line">        y_pred_best = best_model.predict(X_val_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算最佳模型的评估指标</span></span><br><span class="line">        best_mse = mean_squared_error(y_val, y_pred_best)</span><br><span class="line">        best_rmse = np.sqrt(best_mse)</span><br><span class="line">        best_mae = mean_absolute_error(y_val, y_pred_best)</span><br><span class="line">        best_r2 = r2_score(y_val, y_pred_best)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出最佳模型评估结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n最佳神经网络模型评估结果:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方误差 (MSE): <span class="subst">&#123;best_mse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;best_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  平均绝对误差 (MAE): <span class="subst">&#123;best_mae:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;best_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 可视化基础模型和最佳模型的性能比较</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n正在生成模型性能比较图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 准备数据</span></span><br><span class="line">        models = [<span class="string">&#x27;Base Neural Network&#x27;</span>, <span class="string">&#x27;Tuned Neural Network&#x27;</span>, <span class="string">&#x27;XGBoost&#x27;</span>]</span><br><span class="line">        mse_values = [base_mse, best_mse, XGBOOST_RMSE**<span class="number">2</span>]  <span class="comment"># 由于有RMSE值，计算MSE = RMSE^2</span></span><br><span class="line">        rmse_values = [base_rmse, best_rmse, XGBOOST_RMSE]</span><br><span class="line">        r2_values = [base_r2, best_r2, XGBOOST_R2]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算RMSLE (如果基础模型和最佳模型没有RMSLE，可以简单计算一个近似值)</span></span><br><span class="line">        <span class="comment"># 注意：这只是一个简单近似，实际上RMSLE的计算需要对数转换</span></span><br><span class="line">        base_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + <span class="number">1</span>) - np.log1p(y_pred_base + <span class="number">1</span>), <span class="number">2</span>)))</span><br><span class="line">        best_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + <span class="number">1</span>) - np.log1p(y_pred_best + <span class="number">1</span>), <span class="number">2</span>)))</span><br><span class="line">        rmsle_values = [base_rmsle, best_rmsle, XGBOOST_RMSLE]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制MSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, mse_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型MSE比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;MSE Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;MSE (越低越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;MSE (Lower is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_mse_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, rmse_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型RMSE比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSE Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;RMSE (越低越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSE (Lower is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_rmse_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制R²比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, r2_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型R²比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;R² Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;R² (越高越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;R² (Higher is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_r2_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSLE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, rmsle_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型RMSLE比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSLE Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;RMSLE (越低越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSLE (Lower is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_rmsle_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 可视化预测结果与实际值的对比</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机选择100个样本点进行可视化</span></span><br><span class="line">        sample_indices = np.random.choice(<span class="built_in">len</span>(y_val), <span class="built_in">min</span>(<span class="number">100</span>, <span class="built_in">len</span>(y_val)), replace=<span class="literal">False</span>)</span><br><span class="line">        y_val_sample = y_val.iloc[sample_indices]</span><br><span class="line">        y_pred_sample = y_pred_best[sample_indices]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制散点图</span></span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        plt.scatter(y_val_sample, y_pred_sample, alpha=<span class="number">0.7</span>)</span><br><span class="line">        plt.plot([y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], [y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], <span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络模型预测值与实际值对比&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Neural Network Prediction vs Actual Values&#x27;</span>,</span><br><span class="line">                        xlabel=<span class="string">&#x27;实际卡路里消耗&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Actual Calories&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;预测卡路里消耗&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Predicted Calories&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;neural_network_prediction_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 可视化残差分布</span></span><br><span class="line">        residuals = y_val - y_pred_best</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.histplot(residuals, kde=<span class="literal">True</span>)</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络模型残差分布&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Neural Network Residual Distribution&#x27;</span>,</span><br><span class="line">                        xlabel=<span class="string">&#x27;残差 (实际值 - 预测值)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Residual (Actual - Predicted)&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;频率&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Frequency&#x27;</span>)</span><br><span class="line">        plt.axvline(x=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;neural_network_residual_distribution.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 6. 可视化残差与预测值的关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.scatter(y_pred_best, residuals, alpha=<span class="number">0.7</span>)</span><br><span class="line">        plt.axhline(y=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络模型残差与预测值的关系&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Neural Network Residuals vs Predicted Values&#x27;</span>,</span><br><span class="line">                        xlabel=<span class="string">&#x27;预测卡路里消耗&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Predicted Calories&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;残差&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Residual&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;neural_network_residual_vs_prediction.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存最佳模型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;models&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;models&#x27;</span>)</span><br><span class="line">        joblib.dump(best_model, <span class="string">&#x27;models/best_nn_model.pkl&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n最佳神经网络模型已保存到: models/best_nn_model.pkl&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存特征缩放器，用于后续预测</span></span><br><span class="line">        joblib.dump(scaler, <span class="string">&#x27;models/nn_scaler.pkl&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;特征缩放器已保存到: models/nn_scaler.pkl&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_model, best_rmse, best_r2, best_rmsle</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;神经网络模型训练和评估过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成提交文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_submission</span>(<span class="params">model, test_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用训练好的模型生成提交文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model: 训练好的模型</span></span><br><span class="line"><span class="string">        test_data (DataFrame): 测试数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成提交文件...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义可能的测试数据路径</span></span><br><span class="line">        possible_test_paths = [</span><br><span class="line">            <span class="string">&#x27;/kaggle/input/playground-series-s5e5/test.csv&#x27;</span>,  <span class="comment"># Kaggle路径</span></span><br><span class="line">            <span class="string">&#x27;test.csv&#x27;</span>  <span class="comment"># 本地路径</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试读取测试集ID</span></span><br><span class="line">        test_ids = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> possible_test_paths:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">                    test_ids = pd.read_csv(path)[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;path&#125;</span> 读取测试集ID&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;尝试从 <span class="subst">&#123;path&#125;</span> 读取测试集ID失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> test_ids <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">&quot;无法找到测试数据文件，请确保test.csv存在于正确位置&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载保存的特征缩放器</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            scaler = joblib.load(<span class="string">&#x27;models/nn_scaler.pkl&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已加载保存的特征缩放器&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到保存的特征缩放器，将创建新的缩放器&quot;</span>)</span><br><span class="line">            scaler = StandardScaler()</span><br><span class="line">            X_test_scaled = scaler.fit_transform(test_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 使用加载的scaler转换测试数据</span></span><br><span class="line">            X_test_scaled = scaler.transform(test_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        predictions = model.predict(X_test_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保预测值为非负数（卡路里不可能为负）</span></span><br><span class="line">        predictions = np.maximum(predictions, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建提交文件</span></span><br><span class="line">        submission = pd.DataFrame(&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: test_ids,</span><br><span class="line">            <span class="string">&#x27;Calories&#x27;</span>: predictions</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        submission.to_csv(<span class="string">&#x27;submission_nn.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提交文件已生成: submission_nn.csv，包含 <span class="subst">&#123;<span class="built_in">len</span>(submission)&#125;</span> 个预测结果&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示预测值的基本统计信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预测结果统计信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最小值: <span class="subst">&#123;predictions.<span class="built_in">min</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最大值: <span class="subst">&#123;predictions.<span class="built_in">max</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;平均值: <span class="subst">&#123;predictions.mean():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;中位数: <span class="subst">&#123;np.median(predictions):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;标准差: <span class="subst">&#123;predictions.std():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成提交文件过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 直接运行主函数，不进行命令行参数解析</span></span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;开始执行神经网络模型训练，与XGBoost模型性能比较...&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Starting neural network model training and comparison with XGBoost model performance...&quot;</span>)</span><br><span class="line">        main(use_sampling=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;程序执行完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Program execution completed!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;程序执行过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error during program execution: <span class="subst">&#123;e&#125;</span>&quot;</span>) </span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125435302.png" alt="image-20250521154842937"></p><p>最后还有一个报告：</p><p>太长了我截取一部分：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125654490.png" alt="image-20250528125654490"></p><p>说明了什么呢？<br>一、训练过程监控<br>Iteration 9-15<br>loss = 6.75 → 5.65：模型预测误差逐渐减小<br>Validation score: 0.996 → 0.997：模型在验证集上表现稳定优化<br>二、停止训练原因<br>连续10次迭代验证分提升不足0.0001<br>这是防止无效训练的自动保护（类似考试连续10次成绩波动小于1分时终止复习）<br>可能暗示当前模型已达到最佳状态<br>三、性能评估指标<br>指标含义当前值评价标准<br>MSE平均平方误差13.23值越小越好<br>RMSE误差的实际量级3.64可比对真实数据范围<br>MAE平均绝对误差2.16忽略误差方向更直观<br>R²模型解释数据变化的程度0.9966接近1为完美拟合<br>四、实际意义举例<br>假设预测卡路里消耗：</p><p>当真实消耗是 300千卡 时：<br>预测值可能在 300±3.64千卡 范围内（RMSE范围）<br>模型能解释 99.66% 的数据波动（R²接近满分）<br>总结<br>该模型已达到极优性能（R²&gt;0.99）。训练耗时23秒属于高效范畴，适合生产环境部署。</p><h2 id="附录">附录</h2><h3 id="代码说明">代码说明</h3><p>本项目代码分为以下几个部分：</p><ol><li><strong>calories_prediction.py</strong>：主程序，包含数据加载、预处理、探索性分析、建模和评估</li><li><strong>model_optimization.py</strong>：模型优化代码，包含超参数调优和最佳模型选择</li></ol><h3 id="算法流程图">算法流程图</h3><p>决策树流程图</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150503097.png" alt="image-20250515150503097"></p><p>随机森林：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150549532.png" alt="image-20250515150549532"></p><p>XGBoost:</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150627021.png" alt="image-20250515150627021"></p><p>线性回归：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150722380.png" alt="image-20250515150722380"></p><p>模型比较流程图</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150818433.png" alt="image-20250515150818433"></p><p>提交后排名</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515123850765.png" alt="image-20250515123850765"></p>]]></content>
    
    
    <summary type="html">预测锻炼期间燃烧卡路里的数据分析与建模</summary>
    
    
    
    <category term="机器学习" scheme="https://yjyrichard.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://yjyrichard.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络</title>
    <link href="https://yjyrichard.github.io/posts/7ca31f7.html"/>
    <id>https://yjyrichard.github.io/posts/7ca31f7.html</id>
    <published>2025-05-25T16:03:16.485Z</published>
    <updated>2025-05-25T16:34:52.034Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-从函数到神经网络">01 从函数到神经网络</h2><p>deepseek最近火出圈了<br>不过可能不少人有这样的两难困境:既不想一直看一些几分钟的快餐视频.因为不论看多少,很多问题还是搞不明白,但是又不想花太多时间从头开始学,因为整个AI的知识体系实在是太庞大了。那么我们就好好的了解一下<br>我们直接进入正题吧<br>现在你要做的唯一一件事就是清空大脑<br>忘掉所有你曾经熟悉的或不熟悉的概念<br>然后在你脑海中就只留我们这趟旅行的出发点：函数<br>后面所有一切的前提是你要相信这个世界上的所有逻辑或知识都可以用一个函数来表示<br>“Functions Describe The world~ &quot;<br>那我们只需要将现实世界抽象为符号,再设置好一些运算规则,也就是函数最后算出来结果,反过来解释现实世界就可以了,比如说输入直角三角形的两个边长,根据勾股定理就可以得到斜边的边长,再比如输入物体的质量和加速度<br>根据牛顿第二定律就可以得到物体施加的力,这就是人工智能早期的思路:<strong>符号主义</strong></p><p>但这条路走到头了,很多问题,人类实在是想不出怎么写成一个明确的函数<br>从上帝视角看,就是人类还是太菜了,比如说一个简简单单的识别一张图片是否是猫<br>对人类来说可能简单到爆炸,但是要让计算机运行一段程序来识别,那一下子就变成了一个史诗级难题,就连有着明确语法规则和词典的翻译函数,尚且没有办法做到足够丝滑,那更别说复杂多变的人类智能了,那既然不知道这个函数长什么样,怎么办呢,那就别硬找了,换个思路<br>我们先从一个简单的例子入手,比如我们知道一些X和Y的值(X:1 2 3  Y:2 4 6),我们想找到Y和X的函数关系,你有什么办法呢,有人说,这不就是Y等于2X吗,傻子都能看出来没错,这就是符号主义的思想<br>觉得世间万物都能找到背后明确的规律<br>但假如我们一开始没有找到这个规律,怎么办呢?<br>比如说下面这组数字就不能一眼看出来<br>那就用人类有史以来最具智慧的办法猜<br>我们先把这个XY放到坐标轴上，先随便猜一下，比如说函数关系就是Y等于X<br>也就是这里的W和B分别是一和零，然后我们一点点调整这个W和B<br>使得这条直线越来越贴近真实数据<br>最后呢发现完全吻合了，行就它了<br>但有的时候可能很难找到完全吻合的函数<br>那可怎么办呢?<br>没事那就简化一下问题<br>大差不差,能近似就行了,别要求那么多<br>我们的做法仍然是一点一点调整,W和B看差不多的时候就停下来,这就是现代人工智能的思路:<strong>猜和简化问题</strong><br>说白了实际上就是人类摆烂了,承认自己太菜了,找不到精确的函数了,那就找一个从结果上看大差不差的函数<br>然后连蒙带猜,逐渐逼近真实答案就好了,这种区别于早期人工智能符号主义的新思想叫做<strong>连接主义</strong><br>我们不再追求找到那个精确的函数关系，而是通过简化函数，并试图寻找一个足够接近真实答案的近似解<br>有人说这连蒙带猜的靠谱吗？一看就不是什么正路子。没错！<br>在连接主义成为主流之前<br>很多人工智能的专家也是这么想的<br>但就是这样靠连蒙带猜的办法<br>我们居然可以用很少的参数<br>轻松实现手写数字识别这样的任务<br>正是这种方式在很多地方证明了它的有效性<br>人们才开始重视起来<br>回到正题<br>刚刚我们举的例子都比较简单<br>只用直线方程就可以表示了<br>但假如数据稍稍变化一下<br>就会发现<br>不论怎么调整<br>这里的W和B好像都无法接近真实的数据<br>那这个时候就需要让这条直线弯一弯了<br>那换句话说<br>就是我们需要从原来的线性函数<br>进化到非线性函数了<br>那我们就来研究一下<br>怎么把原来这个原本线性的函数<br>变成非线性的呢<br>很简单<br>在这个函数最外层<br>再套一个非线性的运算就可以了<br>比如平方 比如sin 比如e<br>这就是激活函数<br>它的目的 就是把原本死气沉沉的线性关系给盘活了<br>变成了变化能力更强的非线性关系嗯<br>听到非线性关系的同学<br>千万不要害怕<br>常用的激活函数都简单到爆炸 但是就是能起到很好的效果<br>好了回到这个新的函数形式<br>我们之前仅仅有一个输入的变量<br>就是X<br>但实际上呢可能有很多输入<br>所以这里的每一个X都要对应一个W<br>像这样<br>再者呢有的时候只套一层激活函数<br>还是没有办法达到很好的效果<br>也就是说这个曲线弯的还不够灵活</p><p><img src="https://photo.459122.xyz/i/2591bd1808bb3ddd34a656186a798bd7.png" alt="image-20250521202432295"></p><p>那这要怎么办呢<br>很简单<br>我们把刚刚这一大坨当做一个整体<br>在此基础之上再进行一次线性变换<br>然后再套上一个激活函数<br>这样就可以无限的套娃下去了<br>那通过这样的方式<br>我们就可以构造出非常非常复杂的线性关系<br>而且理论上可以逼近任意的连续函数</p><p><img src="https://photo.459122.xyz/i/b4ad5fa4d1c6200055a05d421e90cb33.png" alt="image-20250521202516116"></p><p>当然了<br>这样写下去实在是太让人头大了<br>普通人看个两层<br>估计脑子就炸了<br>所以我们得换一种更傻瓜的更直观的形式<br>那回到最初的形式<br>我们把这样一个线性变换<br>套一个激活函数化成下面这样</p><p><img src="https://photo.459122.xyz/i/4d558a8b13286567809e0b1b0f3a983a.png" alt="image-20250521202555194"></p><p>左边是输入层<br>只有一个输入X<br>右边是输出层<br>只有一个输出Y<br>我们把这里的每一个小圈圈叫做一个神经元<br>当然这里我不建议你把它跟生物的神经元<br>先类比<br>因为他们两个其实一毛钱关系都没有<br>看似很形象<br>但实际上反而会影响理解<br>总之就是这样<br>两个圈圈一连就表示上面一个函数关系<br>那刚刚我们说输入可能有多个<br>所以对应的变化就是输入层变成了多个<br>像这样<br>我们还说可以继续在外层不断的套线性变换<br>再套激活函数<br>那么每套一层就相当于神经元水平方向<br>又扩展了一个<br>当然扩展之后呢<br>中间这一层就不再是最终的输出了<br>而是包裹在了一个很复杂的函数变换之中<br>看不到<br>我们管它叫做隐藏层<br>而整个这一大坨神经元互相连接<br>形成的网络结构就叫做神经网络</p><p><img src="https://photo.459122.xyz/i/b260dc3ea01c7336b6803e720650d0ea.png" alt="image-20250521202651748"></p><p>接下来我们看一下函数和神经网络的对应关系<br>首先有两个输入变量<br>一个是X1<br>另一个是X2<br>它们构成了输入层<br>然后X1X2进行一次线性变换<br>再进行一次激活函数<br>就得到了隐藏层a<br>这个a对应的就是上面这一大坨表达式<br>那我们把它当做一个整体<br>继续进行一次线性变换和一次激活函数<br>这就计算出了最终的输出层y<br>重新再看一下这个过程<br>从神经网络的这个图来看的话<br>似乎就像是一个信号<br>从左到右传播了过去<br>那这个过程就叫做神经网络的前向传播</p><p><img src="https://photo.459122.xyz/i/e72c2edbe2035287e97f3527205c50ab.png" alt="image-20250521202743469"></p><p>但是实际上呢就是一点点分步骤<br>把一个函数的值计算出来了而已<br>神经网络的每一层神经元都可以无限增加<br>同时呢隐藏层的层数也可以无限增加<br>那进而就可以构成一个<br>非常非常复杂的非线性函数了<br>虽然这个函数可能非常复杂<br>但是我们的目标却非常简单和明确<br>就是根据已知的一组X和Y的值<br>猜出所有这里的W和B都是多少</p><p><img src="https://photo.459122.xyz/i/e4a5dd94bac21e01407203ecfa26e4b8.png" alt="image-20250521202823501"></p><p>当然了<br>我们一开始举的例子非常简单<br>光靠肉眼法就能慢慢猜出答案了<br>但是现在有这么多参数可能就无法凭感觉猜了<br>那这要怎么办呢<br>欲知后事如何<br>且听下回分解</p><p>回顾一下这个内容非常简单<br>我们从一个最开始的信念函数开始讲起<br>早期的人工智能<br>相信可以找到精确的函数来表示一切<br>但因为这个世界实在太复杂了<br>所以人们就放弃了转向寻找一个足够接近真实答案的近似解<br>那我们通过寻找一个线性关系来举例,如何去猜测W和B的值<br>后来发现线性关系太过简单,不足以描述更复杂的关系,于是引入了非线性的激活函数<br>通过线性变换和非线性激活函数的不断组合<br>和套娃可以表达很复杂的关系,但是呢写成函数看太恶心了,所以就化成了神经网络这种形式<br>那恭喜你<br>从函数到神经网络的这条路已经被你搞懂了<br>剩下的所有乱七八糟的知识<br>都仅仅是为了算出这个W和B而已</p><h2 id="02-如何计算神经网络的参数">02 如何计算神经网络的参数</h2><p>我们直接进入今天的主题<br>看看如何计算这个W和B<br>那我们先别搞那么复杂的非线性函<br>先从最简单的一个线性函数入手<br>首先第一个问题就是什么样的W和B是好的？<br>答案其实很简单<br>我们的目标是让这个函数的输出结果尽可能地接近真实数据<br>因此好的W和B就是能够使得函数的尽可能拟和真实数据的那一组参数<br>那接下来第二个问题<br>什么叫拟合得好<br>先别想那么多</p><p><img src="https://photo.459122.xyz/i/812626a99c522fae808f652147eb7a7a.png" alt="image-20250521203531802"></p><p>从直觉上理解这条线就拟合得挺好<br>左边的这个就拟合得不好<br>那第三个问题就自然浮出水面了<br>怎么用数学语言表达<br>刚刚我说的这个直觉上的理解呢<br>很简单<br>我们可以在每个数据点上画一条竖<br>使其与拟合的直线相交<br>由于这里的每个点的纵坐标<br>表示的就是真实数据<br>我们用Y来表示落在直线上的点<br>表示预测数据<br>我们用y hat来表示</p><p><img src="https://photo.459122.xyz/i/31b5289a3eb30bddd10160004a8f9e05.png" alt="image-20250521203624697"></p><p>那么这条线段的长度<br>就是真实值与预测值的误差<br>为了评估整体的拟合效果<br>我们可以将所有这些线段的长度加<br>这样呢就得到了预测数据与真实数之间的总的差异<br>也就可以反映当前这个线性函数与真实数据的拟合度</p><p><img src="https://photo.459122.xyz/i/2e830b0c074b9a19f038d9f2091b1434.png" alt="image-20250521203704257"></p><p>而这个表示预测数据与真实数据误<br>我们叫它损失函数<br>我们着重看一下这个公式<br>这个绝对值有些讨厌<br>数学优化时不太友好<br>我们做数学题时<br>往往最讨厌碰到这种带绝对值的问<br>要各种分类讨论啊<br>想想就头疼<br>所以我们改造下<br>用平方来代替<br>一来呢解决了绝对值不平滑的问题<br>二来呢也放大了误差较大的值的影<br>然后我们再根据样本的数量平均一下<br>消除样本数量大小的影响<br>那最终得到这个公式就叫做均方误差</p><p><img src="https://photo.459122.xyz/i/dee5f4ea2a4986b563822638db9f57a3.png" alt="image-20250521203752879"></p><p>而均方误差就是用来表示损失函数一种<br>我们把损失函数记作L那从参数的视<br>它就是一个关于W和B的一个函数</p><p><img src="./%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E3%80%90%E7%A7%91%E6%99%AE%E5%90%91%E3%80%91.assets/image-20250521203819061.png" alt="image-20250521203819061"></p><p>好先不要过于陷入这个公式的细节<br>那还记得我们要干啥</p><p><img src="https://photo.459122.xyz/i/df55c72c143d616a4ec047a1629e4de4.png" alt="image-20250521203853848"></p><p>损失函数表示的是真实值与预测差距<br>而我们的目的呢就是让这个误差最小的w和b<br>也就是找到可以让这个损失函数L最小<br>那个W和B那怎么求解呢<br>自然就是用我们初中就学过的<br>让其导数等于零求极值点的过程<br>我们先不上公式<br>通过一个具体的例子来说<br>假设我们就四个样本数据<br>就是简简单单的11223344这样<br>然后我们的线性模型也简单点<br>把B去掉<br>只保留一个W<br>其实呢就是一个简单的经过原点的一条直线Y等于WX这个时候我们展开一下损失函数<br>把y heat值代入进来<br>把求和符号展开<br>然后再把上面这组XY的数据带进来<br>平方展开再化简好<br>那化简之后我们就可以清晰的看到<br>这就是一个简简单单的关于W的一个<br>接下来对W求导<br>再让其导数等于零<br>就可以求出W等于一了</p><p><img src="./%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E3%80%90%E7%A7%91%E6%99%AE%E5%90%91%E3%80%91.assets/image-20250521204022426.png" alt="image-20250521204022426"></p><p>代入回原直线函数<br>此时Y等于X就是让损失函数最小<br>也就是最拟合真实数据的那条直线</p><p>回过头再来看一下这个损失函数<br>它实际上呢是一条开口向上的抛物<br>刚刚其实就在寻找这个最低点<br>采用的办法就是让导数等于零<br>不过我们此时的模型是简单的线性函数<br>而且只保留了W而忽略了B<br>而如果此时把B算进来<br>那就需要求关于W和B两个变量的<br>损失函数的最小值了<br>这个时候损失函数的图像就是一个三维图像是一个开口向上的这个碗状形状</p><p><img src="https://photo.459122.xyz/i/e791c7d75a305bc04965139af2642931.png" alt="image-20250521204113092"></p><p>我们的目标同样也是找到这个二元函数最小值<br>所对应的那个W和B<br>而多元函数求最小值的问题就不再是倒数了<br>而是要让每个参数的偏导数等于零<br>偏导数在这里就不展开了<br>不过可能不少人学偏导数的时候都<br>其实很简单<br>对W求偏导<br>就是把B当作常数和一元函数求导就<br>在三维图像中就是这样<br>相当于只看到这个切面上的二维函<br>同样对于B也是如此。<br>那么刚刚这个通过寻找一个线性函<br>来拟和X和Y的关系<br>就是机器学习中最基本的一种分析方法：<strong>线性回归</strong><br>回到之前讲的神经网络<br>神经网络是一个通过线性函数和非线性激活函数不断组合形成的一个非常复杂的非线性函数<br>那么它对应的损失函数则是更复杂的非线性函数<br>往往呢不能像刚刚那样通过让导数等于零直接求出最小值<br>那怎么办呢？<br>人们的解决办法也非常的简单粗暴<br>就是一点点试<br>具体怎么试呢？<br>假如此时W和B的值均为五<br>损失函数计算结果是十<br>我们来看一下<br>尝试把W增加一个单位变成六<br>再次计算损失函数<br>发现结果是九<br>那就说明W的这次调整是对的<br>让损失函数变小了<br>再尝试把B增加一变成六<br>发现损失函数增加了二<br>变成了11<br>说明B的增大会让误差变大<br>那我们就反过来把B往小的调整<br>让损失函数继续变小<br>那如此循环往复不断调整就可以了<br>总之我们每次都看下当前状况<br>调整W或B对损失函数的影响<br>然后每次呢把参数向着让损失函数</p><p><img src="https://photo.459122.xyz/i/0873e5a9500bf7c4f1084b7eb6d2787c.png" alt="image-20250521204322611"></p><p>那个方向调整一点点<br>直到让损失函数足够小，那具体怎么调？</p><p>回到最初始的状态<br>W变化一点点，使得损失函数会变化多少？<br>这其实就是损失函数对W的偏导数<br>对B来说同样也是如此<br>而我们要做的就是<br>让W和B不断往偏导数的反方向去变<br>那具体变化的快慢呢<br>再增加一个系数来控制<br>我们叫它学习率</p><p><img src="https://photo.459122.xyz/i/f25c33cbf0aba3f8acc8a4aaeab96541.png" alt="image-20250521204416292"></p><p>这些偏导数所构成的向量就叫做梯度</p><p><img src="https://photo.459122.xyz/i/05bfff2a58aeabff84e6e08442ed5e1c.png" alt="image-20250521204500187"></p><p>而不断变化W和B让损失函数逐渐减小的一个过程，进而求出最终的W和B，这个过程就叫做梯度下降<br>嗯不少材料在介绍梯度下降时<br>可能经常会用到人们下山这个过程<br>但我倒是觉得直接看公式也挺直观<br>没必要好了<br>这个公式很好理解<br>但是关键就在于这个偏导数该怎么求？<br>在之前的线性回归问题中<br>偏导数就是一个一元二次函数<br>求导非常简单<br>但是在神经网络中<br>函数本身就是一个复杂到变态的非线性函数<br>那更别说损失函数了<br>直接求导可能就不太好求了<br>那怎么办呢<br>其实也很简单<br>虽然神经网络整体所代表的函数很复杂<br>但是层与层之间的关系却是非常简单<br>我们就用上面这个麻雀虽小<br>但五脏俱全的一个简单的神经网络来举例子<br>只有一个输入和一个输出<br>而且中间的隐藏层也只有一个神经元<br>首先我们根据输入X的值计算出隐藏层a的值<br>这里的G就是随便一个激活函数<br>比如说sigma的无所谓<br>然后呢再根据A的值计算出输出层y hat<br>然后再根据y hat的值以及真实值Y计算出损失函数<br>那这里损失函数就用均方误差了<br>而且由于只有一个输出数据<br>所以说我把求和符号也省去了<br>这个神经网络结构中一共有四个参<br>要通过梯度下降的方式逐渐求解<br>那之前也说了<br>关键问题就是求出L对他们的偏导数<br>那我们直接拿最难的w1来举例<br>如何求出L对W的偏导数呢<br>其实很简单<br>从偏导数要表达的意思出发一下就能想明白<br>其实我们就想看w1变化一点点<br>会使得L变化多少了<br>那我们就先看W1变化<br>一个单位会使得A变化多少<br>再看看a变化一个单位会使得y head<br>然后再看y hat的变化<br>一个单位会使L变化多少<br>每一个都是一个简单的偏导数<br>那把这三者乘起来<br>就知道W变化一个单位会使得L变化多少了</p><p><img src="https://photo.459122.xyz/i/066be2071a653e646e97431e57108646.png" alt="image-20250521204746002"></p><p>如果实在想不明白的话<br>可以联想一下齿轮怎么计算</p><p><img src="https://photo.459122.xyz/i/53efd157167bf7998edb304d4ed889c9.png" alt="image-20250521204830024"></p><p>第一个转一圈会使得最后一个齿轮<br>其实就是乘起来吧<br>那这种偏导数的计算方式就叫做链式法则<br>其实就是微积分中的复合函数求导<br>由于我们可以从右向左依次求导<br>然后逐步更新每一层的参数<br>直到把所有的神经网络的参数都更新一次<br>在计算前一层时用到的一些偏导数<br>后面也会用到<br>所以说不用计算那么多<br>而是让这些值从右向左一点点传播<br>我们把这样一个过程形象地称之为<strong>反向传播</strong><br>那结合之前的知识<br>我们通过前向传播<br>根据输入X计算出输出Y<br>然后再通过反向传播计算出损失函树<br>关于每个参数的梯度</p><p><img src="https://photo.459122.xyz/i/de8a083980b8a229087678bca97fecf0.png" alt="image-20250521204925053"></p><p>然后每个参数都向着梯度的反方向<br>这就构成了神经网络的一次训练<br>而神经网络经过多轮这样的训练<br>里面的参数都一点一点的变化<br>直到让损失函数足够小</p><p><img src="https://photo.459122.xyz/i/febf9188f23760a3962fedf5a5cda9c6.png" alt="image-20250521204944396"></p><p>也就是找到了我们想要的那个函数<br>虽然听起来很简单<br>但是面对真实问题时<br>往往却存在着各种各样的难题<br>具体会遇到什么样的难题<br>又该采取什么样的办法去解决呢<br>欲知后事如何<br>且听下回分解<br>回顾一下：<br>为了找到一组W和B来拟合真实数据<br>我们定义了损失函数<br>并且通过制定让损失函数最小化这<br>来计算W和B的值<br>接下来我们通过简单的线性回归问题<br>可以直接让损失函数的导数等于零<br>一步就求到W和B<br>但神经网络的复杂性<br>让我们没有办法直接得到W和B的解<br>只能通过一点点往偏导数的反方向<br>调整每个参数来慢慢逼近真实答案<br>这个方法就叫做梯度下降<br>而由于神经网络的层数较多<br>直接求偏导数非常困难<br>因此可以逐层求导<br>间接得到最终的偏导数<br>这就是链式法则<br>而通过链式法则求导并逐层更新参<br>这个过程就叫做反向传播<br>那不断的前向传播，反向传播，这就构成了神经网络的训练过程</p><h2 id="03-调教神经网络怎么就这么难呢？">03 调教神经网络怎么就这么难呢？</h2><p>我们知道神经网络的本质就是线性变换套上一个激活函数不断组合而成的一个非常复杂的非线性函数，并且巧妙地通过梯度下降一点一点地计算出神经网络中一组合适的参数，那这样看起来其实不是神经网络只有足够大，什么问题都能解决了？</p><p><img src="https://photo.459122.xyz/i/91e559774a4b634c08277ca28d4ac16a.png" alt="image-20250521205132364"></p><p>理论上是这样。</p><p>这一幅图你觉得那边拟合的好呢?</p><p><img src="https://photo.459122.xyz/i/1f0f11b4aab13e4f4539818886aa4a13.png" alt="image-20250521205418285"></p><p>如果从损失值最小来看，右边的好，但是根据直觉来看右边这个好像好的有点太过了。结果可能是只适合训练数据，对于新数据的预测反而不如左边的准</p><p><img src="https://photo.459122.xyz/i/1afada9fb751cc38cd4f8e43a1f6ce2c.png" alt="image-20250521205559524"></p><p>这种在训练数据上表现得很完美但是在测试数据上表现得很糟糕的现象我们叫它过拟合。而在没见过的数据上的表现能力我们叫它泛化能力。那为什么会过拟合呢？是因为训练数据本身是一个很简单的规律，但是模型太复杂了，把那些噪声和随机波动也给学会了，这该怎么办？自然就是简化一下模型的复杂度了，比如这个案例中你使用一个非常复杂的神经网络来训练效果甚至不如线性模型好，还可以增大数据量，这样模型也会变得相对简单了，但是有的时候我们确实无法手机或者说懒得收集更多的数据，怎么办？那就在原有的数据中创造更多的数据，比如在图像处理中，我们可以对图像进行旋转，翻转，裁剪，加噪声等操作</p><p><img src="https://photo.459122.xyz/i/968762c875ba281d9b9379f91bade928.png" alt="image-20250521210101561"></p><p>创造出更多的新的训练样本，这就叫做数据增强。</p><p>这样不仅仅能够产生更多的数据还刚好训练了一个让模型不因为输入的一点点小的变化而对结果产生很大的波动，这就是增强了模型的鲁棒性（Robostness）.</p><p>刚刚是从数据和模型的本身入手来防止过拟合。那有没有可能从训练过程入手组阻止过拟合的发生呢？</p><p>其实训练过程就是不断调整参数的过程，只要让参数不要过分的朝着过拟合的方向发展就可以了。</p><p><img src="https://photo.459122.xyz/i/8adc4dc6a032084207201454761b3b5f.png" alt="image-20250521210351147"></p><p>有一个简单到你都不相信的方法就是提前终止训练过程，差不多就行了，但是这种方法还是太粗糙了。那有没有什么方法可以直接抑制参数的野蛮增长呢？非常简单，你想想参数是怎么被训练出来的，是不是通过让参数往损失函数变小的方向不断调整，也就是梯度下降，那我们可以在损失函数中把参数本身的值加上去，这样在参数往调大了调时，如果让损失函数减小的没有那么多，导致新的损失函数反而是变大了，那么此时的调整就是不合适的，因此一定程度上一直了参数的野蛮生长</p><p><img src="https://photo.459122.xyz/i/dde4cf57892788f7bb15be7c7d3f3181.png" alt="image-20250521210757072"></p><p>除了可以用参数的绝对值之和之外，我们还可以用参数的平方和，这样参数大的时候抑制能力就更强了</p><p>我们把这一项叫做惩罚项，把通过这种向损失函数中添加权重惩罚项，抑制其野蛮增长的方法叫做正则化</p><p>上面绝对值相加的叫L1正则化，下面平方和相加的叫L2正则化</p><p>然后和之前梯度下降时增加学习率控制下降力度一样我们也增加一个参数来控制惩罚项的力度，我们叫它正则化系数，而这些控制参数的参数，我们以后统称为超参数</p><p>那为什么简简单单的公式叫什么L1正则化，L2正则化呢？因为绝对值之和叫做L1范数，而平方和的平方根叫做L2范数，这是向量空间中范数的概念</p><p><img src="https://photo.459122.xyz/i/4a91e7f2a427103a15a541d48e378f76.png" alt="image-20250521211051814"></p><p>总之这些参数都只是为了抑制参数的野蛮增长罢了</p><p>除了这种方式以外还有一种简单到发指但是就是效果显著的方法</p><p>想想看，我们的目的时为了防止让模型过于依赖某几个参数</p><p>举个形象的例子，加入神经网络的参数是一支军队，里面有好多普通士兵，但是其中混入了一支战斗力极强的战士</p><p>如果每次训练都有战士主导战局，那么你会误认为这整体战斗力很强，一旦遇到特殊情况那就会败北，这就是过度依赖少量参数的典型表现，那怎么办呢？我们可以在训练的过程中每次都随机丢弃一部分参数让战士偶尔缺席，这样模型就必须习惯去依赖大部分士兵从而避免了在某些关键参数上过度依赖的风险，虽然听起来玄学但是确实十分有效，这种方法叫dropout,这个方法是大名鼎鼎的神经学之父辛顿提出的。</p><p>除此之外模型还会遇到其他问题比如梯度小时，也就是网络越深，梯度反向传播时会越来越小导致参数更新困难，梯度爆炸，梯度数值越来越大，参数的调整幅度失去了控制。收敛速度过慢，可能陷入局部最优或者来回震荡，计算开销过大，数据规模量太庞大了，每次完整的前向传播和反向传播都非常耗时。每个问题，人们都想了各种办法来解决。比如用梯度裁剪来解决梯度的更新过大，用合理的网络结构比如残差网络来防止深层网络的梯度衰减，用合理的权重初始化和将输入数据归一化让梯度分布更平滑，用动量法，RMSprompt,Adam等自适应优化器来加速收敛，减少震荡，用mini-batch把巨量的训练数据分割成几个小批次来降低单次的计算开销，这里的每个概念展开都是一个全新的世界</p><p><img src="https://photo.459122.xyz/i/de8d52fbe515983381de48df5c4414d6.png" alt="image-20250521221946107"></p><p>但是它们都是为了让训练过程更好罢了</p><p><img src="https://photo.459122.xyz/i/7eb4772f2dbf405670651c1591aa4d56.png" alt="image-20250521223926584"></p><h2 id="04-神经网络中永远也搞不明白的矩阵和CNN">04 神经网络中永远也搞不明白的矩阵和CNN</h2><p>我们直接进入主题<br>一个最简单的神经网络，就是Y等于WX加B套上一个激活函数<br>那如果输入变成了两个，那么就是两个W和两个X<br>如果输入变成了三个，那么就是三个W和三个X<br>以此类推</p><p><img src="https://photo.459122.xyz/i/1efe063a04a45f05abace4262afb9110.png" alt="image-20250525231901089"></p><p>我就不写了<br>那如果输出变成两个<br>再来一行公式就可以了<br>那这里的W的标号保证不一样<br>能区分开就行</p><p><img src="https://photo.459122.xyz/i/eafecd482f4f811785444ab0c25ab9fd.png" alt="image-20250525231930237"></p><p>比如说这个W12<br>就表示第一个神经元的第二个参数<br>好你发现一个问题没有<br>就是这样写下去的话<br>太麻烦了<br>要是神经元多了的话，公式密密麻麻的，没有数学的简洁之美<br>那这怎么办呢？<br>别急<br>现在我们的注意力放在这个公式上<br>注意看啊，我要变形了<br><img src="https://photo.459122.xyz/i/c068ef9b34518adf8c6ca9e7f34fdde1.png" alt="image-20250525232007741"></p><p>其实就是把加减乘除替换成了矩阵运算的写法<br>这里先忽略一下激活函数哈<br>重点看中间这个矩阵的乘法<br>矩阵乘法很简单<br>我们错个位<br>就是这一行W的元素<br>分别和X这一列的元素相乘<br>并求和<br>得到的结果呢放到这里<br>那同样对于第二行也是如此</p><p>回到刚刚<br>我们现在把这些矩阵都替换成新的字母<br>这里我们用大写的Y表示<br>这里用大写的W表示<br>这里用大写的X表示<br>这里用小写的B来表示</p><p><img src="https://photo.459122.xyz/i/c96b16970572eea06f6e0617e5fc4c40.png" alt="image-20250525232057332"></p><p>那么整个公式就化简成了这个样子</p><p><img src="https://photo.459122.xyz/i/12456247d70ef52fac547b1b41ce3725.png" alt="image-20250525232108728"></p><p>不过现在还有个问题<br>就是神经元的层并没有体现在公式中<br>那假如神经元再多几层怎么办呢？<br>那我们此时抽象一下<br>也别分什么XY和隐藏层了<br>就通通用字母a来表示<br>那输入层就当做第零层<br>用A中括号零来表示<br>以此类推</p><p>那么第一层的公式就是这样<br>第二层的公式就是这样<br>第三层的公式就是这样</p><p><img src="https://photo.459122.xyz/i/238a079d3c1e56019b35ce4afc03d634.png" alt="image-20250525232138692"></p><p>我们用L表示在第几层<br>那么最终的通用公式就是这个样子</p><p><img src="https://photo.459122.xyz/i/6bcbe942a3153b2283bdb33cae9352ab.png" alt="image-20250525232157117"></p><p>每一层的神经元的值都是上一层的函数<br>那我们费了这么大劲<br>简化这个公式有啥用呢<br>一方面是公式简单了<br>也更抽象了,有利于我们进一步讨论更深的问题,另一方面是麻烦的加减乘除替换成了矩阵运算<br>可以充分利用GPU的并行计算的特性,加速神经网络的训练和推理过程,这就不仅仅是秀写法上的一个操作了<br>那回到这个公式和神经网络结构,可以看到这里的每个神经元<br>都与前一层的所有神经元相连,当然我们一直认为这是理所应当的<br>但它其实只是神经网络结构中的一种叫做全连接层</p><p><img src="https://photo.459122.xyz/i/58269cd4e857a66f36a58b96774f33c1.png" alt="image-20250525232307356"></p><p>也就是说还有其他不是全连接的结构吗?<br>别急<br>我们先来看一下全连接层的问题<br>假如我们现在要做个图像识别的模型<br>假如输入是个30×30的灰度图像<br>那么平铺展开后<br>喂给输入层的就是900个神经元<br>假如下一层的神经元的数量是1000个<br>那么这个全连接层的总参数量就达到了90万</p><p><img src="https://photo.459122.xyz/i/6fb023fc608ce1092d29a3f081b1e934.png" alt="image-20250525232333495"></p><p>这太大了<br>另外呢这里仅仅是把输入的图片平铺展开<br>无法保留像素之间的空间关系<br>图片稍稍动一下<br>可能所有神经元都和原来完全不同<br>但从图片整体上看<br>可能仅仅是平移或者变暗<br>这就是不能很好地理解图像的局部模式<br>那怎么办呢?<br>我们随便在这个图像中取一个3×3的矩阵<br>这里面的数值就是颜色的灰度值<br>然后我们再来一个固定的矩阵<br>比如这样把这两个矩阵进行这样的一个运算<br>46×0加上75×-1<br>加上82×0<br>也就是把每个对应位置处的值相乘并求和</p><p><img src="https://photo.459122.xyz/i/38b4bde711496706697aa2aee85d21d3.png" alt="image-20250525232424806"></p><p>最终得到一个值是250<br>然后我们再选取一个地方再次进行这样的运算<br>最终我们把这种运算方式遍历划过原图像的每个地方<br>得出的数值形成一个新的图像</p><p><img src="https://photo.459122.xyz/i/37a3574870f5220b48db80a7262eae4b.png" alt="image-20250525232443112"></p><p>那这种方式叫做卷积运算</p><p><img src="https://photo.459122.xyz/i/6873a4912b1d526ac57e2ed0021c5482.png" alt="image-20250525232513024"></p><p>而刚刚我们这个固定的矩阵叫做卷积核<br>卷积核不是一个新的概念<br>在传统的图像处理领域<br>卷积核是已知的<br>可以达到一定的图像处理效果<br>比如模糊效果<br>浮雕效果<br>轮廓效果以及刚刚的锐化效果等等<br>就是PS的常规操作嘛<br>那在深度学习领域<br>卷积核的值就是未知的<br>和神经网络中的其他参数一样<br>是被训练出来的一组值<br>那回到刚刚的经典神经网络结构<br>其实就是把其中一个全连接层替换成了卷积层<br>这就大大的减少了权重参数的数量<br>同时还能更有效地捕捉到<br>图片中的一些局部特征<br>可谓是一举两得<br>而从公式上看</p><p><img src="https://photo.459122.xyz/i/b65e817439d1f23265554798ce6f20dd.png" alt="image-20250525232602503"></p><p>其实就是把原来的矩阵的标准乘法及差乘替换成了卷积运算<br>那接下来我们的神经网络<br>就不用再画成一个一个的小圈了<br>而用更抽象更简洁的图来表示<br>像这样在图像识别的神经网络结构中<br>除了卷积层外<br>通常还有池化层作用<br>是对卷积层后的特征图像进行降维减少计算量同时呢保留主要特征<br>这里的卷积层,池化层,全连接层都可以有多个<br>而这种适用于图像识别领域的神经网络结构</p><p><img src="https://photo.459122.xyz/i/cd0d2a1a307e08cb805499aec7251c5c.png" alt="image-20250525232649478"></p><p>就叫做卷积神经网络CNN<br>之前我们展示的手写数字识别的CNN可视化<br>就是这样的网络结构,最开始是一个输入层<br>我们写了一个数字六,然后是卷积层,池化层,再卷积层,再池化层<br>然后第一个全连接层<br>第二个全连接层<br>最终输出识别出是六</p><p><img src="https://photo.459122.xyz/i/46419b50fcc116cf171b8b464eab24bb.png" alt="image-20250525232726717"></p><p>而使用卷积神经网络非常方便可视化<br>我们可以看到训练过程中所训练出的卷积核<br>从原始图像中提取了什么样的特征<br>虽然这些都是中间隐藏层的事情<br>但是却能神奇地观察出一些实际意义<br>这也是卷积神经网络让人着迷的地方<br>好我们来回顾一下今天讲的内容<br>非常简单<br>我们把之前一个一个加减乘除很麻烦的写法<br>写成了矩阵的形式<br>一是为了方便讨论<br>比如刚刚介绍CNN的时候<br>就从公式直接看出<br>就是差乘变成了卷积运算而已<br>二是可以更好的利用GPU的并行计算提高效率<br>那接下来我们把之前默认的那种<br>所有神经元都连起来的形式叫做全连接<br>进而呢通过图像识别这个任务<br>意识到了全世界的局限性<br>接下来我们通过卷积运算<br>代替了全连接层的标准矩阵乘法<br>一方面使得训练参数大大的减少<br>另外一方面也更有利于提取图像的局部特征<br>这就解决了我们一开始说的问题<br>最后我们把神经网络结构再次抽象一个层次<br>原来我们画的各种小圈圈<br>在更高的视角下<br>其实就是个全连接层而已<br>那么这些全连接层,卷积层,池化层的组合就构成了卷积神经网络CNN<br>当然卷积神经网络CNN也只是神经网络结构中的一种<br>而且呢它有一个致命的局限性就是它主要用于静态数据比如说图片<br>那么如果我们要处理的是时间序列,文本,语音视频等动态数据<br>就需要引入另外一种神经网络结构了,它可以说是现在我们大语言模型的鼻祖了<br>好我们用了四个视频的内容<br>终于把前面所需要铺垫的知识<br>从头到尾给推出来了<br>那下个视频开始<br>我们就可以坐着我们这几个视频搭载的火箭<br>冲刺到现代AI技术的最前沿<br>请大家做好战斗准备</p><h2 id="05-语言居然可以被计算出来？从-RNN-到-Transformer">05 语言居然可以被计算出来？从 RNN 到 Transformer</h2><p>给你几个字<br>让你生成下一个字<br>给你一句话<br>让你判断每个词的褒贬<br>如果把这些设计成一个神经网络的函数<br>来实现这个功能<br>你该怎么做呢？先别急<br>要想把这些文字作为输入参数<br>首先得把这些文字变成计算机能够识别的数字<br>这个过程就叫做编码<br>那具体怎么编码呢<br>有两种极端的方式<br>一种是只用一个数字标识来代表每个词<br>比如1代表我<br>2代表你3568代表地球等等<br>你的词表有多大<br>数字标识的范围就要有多大<br>这样的缺点非常明显<br>就是维度太低了<br>相当于一个一维的向量<br>而且数字标识本身对语言理解没有任何意义<br>无法灵活地衡量词和词之间的相关性<br>那另一种极端的方式是<br>准备一个超级超级大的向量<br>每个词只有向量中一个位置是1<br>剩下的都是零</p><p><img src="https://photo.459122.xyz/i/8345cb6afedbd2d5f8300996afb0abcb.png" alt="image-20250525233554105"></p><p>这种编码方式叫做one hot<br>翻译过来叫独热编码<br>one hot的缺点也非常明显<br>就是维度太高了<br>而且非常稀疏<br>假如此表中有10万个词<br>那么这就是一个10万维度的向量<br>而且每个向量之间都是正交的<br>所以词和词之间仍然无法找到相关性<br>那如果把向量中每个位置都看作一个特征的话<br>这里就相当于每个特征都是非常死板的<br>是或者否维度太高不好<br>维度太低也不好<br>那简单了<br>弄一个不高不低的就好喽<br>这种方式就叫做词嵌入 word embedding<br>通过磁嵌入的方式所得到的磁向量<br>维度不高也不低<br>每个位置数依然可以理解为某一个特征<br>只不过这是训练出来的<br>不是我们人定的</p><p><img src="https://photo.459122.xyz/i/1203e73a5c262a3f99d645e4bf1b1055.png" alt="image-20250525233700713"></p><p>所以特征是什么<br>可能我们人类完全无法理解<br>那为什么这种方式可以表示词和词之间<br>语义上的相关性呢?<br>我们可以用两个向量的点击或余弦相似度<br>来表示向量之间的相关性<br>进而表示两个词语之间的相关性</p><p><img src="https://photo.459122.xyz/i/1bf3194df3b5895cd42f29d40af0f7a6.png" alt="image-20250525233725719"></p><p>这就将自然语言之间的联系<br>转化为了可以用数学公式计算出来的方式很关键<br>同时一些数学上的计算结果<br>也能反映出一些现实中很神奇的解释<br>比如一个训练好的词嵌入矩阵<br>可能会使得桌子减去椅子等于鼠标减去键盘</p><p><img src="https://photo.459122.xyz/i/67660d7c3638b925ae9b631cc4688efa.png" alt="image-20250525233806254"></p><p>你可以暂停下来<br>体会一下这里面蕴含的有趣的深意<br>把所有词向量组成了一个大矩阵<br>这个大的矩阵就叫做嵌入矩阵<br>这里的每一列就表示一个词向量<br>像刚刚说的这个矩阵<br>不是我们人类手动给每个词赋值而形成的<br>是通过深度学习的方法训练出来的<br>比如比较经典的方式就是word2back<br>这里就不展开讲解了<br>你就当做已经有了一个这样的嵌入矩阵<br>每一个可能的词语<br>都可以从这里找到对应的词向量<br>这些词向量的维度非常高<br>所以它所在的空间的维度也非常高<br>这个空间就叫做潜空间<br>我们人类对二维空间很好理解<br>最多到三维空间也还行<br>再往上就想象不出来了<br>那么这些词在高维前空间中的相对位置关系<br>虽然可以通过点击或余弦相似度算出来<br>但最好有一种直观的方式<br>能让我们亲眼可视化的看到<br>哪怕不那么准确也行<br>于是便有了一些方法将这个潜空间降维<br>投影到二维或三维的坐标系中</p><p><img src="https://photo.459122.xyz/i/594e48da793c229b6a8c568994ff9920.png" alt="image-20250525233937998"></p><p>来直观的可视化不同词语之间的距离<br>还是非常有趣的</p><p><img src="https://photo.459122.xyz/i/cf1b2e5ac33f1cfae5ee9f86b01eebdb.png" alt="image-20250525233957662"></p><p>好了<br>有关词嵌入和嵌入矩阵<br>我们就先聊到这里<br>这时每个词都可以编码成向量<br>然后送到神经网络输入端的神经元中了</p><p><img src="https://photo.459122.xyz/i/a72b71c4adbf6dbb91845526d08a45c2.png" alt="image-20250525234017983"></p><p>我们再来看看最初的需求：输入一句话输出每个单词的褒贬性</p><p><img src="https://photo.459122.xyz/i/37b2d7ff2ddd37ab18b30a02720f8d58.png" alt="image-20250525234033257"></p><p>这里有12345  5个词<br>通过词嵌入<br>把每个词变成一个300维的磁向量<br>那么输入端就要一共有1500个神经元</p><p><img src="https://photo.459122.xyz/i/9e0b1c78876ee27669f7f94c85f95f02.png" alt="image-20250525234106849"></p><p>这样行不行呢<br>当然可以<br>但是有两个问题<br>一个是输入层太大了<br>而且会随着一句话中词语数量多少而变化<br>是变长的，不确定的<br>另一个是无法体现词语的先后顺序<br>仅仅是把它们非常生硬的平铺展开成了一个非常大的向量，一股脑地送入了输入层<br>这就好比我们之前说的图像识别领域<br>把一张图片的所有像素点展开成一个大向量<br>一股脑地送入输入层<br>一个道理<br>这样既增加了神经元的个数<br>又不能很好地抽象出特征和关联<br>有点费力不讨好<br>那在CNN中<br>我们是通过卷积操作提取了图像的特征<br>那么在自然语言处理领域<br>我们可以通过什么办法？<br>既能解决词语之间的先后顺序问题<br>又能降低输入层的参数量呢？<br>首先我们还是用经典的神经网络<br>但不要输入一句话<br>而是输入一个词<br>输出就是这个词是褒义还是贬义<br>当然这里的字母都表示矩阵就不再赘述了<br>这时假设第二个词来了<br>也是经过一样的神经网络，很简单<br>那此时我们用尖括号表示是第几个词<br>这样就有了顺序关系<br>那现在的问题是<br>第二个词的计算过程<br>完全没有让第一个词的任何信息参与进来<br>那这该怎么办呢</p><p><img src="https://photo.459122.xyz/i/6ac79c6a1dc41584acf94178d83637fc.png" alt="image-20250525234241853"></p><p>答案已经写在脸上了<br>那就让他参与进来就好喽<br>那可以这样<br>我们让第一个词经过非线性变换后<br>别急着直接输出<br>结果先输出到一个隐藏状态H1<br>然后再经过一次非线性变换得到输出Y1<br>接下来这个隐藏状态H1的值和第二个词X2<br>一起参与运算<br>那同理对第二个词的流程也是一样<br>先输出一个隐藏状态H2<br>然后继续往下传递<br>那这样的话呢<br>前面的词的信息就这样不断的往下传递</p><p><img src="https://photo.459122.xyz/i/0c57e9eda103fd024b4f3dadcf245a62.png" alt="image-20250525234322191"></p><p>直到传到最后一句话的最后一个词那里<br>这样就把一句话中<br>所有的词的信息都囊括进来了<br>当然这里的W就要有所区分了</p><p><img src="https://photo.459122.xyz/i/18ce7b083ecc01d4492d9f90b0c64204.png" alt="image-20250525234355487"></p><p>有专门针对磁向量的WXH矩阵<br>有专门针对隐藏状态的WHH矩阵<br>以及最终计算输出结果的WHY矩阵<br>那同样对于偏执向B也是如此<br>把这个图简化一下<br>那这就是循环神经网络RNN</p><p><img src="https://photo.459122.xyz/i/6dc595a7e4d8a35ad8b5db41a3b3b8f2.png" alt="image-20250525234409069"></p><p>当然了<br>还会有个图这样画<br>那这个RN模型就具备了理解词和词之间<br>先后顺序的能力<br>那这样就可以解决<br>判断一句话中各个单词的褒贬词性<br>给出一句话<br>不断生成下一个字<br>以及翻译等多种自然语言处理的工作了<br>那如果你还有些懵的话<br>我们再把矩阵展开来看看<br>首先第一个词X1和权重矩阵WXH相乘<br>得到第一个词的隐藏状态<br>H1准备往后传<br>H1和权重矩阵WHY相乘<br>得到第一个词的输出结果Y1这时候计算第二个词<br>同样要和权重矩阵WXH相乘<br>但注意这个时候要把第一个词的隐藏状态加到输入向量里拼接起来<br>同时权重矩阵也增加一个WHH最终计算出第二个词的隐藏状态H2准备继续往后传<br>那后面的流程就一样了</p><p><img src="https://photo.459122.xyz/i/06b386000e882e46a76c09a5dc0a46c9.png" alt="image-20250525234544512"></p><p>最后看一下公式<br>其实非常简单<br>和经典的神经网络相比</p><p><img src="https://photo.459122.xyz/i/16856c40a5c50dfc02ca8ebfd542a493.png" alt="image-20250525234558252"></p><p>就是多了一个前一时刻的隐藏状态而已<br>回顾一下<br>其实本期的内容非常简单<br>我们想处理自然语言的一系列问题<br>首先就要把词转换成计算机能够识别的数字<br>这个过程叫编码<br>通过编码词而形成的向量叫做词向量<br>编码词向量有多种方式<br>其中一种是准备一个词表大小的向量<br>只有一个位置是一<br>这种方式叫做one hot及独热编码<br>这种编码方式维度太高<br>词之间缺乏相关性<br>所以另一种更有效的方式叫做词嵌入<br>词嵌入所需要经过训练而得到的矩阵<br>叫做嵌入矩阵<br>磁向量之间的相关性<br>可以用点击或余弦相似度来计算<br>有了磁向量之后<br>就可以输入到神经网络进行各种训练了<br>经典的神经网络无法表达词的先后顺序<br>因此我们增加了一个隐藏状态<br>在词和词之间传递，不同的词<br>使用不同的时间步T来表示<br>那这个不同于经典神经网络的结构<br>就叫做循环神经网络RNN<br>当然RNN还有两个非常严重的问题<br>1.信息会随着时间步的增多而逐渐丢失<br>无法捕捉长期依赖<br>而有的语句恰恰是距离很远的地方<br>起到了关键性的作用<br>2.RNN必须按顺序处理<br>每个时间步依赖上一个时间步的隐藏状态<br>的计算结果<br>那为了解决这些问题<br>人们使用GRU和LSTM改进了传统的RNN</p><p><img src="https://photo.459122.xyz/i/1f020846a78f0f08e5c016e2512c1d12.png" alt="image-20250525234737971"></p><p>但是这些仍然是建立在让信息一点一点<br>按照时间簿传递的思路来解决<br>只能缓解而无法根治<br>那我们是否有一种可以彻底抛弃这种顺序计算<br>直接一眼把全部信息尽收眼底的新方案呢<br>有的那就是transformer</p><h2 id="06-Transformer-其实是个简单到令人困惑的模型">06 Transformer 其实是个简单到令人困惑的模型</h2><p>用神经网络做个翻译任务<br>I love you Baby<br>我爱你宝贝儿<br>先用词嵌入的方式把每个词转换成一个词向量<br>简单点<br>假设维度就是六<br>如果把每个词直接丢到一个全连接神经网络中<br>那每个词都没有上下文的信息且长度只能一一对应<br>不太行<br>如果用循环神经网络RNN又面临串行计算<br>而且如果句子太长<br>也会导致长期依赖困难的问题也不太行<br>那这也不行<br>那也不行<br>可咋整呢?<br>小孩子才做选择<br>成年人全都不要直接发明一个全新的方案<br>跟我走<br>首先我们给每个词一个位置编码<br>表示这个词出现在整个句子中的位置<br>具体怎么计算<br>再说</p><p>把位置编码加到原来的词向量里<br>现在这个词就有了位置信息<br>但此时每个词还没有其他词的上下文信息<br>也就是注意不到其他词的存在<br>那怎么办呢<br>接着看<br>别眨眼</p><blockquote><p>QKV分别是查询（query）、键（key）、值（value），刚刚问大模型是这么回答的，不清楚有没有错误，明白原理的大佬帮忙指正: 1. Query：当前需要处理的词（比如翻译到中文的「苹果」）。 2. Key：句子中每个词的「身份标识」（比如英文单词 “apple”、“red”、“eat” 的含义特征）。 3. Value：这些词实际携带的语义信息（比如 “apple” 对应水果、公司等含义）。</p></blockquote><p>首先我们用一个WQ矩阵和第一个词向量相乘<br>得到维度不变的Q1向量<br>这里的WQ矩阵是可以通过训练过程学习的一组权重值<br>同理我们用wk矩阵和第一个词向量相乘得到K1<br>再用WV矩阵得到V1<br>接着对其他词向量也和相同的WQKV矩阵相乘<br>分别得到自己对应的QKV1向量</p><p><img src="https://photo.459122.xyz/i/de39a66bd96c37fb8392ba0fb7677abf.png" alt="image-20250525235101479"></p><p><img src="https://photo.459122.xyz/i/5bb0cf0eedb836853ed7b6fac6cb02ef.png" alt="image-20250525235117721"></p><p>当然实际在计算机GPU中运算的时候<br>是通过拼接而成的大矩阵做乘法<br>并不是像我们刚刚那样一步一步计算的<br>得到的直接就是包含所有词向量的QKV矩阵</p><p>不过为了理解<br>我们解释的时候还是拆成一个个的词向量<br>现在原来的词向量已经分别通过线性变换<br>映射成了QKV</p><p>维度和原来是一样的<br>接下来我们让Q1和K2做点击<br>这表示在第一个词的视角里<br>第一个词和第二个词的相似度是多少<br>同理依次和K3做点击表示和第三个词的相似度<br>和K4做点击表示和第四个词的相似度<br>最后呢也补上一个和自己做点击表示和自己的相似度<br>那拿到这些相似度的系数后</p><p><img src="https://photo.459122.xyz/i/7b9a9b9fa0978dda0b027331a61e707c.png" alt="image-20250525235224109"></p><p>分别和V向量相乘</p><p><img src="https://photo.459122.xyz/i/c6895b291c7310388cb259c0291e1e04.png" alt="image-20250525235241089"></p><p>再相加得到A1<br>那此时这个A1就表示在第一个词的视角下<br>按照和它相似度大小按权重把每个词的词向量都加到了一块儿<br>那这就把全部上下文的信息都包含在第一个词当中了而且是用第一个词的视角来看的<br>同理其他几个词也按照这种方式，那么此时每个词都把其他词的词向量按照和自己的相似度权重加到了自己的词向量中</p><p>好<br>那这里的什么QKV都是中间的计算过程了<br>我们从全局视角看<br>现在就是把最初的输入的词向量经过一番处理<br>变成了一组新的词向量<br>不一样的是呢<br>这组新的词向量中<br>每一个都是包含了位置信息和其他词<br>上下文信息的一组新的词向量</p><p><img src="https://photo.459122.xyz/i/ab87d38e05b67fc6c53f95e1b070b83a.png" alt="image-20250525235334042"></p><p>这就是注意力机制attention做的事情<br>我们再进一步优化下<br>有的时候一个词和另一个词的关系<br>可能从不同的视角看是不一样的<br>对于注意力机制来说，如果只通过一种方式计算一次相关性<br>灵活性就会大大降低<br>所以我们做些改进<br>之前我们是每个词计算一组QKV<br>现在我们在这个QKV基础上<br>再经过两个权重矩阵变成两组QKV<br>给每个词两个学习机会</p><p><img src="https://photo.459122.xyz/i/7e8682627c6b4adeb6c039d7359ebdb7.png" alt="image-20250525235414626"></p><p>学习到不同的要计算相似度QQV<br>来增加语言的灵活性<br>这里的每组QKV成为一个头 head<br>接下来在每个头里面的QQV<br>仍然经过刚刚的注意力层的运算<br>得到A向量<br>然后把两个A向量拼接起来<br>得到了和刚刚一样的结构<br>而对于刚刚的注意力机制attention<br>这种方式就叫做多头注意力Multi head attention<br>而我们刚刚举的例子就是两个头的情况</p><p>好<br>那我现在要恭喜你<br>已经把transformer架构<br>最核心的逻辑都搞清楚了</p><p><img src="https://photo.459122.xyz/i/ead1b8bb5cd9902d9881b6329ca00902.png" alt="image-20250525235456217"></p><p>你信不信不信的话<br>我们对照一下transformer的经典论文<br>中的架构图来看看<br>首先第一步就是把输入的内容<br>通过词嵌入的方式转换成词向量矩阵<br>对应的就是这里<br>第二步加入位置信息<br>其实就是再加个形状一样的矩阵<br>对应的就是这里<br>第三步经过多头注意力的处理<br>输出的矩阵维度和输入没有变化<br>给每个词向量增加了上下文信息<br>对应的就是这里<br>后面还有一步添加了残差网络和归一化处理是为了解决梯度消失并且让分布更加稳定而做的优化<br>我们刚刚没有展开这块儿<br>那对应的就是这里<br>同时我们也可以看到<br>整个transformer的标准架构中<br>最主要的就是多头注意力的处理<br>相当于我们把这些部分的逻辑都搞明白了<br>快给自己鼓鼓掌吧<br>下面深入到多头注意力机制的细节部分<br>我们再看看</p><p><img src="https://photo.459122.xyz/i/7719c96f2755296647df2dcb100c40db.png" alt="image-20250525235609581"></p><p>如果是不分多头的单头注意力<br>那么就是先让Q和K相乘<br>得到一个相似度系数的一个矩阵<br>然后再和V相乘<br>最终得到了包含上下文信息的磁向量矩阵<br>省略了中间的缩放掩码和一层soft max处理<br>再看右边的多头注意力情况</p><p>首先QKV分别经过线性变换<br>拆分成多组<br>相当于给了多次机会学习到不同的相似度关系<br>依次经过注意力机制运算后<br>把运算结果拼接起来<br>是不是完全一样呢<br>不过我们讲解的时候还省略了一次线性变换<br>即多头结果并不是简单的拼接起来<br>还需要再次经过一层权重矩阵的乘法<br>这时候再看两个核心公式就很好理解了<br>所谓注意力运算就是QK矩阵相乘经过缩放<br>在经过soft max层处理</p><p><img src="https://photo.459122.xyz/i/e872a51a8bb7221e24422e0e9a047849.png" alt="image-20250525235647356"></p><p>最后和V相乘<br>对于多头情况<br>就是先将QKV矩阵<br>经过多个权重矩阵拆分到多个头中<br>分别经过注意力机制的运算<br>最后合并起来<br>再经过一次矩阵运算<br>得到了输出</p><p>再回过头来看下这个全局的图<br>左边的部分叫做编码器<br>右边的部分叫做解码器</p><p>你实在不愿意叫也没关系<br>假设这个是用于翻译的任务<br>我们训练这个神经网络的过程是<br>首先输入要翻译的文本<br>I love you baby<br>然后经过词嵌入引入位置编码<br>经过多头注意力残差和归一化处理<br>接着送入一个全连接神经网络<br>再残差和归一化处理<br>结果送入解码器的一个多头注意力机制的两个输入中作为KV矩阵<br>再看右边解码器的部分输出是翻译后的文本<br>我爱你宝贝儿<br>同样经过此嵌入<br>引入位置编码<br>经过多头注意力<br>然后残差和归一化处理下<br>然后送入上面说的多头注意力的一个输入中<br>作为Q矩阵和刚刚从编码器中送入的KV矩阵<br>再经过多头注意力残差归一化<br>再全连接神经网络<br>再残差归一化<br>最后再经过一层线性变换的神经网络<br>投射到此表向量中<br>最后用soft max层转化为概率<br>这就代表预测的下一个词在词表中的概率分布<br>那我们取概率最高的就是下一个词应该是什么<br>这里有一个小的不同<br>就是有个掩码</p><p><img src="https://photo.459122.xyz/i/7c99c4160e2be201f2acc967d7b91744.png" alt="image-20250525235842641"></p><p>这个掩码的作用是真正推理<br>翻译时是一个词一个词翻译的<br>比如说这个时候翻译到我下一个词应该是爱<br>所以输出我的时候是看不到后面的词的<br>这就需要掩码来把后面的词遮挡住<br>以便训练的时候模拟真实推理场景时的过程<br>比如当此时输入是i love you baby<br>输出只有一个词<br>我的时候经过这个神经网络<br>最后上方输出词表的概率分布<br>我们想要的结果就是I字的概率值最大<br>如果训练时有偏差<br>那么就计算损失函数<br>再反向传播<br>调整transformer结构中的各种权重矩阵<br>直到学习好为止<br>总的来说<br>transformer确实是个特别简单的架构<br>原文中也是这样说的<br>尤其是当你有了基础的神经网络知识之后<br>如果你看了这个系列之前的视频<br>那就只有多头注意力<br>这一层是陌生的<br>但是它其实拆解之后也是各种矩阵相乘呀<br>相加呀<br>这种操作罢了<br>那其余的词嵌入位置<br>编码残差归一化<br>经典神经网络<br>soft max层等等<br>都是我们之前的视频中已经了解过的概念<br>把这些老东西拼凑拼凑就诞生了<br>我们现在大模型技术的鼻祖transformer<br>那GBT的底层其实就是transform的一半<br>即只有解码器的部分<br>也不翻译<br>谁只管看前面的词<br>猜下一个词<br>别看他来回的猜词猜词<br>猜着猜着就变成了聊天写代码<br>解数学题的全能选手了<br>那transformer的架构来源于经典的论文<br>Attention is all you need<br>本期视频的内容理解之后再去看这篇论文<br>你就会发现非常非常非常容易理解<br>因为它本身就是一个很简单的架构<br>也正因为简单粗暴<br>但是效果却出奇的好<br>所以才会广为流传<br>并成为现代大模型的基础</p><p>本文内容源自B站系列视频 <a href="https://www.bilibili.com/video/BV1wXQhY8EJ6?vd_source=b0f2742e7b4a2838ad4d1870af693bc1">https://www.bilibili.com/video/BV1wXQhY8EJ6?vd_source=b0f2742e7b4a2838ad4d1870af693bc1</a></p>]]></content>
    
    
    <summary type="html">神经网络科普</summary>
    
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理之概述篇</title>
    <link href="https://yjyrichard.github.io/posts/8d03c736.html"/>
    <id>https://yjyrichard.github.io/posts/8d03c736.html</id>
    <published>2025-05-17T06:17:12.904Z</published>
    <updated>2025-05-17T13:30:17.786Z</updated>
    
    <content type="html"><![CDATA[<h1>计算机组成原理之概述篇</h1><p>环境说明：</p><p>Linux环境： VMWare WorkStation + Linux虚拟机</p><p>编程语言：C++，Python</p><ul><li><p>计算机的发展简史</p></li><li><p>计算机的分类</p></li><li><p>计算机的体系结构</p></li><li><p>计算机的层次与编程</p></li><li><p>计算机的计算单位</p></li><li><p>计算机的字符与编码集</p></li><li><p>计算机发展的四个阶段</p></li><li><p>微型计算机的发展历史</p></li></ul><h3 id="计算机发展简史">计算机发展简史</h3><p>计算机发展的四个阶段</p><p><img src="https://photo.459122.xyz/i/39322952f5f26ff5e33a512271e7f6c9.png" alt="image-20250517112441335"></p><p><strong>第一个阶段：电子管计算机</strong></p><p>第二次世界大战时电子管计算机产生的催化剂。</p><blockquote><p>英国为了解密德国海军的密文</p></blockquote><p>ENIAC 埃尼阿克  战争使用了飞机和火箭，打得准则需要计算射击参数 设计参数需要几千次运算才能计算出来，没有计算机前，需要人手算。缺点：集成度小，空间占用大等。</p><p><strong>第二阶段：晶体管计算机</strong></p><p>贝尔实验室的三个科学家发明了晶体管</p><p>在很多的电路中我们还是可以看到晶体管</p><p>著名的晶体管计算机：TX-0  PDP-1</p><p>集成度相对较高</p><p><strong>第三阶段：集成电路计算机</strong></p><p>德州仪器的工程师发明了集成电路（IC） 计算机具备进入千家万户的条件</p><p>IBM =》 7904 ，1401 这两款计算机主打功能不同，相互无法兼容，不愿意投入两组人力。</p><p>IBM推出兼容的产品System/360 =&gt; 操作系统的雏形</p><p><strong>第四个阶段：超大规模集成电路计算机</strong></p><p>一个芯片集成了上百万的晶体管</p><p>速度更快体积更小价格更低、用途丰富</p><p>乔布斯 Apple 和 Apple二代</p><p><strong>第五个阶段：未来的计算机（畅想）</strong></p><p>生物计算机</p><p>量子计算机</p><blockquote><p>“集成度”指的是在单位面积或体积内集成的晶体管数量。 集成度越高，代表着芯片尺寸可以更小，或者在相同尺寸的芯片上可以容纳更多的元件，从而实现更多的功能和更高的性能。</p><p>在计算机发展史中：</p><ul><li><strong>电子管计算机</strong>：使用电子管作为主要的逻辑元件。电子管体积大、功耗高、产生的热量多，因此一台计算机需要成千上万个电子管，占据巨大的空间。 这导致了电子管计算机的集成度非常小。</li><li><strong>晶体管计算机</strong>：晶体管取代了电子管。晶体管体积小、功耗低、速度更快。 这使得在相同的空间内可以容纳更多的逻辑元件，因此晶体管计算机的集成度相对于电子管计算机有了显著提高。</li></ul><p>简单来说，集成度的提高是计算机体积越来越小、性能越来越强、功耗越来越低的关键因素之一。 电子管到晶体管的转变是计算机集成度提升的一个重要里程碑。 后来集成电路（IC）以及超大规模集成电路（VLSI）的出现，更是将集成度推向了新的高度，使得数百万甚至数十亿个晶体管可以集成在一个小小的芯片上。</p></blockquote><h3 id="个人-微型-计算机的发展历史">个人(微型)计算机的发展历史</h3><p>从第三个阶段开始的</p><p>受限于性能 单核CPU</p><blockquote><p>单核CPU：</p><p>1971-1973 500KHz频率的微型计算机（字长8位）</p><p>1973-1978 高于1MHz频率的微型计算机（字长8位）</p><p>1978-1985 500MHz频率的微型计算机（字长16位）</p><p>1985-2000 高于1GHz频率的微型计算机（字长32位）</p><p>200-现在 高于2GHz频率的微型计算机（字长64位）</p></blockquote><p>可能有朋友不太明白上面的Hz以及字长</p><p>这里简单说一下：</p><p><strong>Hz (赫兹)</strong></p><p>Hz 是频率的单位，全称是赫兹 (Hertz)。它表示的是<strong>每秒钟周期性事件发生的次数</strong>。</p><p>在 CPU（中央处理器）的语境下，Hz 用来衡量<strong>时钟频率</strong> (Clock Speed 或 Clock Rate)。CPU 内部有一个时钟发生器，它会产生规律性的电脉冲信号，就像一个节拍器一样，指挥 CPU 的各个部件协同工作。</p><ul><li><strong>1 Hz</strong> 就代表 CPU 的时钟每秒钟跳动 1 次。</li><li><strong>KHz (千赫兹)</strong>：1 KHz = 1000 Hz，代表 CPU 时钟每秒钟跳动 1000 次。</li><li><strong>MHz (兆赫兹)</strong>：1 MHz = 1,000,000 Hz (一百万赫兹)，代表 CPU 时钟每秒钟跳动一百万次。</li><li><strong>GHz (吉赫兹)</strong>：1 GHz = 1,000,000,000 Hz (十亿赫兹)，代表 CPU 时钟每秒钟跳动十亿次。</li></ul><p>简单来说，<strong>CPU 的时钟频率越高 (Hz 值越大)，意味着 CPU 在单位时间内能够执行更多的基本操作，通常也就意味着 CPU 的运算速度越快，性能越强。</strong> 你给出的数据中，从 500KHz 到高于 2GHz，就反映了 CPU 运行速度的巨大提升。</p><p><strong>字长 (Word Length / Word Size)</strong></p><p>字长指的是 <strong>CPU 一次能够处理的二进制数据的位数 (bits)</strong>。你可以把它想象成 CPU 用来思考和处理信息的基本单位的“宽度”。</p><ul><li><strong>位 (bit)</strong>：计算机中数据的最小单位，只能是 0 或 1。</li><li><strong>字节 (Byte)</strong>：通常 1 字节 = 8 位。</li></ul><p>字长决定了以下几个方面：</p><ol><li><strong>CPU 内部寄存器的大小</strong>：寄存器是 CPU 内部用来临时存储数据的高速存储单元。字长是多少位，通常寄存器就能存储多少位的数据。</li><li><strong>CPU 一次能处理的数据量</strong>：例如，一个 8 位字长的 CPU，一次可以处理 8 位的数据；一个 64 位字长的 CPU，一次可以处理 64 位的数据。显然，字长越大，CPU 一次能处理的数据就越多，效率也就越高。</li><li><strong>内存寻址能力</strong>：CPU 需要通过地址来访问内存中的数据。字长的大小会影响 CPU 能够直接访问的内存空间大小。例如，一个 32 位字长的 CPU，理论上最大可以寻址 2<sup>32</sup> 字节 (约 4GB) 的内存空间。而 64 位字长的 CPU，其寻址能力则大大增加。</li></ol><p>你给出的数据中：</p><ul><li><strong>8 位字长</strong>：CPU 一次能处理 8 位二进制数。</li><li><strong>16 位字长</strong>：CPU 一次能处理 16 位二进制数。</li><li><strong>32 位字长</strong>：CPU 一次能处理 32 位二进制数。</li><li><strong>64 位字长</strong>：CPU 一次能处理 64 位二进制数。</li></ul><p><strong>总结一下：</strong></p><ul><li><strong>Hz (频率)</strong> 关系到 CPU 的<strong>运算速度快慢</strong>。</li><li><strong>字长</strong> 关系到 CPU <strong>一次能处理多少数据</strong>以及<strong>能管理多大的内存空间</strong>。</li></ul><p>这两个参数都是衡量 CPU 性能的重要指标。随着技术的发展，CPU 的频率越来越高，字长也越来越大，从而带来了计算机性能的飞速提升。</p><p>摩尔定律</p><p>集成电路的性能，每18-24个月就会提升一倍</p><p>但是在21世纪这个定律慢慢失效了，因为随着芯片的发展，电路越来越复杂，热损耗也越来越高，无法解决这样的问题所以慢慢也就失效了。</p><p>进而发展了多核CPU</p><blockquote><p>多核CPU ：</p><p>2005 ： Intel 奔腾系列双核CPU，AMD速龙系列</p><p>2006 ： Intel酷睿四核CPU</p><p>Intel 酷睿系列十六核CPU</p><p>Intel 至强系列五十核CPU</p></blockquote><p>主要是从CPU的角度来看待</p><h4 id="计算机的分类">计算机的分类</h4><p><strong>超级计算机</strong></p><ul><li>功能最强，运算速度最快，存储容量最大的计算机</li><li>多用于国家高科技领域和尖端技术研究</li></ul><p>标记它们的运算速度的单位是TFlop/s</p><p>1TFlop/s=每秒一万亿次浮点计算</p><p>Intel® Core™ i7-6700k CPU @ 4.00GHz:44.87GFlop/s</p><p><strong>大型计算机</strong></p><p>又称之为大型机，大型主机，主机等</p><p>具有高性能，可处理大量数据与复杂的运算</p><p>在大型机市场领域，IBM占据很大的份额</p><p>COBOL编程语言</p><p>IBM Z9这台打星际是NASA最后一台打星际 Red Hat Enterprise Linux 大型机造价高昂</p><p>去“IOE”是阿里巴巴提出的概念</p><p>代表了高维护费用的存储系统</p><p>不够灵活，伸缩性若</p><p>“去IOE”行动：I（IBM），O（Oracle）E(EMC)</p><p>阿里2008年提出去“IOE运动”，于是在2009年成立了阿里云</p><p><strong>迷你计算机（服务器）</strong></p><p>也称之为小型机，普通服务器</p><p>不需要特殊的空调场所</p><p>具备不错的算力，可以完成较复杂的运算</p><blockquote><p>普通服务器以及替代了传统的大型机，成为大规模企业计算的中枢</p></blockquote><p><strong>工作站</strong></p><p>高端的通用微型计算机，提供比个人计算机更强大的性能</p><p>类似于普通台式电脑，体积较大，但性能强劲</p><p><strong>微型计算机</strong></p><p>又称之为个人计算机，最为普通的一类计算机</p><p>麻雀虽小，五脏俱全</p><p>从构成的本质上来讲，个人计算机与前面的分类无异</p><h3 id="计算机的体系与结构">计算机的体系与结构</h3><h4 id="冯诺依曼体系">冯诺依曼体系</h4><blockquote><p>将程序指令和数据一起存储的计算机设计概念结构</p></blockquote><p>早期计算机仅含固定用途程序=》改变程序得更改结构，重新设计电路=》[坑爹啊，不能先打会游戏然后再写代码]=》把程序存储起来并设计通用电路 =&gt; 存储程序指令设计通用电路</p><p>必须有一个存储器</p><p>必须有一个控制器</p><p>必须有一个运算器</p><p>必须有输入设备</p><p>必须有输出设备</p><p>现代计算机都是冯诺依曼机</p><p>能够把需要的程序和数据送至计算机</p><p>能够长期记忆程序，数据，中间结果以及最终运算结果的能力</p><p>能够具备算术，逻辑运算和数据传送等数据加工处理的能力</p><p>能够按照要求把处理结果输出给用户</p><p><img src="https://photo.459122.xyz/i/c5a7143ae0626a984e7d250191d48364.png" alt="image-20250517123626089"></p><p>冯诺依曼瓶颈</p><p>CPU和存储器速率之间的问题无法调和</p><p>因为CPU速度极快，但是存储器速度很慢,这样会导致CPU经常空转等待数据传输。那么如何解决？</p><p>没有什么是加一层解决不了的，有的话就再加一层。</p><h4 id="现代计算机的结构">现代计算机的结构</h4><p>现代计算机在冯诺依曼机体系结构基础上进行修改</p><p>解决CPU与存储设备之间的性能差异问题</p><p><img src="https://photo.459122.xyz/i/3368a3b8aad4e3e21f8d288ae6c5affd.png" alt="image-20250517133715037"></p><p>存储器 之前是磁带硬盘现在增加了更告诉的设备：内存，CPU的寄存器作为缓存，这样速度更快了</p><blockquote><p>可以理解为以及存储器为核心</p></blockquote><h3 id="计算机的层次与编程语言">计算机的层次与编程语言</h3><p>程序翻译与程序解释</p><p>人类语言：我是一名学生</p><p>计算机：01011100101…</p><blockquote><p>需要进行语言之间的转换</p></blockquote><p>较为高级的计算机语言L1</p><p>较为低级的计算机语言L0</p><p>那什么是程序翻译？</p><p>程序翻译就是L1进行程序逻辑描述，通过编译器生成较为低级的计算机语言L0（计算机实际执行的语言）</p><p>那什么是程序解释？</p><p>L1进行程序逻辑描述然后L1作为输入通过解释器来使用L0语言实现另外一个程序（较为低级的计算机语言L0）</p><p>计算机执行的指令都是L0</p><p>翻译过程生成新的L0程序，解释过程不生成新的L0程序</p><p>解释过程由L0编写的解释器去解释L1程序</p><p>常见的程序翻译型语言：C/C++,Object-C,Golang</p><p>常见的程序解释型语言：Python,Php,JavaScript</p><p>翻译+解释型语言：Java C#  Java程序编译为JVM字节码然后再通过解释器来解释为机器码</p><p><img src="https://photo.459122.xyz/i/9aa98b80ef8c1d5f24cc76106190dbae.png" alt="image-20250517134517562"></p><p><strong>硬件逻辑层</strong>：</p><p>门，触发器等逻辑电路组成</p><p>属于电子工程的领域</p><p><strong>微程序机器层</strong>：</p><p>编程语言是微指令集</p><p>微指令所组成的微程序直接交由硬件执行</p><p><strong>传统机器层</strong>：</p><p>编程语言是CPU指令集（机器指令）</p><p>编程语言和硬件是直接相关</p><p>不同架构的CPU使用不同的CPU指令集</p><p>一条机器指令对应一个微程序</p><p>一个微程序对应一组微指令</p><p><strong>操作系统层</strong>：</p><p>向上提供了简易的操作界面</p><p>向下对接了指令系统，管理硬件资源</p><p>操作系统层是软件和硬件之间的适配层</p><p><strong>汇编语言层：</strong></p><p>汇编语言是汇编语言</p><p>汇编语言可以翻译为可直接执行的机器语言</p><p>完成翻译的过程就是汇编器</p><p><strong>高级语言层</strong>：</p><p>编程语言为广大程序员所接受的高级语言</p><p>高级语言的类别非常多，有几百种</p><p>常见的高级语言有：Python,Java，C/C++，Golang</p><p><strong>应用层</strong>：</p><p>满足计算机针对某种用途而专门设计：word,Excel,Powerpoint</p><p>分层的目的是便于理解</p><h3 id="计算机的计算单位">计算机的计算单位</h3><p>容量单位</p><p>速度单位</p><p>容量单位 768M光盘  4G内存  2T硬盘</p><p>在物理层面，高低电平记录信息</p><p>理论上只认识0/1两种状态</p><p>0/1能够表示的内容太少了，需要更大的容量表示方法  0/1称为bit(比特位)</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">bit</th><th style="text-align:left">Byte</th><th style="text-align:left">KB</th><th style="text-align:left">MB</th><th style="text-align:left">GB</th><th style="text-align:left">TB</th><th style="text-align:left">PB</th><th style="text-align:left">EB</th></tr></thead><tbody><tr><td style="text-align:left"><strong>名字</strong></td><td style="text-align:left">比特位</td><td style="text-align:left">字节</td><td style="text-align:left">千字节</td><td style="text-align:left">兆字节</td><td style="text-align:left">吉字节</td><td style="text-align:left">太字节</td><td style="text-align:left">拍字节</td><td style="text-align:left">艾字节</td></tr><tr><td style="text-align:left"><strong>比例</strong></td><td style="text-align:left">-</td><td style="text-align:left">8 bits</td><td style="text-align:left">1024 B</td><td style="text-align:left">1024 KB</td><td style="text-align:left">1024 MB</td><td style="text-align:left">1024 GB</td><td style="text-align:left">1024 TB</td><td style="text-align:left">1024 PB</td></tr><tr><td style="text-align:left"><strong>常见设备</strong></td><td style="text-align:left">门电路</td><td style="text-align:left">-</td><td style="text-align:left">寄存器</td><td style="text-align:left">高速缓存</td><td style="text-align:left">内存/硬盘</td><td style="text-align:left">硬盘</td><td style="text-align:left">云硬盘</td><td style="text-align:left">数据仓库</td></tr></tbody></table><p>字节：1Byte = 8bit</p><p>1G内存，可以存储多少字节的数据？可以存储多少比特数据？</p><p>1G = 1024^3 Bytes = 1024^3*8bits</p><p>为什么网上买的移动硬盘500G，格式化之后就只剩下465G了？</p><p>硬盘上一般用10进位标记容量</p><p>(500*1000^3)/ 1024^3  约等于 465</p><p>宽带中 2M宽带，4M宽带，100M宽带是什么意思?这里是容量吗？不是 是速度</p><p><strong>网络速度</strong></p><p>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？</p><p>网络常用单位是Mbps</p><p>100M/s = 100Mbps = 100Mbit/s</p><p>100Mbit/s = (100/8)MB/s = 12.5 MB/S</p><p><strong>CPU速度</strong></p><p>CPU的速度一般体现再CPU的时钟频率</p><p>CPU的时钟频率的单位一般是赫兹（Hz）</p><p>主流CPU的时钟频率都在2GHz以上</p><p>Hz其实就是秒分之一</p><p>并不是描述计算机领域所专有的单位</p><p>它是每秒钟的周期性变动重复次数的计量</p><p>2GHz = 2*1000^3 Hz = 每秒20亿次</p><p>计算机的字符与编码集</p><p>字符编码集的历史</p><p>中文编码集</p><p>这个部分可以去搜一下：这里简明扼要的说一下:</p><p>兼容全球阿字符集是Unicode</p><p>Unicode定义了世界通用的符号集，UTF-*实现了编码</p><p>UTF-8是以字节为单位对Unicode进行编码</p><p>Windows系统默认使用GBK编码</p><p>编程推荐使用UTF-8编码</p>]]></content>
    
    
    <summary type="html">计算机组成原理</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yjyrichard.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://yjyrichard.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://yjyrichard.github.io/posts/0.html"/>
    <id>https://yjyrichard.github.io/posts/0.html</id>
    <published>2025-05-16T15:25:28.718Z</published>
    <updated>2025-05-17T13:30:17.791Z</updated>
    
    <content type="html"><![CDATA[<p>—</p><p>title: Git实战: git工作流程</p><p>description: git协同开发</p><p>mathjax: true</p><p>tags:</p><p>- git</p><p>categories:</p><p>- git</p><p>date: 2025-05-17 00:42:00</p><p>updated: 2025-05-17 00:42:00</p><p>—</p><h1>Git实战: git工作流程</h1><p>大家好！今天我们来聊聊 Git。很多刚接触 Git 或者团队协作不久的开发者，对于如何正确、高效地使用 Git 分支进行开发可能会有些困惑。最近就有朋友问到：</p><blockquote><p>“我不是很会用 Git，我想问我开发的时候是不是 clone 下来代码之后在 <code>develop</code> 分支上新建一个分支，比方说是 <code>feature-auth</code>，然后我开发完以后我是不是在本地把 <code>feature-auth</code> 分支上的内容 Merge 到 <code>develop</code> 分支，然后把 <code>develop</code> 分支推到 GitHub 上去？”</p></blockquote><p>这是一个非常好的问题，也代表了很多开发者的实际操作场景。答案是：<strong>是的，这个思路是正确的，并且是 Git 中一种非常常见且推荐的工作模式，我们通常称之为“功能分支工作流”（Feature Branch Workflow）。</strong></p><p>下面我们就来详细拆解一下这个流程，并补充一些最佳实践。</p><h3 id="功能分支工作流：一步步解析">功能分支工作流：一步步解析</h3><p>假设我们的目标是开发一个新的用户认证功能（<code>feature-auth</code>）。</p><p><strong>1. 克隆代码库</strong></p><p>首先，你需要将远程的代码库克隆到你的本地机器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository-url&gt;</span><br></pre></td></tr></table></figure><p><strong>2. 切换到主开发分支（通常是 <code>develop</code>）</strong></p><p>大多数项目会有一个主要的开发分支，比如 <code>develop</code> 或者 <code>main</code>。确保你基于这个最新的分支来创建你的功能分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure><p><strong>3. 拉取最新代码（重要！）</strong></p><p>在创建新分支之前，务必确保你的本地 <code>develop</code> 分支是最新的，同步远程仓库的最新变更。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure><p><strong>4. 创建并切换到你的功能分支</strong></p><p>现在，从最新的 <code>develop</code> 分支创建你的功能分支 <code>feature-auth</code>。<code>-b</code> 参数会同时创建并切换到新分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-auth</span><br></pre></td></tr></table></figure><p><strong>5. 在功能分支上安心开发</strong></p><p>所有的代码编写、修改、调试都在 <code>feature-auth</code> 分支上进行。你可以随时提交你的更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...编写代码...</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 实现用户登录基础功能&quot;</span></span><br><span class="line"><span class="comment"># ...继续编写代码...</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 增加JWT令牌生成&quot;</span></span><br></pre></td></tr></table></figure><p><strong>6. 开发完成，准备合并回 <code>develop</code></strong></p><p>当你的功能开发测试完毕，就可以准备将其合并回 <code>develop</code> 分支了。这里有两种主要的方式：</p><p><strong>方式一：本地合并后推送 (如提问者所述)</strong></p><p>这是提问者描述的流程，完全可行。</p><ul><li><p><strong>a. (推荐) 先将 <code>develop</code> 的最新更改同步到你的功能分支：</strong><br>为了避免在合并到 <code>develop</code> 时产生过多冲突，或者确保你的功能是基于最新的 <code>develop</code> 代码，可以先将 <code>develop</code> 的最新代码合并到你的 <code>feature-auth</code> 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop      <span class="comment"># 切换回 develop 分支</span></span><br><span class="line">git pull origin develop   <span class="comment"># 拉取 develop 最新代码</span></span><br><span class="line">git checkout feature-auth <span class="comment"># 切换回你的功能分支</span></span><br><span class="line">git merge develop         <span class="comment"># 将 develop 合并到 feature-auth</span></span><br><span class="line">                          <span class="comment"># 如果有冲突，此时在 feature-auth 分支解决</span></span><br></pre></td></tr></table></figure><p><em>或者，有些团队更喜欢使用 <code>rebase</code> 来保持提交历史的线性：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 前两步同上 ...</span></span><br><span class="line">git checkout feature-auth</span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure><p><em>注意：如果你的 <code>feature-auth</code> 分支已经推送到远程，<code>rebase</code> 后需要强制推送 (<code>git push -f</code>)，请谨慎使用并确保团队成员了解其影响。</em></p></li></ul><p><code>git merge</code> 和 <code>git rebase</code> 的详细区别和适用场景：</p><p>我们先来详细聊聊 <code>git merge</code> 和 <code>git rebase</code> 的区别与适用场景，力求通俗易懂。</p><p>想象一下，你和你的同事都在基于项目的同一个版本（比如 <code>develop</code> 分支的某个提交点）开始各自开发新功能。你开发了 <code>feature-A</code>，同事开发了 <code>feature-B</code>。</p><p>现在，你们都完成了各自的功能，需要将这些代码合并回 <code>develop</code> 分支。</p><h3 id="git-merge：忠实记录，汇聚合流"><code>git merge</code>：忠实记录，汇聚合流</h3><p><code>git merge</code> 的核心思想是：<strong>将两个分支的最新快照（以及从共同祖先开始的历程）整合到一起，并创建一个新的“合并提交”（merge commit）来记录这次整合。</strong></p><p><strong>它是如何工作的？</strong></p><p>假设 <code>develop</code> 分支在你开始开发 <code>feature-A</code> 后，也有了新的提交。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">A</span><span class="literal">---</span><span class="comment">B</span><span class="literal">---</span><span class="comment">C feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">     <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G develop</span></span><br></pre></td></tr></table></figure><p>当你执行 <code>git checkout develop</code> 然后 <code>git merge feature-A</code> 时：</p><ol><li>Git 会找到 <code>feature-A</code> 和 <code>develop</code> 分支的共同祖先（上图中的 <code>E</code>）。</li><li>它会把 <code>feature-A</code> 分支上的所有更改（<code>A</code>, <code>B</code>, <code>C</code> 相对于 <code>E</code> 的更改）和 <code>develop</code> 分支自共同祖先以来的更改（<code>F</code>, <code>G</code> 相对于 <code>E</code> 的更改）合并起来。</li><li>如果顺利，它会创建一个新的提交 <code>H</code>（合并提交）在 <code>develop</code> 分支上。这个提交 <code>H</code> 会有两个父提交：<code>G</code> (来自 <code>develop</code>) 和 <code>C</code> (来自 <code>feature-A</code>)。</li></ol><p>历史记录会变成这样：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">A</span><span class="literal">---</span><span class="comment">B</span><span class="literal">---</span><span class="comment">C feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">     <span class="comment">/         \</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G</span><span class="literal">---</span><span class="comment">H develop</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>保留历史：</strong> 它完整地保留了分支的原始提交历史。你可以清晰地看到 <code>feature-A</code> 是如何被合并进来的，以及它在合并前的所有提交。</li><li><strong>非线性历史：</strong> 合并提交会引入额外的提交点，使得提交历史图看起来像一个分叉然后汇合的图形，不是一条直线。</li><li><strong>简单直接：</strong> 对于理解和操作来说，<code>merge</code> 相对简单。</li></ul><p><strong>适用场景：</strong></p><ol><li><strong>合并公共分支：</strong> 当你将一个功能分支合并回主要的共享分支（如 <code>develop</code>, <code>main</code>, <code>master</code>）时，使用 <code>merge</code> 是非常常见的。它清晰地记录了功能的集成点。</li><li><strong>保留分支的上下文：</strong> 如果你希望明确地看到一个功能分支的完整开发脉络以及它何时被合并，<code>merge</code> 能够提供这种信息。</li><li><strong>团队协作：</strong> 当多个人在同一个分支上工作并需要合并彼此的工作时（虽然通常推荐在各自的特性分支上工作），<code>merge</code> 是标准做法。</li></ol><p><strong>通俗比喻：</strong></p><p>想象两条河流（分支）各自流淌，当它们需要汇合时，<code>git merge</code> 就像是在汇合点建造了一个新的交汇处（合并提交），两条河的水都流向了这个交汇处，并且我们能清楚地看到是哪两条河汇入的。</p><h3 id="git-rebase：重新上演，线性历史"><code>git rebase</code>：重新上演，线性历史</h3><p><code>git rebase</code> 的核心思想是：<strong>将你的分支上的提交“重新播放”或“重新应用”到另一个分支的顶端。</strong> 它会修改你的提交历史，使其看起来像是在目标分支的最新提交之后直接进行的开发。</p><p><strong>它是如何工作的？</strong></p><p>还是上面的例子：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">A</span><span class="literal">---</span><span class="comment">B</span><span class="literal">---</span><span class="comment">C feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">     <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G develop</span></span><br></pre></td></tr></table></figure><p>当你检出 <code>feature-A</code> 分支 (<code>git checkout feature-A</code>) 然后执行 <code>git rebase develop</code> 时：</p><ol><li>Git 会找到 <code>feature-A</code> 和 <code>develop</code> 分支的共同祖先（<code>E</code>）。</li><li>它会“暂存”<code>feature-A</code> 分支上从共同祖先之后的所有提交（<code>A</code>, <code>B</code>, <code>C</code>）。</li><li>它会将 <code>feature-A</code> 分支的指针移动到 <code>develop</code> 分支的最新提交（<code>G</code>）。</li><li>然后，它会把之前暂存的提交（<code>A</code>, <code>B</code>, <code>C</code>）逐个重新应用到 <code>develop</code> 分支的顶端，生成新的提交 <code>A'</code>, <code>B'</code>, <code>C'</code>。这些新的提交虽然内容和 <code>A, B, C</code> 一样，但是它们的 SHA-1 哈希值是不同的，因为它们的父提交变了。</li></ol><p>历史记录会变成这样：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              <span class="comment">A&#x27;</span><span class="literal">--</span><span class="comment">B&#x27;</span><span class="literal">--</span><span class="comment">C&#x27; feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">             <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G develop</span></span><br></pre></td></tr></table></figure><p>现在，<code>feature-A</code> 分支看起来就像是直接从 <code>develop</code> 分支的最新状态（<code>G</code>）开始开发的。</p><p>之后，如果你想把 <code>feature-A</code> 合并到 <code>develop</code>，通常会切换到 <code>develop</code> 分支，然后执行 <code>git merge feature-A</code>。由于 <code>feature-A</code> 的基底已经是 <code>develop</code> 的最新提交，这次合并会是一个“快进合并”（Fast-forward merge），不会产生新的合并提交，<code>develop</code> 分支指针直接指向 <code>C'</code>。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G</span><span class="literal">---</span><span class="comment">A&#x27;</span><span class="literal">--</span><span class="comment">B&#x27;</span><span class="literal">--</span><span class="comment">C&#x27; develop</span><span class="string">,</span> <span class="comment">feature</span><span class="literal">-</span><span class="comment">A</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>线性历史：</strong> <code>rebase</code> 的主要目的是创建一条干净、线性的提交历史。项目历史看起来像是一条直线，更容易阅读和理解。</li><li><strong>修改历史：</strong> <code>rebase</code> 会重写提交历史。原始的提交（<code>A, B, C</code>）实际上被废弃了（或者说变成了悬空提交，最终会被垃圾回收），取而代之的是新的提交（<code>A', B', C'</code>）。</li><li><strong>潜在风险：</strong> <strong>永远不要对已经推送到公共仓库并被其他人使用的分支执行 <code>rebase</code>！</strong> 因为它改变了提交历史，如果其他人基于旧的历史进行开发，再次同步时会导致非常混乱的局面和大量的冲突。</li></ul><p><strong>适用场景：</strong></p><ol><li><p>保持本地功能分支更新：</p><p>在你的本地功能分支上开发时，定期rebase到目标分支（如develop）的最新版本，可以帮助你及早发现和解决冲突，并保持你的功能分支与主线同步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature-A</span><br><span class="line">git fetch origin develop <span class="comment"># 获取远程 develop 的最新代码，但不合并</span></span><br><span class="line">git rebase origin/develop <span class="comment"># 将 feature-A 的提交 rebase 到最新的 origin/develop 之上</span></span><br></pre></td></tr></table></figure></li><li><p><strong>清理本地提交历史：</strong> 在将本地功能分支推送到远程或创建 Pull Request 之前，可以使用交互式 <code>rebase</code> (<code>git rebase -i</code>) 来整理、合并、编辑你的提交，使提交历史更清晰、更有意义。</p></li><li><p><strong>个人分支或短期分支：</strong> 当你独自在一个分支上工作，并且希望在合并前拥有一个干净的历史记录时。</p></li></ol><p><strong>通俗比喻：</strong></p><p>想象你在写一本书的某个章节（你的功能分支），而主编辑也在同时修订书的其他部分（<code>develop</code> 分支）。当你写完一部分，发现编辑已经更新了书的前面章节。</p><ul><li><code>git merge</code> 就像是你把你的章节直接加到书的末尾，并加个批注说“这是基于旧版前言写的章节，现在和新版前言一起放进来了”。</li><li><code>git rebase</code> 就像是你拿起编辑修订后的最新版本，然后把你的章节内容，在新的基础上重新誊写一遍，让它看起来就像是你从一开始就是基于最新版本写的。</li></ul><h3 id="总结：merge-vs-rebase">总结：<code>merge</code> vs <code>rebase</code></h3><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left"><code>git merge</code></th><th style="text-align:left"><code>git rebase</code></th></tr></thead><tbody><tr><td style="text-align:left"><strong>目标</strong></td><td style="text-align:left">合并分支，保留历史</td><td style="text-align:left">创建线性历史，整合变更</td></tr><tr><td style="text-align:left"><strong>历史记录</strong></td><td style="text-align:left">非线性（产生合并提交），保留分支的确切历史</td><td style="text-align:left">线性（重写提交），使历史更简洁</td></tr><tr><td style="text-align:left"><strong>提交ID</strong></td><td style="text-align:left">保留原始提交ID，新增一个合并提交ID</td><td style="text-align:left">原始提交ID被改变，生成新的提交ID</td></tr><tr><td style="text-align:left"><strong>冲突解决</strong></td><td style="text-align:left">在合并提交时一次性解决所有冲突</td><td style="text-align:left">在每个被重新应用的提交上都可能需要解决冲突</td></tr><tr><td style="text-align:left"><strong>安全性</strong></td><td style="text-align:left">对公共分支安全</td><td style="text-align:left"><strong>不要在公共/共享分支上使用</strong>，除非你非常清楚后果</td></tr><tr><td style="text-align:left"><strong>简单性</strong></td><td style="text-align:left">概念和操作相对简单</td><td style="text-align:left">概念稍复杂，操作需要更小心</td></tr></tbody></table><p><strong>何时选择？</strong></p><ul><li><strong>当你希望保留分支的精确历史记录，并且不介意历史图谱中出现合并提交时，使用 <code>git merge</code>。</strong> 这是将功能分支合并到 <code>develop</code> 或 <code>main</code> 分支的默认和安全方式。</li><li><strong>当你希望在将本地更改推送到远程或合并到主分支之前，清理你的提交历史，使其变得线性且易于阅读时，可以在你的本地（私有）分支上使用 <code>git rebase</code>。</strong></li><li>在将你的功能分支与主开发分支（如 <code>develop</code>）同步时：<ul><li>如果你想把 <code>develop</code> 的最新更改集成到你的功能分支，<code>git rebase develop</code> (在你的功能分支上执行) 是一个好选择，它能让你的功能分支保持在 <code>develop</code> 的最前端，减少最终合并回 <code>develop</code> 时的复杂性。</li><li><code>git merge develop</code> (在你的功能分支上执行) 也可以，但会在你的功能分支历史上创建一个合并提交。</li></ul></li></ul><p>许多团队会结合使用两者：在本地特性分支上使用 <code>rebase</code> 来保持更新和清理提交，然后使用 <code>merge</code> (通常是通过 Pull Request) 将特性分支合并到主开发分支，并保留一个合并提交来标记功能的集成。</p><p>记住黄金法则：<strong>只对尚未推送到公共仓库的本地分支执行 <code>rebase</code>。</strong></p><p>如果你看完还是似懂非懂那我就再举一个例子：</p><blockquote><p>假设我们的主开发分支是 <code>develop</code>。</p><p><strong>场景：</strong> 你需要开发一个新功能 <code>feature-logging</code>。</p><p><strong>详细步骤和代码示例：</strong></p><p><strong>Phase 1: 开始新功能开发，并保持与 <code>develop</code> 同步 (使用 <code>rebase</code>)</strong></p><ol><li><p><strong>确保你的 <code>develop</code> 分支是最新的：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 develop 分支</span></span><br><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库拉取最新的 develop 分支代码</span></span><br><span class="line"><span class="comment"># (假设你的远程仓库名为 origin)</span></span><br><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure><p>这能确保你基于最新的代码创建功能分支。</p></li><li><p><strong>创建你的功能分支 <code>feature-logging</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从当前的 develop 分支创建并切换到新的 feature-logging 分支</span></span><br><span class="line">git checkout -b feature-logging</span><br></pre></td></tr></table></figure><p>现在你位于 <code>feature-logging</code> 分支，可以开始编码了。</p></li><li><p><strong>进行一些开发提交：</strong><br>假设你添加了日志模块并做了一些修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (你在这里编写代码，比如创建 logging_service.py)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Initial logging setup&quot;</span> &gt; logging_service.py</span><br><span class="line">git add logging_service.py</span><br><span class="line">git commit -m <span class="string">&quot;feat: Add initial logging service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (继续编写代码，比如更新 main.py 以使用日志服务)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;import logging_service&quot;</span> &gt; main.py</span><br><span class="line">git add main.py</span><br><span class="line">git commit -m <span class="string">&quot;feat: Integrate logging in main module&quot;</span></span><br></pre></td></tr></table></figure><p>你的 <code>feature-logging</code> 分支现在有了一些你自己的提交。</p></li><li><p><strong>与此同时，<code>develop</code> 分支可能有了新的提交：</strong><br>可能你的同事合并了其他功能或修复了 bug 到 <code>develop</code> 分支。<br>为了模拟这个，我们假设 <code>develop</code> 分支有了一个新提交。<br><em>(在真实场景中，这会通过其他人推送到远程 <code>develop</code> 分支发生)</em></p></li><li><p><strong>在将你的功能推送到远程或准备合并之前，用 <code>rebase</code> 更新你的 <code>feature-logging</code> 分支：</strong><br>这是关键步骤，目的是将你的本地提交“叠加”在最新的 <code>develop</code> 分支之上，保持线性历史并及早处理冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 确保你的本地 develop 分支副本是最新的</span></span><br><span class="line">git checkout develop</span><br><span class="line">git pull origin develop <span class="comment"># 获取 develop 的最新更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 切换回你的功能分支</span></span><br><span class="line">git checkout feature-logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将 feature-logging rebase 到最新的 develop 分支上</span></span><br><span class="line"><span class="comment"># 这会把你 feature-logging 分支上独有的提交 (上面两个 &quot;feat: ...&quot; 提交)</span></span><br><span class="line"><span class="comment"># 重新在最新的 develop 分支的顶端播放一遍</span></span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure><ul><li>发生了什么？<ul><li>Git 会找到 <code>feature-logging</code> 和 <code>develop</code> 的共同祖先。</li><li>它会“暂存”你在 <code>feature-logging</code> 上独有的提交（“Add initial logging service”, “Integrate logging in main module”）。</li><li>然后，它将 <code>feature-logging</code> 分支指向 <code>develop</code> 分支的最新提交。</li><li>最后，它将你暂存的提交逐个应用到新的基点上。你的提交哈希值会改变，因为它们的父提交变了。</li></ul></li><li><strong>冲突处理：</strong> 如果在 <code>rebase</code> 过程中发生冲突 (比如 <code>develop</code> 上的新更改和你本地的更改修改了同一行代码)，<code>rebase</code> 会暂停，让你解决冲突。解决后，使用 <code>git add &lt;conflicted-file&gt;</code> 然后 <code>git rebase --continue</code>。如果想中止 <code>rebase</code>，可以使用 <code>git rebase --abort</code>。</li><li><strong>黄金法则体现：</strong> 此时，<code>feature-logging</code> 分支<strong>只存在于你的本地仓库</strong>。你还没有把它推送到远程共享给其他人。所以，即使提交历史被“重写”了（提交哈希变了），也不会影响到其他人。这是安全的。</li></ul></li><li><p><strong>(可选) 清理你的本地提交历史 (交互式 Rebase)：</strong><br>在 <code>rebase</code> 到 <code>develop</code> 之后，或者在你觉得需要整理提交时，可以使用交互式 <code>rebase</code> 来合并、修改、排序你的本地提交，让它们更清晰。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设你想整理 feature-logging 上的最近2个提交</span></span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>这会打开一个编辑器，让你选择如何处理这些提交 (比如 <code>pick</code>, <code>squash</code>, <code>reword</code>, <code>edit</code> 等)。<br>例如，你可以将两个小的提交 <code>squash</code> (压缩) 成一个更有意义的提交。<br><strong>再次强调：</strong> 这也是在本地分支上进行的操作，推送前进行。</p></li></ol><p><strong>Phase 2: 功能完成，准备合并到 <code>develop</code> (通常通过 Pull Request 和 <code>merge</code>)</strong></p><ol><li><p><strong>推送你的功能分支到远程仓库：</strong><br>当你对 <code>feature-logging</code> 分支满意，并且它已经基于最新的 <code>develop</code> (通过 <code>rebase</code>) 并且提交历史也干净了，就可以推送它了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次推送本地的 feature-logging 分支到远程 origin</span></span><br><span class="line">git push -u origin feature-logging</span><br></pre></td></tr></table></figure><p>如果之前已经推送过，并且因为 <code>rebase</code> 修改了历史，你可能需要强制推送 (<code>git push --force-with-lease origin feature-logging</code>)。<strong>但要非常小心，只有当你确定这个分支没有其他人正在使用时才能这样做。</strong> 如果是通过 Pull Request 工作流，通常在 PR 创建后，后续的 <code>rebase</code> 和 <code>push</code> 会更新 PR。</p></li><li><p><strong>创建 Pull Request (PR) / Merge Request (MR)：</strong><br>在 GitHub, GitLab, Bitbucket 等平台上，你会从 <code>feature-logging</code> 分支向 <code>develop</code> 分支创建一个 Pull Request。<br>你的团队成员会审查你的代码。</p></li><li><p><strong>合并 Pull Request (通常使用 <code>merge</code> 策略)：</strong><br>一旦 PR 被批准，通常会通过平台的 “Merge” 按钮来合并。大多数平台默认或推荐使用<strong>合并提交 (merge commit)</strong> 的方式来合并。</p><p>如果是在本地手动模拟这个合并（不推荐用于团队共享的 <code>develop</code> 分支，通常由 PR 系统处理）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 切换到目标分支 develop</span></span><br><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 确保 develop 是最新的</span></span><br><span class="line">git pull origin develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 合并 feature-logging 分支到 develop</span></span><br><span class="line"><span class="comment"># 使用 --no-ff 确保即使可以快进合并，也创建一个合并提交</span></span><br><span class="line"><span class="comment"># 这保留了 feature-logging 分支存在的明确记录</span></span><br><span class="line">git merge --no-ff feature-logging</span><br></pre></td></tr></table></figure><p>这时，<code>develop</code> 分支的历史图会显示一个合并提交，清楚地表明 <code>feature-logging</code> 在何时被集成进来。由于 <code>feature-logging</code> 之前已经 <code>rebase</code> 到了 <code>develop</code> 的最新版本，所以它的提交会整齐地排列在 <code>develop</code> 的历史之上，然后通过一个合并提交连接起来。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># develop 分支历史可能看起来像这样 (简化版):</span><br><span class="line"># ... --- OldCommit1 --- OldCommit2 (develop 之前的状态)</span><br><span class="line">#           \</span><br><span class="line">#            --- FeatureCommitA<span class="string">&#x27; --- FeatureCommitB&#x27;</span> (来自 rebase 后的 feature-logging) --- MergeCommit (合并 feature-logging 到 develop)</span><br><span class="line">#</span><br><span class="line"># 或者更准确地说，因为 rebase 使得 feature-logging 的基底是 develop 的最新提交：</span><br><span class="line">#</span><br><span class="line"># D1---D2---D3 (develop)</span><br><span class="line">#             \</span><br><span class="line">#              F1<span class="string">&#x27;---F2&#x27;</span> (feature-logging, rebased onto D3)</span><br><span class="line">#</span><br><span class="line"># 当合并时，使用 --no-ff:</span><br><span class="line">#</span><br><span class="line"># D1---D2---D3------------------M (develop after merge)</span><br><span class="line">#             \               /</span><br><span class="line">#              F1<span class="string">&#x27;---F2&#x27;</span>------ (feature-logging)</span><br><span class="line">#</span><br><span class="line"># M 是合并提交。F1<span class="string">&#x27;, F2&#x27;</span> 是 rebase 后的 feature-logging 的提交。</span><br></pre></td></tr></table></figure></li><li><p><strong>推送合并后的 <code>develop</code> 分支：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></li><li><p><strong>删除已被合并的本地和远程功能分支 (可选)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-logging      <span class="comment"># 删除本地分支</span></span><br><span class="line">git push origin --delete feature-logging <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>为什么这个流程好？</strong></p><ul><li><code>rebase</code> 的好处：<ul><li><strong>线性历史：</strong> 在 <code>feature-logging</code> 被合并到 <code>develop</code> 之前，它的历史是相对于 <code>develop</code> 的线性历史，易于理解。</li><li><strong>及早发现冲突：</strong> 定期将 <code>develop</code> 的更改 <code>rebase</code> 到你的功能分支，可以让你在本地、小范围内解决冲突，而不是等到最后合并时面对一个巨大的冲突。</li><li><strong>干净的提交：</strong> 交互式 <code>rebase</code> 允许你整理提交，使它们更有意义。</li></ul></li><li><code>merge</code> (带 <code>--no-ff</code> 或通过 PR) 的好处：<ul><li><strong>保留上下文：</strong> 合并提交清晰地标记了一个功能分支的完成和集成点。你可以从 <code>develop</code> 的历史中轻易看出某个功能是什么时候合并进来的。</li><li><strong>不改写公共历史：</strong> <code>develop</code> 分支的历史不会被改写，这对于团队协作至关重要。</li></ul></li></ul><p><strong>总结黄金法则的体现：</strong></p><ul><li><strong><code>git rebase feature-logging develop</code> (或者 <code>git rebase develop</code> 在 <code>feature-logging</code> 分支上时)：</strong> 这是在 <code>feature-logging</code> 分支上操作的，并且是在你<strong>推送这个分支供他人审查/使用之前</strong>。这是安全的，因为它只修改了你本地的、尚未公开的提交历史。</li><li><strong>一旦 <code>feature-logging</code> 被推送到远程并可能被其他人拉取，或者一旦基于它创建了 Pull Request，就应该避免对这个已公开的分支再执行 <code>rebase</code></strong> (除非你和团队有明确的约定，并且知道如何处理强制推送带来的影响)。如果需要集成 <code>develop</code> 的新更改，此时更安全的做法是在 <code>feature-logging</code> 分支上 <code>git merge develop</code>，或者等待 PR 合并。</li></ul><p>这个流程结合了两者的优点，使得单个功能的开发历史保持整洁，同时主分支的集成点清晰可追溯。</p></blockquote><ul><li><p><strong>b. 切换到 <code>develop</code> 分支并合并：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge feature-auth    <span class="comment"># 将 feature-auth 分支合并到 develop</span></span><br><span class="line">                          <span class="comment"># 如果步骤 a 未做或 develop 在此期间又有更新，此处可能产生冲突，需解决</span></span><br></pre></td></tr></table></figure></li><li><p><strong>c. 推送 <code>develop</code> 分支到远程：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></li><li><p><strong>d. (可选) 删除功能分支：</strong><br>合并完成后，如果不再需要，可以删除本地和远程的功能分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-auth          <span class="comment"># 删除本地分支</span></span><br><span class="line">git push origin --delete feature-auth <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>方式二：通过 Pull Request (PR) / Merge Request (MR) 合并 (更推荐)</strong></p><p>这是目前团队协作中更为主流和推荐的方式，尤其是在使用 GitHub, GitLab, Bitbucket 等平台时。</p><ul><li><p><strong>a. 将你的功能分支推送到远程仓库：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-auth</span><br></pre></td></tr></table></figure></li><li><p><strong>b. 在 Git 平台创建 Pull Request：</strong><br>打开你的 GitHub (或类似平台) 仓库页面，你会看到一个提示，可以从 <code>feature-auth</code> 分支创建一个到 <code>develop</code> 分支的 Pull Request (PR)。</p></li><li><p><strong>c. 代码审查与讨论：</strong><br>PR 提供了一个非常好的代码审查（Code Review）机会。团队成员可以查看你的代码变更，提出修改建议，进行讨论。自动化检查（如单元测试、代码风格检查）通常也会在此时运行。</p></li><li><p><strong>d. 合并 PR：</strong><br>一旦 PR 通过审查并得到批准，通常由拥有权限的成员（或者你自己）通过平台的界面点击“Merge Pull Request”按钮。平台会自动将 <code>feature-auth</code> 的代码合并到 <code>develop</code> 分支。</p></li><li><p><strong>e. 更新本地 <code>develop</code> 分支：</strong><br>PR 合并后，远程的 <code>develop</code> 分支已经更新了。你需要将这些变更同步到你的本地 <code>develop</code> 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure></li><li><p><strong>f. (可选) 删除功能分支：</strong> 同方式一。</p></li></ul><h3 id="为什么推荐-Pull-Request-工作流？">为什么推荐 Pull Request 工作流？</h3><p>虽然本地合并简单直接，但 Pull Request 工作流带来了诸多好处：</p><ul><li><strong>代码审查：</strong> 这是最重要的优点之一。其他开发者可以审查你的代码，帮助发现潜在问题、提出改进建议，从而提高代码质量。</li><li><strong>讨论与协作：</strong> PR 提供了一个围绕代码变更进行讨论的集中场所。</li><li><strong>自动化集成：</strong> 可以集成 CI/CD 工具，在合并前自动运行测试、检查代码风格等。</li><li><strong>更清晰的合并历史：</strong> 许多平台在合并 PR 时会创建一个合并提交，使得追踪功能何时被并入主线更加清晰。</li><li><strong>权限控制：</strong> 可以设置分支保护规则，例如要求 PR 必须通过审查才能合并。</li></ul><p>还有一个问题： 为什么会产生冲突以及如何优雅地解决 Git 合并冲突?</p><p><strong>为什么会产生冲突？</strong></p><p>Git 合并冲突发生在 Git 无法自动决定如何合并两个分支上的更改时。当两个不同的分支修改了同一个文件的同一部分，或者一个分支删除了一个文件而另一个分支修改了它时，Git 就会感到困惑。</p><p>主要原因包括：</p><ol><li><strong>并发修改同一行/区域：</strong><ul><li><strong>场景：</strong> 你在你的 <code>feature-A</code> 分支修改了 <code>config.txt</code> 的第 5 行。与此同时，你的同事在 <code>feature-B</code> 分支也修改了 <code>config.txt</code> 的第 5 行。</li><li><strong>冲突：</strong> 当试图将 <code>feature-A</code> 和 <code>feature-B</code> 合并到 <code>develop</code> 分支（或者一个合并到另一个）时，Git 不知道应该保留哪个版本的第 5 行，或者如何组合它们。</li></ul></li><li><strong>一个分支修改文件，另一个分支删除同一文件：</strong><ul><li><strong>场景：</strong> 你在 <code>feature-cleanup</code> 分支删除了一个不再需要的旧文件 <code>old_utils.py</code>。但你的同事在 <code>feature-add-doc</code> 分支为 <code>old_utils.py</code> 添加了文档。</li><li><strong>冲突：</strong> 当合并时，Git 不确定是应该保留被修改的文件（因为它有新内容），还是应该执行删除操作。</li></ul></li><li><strong>合并不同历史的分支时，对同一文件有不同的演变：</strong><ul><li>这种情况更复杂，但本质上还是归结于 Git 在某个文件的特定部分看到了来自不同源头的、无法自动调和的更改。</li></ul></li></ol><p><strong>如何优雅地解决 Git 合并冲突？</strong></p><p>“优雅地”解决冲突意味着：</p><ul><li><strong>准确性：</strong> 确保最终合并的代码是正确的，并且包含了所有预期的更改。</li><li><strong>清晰性：</strong> 解决冲突的过程和结果应该是易于理解的。</li><li><strong>最小化干扰：</strong> 尽快解决冲突，避免阻塞其他人的工作。</li><li><strong>沟通：</strong> 如果冲突涉及他人的代码，与他们沟通以确保解决方案是双方都同意的。</li></ul><p>以下是解决冲突的步骤和一些技巧：</p><p><strong>步骤：</strong></p><ol><li><p><strong>开始合并操作：</strong><br>假设你当前在 <code>main</code> 分支，想要合并 <code>feature</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git pull origin main   <span class="comment"># 确保 main 是最新的</span></span><br><span class="line">git merge feature</span><br></pre></td></tr></table></figure><p>如果出现冲突，Git 会在终端提示，并且 <code>git status</code> 会显示哪些文件处于冲突状态。</p></li><li><p><strong>识别冲突文件：</strong><br>运行 <code>git status</code>。它会列出 “Unmerged paths”（未合并的路径），这些就是包含冲突的文件。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unmerged paths<span class="operator">:</span></span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> mark resolution)</span><br><span class="line">    both modified<span class="operator">:</span>   config.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>打开冲突文件并解决冲突：</strong><br>Git 会在冲突的文件中用特殊的标记来标示冲突区域：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD (Current Change)</span><br><span class="line"># 这是你当前分支 (例如 main) 的内容</span><br><span class="line">port = 8080</span><br><span class="line">=======</span><br><span class="line"># 这是你正在合并的分支 (例如 feature) 的内容</span><br><span class="line">port = 9000</span><br><span class="line">host = &quot;localhost&quot;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature (Incoming Change)</span><br></pre></td></tr></table></figure><ul><li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>：表示冲突区域的开始，后面是当前分支 (HEAD 指向的分支) 的内容。</li><li><code>=======</code>：分隔了两个分支的冲突内容。</li><li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</code>：表示冲突区域的结束，后面是被合并分支 (例如 <code>feature</code>) 的内容。</li></ul><p><strong>你的任务是：</strong></p><ul><li>仔细阅读冲突标记之间的代码。</li><li>决定你想要保留哪个版本，或者如何将两个版本结合起来。</li><li><strong>手动编辑文件，删除 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</code> 这些标记，并保留或修改代码，使其成为你期望的最终版本。</strong></li></ul><p>例如，如果你决定保留 <code>feature</code> 分支的端口号，并也想保留 <code>host</code> 设置，你可以修改成：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port = 9000</span><br><span class="line">host = &quot;localhost&quot;</span><br></pre></td></tr></table></figure><p>或者，如果你想保留 <code>main</code> 的端口并添加 <code>host</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port = 8080</span><br><span class="line">host = &quot;localhost&quot;</span><br></pre></td></tr></table></figure><p><strong>关键是你要做出决定并清理掉 Git 的标记。</strong></p></li><li><p><strong>使用可视化合并工具 (可选但推荐)：</strong><br>许多 IDE (如 Visual Studio Code) 和专门的 Git GUI 客户端 (如 GitKraken, Sourcetree) 提供了强大的三向合并 (three-way merge) 工具。这些工具通常会并排显示你的版本、对方的版本以及共同祖先的版本，并提供一个结果窗格让你更方便地选择和组合更改。</p><p>在 VS Code 中，当检测到冲突时，它通常会在文件名旁边显示标记，并且在编辑器中提供 “Accept Current Change”, “Accept Incoming Change”, “Accept Both Changes”, “Compare Changes” 等便捷操作。</p></li><li><p><strong>标记冲突已解决：</strong><br>在你手动编辑并保存了所有冲突文件后，你需要告诉 Git 你已经解决了这些冲突：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;resolved-file-1&gt; &lt;resolved-file-2&gt; ...</span><br><span class="line"><span class="comment"># 或者，如果你解决了所有冲突文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><code>git status</code> 现在应该显示这些文件为 “Changes to be committed”。</p></li><li><p><strong>完成合并：</strong><br>一旦所有冲突都已解决并暂存 (staged)，就可以提交合并了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>Git 通常会自动为你生成一个合并提交信息，例如 “Merge branch ‘feature’ into main”。你可以修改它，但通常默认的就足够了。<br><strong>注意：</strong> 如果你是在 <code>rebase</code> 过程中遇到冲突，解决后使用 <code>git rebase --continue</code> 而不是 <code>git commit</code>。</p></li><li><p><strong>测试！</strong><br>合并后，务必运行测试（单元测试、集成测试等）以确保你的更改没有破坏任何东西，并且合并后的代码按预期工作。</p></li></ol><p><strong>优雅解决冲突的技巧：</strong></p><ul><li><p>经常拉取和变基/合并：</p><ul><li>如果你在特性分支上工作，定期从主开发分支（如 <code>develop</code> 或 <code>main</code>）<code>pull</code> (如果主分支是共享的，通常是 <code>pull --rebase</code> 到你的特性分支，或者 <code>merge</code> 主分支到你的特性分支) 可以帮助你及早发现并解决小冲突，而不是等到最后面对一个巨大的冲突。</li></ul></li><li><p>小而专注的提交和分支：</p><ul><li>较小的、逻辑上独立的提交和分支通常更容易合并，因为它们涉及的更改范围较小。</li></ul></li><li><p>沟通，沟通，再沟通：</p><ul><li>如果你看到一个冲突，并且不确定如何正确解决它，特别是当它涉及到其他人的代码时，<strong>立即与相关同事沟通</strong>。他们最了解自己的更改意图。一起查看冲突可以更快、更准确地解决问题。</li></ul></li><li><p>理解更改的意图：</p><ul><li>不要仅仅机械地选择“我的”或“他们的”代码。尝试理解每个更改试图实现什么。有时，正确的解决方案是两者的结合，或者是一个全新的方案。</li></ul></li><li><p>使用 <code>git log --merge -p &lt;file&gt;</code>：</p><ul><li>在合并冲突后，但在解决之前，这个命令可以显示导致冲突的具体提交以及它们对文件的更改。这有助于理解冲突的来源。</li><li><code>git diff &lt;file&gt;</code> 也可以显示冲突标记。</li></ul></li><li><p>不要害怕 <code>git merge --abort</code>：</p><ul><li><p>如果你在解决冲突的过程中感到困惑或搞砸了，只要你还没有</p><p>git commit(或git rebase --continue)，你通常可以安全地中止合并：</p><p>git merge --abort</p><p>这会将你的分支恢复到合并之前的状态，你可以重新尝试。对于rebase，使用git rebase --abort。</p></li></ul></li><li><p>利用 IDE 的合并工具：</p><ul><li>VS Code 等现代 IDE 内置了非常好的冲突解决界面，可以让你逐个处理冲突点，选择接受当前更改、传入更改或两者都接受，甚至手动编辑结果。这通常比直接在文本编辑器中处理原始冲突标记更直观。</li></ul></li></ul><p><strong>示例：</strong></p><p>假设 <code>main</code> 分支的 <code>app.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main 分支</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server on port 8000&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server()</span><br></pre></td></tr></table></figure><p><code>feature</code> 分支的 <code>app.py</code> (基于 <code>main</code> 的某个旧版本创建并修改)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feature 分支</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">debug_mode=<span class="literal">False</span></span>):</span><br><span class="line">    port = <span class="number">8080</span></span><br><span class="line">    <span class="keyword">if</span> debug_mode:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server in DEBUG mode on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server(debug_mode=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>当你尝试 <code>git merge feature</code> (在 <code>main</code> 分支上)：</p><ol><li><p>Git 会报告 <code>app.py</code> 冲突。</p></li><li><pre><code>app.py<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">内容会变成：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="comment"># main 分支</span></span><br><span class="line">def start_server():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server on port 8000&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server()</span><br><span class="line">=======</span><br><span class="line"><span class="comment"># feature 分支</span></span><br><span class="line">def start_server(<span class="attribute">debug_mode</span>=<span class="literal">False</span>):</span><br><span class="line">   <span class="built_in"> port </span>= 8080</span><br><span class="line">    <span class="keyword">if</span> debug_mode:</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Starting server in DEBUG mode on port &#123;port&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Starting server on port &#123;port&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server(<span class="attribute">debug_mode</span>=<span class="literal">True</span>)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature</span><br></pre></td></tr></table></figure></code></pre></li><li><p>解决：</p><p>你需要决定最终的start_server函数和调用。也许你想要feature分支的函数定义，但保留main分支的简单调用，或者更新调用以使用新参数。</p><p>假设你决定采用 feature分支的函数，并让它默认以非调试模式启动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决后的 app.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">debug_mode=<span class="literal">False</span></span>):</span><br><span class="line">    port = <span class="number">8080</span> <span class="comment"># 或者你决定用 8000，或者从配置读取</span></span><br><span class="line">    <span class="keyword">if</span> debug_mode:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server in DEBUG mode on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server() <span class="comment"># 决定默认不以 debug 模式启动</span></span><br></pre></td></tr></table></figure></li><li><p>然后 <code>git add app.py</code> 和 <code>git commit</code>。</p></li></ol><p>通过遵循这些步骤和技巧，你可以更自信和有效地处理 Git 合并冲突。</p><h3 id="总结">总结</h3><p>所以，最初提问的 Git 操作流程是完全正确的，并且是功能分支开发的基础。在此基础上，引入 Pull Request 的概念会让团队协作更加规范和高效。</p><p>选择哪种方式取决于你的团队规模、项目复杂度和协作习惯。但无论如何，清晰的分支策略是高效 Git 使用的关键。</p><p>希望这篇博客对你有所帮助！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;title: Git实战: git工作流程&lt;/p&gt;
&lt;p&gt;description: git协同开发&lt;/p&gt;
&lt;p&gt;mathjax: true&lt;/p&gt;
&lt;p&gt;tags:&lt;/p&gt;
&lt;p&gt;- git&lt;/p&gt;
&lt;p&gt;categories:&lt;/p&gt;
&lt;p&gt;- git</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>你的皮肤是如何精心设计的？它为何是人体最大的器官？【皮肤真相】</title>
    <link href="https://yjyrichard.github.io/posts/d1d9e1a.html"/>
    <id>https://yjyrichard.github.io/posts/d1d9e1a.html</id>
    <published>2025-05-15T16:42:00.000Z</published>
    <updated>2025-05-15T16:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>你的皮肤是如何精心设计的？它为何是人体最大的器官？【皮肤真相】</h1><p>皮肤，不是王者荣耀里28块八，加十点攻击的那个<br>而是让你饱受掉皮，粉刺，暗斑，黑头，青春痘之苦<br>还贼费钱的那个</p><p><img src="https://photo.459122.xyz/i/116e29ad683f7493c514d7646c2b98eb.png" alt="image-20250512122727405"></p><p>人类辛辛苦苦进化了1000多万年<br>身体各个组织都在发挥着积极的效用<br>总不会闲来无事<br>进化出这么玩意儿来给自己添堵吧？<br>事实上，皮肤才是人体最大的器官<br>这套压扁了约1.7平方米<br>占人体体重约16%的器官<br>是如何精心设计的？<br>它究竟有哪些隐藏的功能？<br>我们又该如何维护和保养？<br>这听起来很复杂<br>但实际并不简单</p><p><img src="https://photo.459122.xyz/i/6b7aa3414bad4fafbec5820b856d957c.png" alt="image-20250512122807455"></p><p>今天就让我们一起走进皮肤的真相<br>人体的皮肤很薄<br>一枚硬币的厚度约2mm<br>而皮肤大概是0.5到4mm<br>所以我们经常会用“肤浅”来夸一个博主学识渊博<br>人体的皮肤中<br>眼睑的部分最薄，脚后跟的皮肤最厚<br>皮肤的上层是表皮层</p><p><img src="https://photo.459122.xyz/i/cd86fc866fff476c0e9822550d65f16e.png" alt="image-20250512122908593"></p><p>表皮层的最上面是我们熟悉的角质层<br>角质层主要是由多层没有细胞核的死亡细胞组成<br>这也意味着所谓的肌肤之亲，不过是死亡细胞的触碰，没什么好羡慕的<br>老话里经常用不死也要脱层皮来形容受伤严重<br>但事实上你每时每刻都在蜕皮<br>人体每分钟会脱落上万的表皮细胞<br>当这些细胞脱落时<br>位于基底层的细胞就会被推上来<br>形成新的角质层<br>这样循环往复28天后<br>你的整个表皮层就会焕然一新</p><p><img src="https://photo.459122.xyz/i/0cbe2d573e4f87097ec465587043a27f.png" alt="image-20250512123014888"></p><p>大扫除的时候，我们经常疑惑<br>不知道哪里来这么多灰尘<br>实际上你清扫的极有可能是自己的碎片<br>这样周而复始的更新<br>加上拉伸强度超过钢筋的胶原纤维<br>保证了人类在生长和变胖的过程中<br>不会把自己胀破<br>但并不是所有的动物都有这样的天赋<br>对于一些爬行动物而言<br>它们外层的皮肤不能跟随他们一起生长，所以它们需要一次性脱落整个表皮层【蛇】<br>角质层的细胞内含有角蛋白<br>它有助于减少水分的增发<br>甚至能够吸收水分<br>所以冬天泡澡的时候<br>很多人会出现皮肤起皱的现象</p><p>表皮层的下面是真皮层<br>里面驻扎着皮肤里所有的活跃系统<br>血管淋巴管<br>神经纤维<br>毛囊根部<br>汗腺和皮脂腺</p><p><img src="https://photo.459122.xyz/i/800e27131fdad1db9277709142d4176e.png" alt="image-20250512123133922"></p><p>皮脂腺可以分泌油脂<br>覆盖在皮肤的表面<br>这帮助我们保持皮肤柔软<br>让许多外来生物站不住脚<br>同时也减少了皮下水分的增发<br>保持皮肤的湿润<br>所以当别人再说你油腻的时候<br>请表示感谢<br>因为那不是骂而是夸【柔软，健康，水润】，皮脂腺的数量以头部面部胸背部居多<br>这也是为什么这些地方容易长痘<br>头发总是油油的<br>在头顶招摇<br>对于所有的哺乳动物而言<br>一旦感受到寒冷<br>毛囊周围的肌肉就会收缩<br>这个过程被称作立毛<br>茂密的毛发能够截流靠近皮肤的那层空气<br>阻碍空气的流通<br>从而减少热量的损失<br>这是北极熊<br>可以在零下60度的环境下生存的原因<br>但用毛发御寒有一个重要的前提茂密</p><p>遗憾的是<br>人类在进化的过程中<br>不仅身上的毛少了<br>头上的毛也越来越少了<br>当遭遇寒冷或者土味情话的时候<br>除了起鸡皮疙瘩<br>再没有半点作用<br>人类为什么要放弃毛这么保暖的东西<br>目前还不甚明了<br>有一种假说是为了出汗<br>黑猩猩的汗腺只有人类的一半<br>这使得人类成为大自然里为数不多<br>可以通过全身出汗来调节体温的动物<br>当身体过热的时候<br>汗腺会蒸发汗液<br>并通过200到400万条汗腺渗透到皮肤表面<br>随着汗液的蒸发<br>人体快速冷却<br>使得体温降至安全范围<br>这样出色的散热系统<br>使得人类成为长跑界耐力最强的生物<br>而大多数四足动物靠喘气来散热<br>这跟持续跑动中的均匀呼吸互不相容<br>人类体毛的丧失以及汗液的分泌<br>有助于我们对温度最敏感的器官：<br>大脑显著变大<br>换句话说<br>你这么聪明<br>可能是因为出汗了<br>包裹在真皮中的各种受体<br>让我们拥有感知这个世界的能力触觉<br>但这个我们习以为常的感知构成却并不简单<br>比如麦斯纳小体位于皮肤浅表的真皮层</p><p><img src="https://photo.459122.xyz/i/ed650ef0029b30bea42a55527f072a21.png" alt="image-20250512123424569"></p><p>可以用来感知纹理<br>并检测物体是否划过皮肤<br>在人体的性感带和其他高度敏感的区域<br>最为丰富<br>比如指尖<br>嘴唇舌头以及那些私密位置<br>帕西尼亚小体分布在皮肤<br>较深的真皮层和皮下组织中<br>在传递物体引起的振动信息时最为有效<br>甚至可以检测到<br>微小到0.0001mm的运动<br>这个对我们使用工具很有帮助<br>比如我们使用菜刀切菜的时候<br>哪怕没有直接接触到食材<br>也能根据震动区分所切的食物<br>所有的受体都经过精心的调试<br>好让你感受风<br>感受雨<br>感受爱人的轻抚<br>感受这个世界<br>当然我们的皮肤也并非毫无破绽<br>有时毛孔会因为少数死皮和干枯的皮肤而堵塞<br>形成所谓的粉刺</p><p><img src="https://photo.459122.xyz/i/5535dac752cfbf7eee3f54311217784e.png" alt="image-20250512123525336"></p><p>如果再加上毛囊感染发炎<br>就会出现炎症性丘疹<br>结节囊肿<br>也就是青少年的噩梦<br>痤疮</p><p><img src="https://photo.459122.xyz/i/56c968a2c50337c0fbe75b138e8ce825.png" alt="image-20250512123545369"></p><p>年轻的时候我们的皮脂腺会非常活跃<br>所以青春痘成为很多人正在经历或者<br>逝去的青春<br>青春到逝去后<br>皮肤老化成为大家关切的问题<br>其中最为人熟知和接受的是衰老的自由基理论<br>这种理论认为<br>过度氧化会导致自由基过量<br>加剧胶原蛋白的胶原聚合<br>加速弹性纤维降解<br>导致皮肤张力下降<br>失去弹性和柔软性<br>同时过量自由基可直接降解透明质酸<br>使真皮保水能力和支持力下降<br>导致皮肤出现皱纹<br>干燥角化或光泽<br>那我们该如何保养和维护皮肤呢？<br>护肤品<br>当然除了使用护肤品外<br>我们还需要注意防晒<br>太阳中的紫外线可以帮助人体形成维生素D<br>维生素D有助于形成强壮的骨骼和牙齿<br>调节人体免疫<br>但过量的紫外线会加速皮肤的衰老<br>导致色斑的形成<br>甚至引起皮肤癌<br>户外活动要尽可能避开紫外线<br>最强的上午十点至下午四点午睡<br>在阳光下长时间暴露<br>需要做好各项防晒措施<br>皮肤科有句老话<br>养儿不防老<br>防晒才防老<br>再者是规律作息<br>熬夜可能会导致血管型眶周色素沉淀<br>也就是我们俗称的黑眼圈<br>熬夜和压力还会导致脱发<br>眼袋<br>肤色暗沉<br>油脂分泌异常等皮肤问题<br>最后多吃蔬果<br>多喝水<br>减少压力<br>适量运动<br>这些能够改善人体其他器官的方法<br>同样适用于皮肤<br>因为皮肤本就是人体最大的器官</p><p>视频源地址：【你的皮肤是如何精心设计的？它为何是人体最大的器官？【皮肤真相】】<a href="https://www.bilibili.com/video/BV1nh411E7Qm?vd_source=b0f2742e7b4a2838ad4d1870af693bc1">https://www.bilibili.com/video/BV1nh411E7Qm?vd_source=b0f2742e7b4a2838ad4d1870af693bc1</a></p>]]></content>
    
    
    <summary type="html">皮肤科普</summary>
    
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>JWT</title>
    <link href="https://yjyrichard.github.io/posts/1bb08f7a.html"/>
    <id>https://yjyrichard.github.io/posts/1bb08f7a.html</id>
    <published>2025-05-13T04:09:03.857Z</published>
    <updated>2025-05-13T04:41:41.244Z</updated>
    
    <content type="html"><![CDATA[<h1>JWT</h1><p><strong>什么是JWT</strong>：</p><p>JSON Web Token（JSON Web令牌）</p><p>是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。</p><p>通过JSON形式作为Web应用中的令牌，用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</p><p><strong>JWT作用</strong>：<br>授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的域中使用。如：单点登录。<br>信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载计算的，因此还可验证内容是否被篡改。</p><h2 id="1-传统Session">1.传统Session</h2><h3 id="1-1-认证方式">1.1.认证方式</h3><p>http协议本身是一种无状态的协议，如果用户向服务器提供了用户名和密码来进行用户认证，下次请求时，用户还要再一次进行用户认证才行。因为根据http协议，服务器并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储─份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样应用就能识别请求来自哪个用户。</p><p><img src="https://photo.459122.xyz/i/cedbba6d182b56196909d63492c4ed3b.png" alt="image-20250513113050168"></p><h3 id="1-2-暴露的问题">1.2.暴露的问题</h3><p>用户经过应用认证后，应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大；<br>用户认证后，服务端做认证记录，如果认证的记录被保存在内存中的话，用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源。在分布式的应用上，限制了负载均衡器的能力。以此限制了应用的扩展能力；<br>session是基于cookie来进行用户识别，cookie如果被截获，用户很容易受到CSRF（跨站伪造请求攻击)攻击；<br>在前后端分离系统中应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session每次携带sessionid到服务<br>器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</p><p><img src="https://photo.459122.xyz/i/c87606efc52e8cde5aa857da6c4fe450.png" alt="image-20250513113438956"></p><h2 id="2-JWT-运行流程">2.JWT 运行流程</h2><h3 id="2-1-认证流程">2.1.认证流程</h3><p>前端通过Web表单将自己的用户名和密码发送到后端的接口。该过程一般是HTTP的POST请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。</p><p>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</p><p>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上，退出登录时前端删除保存的JWT即可。</p><p>前端在每次请求时将JWT放入HTTP的Header中的Authorization位。(解决XSS和XSRF问题）HEADER</p><p>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选）</p><p>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</p><h3 id="2-2-JWT优点">2.2.JWT优点</h3><ul><li>简洁(Compact)：可以通过URL，POST参数或者在HTTP header发送，数据量小，传输速度也很快；</li><li>自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库；</li><li>Token是以JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上任何web形式都支持。<br>不需要在服务端保存会话信息，特别适用于分布式微服务。</li></ul><h2 id="3-JWT结构">3.JWT结构</h2><p>就是令牌token，是一个String字符串，由3部分组成，中间用点隔开</p><p>令牌组成：</p><ol><li>标头（Header）</li><li>有效载荷（Payload）</li><li>签名（Signature）<br>token格式：head.payload.singurater 如：xxxxx.yyyy.zzzz</li></ol><p>Header：有令牌的类型和所使用的签名算法，如HMAC、SHA256、RSA；使用Base64编码组成；（Base64是一种编码，不是一种加密过程，可以被翻译成原来的样子）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;alg&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Payload ：有效负载，包含声明；声明是有关实体（通常是用户）和其他数据的声明，不放用户敏感的信息，如密码。同样使用Base64编码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;sub&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;John Do&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;admin&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Signature ：前面两部分都使用Base64进行编码，前端可以解开知道里面的信息。Signature需要使用编码后的header和payload<br>加上我们提供的一个密钥，使用header中指定的签名算法(HS256)进行签名。签名的作用是保证JWT没有被篡改过</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(payload)<span class="punctuation">,</span> secret);</span><br></pre></td></tr></table></figure><p>**签名目的：**签名的过程实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p><p>信息安全问题：Base64是一种编码，是可逆的，适合传递一些非敏感信息；JWT中不应该在负载中加入敏感的数据。如传输用户的ID被知道也是安全的，如密码不能放在JWT中；JWT常用于设计用户认证、授权系统、web的单点登录。</p><p><img src="https://photo.459122.xyz/i/211669cfe0d977e9b769f86d7f008267.png" alt="image-20250513114254471"></p><h2 id="4-JWT使用">4.JWT使用</h2><h3 id="4-1-引入依赖">4.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入JWT--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-生成token">4.2.生成token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">instance.add(Calendar.SECOND,<span class="number">20</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">        .withHeader(map) <span class="comment">//可以不设定，就是使用默认的</span></span><br><span class="line">        .withClaim(<span class="string">&quot;userId&quot;</span>,<span class="number">20</span>)<span class="comment">//payload  //自定义用户名</span></span><br><span class="line">        .withClaim(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .withExpiresAt(instance.getTime()) <span class="comment">//指定令牌过期时间</span></span><br><span class="line">        .sign(Algorithm.HMAC256(<span class="string">&quot;fdahuifeuw78921&quot;</span>));<span class="comment">//签名</span></span><br></pre></td></tr></table></figure><h4 id="4-3-根据令牌和签名解析数据">4.3.根据令牌和签名解析数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;fdahuif921&quot;</span>)).build();</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">        decodedJWT.getClaim(<span class="string">&quot;userId&quot;</span>).asInt();<span class="comment">//获取负载里面对应的内容</span></span><br><span class="line">        decodedJWT.getClaim(<span class="string">&quot;username&quot;</span>).asString();</span><br><span class="line">        decodedJWT.getExpiresAt();<span class="comment">//获取过期时间</span></span><br></pre></td></tr></table></figure><h4 id="4-4-常见异常信息">4.4.常见异常信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SignatureVerificationException <span class="comment">//签名不一致异常</span></span><br><span class="line">TokenExpiredException <span class="comment">//令牌过期异常</span></span><br><span class="line">AlgorithmMismatchException <span class="comment">//算法不匹配异常</span></span><br><span class="line">InvalidClaimException <span class="comment">//失效的payload异常（传给客户端后，token被改动，验证不一致）</span></span><br></pre></td></tr></table></figure><h2 id="5-封装工具类">5.封装工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SIGNATURE</span> <span class="operator">=</span> <span class="string">&quot;token!@#$%^7890&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map //传入payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            builder.withClaim(k,v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.SECOND,<span class="number">7</span>);</span><br><span class="line">        builder.withExpiresAt(instance.getTime());</span><br><span class="line">        <span class="keyword">return</span> builder.sign(Algorithm.HMAC256(SIGNATURE)).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">getToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-SpringBoot整合JWT">6.SpringBoot整合JWT</h2><h4 id="6-1-登录时生成token">6.1.登录时生成token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//controller层接收数据，生成token，并响应</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">    Map&lt;String,String&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    payload.put(<span class="string">&quot;id&quot;</span>,userDB.getId());</span><br><span class="line">    payload.put(<span class="string">&quot;name&quot;</span>,userDB.getName());</span><br><span class="line">    <span class="comment">//生成JWT令牌</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.getToken(payload);</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;token&quot;</span>,token);<span class="comment">//响应token</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-声明一个token拦截器类">6.2.声明一个token拦截器类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.office.utils.JWTUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT验证拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//令牌建议是放在请求头中，获取请求头中令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            JWTUtils.verify(token);<span class="comment">//验证令牌</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token算法不一致&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token失效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">false</span>);<span class="comment">//设置状态</span></span><br><span class="line">        <span class="comment">//将map转化成json，response使用的是Jackson</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-3-配置拦截器">6.3.配置拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.office.interceptor.JWTInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JWTInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JWT学习</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>模拟</title>
    <link href="https://yjyrichard.github.io/posts/d1f7904c.html"/>
    <id>https://yjyrichard.github.io/posts/d1f7904c.html</id>
    <published>2025-05-07T08:22:45.982Z</published>
    <updated>2025-05-17T15:36:36.987Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/two-sum/description/">1. 两数之和 - 力扣（LeetCode）</a></p><blockquote><p>朴素解法 由于我们每次要从数组中找两个数。 因此一个很简单的思路是：使用两重循环枚举下标 i 和 j ，分别代表要找的两个数。 然后判断 nums[i] + nums[j] == target 是否成立。 另外为了防止得到重复的解，我们需要在第一层循环中让 i 从 0 开始，到 n - 2 结束（确保能取 到下一位数作为 j ）；在第二层循环中让 j 从 i + 1 开始，到 n - 1 结束。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums,<span class="type">int</span> t)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t==nums[i]+nums[j])<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O($n^2$)</p><p>哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums,<span class="type">int</span> t)&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt;map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> nums[i],b = t-a;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(b))<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(b),i&#125;;</span><br><span class="line">            map.put(a,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/add-two-numbers/description/">2. 两数相加 - 力扣（LeetCode）</a></p><p>朴素解法（哨兵技巧） 这是道模拟题，模拟人工竖式做加法的过程： 从最低位至最高位，逐位相加，如果和大于等于 10，则保留个位数字，同时向前一位进 1 如果 最高位有进位，则需在最前面补 1。 做有关链表的题目，有个常用技巧：添加一个虚拟头结点（哨兵），帮助简化边界情况的判断。 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1,ListNode l2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);<span class="comment">//哨兵</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">null</span> || l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> l1!=<span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> l2!=<span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            t = a + b + t;</span><br><span class="line">            tmp.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">            t/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="literal">null</span>)l1=l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2!=<span class="literal">null</span>)l2=l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t&gt;<span class="number">0</span>) tmp.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(t);</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">刷题</summary>
    
    
    
    <category term="算法与数据结构" scheme="https://yjyrichard.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法与数据结构" scheme="https://yjyrichard.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（5）</title>
    <link href="https://yjyrichard.github.io/posts/f13443ca.html"/>
    <id>https://yjyrichard.github.io/posts/f13443ca.html</id>
    <published>2025-05-06T07:02:44.802Z</published>
    <updated>2025-05-06T07:13:08.400Z</updated>
    
    <content type="html"><![CDATA[<h1>6，行为型模式</h1><h2 id="6-5-状态模式">6.5 状态模式</h2><h3 id="6-5-1-概述">6.5.1 概述</h3><p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/d4df17c360905176ed6af237f0c8c93c.png" alt="状态模式前"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILift</span> &#123;</span><br><span class="line">    <span class="comment">//电梯的4个状态</span></span><br><span class="line">    <span class="comment">//开门状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">OPENING_STATE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//关门状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">CLOSING_STATE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//运行状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RUNNING_STATE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//停止状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">STOPPING_STATE</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置电梯的状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯的动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lift</span> <span class="keyword">implements</span> <span class="title class_">ILift</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行关门动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯关门了。。。&quot;</span>);<span class="comment">//只有开门状态可以关闭电梯门，可以对应电梯状态表来看</span></span><br><span class="line">                <span class="built_in">this</span>.setState(CLOSING_STATE);<span class="comment">//关门之后电梯就是关闭状态了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //已经是关门状态，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //运行时电梯门是关着的，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //停止时电梯也是关着的，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行开门动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:<span class="comment">//门已经开了，不能再开门了</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//关门状态，门打开:</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯门打开了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(OPENING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing 运行时电梯不能开门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯门开了。。。&quot;</span>);<span class="comment">//电梯停了，可以开门了</span></span><br><span class="line">                <span class="built_in">this</span>.setState(OPENING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行运行动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:<span class="comment">//电梯不能开着门就走</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//门关了，可以运行了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(RUNNING_STATE);<span class="comment">//现在是运行状态</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing 已经是运行状态了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(RUNNING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行停止动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE: <span class="comment">//开门的电梯已经是是停止的了(正常情况下)</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//关门时才可以停止</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯停止了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(STOPPING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:<span class="comment">//运行时当然可以停止了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯停止了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(STOPPING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Lift</span> <span class="variable">lift</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lift</span>();</span><br><span class="line">        lift.setState(ILift.STOPPING_STATE);<span class="comment">//电梯是停止的</span></span><br><span class="line">        lift.open();<span class="comment">//开门</span></span><br><span class="line">        lift.close();<span class="comment">//关门</span></span><br><span class="line">        lift.run();<span class="comment">//运行</span></span><br><span class="line">        lift.stop();<span class="comment">//停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题分析：</p><ul><li>使用了大量的switch…case这样的判断（if…else也是一样)，使程序的可阅读性变差。</li><li>扩展性很差。如果新加了断电的状态，我们需要修改上面判断逻辑</li></ul><p><strong>定义：</strong></p><p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p><h3 id="6-5-2-结构">6.5.2 结构</h3><p>状态模式包含以下主要角色。</p><ul><li>环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li><li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li><li>具体状态（Concrete  State）角色：实现抽象状态所对应的行为。</li></ul><h3 id="6-5-3-案例实现">6.5.3 案例实现</h3><p>对上述电梯的案例使用状态模式进行改进。类图如下：</p><p><img src="https://photo.459122.xyz/i/c98b154cd52da60f4135cbddc6577bbf.png" alt="状态模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个环境角色，也就是封装状态的变化引起的功能变化</span></span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯开门动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯关门动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯运行动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯停止动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenningState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启当然可以关闭了，我就想测试一下电梯门开关功能</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯门开启...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.closeingState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门不能开着就跑，这里什么也不做</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开门状态已经是停止的了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunningState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行的时候开电梯门？你疯了！电梯不会给你开的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关闭？这是肯定了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;<span class="comment">//虽然可以关门，但这个动作不归我执行</span></span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是在运行状态下要实现的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯正在运行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个事绝对是合理的，光运行不停止还有谁敢做这个电梯？！估计只有上帝了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.stoppingState);</span><br><span class="line">        <span class="built_in">super</span>.context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoppingState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止状态，开门，那是要的！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.openningState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;<span class="comment">//虽然可以关门，但这个动作不归我执行</span></span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.closeingState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止状态再跑起来，正常的很</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.runningState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止状态是怎么发生的呢？当然是停止方法执行了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯停止了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosingState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//电梯门关闭，这是关闭状态要实现的动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯门关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关了再打开，逗你玩呢，那这个允许呀</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.openningState);</span><br><span class="line">        <span class="built_in">super</span>.context.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关了就跑，这是再正常不过了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.runningState);</span><br><span class="line">        <span class="built_in">super</span>.context.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关着，我就不按楼层</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.stoppingState);</span><br><span class="line">        <span class="built_in">super</span>.context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//环境角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="comment">//定义出所有的电梯状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">OpenningState</span> <span class="variable">openningState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenningState</span>();<span class="comment">//开门状态，这时候电梯只能关闭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ClosingState</span> <span class="variable">closeingState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClosingState</span>();<span class="comment">//关闭状态，这时候电梯可以运行、停止和开门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">RunningState</span> <span class="variable">runningState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunningState</span>();<span class="comment">//运行状态，这时候电梯只能停止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">StoppingState</span> <span class="variable">stoppingState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoppingState</span>();<span class="comment">//停止状态，这时候电梯可以开门、运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个当前电梯状态</span></span><br><span class="line">    <span class="keyword">private</span> LiftState liftState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiftState <span class="title function_">getLiftState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.liftState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLiftState</span><span class="params">(LiftState liftState)</span> &#123;</span><br><span class="line">        <span class="comment">//当前环境改变</span></span><br><span class="line">        <span class="built_in">this</span>.liftState = liftState;</span><br><span class="line">        <span class="comment">//把当前的环境通知到各个实现类中</span></span><br><span class="line">        <span class="built_in">this</span>.liftState.setContext(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">        context.setLiftState(<span class="keyword">new</span> <span class="title class_">ClosingState</span>());</span><br><span class="line"></span><br><span class="line">        context.open();</span><br><span class="line">        context.close();</span><br><span class="line">        context.run();</span><br><span class="line">        context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-4-优缺点">6.5.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li></ul><p><strong>2，缺点：</strong></p><ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li><li>状态模式对&quot;开闭原则&quot;的支持并不太好。</li></ul><h3 id="6-5-5-使用场景">6.5.5 使用场景</h3><ul><li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。</li><li>一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。</li></ul><h2 id="6-6-观察者模式">6.6 观察者模式</h2><h3 id="6-6-1-概述">6.6.1 概述</h3><p><strong>定义：</strong></p><p>又被称为发布-订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p><h3 id="6-6-2-结构">6.6.2 结构</h3><p>在观察者模式中有如下角色：</p><ul><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ul><h3 id="6-6-3-案例实现">6.6.3 案例实现</h3><p>【例】微信公众号</p><p>在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/c5bda9f9a69400d2bbe747bcc79393b3.png" alt="观察者模式"></p><p>代码如下：</p><p>定义抽象观察者类，里面定义一个更新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体观察者类，微信用户是观察者，里面实现了更新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinUser</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="comment">// 微信用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeixinUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;-&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象主题类，提供了attach、detach、notify三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//增加订阅者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除订阅者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通知订阅者更新消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//储存订阅公众号的微信用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        weixinUserlist.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        weixinUserlist.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : weixinUserlist) &#123;</span><br><span class="line">            observer.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SubscriptionSubject mSubscriptionSubject=<span class="keyword">new</span> <span class="title class_">SubscriptionSubject</span>();</span><br><span class="line">        <span class="comment">//创建微信用户</span></span><br><span class="line">        WeixinUser user1=<span class="keyword">new</span> <span class="title class_">WeixinUser</span>(<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">        WeixinUser user2=<span class="keyword">new</span> <span class="title class_">WeixinUser</span>(<span class="string">&quot;猪悟能&quot;</span>);</span><br><span class="line">        WeixinUser user3=<span class="keyword">new</span> <span class="title class_">WeixinUser</span>(<span class="string">&quot;沙悟净&quot;</span>);</span><br><span class="line">        <span class="comment">//订阅公众号</span></span><br><span class="line">        mSubscriptionSubject.attach(user1);</span><br><span class="line">        mSubscriptionSubject.attach(user2);</span><br><span class="line">        mSubscriptionSubject.attach(user3);</span><br><span class="line">        <span class="comment">//公众号更新发出消息给订阅的微信用户</span></span><br><span class="line">        mSubscriptionSubject.notify(<span class="string">&quot;xxx的专栏更新了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-6-4-优缺点">6.6.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li></ul><p><strong>2，缺点：</strong></p><ul><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul><h3 id="6-6-5-使用场景">6.6.5 使用场景</h3><ul><li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。</li></ul><h3 id="6-6-6-JDK中提供的实现">6.6.6 JDK中提供的实现</h3><p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p><p><strong>1，Observable类</strong></p><p>Observable 类是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。</p><ul><li><p>void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。</p></li><li><p>void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的 update方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</p></li><li><p>void setChange() 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变化。当它为true时，notifyObservers() 才会通知观察者。</p></li></ul><p><strong>2，Observer 接口</strong></p><p>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。</p><p>【例】警察抓小偷</p><p>警察抓小偷也可以使用观察者模式来实现，警察是观察者，小偷是被观察者。代码如下：</p><p>小偷是一个被观察者，所以需要继承Observable类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thief</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thief</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">steal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小偷：我偷东西了，有没有人来抓我！！！&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setChanged(); <span class="comment">//changed  = true</span></span><br><span class="line">        <span class="built_in">super</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>警察是一个观察者，所以需要让其实现Observer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Policemen</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Policemen</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;警察：&quot;</span> + ((Thief) o).getName() + <span class="string">&quot;，我已经盯你很久了，你可以保持沉默，但你所说的将成为呈堂证供！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建小偷对象</span></span><br><span class="line">        <span class="type">Thief</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thief</span>(<span class="string">&quot;隔壁老王&quot;</span>);</span><br><span class="line">        <span class="comment">//创建警察对象</span></span><br><span class="line">        <span class="type">Policemen</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Policemen</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        <span class="comment">//让警察盯着小偷</span></span><br><span class="line">        t.addObserver(p);</span><br><span class="line">        <span class="comment">//小偷偷东西</span></span><br><span class="line">        t.steal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-中介者模式">6.7 中介者模式</h2><h3 id="6-7-1-概述">6.7.1 概述</h3><p>一般来说，同事类之间的关系是比较复杂的，多个同事类之间互相关联时，他们之间的关系会呈现为复杂的网状结构，这是一种过度耦合的架构，即不利于类的复用，也不稳定。例如在下左图中，有六个同事类对象，假如对象1发生变化，那么将会有4个对象受到影响。如果对象2发生变化，那么将会有5个对象受到影响。也就是说，同事类之间直接关联的设计是不好的。</p><p>如果引入中介者模式，那么同事类之间的关系将变为星型结构，从下右图中可以看到，任何一个类的变动，只会影响的类本身，以及中介者，这样就减小了系统的耦合。一个好的设计，必定不会把所有的对象关系处理逻辑封装在本类中，而是使用一个专门的类来管理那些不属于自己的行为。</p><p><img src="https://photo.459122.xyz/i/48db2bce0f4fdb087c5007dc4838125e.png" alt="image-20200214110924010"></p><p><strong>定义：</strong></p><p>又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</p><h3 id="6-7-2-结构">6.7.2 结构</h3><p>中介者模式包含以下主要角色：</p><ul><li><p>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</p></li><li><p>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</p></li><li><p>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</p></li><li><p>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</p></li></ul><h3 id="6-7-3-案例实现">6.7.3 案例实现</h3><p>【例】租房</p><p>现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房屋中介充当租房者与房屋所有者之间的中介者。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/89633c57547c32fd5fad2459c43f8f7f.png" alt="中介者模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象中介者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">//申明一个联络方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message,Person person)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象同事类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,Mediator mediator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体同事类 房屋拥有者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseOwner</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseOwner</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.constact(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房主&quot;</span> + name +<span class="string">&quot;获取到的信息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体同事类 承租人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenant</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tenant</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.constact(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租房者&quot;</span> + name +<span class="string">&quot;获取到的信息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中介机构</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorStructure</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">//首先中介结构必须知道所有房主和租房者的信息</span></span><br><span class="line">    <span class="keyword">private</span> HouseOwner houseOwner;</span><br><span class="line">    <span class="keyword">private</span> Tenant tenant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HouseOwner <span class="title function_">getHouseOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> houseOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouseOwner</span><span class="params">(HouseOwner houseOwner)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.houseOwner = houseOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Tenant <span class="title function_">getTenant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTenant</span><span class="params">(Tenant tenant)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tenant = tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message, Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (person == houseOwner) &#123;          <span class="comment">//如果是房主，则租房者获得信息</span></span><br><span class="line">            tenant.getMessage(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;       <span class="comment">//反正则是房主获得信息</span></span><br><span class="line">            houseOwner.getMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个房主、一个租房者、一个中介机构</span></span><br><span class="line">        <span class="type">MediatorStructure</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MediatorStructure</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//房主和租房者只需要知道中介机构即可</span></span><br><span class="line">        <span class="type">HouseOwner</span> <span class="variable">houseOwner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HouseOwner</span>(<span class="string">&quot;张三&quot;</span>, mediator);</span><br><span class="line">        <span class="type">Tenant</span> <span class="variable">tenant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tenant</span>(<span class="string">&quot;李四&quot;</span>, mediator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中介结构要知道房主和租房者</span></span><br><span class="line">        mediator.setHouseOwner(houseOwner);</span><br><span class="line">        mediator.setTenant(tenant);</span><br><span class="line"></span><br><span class="line">        tenant.constact(<span class="string">&quot;需要租三室的房子&quot;</span>);</span><br><span class="line">        houseOwner.constact(<span class="string">&quot;我这有三室的房子，你需要租吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-4-优缺点">6.7.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>松散耦合</p><p>中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一处而动全身”了。</p></li><li><p>集中控制交互</p><p>多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。</p></li><li><p>一对多关联转变为一对一的关联</p><p>没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。</p></li></ul><p><strong>2，缺点：</strong></p><p>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</p><h3 id="6-7-5-使用场景">6.7.5 使用场景</h3><ul><li>系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。</li><li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li></ul><h2 id="6-8-迭代器模式">6.8 迭代器模式</h2><h3 id="6-8-1-概述">6.8.1 概述</h3><p><strong>定义：</strong></p><p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p><h3 id="6-8-2-结构">6.8.2 结构</h3><p>迭代器模式主要包含以下角色：</p><ul><li><p>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</p></li><li><p>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</p></li><li><p>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</p></li><li><p>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</p></li></ul><h3 id="6-8-3-案例实现">6.8.3 案例实现</h3><p>【例】定义一个可以存储学生对象的容器对象，将遍历该容器的功能交由迭代器实现，涉及到的类如下：</p><p><img src="https://photo.459122.xyz/i/862e613c738c291780531da64674e8d3.png" alt="迭代器模式"></p><p>代码如下：</p><p>定义迭代器接口，声明hasNext、next方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentIterator</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    Student <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体的迭代器类，重写所有的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentIteratorImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentIterator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentIteratorImpl</span><span class="params">(List&lt;Student&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">currentStudent</span> <span class="operator">=</span> list.get(position);</span><br><span class="line">        position ++;</span><br><span class="line">        <span class="keyword">return</span> currentStudent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentAggregate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    StudentIterator <span class="title function_">getStudentIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体的容器类，重写所有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAggregateImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentAggregate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();  <span class="comment">// 学生列表</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.remove(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StudentIterator <span class="title function_">getStudentIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentIteratorImpl</span>(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8-4-优缺点">6.8.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li><li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足 “开闭原则” 的要求。</li></ul><p><strong>2，缺点：</strong></p><p>增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h3 id="6-8-5-使用场景">6.8.5 使用场景</h3><ul><li>当需要为聚合对象提供多种遍历方式时。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li><li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li></ul><h3 id="6-8-6-JDK源码解析">6.8.6 JDK源码解析</h3><p>迭代器模式在JAVA的很多集合类中被广泛应用，接下来看看JAVA源码中是如何使用迭代器模式的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator(); <span class="comment">//list.iterator()方法返回的肯定是Iterator接口的子实现类对象</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完这段代码是不是很熟悉，与我们上面代码基本类似。单列集合都使用到了迭代器，我们以ArrayList举例来说明</p><ul><li>List：抽象聚合类</li><li>ArrayList：具体的聚合类</li><li>Iterator：抽象迭代器</li><li>list.iterator()：返回的是实现了 <code>Iterator</code> 接口的具体迭代器对象</li></ul><p>具体的来看看 ArrayList的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">int</span> cursor;       <span class="comment">// 下一个要返回元素的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 上一个返回元素的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否还有元素</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一个元素</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分代码还是比较简单，大致就是在 <code>iterator</code> 方法中返回了一个实例化的 <code>Iterator</code> 对象。Itr是一个内部类，它实现了 <code>Iterator</code> 接口并重写了其中的抽象方法。</p><blockquote><p>注意：</p><p>​当我们在使用JAVA开发的时候，想使用迭代器模式的话，只要让我们自己定义的容器类实现<code>java.util.Iterable</code>并实现其中的iterator()方法使其返回一个 <code>java.util.Iterator</code> 的实现类就可以了。</p></blockquote><h2 id="6-9-访问者模式">6.9 访问者模式</h2><h3 id="6-9-1-概述">6.9.1 概述</h3><p><strong>定义：</strong></p><p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</p><h3 id="6-9-2-结构">6.9.2 结构</h3><p>访问者模式包含以下主要角色:</p><ul><li>抽象访问者（Visitor）角色：定义了对每一个元素<code>（Element）</code>访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li><li>具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。</li><li>抽象元素（Element）角色：定义了一个接受访问者的方法（<code>accept</code>），其意义是指，每一个元素都要可以被访问者访问。</li><li>具体元素（ConcreteElement）角色： 提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li>对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（<code>Element</code>），并且可以迭代这些元素，供访问者访问。</li></ul><h3 id="6-9-3-案例实现">6.9.3 案例实现</h3><p>【例】给宠物喂食</p><p>现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以喂，其他人也可以喂食。</p><ul><li>访问者角色：给宠物喂食的人</li><li>具体访问者角色：主人、其他人</li><li>抽象元素角色：动物抽象类</li><li>具体元素角色：宠物狗、宠物猫</li><li>结构对象角色：主人家</li></ul><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/28452beecb3e28077832751fd50efe13.png" alt="访问者模式"></p><p>代码如下：</p><p>创建抽象访问者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建不同的具体访问者角色（主人和其他人），都需要实现 <code>Person</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Owner</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人喂食猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人喂食狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Someone</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;其他人喂食猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;其他人喂食狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象节点 – 宠物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person person)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现<code>Animal</code>接口的 具体节点（元素）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        person.feed(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;好好吃，汪汪汪！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        person.feed(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;好好吃，喵喵喵！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义对象结构，此案例中就是主人的家</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Animal&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Animal node : nodeList) &#123;</span><br><span class="line">            node.accept(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        nodeList.add(animal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Home</span> <span class="variable">home</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Home</span>();</span><br><span class="line">        home.add(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        home.add(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Owner</span> <span class="variable">owner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Owner</span>();</span><br><span class="line">        home.action(owner);</span><br><span class="line"></span><br><span class="line">        <span class="type">Someone</span> <span class="variable">someone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Someone</span>();</span><br><span class="line">        home.action(someone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-4-优缺点">6.9.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>扩展性好</p><p>在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</p></li><li><p>复用性好</p><p>通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</p></li><li><p>分离无关行为</p><p>通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li><p>对象结构变化很困难</p><p>在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。</p></li><li><p>违反了依赖倒置原则</p><p>访问者模式依赖了具体类，而没有依赖抽象类。</p></li></ul><h3 id="6-9-5-使用场景">6.9.5  使用场景</h3><ul><li><p>对象结构相对稳定，但其操作算法经常变化的程序。</p></li><li><p>对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。</p></li></ul><h3 id="6-9-6-扩展">6.9.6 扩展</h3><p>访问者模式用到了一种双分派的技术。</p><p><strong>1，分派：</strong></p><p>变量被声明时的类型叫做变量的静态类型，有些人又把静态类型叫做明显类型；而变量所引用的对象的真实类型又叫做变量的实际类型。比如 <code>Map map = new HashMap()</code> ，map变量的静态类型是 <code>Map</code> ，实际类型是 <code>HashMap</code> 。根据对象的类型而对方法进行的选择，就是分派(Dispatch)，分派(Dispatch)又分为两种，即静态分派和动态分派。</p><p><strong>静态分派(Static Dispatch)</strong> 发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。</p><p><strong>动态分派(Dynamic Dispatch)</strong> 发生在运行时期，动态分派动态地置换掉某个方法。Java通过方法的重写支持动态分派。</p><p><strong>2，动态分派：</strong></p><p>通过方法的重写支持动态分派。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.execute();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a1.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的结果大家应该直接可以说出来，这不就是多态吗！运行执行的是子类中的方法。</p><p>Java编译器在编译时期并不总是知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的真实类型；而方法的调用则是根据对象的真实类型，而不是静态类型。</p><p><strong>3，静态分派：</strong></p><p>通过方法重载支持静态分派。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Execute</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Dog d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Cat c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Execute</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Execute</span>();</span><br><span class="line">        exe.execute(a);</span><br><span class="line">        exe.execute(a1);</span><br><span class="line">        exe.execute(a2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://photo.459122.xyz/i/4a9e2fc59ec7de1ff61b1d6b30f6f77b.png" alt="image-20200214215446638"></p><p>这个结果可能出乎一些人的意料了，为什么呢？</p><p><strong>重载方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。</strong></p><p><strong>4，双分派：</strong></p><p>所谓双分派技术就是在选择一个方法的时候，不仅仅要根据消息接收者（receiver）的运行时区别，还要根据参数的运行时区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Execute exe)</span> &#123;</span><br><span class="line">        exe.execute(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Execute exe)</span> &#123;</span><br><span class="line">        exe.execute(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Execute exe)</span> &#123;</span><br><span class="line">        exe.execute(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Execute</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Dog d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Cat c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Execute</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Execute</span>();</span><br><span class="line">        a.accept(exe);</span><br><span class="line">        d.accept(exe);</span><br><span class="line">        c.accept(exe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中，客户端将Execute对象做为参数传递给Animal类型的变量调用的方法，这里完成第一次分派，这里是方法重写，所以是动态分派，也就是执行实际类型中的方法，同时也<code>将自己this作为参数传递进去，这里就完成了第二次分派</code>，这里的Execute类中有多个重载的方法，而传递进行的是this，就是具体的实际类型的对象。</p><p>说到这里，我们已经明白双分派是怎么回事了，但是它有什么效果呢？就是可以实现方法的动态绑定，我们可以对上面的程序进行修改。</p><p>运行结果如下：</p><p><img src="https://photo.459122.xyz/i/2793a938ebd333654892b5548dcc5a94.png" alt="image-20200426233931693"></p><p><strong>双分派实现动态绑定的本质，就是在重载方法委派的前面加上了继承体系中覆盖的环节，由于覆盖是动态的，所以重载就是动态的了。</strong></p><p>总结：</p><blockquote><h3 id="一句话核心"><strong>一句话核心</strong></h3><p><strong>Java 的方法重载（Overload）在编译时根据参数“表面类型”决定调用谁，而非实际对象类型。</strong></p><h3 id="举个通俗例子"><strong>举个通俗例子</strong></h3><p>想象你要寄快递：</p><ul><li><strong>重载（Overload）</strong>：快递员只看箱子<strong>外面写的标签</strong>（比如“水果”），不管里面是苹果还是香蕉，直接按标签分类处理。</li><li><strong>多态/重写（Override）</strong>：快递员会拆开箱子，看里面的<strong>实际物品</strong>（苹果或香蕉），再决定处理方式。</li></ul><p>你的代码中，所有参数变量（a1、a2）的“标签”都是 <code>Animal</code>，所以永远触发 <code>execute(Animal a)</code>。</p><h3 id="如何让代码按实际类型输出？"><strong>如何让代码按实际类型输出？</strong></h3><p><strong>用多态（重写）代替重载</strong>，修改代码如下：</p><h4 id="1-在-Animal-类中定义方法，让子类重写"><strong>1. 在 Animal 类中定义方法，让子类重写</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;  <span class="comment">// 重写方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;  <span class="comment">// 重写方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-直接调用对象的-execute-方法"><strong>2. 直接调用对象的 execute 方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  <span class="comment">// 实际类型是 Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 实际类型是 Cat</span></span><br><span class="line"></span><br><span class="line">        a.execute();   <span class="comment">// 输出 Animal</span></span><br><span class="line">        a1.execute();  <span class="comment">// 输出 dog（实际类型决定）</span></span><br><span class="line">        a2.execute();  <span class="comment">// 输出 cat（实际类型决定）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键对比表"><strong>关键对比表</strong></h3><table><thead><tr><th><strong>场景</strong></th><th>重载（Overload）</th><th>多态/重写（Override）</th></tr></thead><tbody><tr><td><strong>你的代码</strong></td><td>根据参数<strong>表面类型</strong>（Animal）</td><td>未被使用</td></tr><tr><td><strong>正确做法</strong></td><td>无需多参数重载</td><td>让每个子类<strong>重写</strong>父类方法</td></tr><tr><td><strong>绑定时机</strong></td><td>编译时决定</td><td>运行时根据实际对象类型决定</td></tr><tr><td><strong>核心区别</strong></td><td>方法名相同，参数列表<strong>必须不同</strong></td><td>方法名、参数列表<strong>完全相同</strong></td></tr></tbody></table><h3 id="记忆口诀"><strong>记忆口诀</strong></h3><ul><li><strong>重载看表面，重写看里面。</strong></li><li><strong>编译写死类型，运行才玩真实。</strong></li></ul></blockquote><blockquote><p>在 Java 中，<strong>重载（Overload）</strong> 和 <strong>重写（Override）</strong> 是两种完全不同的机制，核心区别在于 <strong>绑定时机</strong> 和 <strong>设计目的</strong>。以下是两者的详细对比：</p><h3 id="一、核心区别对比表"><strong>一、核心区别对比表</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>重载（Overload）</strong></th><th><strong>重写（Override）</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>同一个类中，方法名相同但<strong>参数列表不同</strong>。</td><td>子类重新定义父类中<strong>同名、同参数</strong>的方法。</td></tr><tr><td><strong>绑定时机</strong></td><td><strong>编译时</strong>（静态绑定）</td><td><strong>运行时</strong>（动态绑定）</td></tr><tr><td><strong>多态性</strong></td><td>无关（本质是不同方法）</td><td>实现多态的核心机制</td></tr><tr><td><strong>作用域</strong></td><td>同一个类或父子类中均可</td><td>必须是父子类（或接口实现类）</td></tr><tr><td><strong>返回值类型</strong></td><td>可以不同</td><td>必须相同或为父类返回值的子类（协变返回）</td></tr><tr><td><strong>访问权限</strong></td><td>可以不同</td><td>子类方法不能比父类更严格（如父类<code>public</code>，子类不能<code>private</code>）</td></tr><tr><td><strong>异常</strong></td><td>可以抛出不同异常</td><td>不能抛出比父类更宽泛的受检异常</td></tr></tbody></table><h3 id="二、通俗理解"><strong>二、通俗理解</strong></h3><h4 id="1-重载（Overload）"><strong>1. 重载（Overload）</strong></h4><ul><li><p><strong>本质</strong>：<strong>方法名称的复用</strong>，解决同一功能需要不同参数的问题。</p></li><li><p><strong>类比</strong>：同一把瑞士军刀，刀头不同（剪刀、螺丝刀、小刀），名字都叫“工具”，但用途不同。</p></li><li><p>示例</p><p>：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java<span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">add</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">    <span class="type">double</span> <span class="built_in">add</span>(<span class="type">double</span> a, <span class="type">double</span> b) &#123; <span class="keyword">return</span> a + b; &#125; <span class="comment">// 重载：参数类型不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-重写（Override）"><strong>2. 重写（Override）</strong></h4><ul><li><p><strong>本质</strong>：<strong>方法实现的替换</strong>，子类根据需求覆盖父类行为。</p></li><li><p><strong>类比</strong>：父亲说“赚钱方法是用体力劳动”，儿子说“我的赚钱方法是用脑力劳动”。</p></li><li><p>示例</p><p>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Animal</span> &#123;</span><br><span class="line">    void speak() &#123; <span class="type">System</span>.out.println(<span class="string">&quot;Animal sound&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    void speak() &#123; <span class="type">System</span>.out.println(<span class="string">&quot;Woof!&quot;</span>); &#125; <span class="comment">// 重写：实现替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、关键差异场景"><strong>三、关键差异场景</strong></h3><h4 id="场景1：方法调用决定权"><strong>场景1：方法调用决定权</strong></h4><ul><li><p>重载</p><p>：调用哪个方法由</p><p>编译器根据参数静态类型</p><p>决定。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaAnimal a = <span class="built_in">new</span> Dog();</span><br><span class="line">exe.<span class="keyword">execute</span>(a);  // 调用 <span class="keyword">execute</span>(Animal a)，而非 <span class="keyword">execute</span>(Dog d)</span><br></pre></td></tr></table></figure></li><li><p>重写</p><p>：调用哪个方法由</p><p>JVM 根据对象实际类型</p><p>决定。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaAnimal a <span class="operator">=</span> new Dog()<span class="comment">;</span></span><br><span class="line">a.speak()<span class="comment">;  // 调用 Dog 的 speak() 方法</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="场景2：继承关系"><strong>场景2：继承关系</strong></h4><ul><li><p>重载</p><p>：可以存在于父子类中（但本质还是不同方法）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Parent</span> &#123;</span><br><span class="line">    void test(int a) &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    void test(<span class="type">String</span> s) &#123; ... &#125; <span class="comment">// 重载（参数不同），不是重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写</p><p>：必须存在于父子类中，且方法签名完全一致。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Parent</span> &#123;</span><br><span class="line">    void test(int a) &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    void test(int a) &#123; ... &#125; <span class="comment">// 重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、如何选择？"><strong>四、如何选择？</strong></h3><ul><li><strong>用重载</strong>：需要为同一功能提供多种参数组合时（如不同数据类型的加法）。</li><li><strong>用重写</strong>：需要子类定制父类行为时（如不同动物发出不同叫声）。</li></ul><h3 id="五、常见陷阱"><strong>五、常见陷阱</strong></h3><ol><li><p><strong>误把重载当重写</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Parent</span> &#123;</span><br><span class="line">    void test() &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    void test(int a) &#123; ... &#125; <span class="comment">// 这是重载，不是重写！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若想重写，方法签名必须完全一致（无参数）。</li></ul></li><li><p><strong>静态方法不能重写</strong></p><ul><li>静态方法属于类，用 <code>@Override</code> 注解会编译报错。</li><li>若父子类有同名静态方法，实际是隐藏（Hide）而非重写。</li></ul></li></ol><h3 id="总结"><strong>总结</strong></h3><ul><li><strong>重载</strong>：编译时决定，解决“方法功能扩展”。</li><li><strong>重写</strong>：运行时决定，解决“多态行为替换”。</li></ul><p><strong>口诀</strong>：</p><blockquote><p>重载同名不同参，编译绑定不相关； 重写父子同方法，运行多态看真身。</p></blockquote></blockquote><h2 id="6-10-备忘录模式">6.10 备忘录模式</h2><h3 id="6-10-1-概述">6.10.1 概述</h3><p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，很多软件都提供了撤销（Undo）操作，如 Word、记事本、Photoshop、IDEA等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 浏览器 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。</p><p><strong>定义：</strong></p><p>又叫快照模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p><h3 id="6-10-2-结构">6.10.2 结构</h3><p>备忘录模式的主要角色如下：</p><ul><li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li><li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li><li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</li></ul><blockquote><p>备忘录有两个等效的接口：</p><ul><li><strong>窄接口</strong>：管理者(Caretaker)对象（和其他发起人对象之外的任何对象）看到的是备忘录的窄接口(narror Interface)，这个窄接口只允许他把备忘录对象传给其他的对象。</li><li><strong>宽接口</strong>：与管理者看到的窄接口相反，发起人对象可以看到一个宽接口(wide Interface)，这个宽接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象的内部状态。</li></ul></blockquote><h3 id="6-10-3-案例实现">6.10.3 案例实现</h3><p>【例】游戏挑战BOSS</p><p>游戏中的某个场景，一游戏角色有生命力、攻击力、防御力等数据，在打Boss前和后一定会不一样的，我们允许玩家如果感觉与Boss决斗的效果不理想可以让游戏恢复到决斗之前的状态。</p><p>要实现上述案例，有两种方式：</p><ul><li>“白箱”备忘录模式</li><li>“黑箱”备忘录模式</li></ul><h4 id="6-10-3-1-“白箱”备忘录模式">6.10.3.1 “白箱”备忘录模式</h4><p>备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公开。类图如下：</p><p><img src="https://photo.459122.xyz/i/1a3928f5c7c99cbec60232a5d03ce376.png" alt="白箱备忘录模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游戏角色类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameRole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> vit; <span class="comment">//生命力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk; <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def; <span class="comment">//防御力</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//战斗</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存角色状态</span></span><br><span class="line">    <span class="keyword">public</span> RoleStateMemento <span class="title function_">saveState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoleStateMemento</span>(vit, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回复角色状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverState</span><span class="params">(RoleStateMemento roleStateMemento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = roleStateMemento.getVit();</span><br><span class="line">        <span class="built_in">this</span>.atk = roleStateMemento.getAtk();</span><br><span class="line">        <span class="built_in">this</span>.def = roleStateMemento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;角色生命力：&quot;</span> + vit);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色攻击力：&quot;</span> + atk);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色防御力：&quot;</span> + def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏状态存储类(备忘录类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleStateMemento</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> vit;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoleStateMemento</span><span class="params">(<span class="type">int</span> vit, <span class="type">int</span> atk, <span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//角色状态管理者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleStateCaretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RoleStateMemento roleStateMemento;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RoleStateMemento <span class="title function_">getRoleStateMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleStateMemento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoleStateMemento</span><span class="params">(RoleStateMemento roleStateMemento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roleStateMemento = roleStateMemento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss前------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss前</span></span><br><span class="line">        <span class="type">GameRole</span> <span class="variable">gameRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameRole</span>();</span><br><span class="line">        gameRole.initState();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存进度</span></span><br><span class="line">        <span class="type">RoleStateCaretaker</span> <span class="variable">roleStateCaretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleStateCaretaker</span>();</span><br><span class="line">        roleStateCaretaker.setRoleStateMemento(gameRole.saveState());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss后------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss时，损耗严重</span></span><br><span class="line">        gameRole.fight();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------恢复之前状态------------&quot;</span>);</span><br><span class="line">        <span class="comment">//恢复之前状态</span></span><br><span class="line">        gameRole.recoverState(roleStateCaretaker.getRoleStateMemento());</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：白箱备忘录模式是破坏封装性的。但是通过程序员自律，同样可以在一定程度上实现模式的大部分用意。</p></blockquote><h4 id="6-10-3-2-“黑箱”备忘录模式">6.10.3.2 “黑箱”备忘录模式</h4><p>备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在Java语言中，实现双重接口的办法就是将<strong>备忘录类</strong>设计成<strong>发起人类</strong>的内部成员类。</p><p>将 <code>RoleStateMemento</code> 设为 <code>GameRole</code> 的内部类，从而将 <code>RoleStateMemento</code> 对象封装在 <code>GameRole</code> 里面；在外面提供一个标识接口 <code>Memento</code> 给 <code>RoleStateCaretaker</code> 及其他对象使用。这样 <code>GameRole</code> 类看到的是 <code>RoleStateMemento</code> 所有的接口，而<code>RoleStateCaretaker</code>  及其他对象看到的仅仅是标识接口 <code>Memento</code> 所暴露出来的接口，从而维护了封装型。类图如下：</p><p><img src="https://photo.459122.xyz/i/a5152e1ecf050421e6622e1fbc779c10.png" alt="黑箱备忘录模式"></p><p>代码如下：</p><p>窄接口<code>Memento</code>，这是一个标识接口，因此没有定义出任何的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义发起人类 <code>GameRole</code>，并在内部定义备忘录内部类 <code>RoleStateMemento</code>（该内部类设置为私有的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">/游戏角色类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameRole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> vit; <span class="comment">//生命力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk; <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def; <span class="comment">//防御力</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//战斗</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存角色状态</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">saveState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoleStateMemento</span>(vit, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回复角色状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverState</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="type">RoleStateMemento</span> <span class="variable">roleStateMemento</span> <span class="operator">=</span> (RoleStateMemento) memento;</span><br><span class="line">        <span class="built_in">this</span>.vit = roleStateMemento.getVit();</span><br><span class="line">        <span class="built_in">this</span>.atk = roleStateMemento.getAtk();</span><br><span class="line">        <span class="built_in">this</span>.def = roleStateMemento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;角色生命力：&quot;</span> + vit);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色攻击力：&quot;</span> + atk);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色防御力：&quot;</span> + def);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">RoleStateMemento</span> <span class="keyword">implements</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> vit;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> atk;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> def;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">RoleStateMemento</span><span class="params">(<span class="type">int</span> vit, <span class="type">int</span> atk, <span class="type">int</span> def)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.vit = vit;</span><br><span class="line">            <span class="built_in">this</span>.atk = atk;</span><br><span class="line">            <span class="built_in">this</span>.def = def;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> vit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.vit = vit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> atk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.atk = atk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> def;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.def = def;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负责人角色类 <code>RoleStateCaretaker</code> 能够得到的备忘录对象是以 <code>Memento</code> 为接口的，由于这个接口仅仅是一个标识接口，因此负责人角色不可能改变这个备忘录对象的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//角色状态管理者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleStateCaretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss前------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss前</span></span><br><span class="line">        <span class="type">GameRole</span> <span class="variable">gameRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameRole</span>();</span><br><span class="line">        gameRole.initState();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存进度</span></span><br><span class="line">        <span class="type">RoleStateCaretaker</span> <span class="variable">roleStateCaretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleStateCaretaker</span>();</span><br><span class="line">        roleStateCaretaker.setMemento(gameRole.saveState());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss后------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss时，损耗严重</span></span><br><span class="line">        gameRole.fight();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------恢复之前状态------------&quot;</span>);</span><br><span class="line">        <span class="comment">//恢复之前状态</span></span><br><span class="line">        gameRole.recoverState(roleStateCaretaker.getMemento());</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-10-4-优缺点">6.10.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li><li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li><li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li></ul><p><strong>2，缺点：</strong></p><ul><li>资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li></ul><h3 id="6-10-5-使用场景">6.10.5 使用场景</h3><ul><li><p>需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。</p></li><li><p>需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，idea等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。</p></li></ul>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（4）</title>
    <link href="https://yjyrichard.github.io/posts/498824af.html"/>
    <id>https://yjyrichard.github.io/posts/498824af.html</id>
    <published>2025-05-06T06:53:52.058Z</published>
    <updated>2025-05-06T07:13:08.388Z</updated>
    
    <content type="html"><![CDATA[<h1>5，结构型模式</h1><h2 id="5-6-组合模式">5.6 组合模式</h2><h3 id="5-6-1-概述">5.6.1 概述</h3><p><img src="https://photo.459122.xyz/i/3d7b276f6be37cbee62f2f38c99d9382.png" alt="image-20200208180417291"></p><p>​对于这个图片肯定会非常熟悉，上图我们可以看做是一个文件系统，对于这样的结构我们称之为树形结构。在树形结构中可以通过调用某个方法来遍历整个树，当我们找到某个叶子节点后，就可以对叶子节点进行相关的操作。可以将这颗树理解成一个大的容器，容器里面包含很多的成员对象，这些成员对象即可是容器对象也可以是叶子对象。但是由于容器对象和叶子对象在功能上面的区别，使得我们在使用的过程中必须要区分容器对象和叶子对象，但是这样就会给客户带来不必要的麻烦，作为客户而已，它始终希望能够一致的对待容器对象和叶子对象。</p><p><strong>定义：</strong></p><p>​又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><h3 id="5-6-2-结构">5.6.2 结构</h3><p>组合模式主要包含三种角色：</p><ul><li>抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li><li>树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li><li>叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li></ul><h3 id="5-6-3-案例实现">5.6.3 案例实现</h3><p>【例】软件菜单</p><p>如下图，我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。</p><p><img src="https://photo.459122.xyz/i/daf4da130d9ec4921bd2a0cc50f8fcb6.png" alt="image-20200208182322313"></p><p>要实现该案例，我们先画出类图：</p><p><img src="https://photo.459122.xyz/i/60416d4417f764cc815c720b5d50542d.png" alt="组合模式"></p><p><strong>代码实现：</strong></p><p>不管是菜单还是菜单项，都应该继承自统一的接口，这里姑且将这个统一的接口称为菜单组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单组件  不管是菜单还是菜单项，都应该继承该类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"><span class="comment">//菜单组件的名称</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="comment">//菜单组件的层级</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加子菜单  子类是菜单的话下面可以有菜单或者菜单项 如果是菜单项就不可以使用这个方法 父类默认不支持</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除子菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定的子菜单</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取菜单名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的MenuComponent定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu和MenuItem类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说，Menu类可以包含子菜单，因此需要覆盖add()、remove()、getChild()方法，但是MenuItem就不应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单可以有多个子菜单或者子菜单项</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuComponentList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(String name,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        menuComponentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MenuComponent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponentList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印菜单名称</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//打印菜单或者子菜单项名称</span></span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Menu类已经实现了除了getName方法的其他所有方法，因为Menu类具有添加菜单，移除菜单和获取子菜单的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name,<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MenuItem是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建菜单树</span></span><br><span class="line"><span class="type">MeauComponent</span> <span class="variable">menu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;菜单管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><h3 id="5-6-4-组合模式的分类">5.6.4 组合模式的分类</h3><p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。</p><ul><li><p>透明组合模式</p><p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 <code>MenuComponent</code> 声明了 <code>add</code>、<code>remove</code> 、<code>getChild</code> 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</p><p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）</p></li><li><p>安全组合模式</p><p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 <code>Menu</code> 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p><p><img src="https://photo.459122.xyz/i/f18b68b9f2c19103c4224b9012d16023.png" alt="组合模式-安全性"></p></li></ul><h3 id="5-6-5-优点">5.6.5 优点</h3><ul><li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。</li><li>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。</li><li>在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合“开闭原则”。</li><li>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</li></ul><h3 id="5-6-6-使用场景">5.6.6 使用场景</h3><p>组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显示，多级目录呈现等树形结构数据的操作。</p><h2 id="5-7-享元模式">5.7 享元模式</h2><h3 id="5-7-1-概述">5.7.1 概述</h3><p><strong>定义：</strong></p><p>​运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。【共享单车】</p><h3 id="5-7-2-结构">5.7.2 结构</h3><p>享元（Flyweight ）模式中存在以下两种状态：</p><ol><li>内部状态，即不会随着环境的改变而改变的可共享部分。</li><li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li></ol><p>享元模式的主要有以下角色：</p><ul><li>抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li><li>具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li><li>非享元（Unsharable Flyweight)角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li><li>享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li></ul><h3 id="5-7-3-案例实现">5.7.3 案例实现</h3><p>【例】俄罗斯方块</p><p>下面的图片是众所周知的俄罗斯方块中的一个个方块，如果在俄罗斯方块这个游戏中，每个不同的方块都是一个实例对象，这些对象就要占用很多的内存空间，下面利用享元模式进行实现。</p><p><img src="https://photo.459122.xyz/i/8b3903e6f4a8d710603b0441ecf78e62.jpeg" alt="俄罗斯方块"></p><p><strong>先来看类图：</strong></p><p><img src="https://photo.459122.xyz/i/b698f665fd88f261c8ab5a7ca25c982d.png" alt="享元模式"></p><p><strong>代码如下：</strong></p><p>俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出AbstractBox，用来定义共性的属性和行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBox</span> &#123;<span class="comment">//抽象享元角色</span></span><br><span class="line">    <span class="comment">//获取图形的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getShape</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示图形及颜色 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方块形状：&quot;</span> + <span class="built_in">this</span>.getShape() + <span class="string">&quot; 颜色：&quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是定义不同的形状了，IBox类、LBox类、OBox类等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IBox</span> <span class="keyword">extends</span> <span class="title class_">AbstractBox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LBox</span> <span class="keyword">extends</span> <span class="title class_">AbstractBox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;L&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OBox</span> <span class="keyword">extends</span> <span class="title class_">AbstractBox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;O&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供了一个工厂类（BoxFactory），用来管理享元对象（也就是AbstractBox子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxFactory</span> &#123;<span class="comment">//工厂类 设计为单例  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, AbstractBox&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在构造方法种进行初始化操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BoxFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, AbstractBox&gt;();</span><br><span class="line">        <span class="type">AbstractBox</span> <span class="variable">iBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IBox</span>();</span><br><span class="line">        <span class="type">AbstractBox</span> <span class="variable">lBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LBox</span>();</span><br><span class="line">        <span class="type">AbstractBox</span> <span class="variable">oBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OBox</span>();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>, iBox);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>, lBox);</span><br><span class="line">        map.put(<span class="string">&quot;O&quot;</span>, oBox);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据名称获取图形对象</span></span><br><span class="line">    <span class="keyword">public</span> AbstractBox <span class="title function_">getShape</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BoxFactory <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BoxFactory</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoxFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AbstractBox <span class="title function_">getBox</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-5-优缺点和使用场景">5.7.5 优缺点和使用场景</h3><p><strong>1，优点</strong></p><ul><li>极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能</li><li>享元模式中的外部状态相对独立，且不影响内部状态</li></ul><p><strong>2，缺点：</strong></p><p>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</p><p><strong>3，使用场景：</strong></p><ul><li>一个系统有大量相同或者相似的对象，造成内存的大量耗费。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。</li></ul><h3 id="5-7-6-JDK源码解析">5.7.6 JDK源码解析</h3><p>Integer类使用了享元模式。我们先看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i1和i2对象是否是同一个对象？&quot;</span> + (i1 == i2));</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i3和i4对象是否是同一个对象？&quot;</span> + (i3 == i4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面代码，结果如下：</p><p><img src="https://photo.459122.xyz/i/1a6ad3e565229f7c231fb6243850785d.png" alt="image-20200208212930857"></p><p>为什么第一个输出语句输出的是true，第二个输出语句输出的是false？通过反编译软件进行反编译，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> Integer.valueOf((<span class="type">int</span>)<span class="number">127</span>);</span><br><span class="line">        Integer i2 Integer.valueOf((<span class="type">int</span>)<span class="number">127</span>);</span><br><span class="line">        System.out.println((String)<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append((String)<span class="string">&quot;i1\u548ci2\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f&quot;</span>).append((<span class="type">boolean</span>)(i1 == i2)).toString());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf((<span class="type">int</span>)<span class="number">128</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf((<span class="type">int</span>)<span class="number">128</span>);</span><br><span class="line">        System.out.println((String)<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append((String)<span class="string">&quot;i3\u548ci4\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f&quot;</span>).append((<span class="type">boolean</span>)(i3 == i4)).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到，直接给Integer类型的变量赋值基本数据类型数据的操作底层使用的是 <code>valueOf()</code> ，所以只需要看该方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Integer</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">integerCacheHighPropValue</span> <span class="operator">=</span></span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line">            cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>Integer</code> 默认先创建并缓存 <code>-128 ~ 127</code> 之间数的 <code>Integer</code> 对象，当调用 <code>valueOf</code> 时如果参数在 <code>-128 ~ 127</code> 之间则计算下标并从缓存中返回，否则创建一个新的 <code>Integer</code> 对象。</p><h1>6，行为型模式</h1><p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。</p><p>行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p><p>行为型模式分为：</p><ul><li>模板方法模式</li><li>策略模式</li><li>命令模式</li><li>职责链模式</li><li>状态模式</li><li>观察者模式</li><li>中介者模式</li><li>迭代器模式</li><li>访问者模式</li><li>备忘录模式</li><li>解释器模式</li></ul><p>以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。</p><h2 id="6-1-模板方法模式">6.1 模板方法模式</h2><h3 id="6-1-1-概述">6.1.1 概述</h3><p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p><p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p><p><strong>定义：</strong></p><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p><h3 id="6-1-2-结构">6.1.2 结构</h3><p>模板方法（Template Method）模式包含以下主要角色：</p><ul><li><p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p><ul><li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p></li><li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p><ul><li><p>抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p></li><li><p>具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p></li><li><p>钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p><p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为boolean类型。</p></li></ul></li></ul></li><li><p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p></li></ul><h3 id="6-1-3-案例实现">6.1.3 案例实现</h3><p>【例】炒菜</p><p>炒菜的步骤是固定的，分为倒油、热油、倒蔬菜、倒调料品、翻炒等步骤。现通过模板方法模式来用代码模拟。类图如下：</p><p><img src="https://photo.459122.xyz/i/179b348953d313b75cc0a5407d1f113a.png" alt="模板方法模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cookProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//第一步：倒油</span></span><br><span class="line">        <span class="built_in">this</span>.pourOil();</span><br><span class="line">        <span class="comment">//第二步：热油</span></span><br><span class="line">        <span class="built_in">this</span>.heatOil();</span><br><span class="line">        <span class="comment">//第三步：倒蔬菜</span></span><br><span class="line">        <span class="built_in">this</span>.pourVegetable();</span><br><span class="line">        <span class="comment">//第四步：倒调味料</span></span><br><span class="line">        <span class="built_in">this</span>.pourSauce();</span><br><span class="line">        <span class="comment">//第五步：翻炒</span></span><br><span class="line">        <span class="built_in">this</span>.fry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourOil</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒油&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步：热油是一样的，所以直接实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heatOil</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;热油&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">pourVegetable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四步：倒调味料是不一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">pourSauce</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第五步：翻炒是一样的，所以直接实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;炒啊炒啊炒到熟啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass_BaoCai</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourVegetable</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的蔬菜是包菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourSauce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的酱料是辣椒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass_CaiXin</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourVegetable</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的蔬菜是菜心&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourSauce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的酱料是蒜蓉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//炒手撕包菜</span></span><br><span class="line">        <span class="type">ConcreteClass_BaoCai</span> <span class="variable">baoCai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass_BaoCai</span>();</span><br><span class="line">        baoCai.cookProcess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//炒蒜蓉菜心</span></span><br><span class="line">        <span class="type">ConcreteClass_CaiXin</span> <span class="variable">caiXin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass_CaiXin</span>();</span><br><span class="line">        caiXin.cookProcess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：为防止恶意操作，一般模板方法都加上 final 关键词。</p></blockquote><h3 id="6-1-3-优缺点">6.1.3 优缺点</h3><p><strong>优点：</strong></p><ul><li><p>提高代码复用性</p><p>将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。</p></li><li><p>实现了反向控制</p><p>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 ，并符合“开闭原则”。</p></li></ul><p><strong>缺点：</strong></p><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li></ul><h3 id="6-1-4-适用场景">6.1.4 适用场景</h3><ul><li>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</li><li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li></ul><h3 id="6-1-5-JDK源码解析">6.1.5 JDK源码解析</h3><p>InputStream类就使用了模板方法模式。在InputStream类中定义了多个 <code>read()</code> 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">InputStream</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;<span class="comment">//抽象类</span></span><br><span class="line">    <span class="comment">//抽象方法，要求子类必须重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板f</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (off &lt; <span class="number">0</span> || len &lt; <span class="number">0</span> || len &gt; b.length - off) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> read(); <span class="comment">//调用了无参的read方法，该方法是每次读取一个字节数据</span></span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        b[off] = (<span class="type">byte</span>)c;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len ; i++) &#123;</span><br><span class="line">                c = read();</span><br><span class="line">                <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                b[off + i] = (<span class="type">byte</span>)c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ee) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看到，无参的 <code>read()</code> 方法是抽象方法，要求子类必须实现。而 <code>read(byte b[])</code> 方法调用了 <code>read(byte b[], int off, int len)</code> 方法，所以在此处重点看的方法是带三个参数的方法。</p><p>在该方法中第18行、27行，可以看到调用了无参的抽象的 <code>read()</code> 方法。</p><p>总结如下： 在InputStream父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节，并将其存储到数组的第一个索引位置，读取len个字节数据。具体如何读取一个字节数据呢？由子类实现。</p><h2 id="6-2-策略模式">6.2 策略模式</h2><h3 id="6-2-1-概述">6.2.1 概述</h3><p>先看下面的图片，我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。</p><p><img src="https://photo.459122.xyz/i/dcb3c31622f7f5bad5b2d0cedda4e90b.png" alt="image-20200210143039168"></p><p>作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。</p><p><img src="https://photo.459122.xyz/i/94f820407016ecc4b1a57568075cbc91.png" alt="image-20200210144457478"></p><p><strong>定义：</strong></p><p>​该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><h3 id="6-2-2-结构">6.2.2 结构</h3><p>策略模式的主要角色如下：</p><ul><li>抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li></ul><h3 id="6-2-3-案例实现">6.2.3 案例实现</h3><p>【例】促销活动</p><p>一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动，由促销员将促销活动展示给客户。类图如下：</p><p><img src="https://photo.459122.xyz/i/99c44f897733536c2bd43e996990f8b2.png" alt="策略模式"></p><p>代码如下：</p><p>定义百货公司所有促销活动的共同接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为春节准备的促销活动A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyA</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买一送一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为中秋准备的促销活动B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyB</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满200元减50元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为圣诞准备的促销活动C</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyC</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满1000元加一元换购任意200元以下商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalesMan</span> &#123;                        </span><br><span class="line">    <span class="comment">//持有抽象策略角色的引用                              </span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;                 </span><br><span class="line">                                               </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SalesMan</span><span class="params">(Strategy strategy)</span> &#123;       </span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;              </span><br><span class="line">    &#125;                                          </span><br><span class="line">                                               </span><br><span class="line">    <span class="comment">//向客户展示促销活动                                </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">salesManShow</span><span class="params">()</span>&#123;                </span><br><span class="line">        strategy.show();                       </span><br><span class="line">    &#125;                                          </span><br><span class="line">&#125;                                              </span><br></pre></td></tr></table></figure><h3 id="6-2-4-优缺点">6.2.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>策略类之间可以自由切换</p><p>由于策略类都实现同一个接口，所以使它们之间可以自由切换。</p></li><li><p>易于扩展</p><p>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合“开闭原则“</p></li><li><p>避免使用多重条件选择语句（if else），充分体现面向对象设计思想。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li></ul><h3 id="6-2-5-使用场景">6.2.5 使用场景</h3><ul><li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li><li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li><li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h3 id="6-2-6-JDK源码解析">6.2.6 JDK源码解析</h3><p><code>Comparator</code> 中的策略模式。在Arrays类中有一个 <code>sort()</code> 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrays</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            sort(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">                legacyMergeSort(a, c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays就是一个环境角色类，这个sort方法可以传一个新策略让Arrays根据这个策略来进行排序。就比如下面的测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Integer[] data = &#123;<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 实现降序排序</span></span><br><span class="line">        Arrays.sort(data, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(data)); <span class="comment">//[12, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在调用Arrays的sort方法时，第二个参数传递的是Comparator接口的子实现类对象。所以Comparator充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。那么，Arrays类的sort方法到底有没有使用Comparator子实现类中的 <code>compare()</code> 方法吗？让我们继续查看TimSort类的 <code>sort()</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimSort</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, <span class="type">int</span> lo, <span class="type">int</span> hi, Comparator&lt;? <span class="built_in">super</span> T&gt; c,</span></span><br><span class="line"><span class="params">                         T[] work, <span class="type">int</span> workBase, <span class="type">int</span> workLen)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="literal">null</span> &amp;&amp; a != <span class="literal">null</span> &amp;&amp; lo &gt;= <span class="number">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nRemaining</span>  <span class="operator">=</span> hi - lo;</span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// Arrays of size 0 and 1 are always sorted</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If array is small, do a &quot;mini-TimSort&quot; with no merges</span></span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">initRunLen</span> <span class="operator">=</span> countRunAndMakeAscending(a, lo, hi, c);</span><br><span class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">countRunAndMakeAscending</span><span class="params">(T[] a, <span class="type">int</span> lo, <span class="type">int</span> hi,Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> lo &lt; hi;</span><br><span class="line">        <span class="type">int</span> <span class="variable">runHi</span> <span class="operator">=</span> lo + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (runHi == hi)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find end of run, and reverse range if descending</span></span><br><span class="line">        <span class="keyword">if</span> (c.compare(a[runHi++], a[lo]) &lt; <span class="number">0</span>) &#123; <span class="comment">// Descending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">            reverseRange(a, lo, runHi);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                              <span class="comment">// Ascending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &gt;= <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> runHi - lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中最终会跑到 <code>countRunAndMakeAscending()</code> 这个方法中。我们可以看见，只用了compare方法，所以在调用Arrays.sort方法只传具体compare重写方法的类对象就行，这也是Comparator接口中必须要子类实现的一个方法。</p><h2 id="6-3-命令模式">6.3 命令模式</h2><h3 id="6-3-1-概述">6.3.1 概述</h3><p>日常生活中，我们出去吃饭都会遇到下面的场景。</p><p><img src="https://photo.459122.xyz/i/9a76c60409004b022680b1f285fcd1ea.png" alt="image-20200211130313251"></p><p><strong>定义：</strong></p><p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加与管理。</p><h3 id="6-3-2-结构">6.3.2 结构</h3><p>命令模式包含以下主要角色：</p><ul><li>抽象命令类（Command）角色： 定义命令的接口，声明执行的方法。</li><li>具体命令（Concrete  Command）角色：具体的命令，实现命令接口；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</li><li>实现者/接收者（Receiver）角色： 接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。</li><li>调用者/请求者（Invoker）角色： 要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口。</li></ul><h3 id="6-3-3-案例实现">6.3.3 案例实现</h3><p>将上面的案例用代码实现，那我们就需要分析命令模式的角色在该案例中由谁来充当。</p><p>服务员： 就是调用者角色，由她来发起命令。</p><p>资深大厨： 就是接收者角色，真正命令执行的对象。</p><p>订单： 命令中包含订单。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/43e061fa4782061729f618b6d5914e2d.png" alt="命令模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;<span class="comment">//只需要定义一个统一的执行方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有接受者对象</span></span><br><span class="line">    <span class="keyword">private</span> SeniorChef receiver;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderCommand</span><span class="params">(SeniorChef receiver, Order order)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(order.getDiningTable() + <span class="string">&quot;桌的订单：&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; keys = order.getFoodDic().keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            receiver.makeFood(order.getFoodDic().get(key),key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);<span class="comment">//停顿一下 模拟做饭的过程</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(order.getDiningTable() + <span class="string">&quot;桌的饭弄好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="comment">// 餐桌号码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> diningTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来存储餐名并记录份数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; foodDic = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDiningTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> diningTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDiningTable</span><span class="params">(<span class="type">int</span> diningTable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.diningTable = diningTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title function_">getFoodDic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> foodDic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFoodDic</span><span class="params">(String name, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        foodDic.put(name,num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资深大厨类 是命令的Receiver</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeniorChef</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeFood</span><span class="params">(<span class="type">int</span> num,String foodName)</span> &#123;</span><br><span class="line">        System.out.println(num + <span class="string">&quot;份&quot;</span> + foodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Command&gt; commands;<span class="comment">//可以持有很多的命令对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitor</span><span class="params">()</span> &#123;</span><br><span class="line">        commands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command cmd)</span>&#123;</span><br><span class="line">        commands.add(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发出命令 喊 订单来了，厨师开始执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;美女服务员：叮咚，大厨，新订单来了.......&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; commands.size(); i++) &#123;</span><br><span class="line">            <span class="type">Command</span> <span class="variable">cmd</span> <span class="operator">=</span> commands.get(i);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                cmd.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建2个order</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order1.setDiningTable(<span class="number">1</span>);</span><br><span class="line">        order1.getFoodDic().put(<span class="string">&quot;西红柿鸡蛋面&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        order1.getFoodDic().put(<span class="string">&quot;小杯可乐&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order2.setDiningTable(<span class="number">3</span>);</span><br><span class="line">        order2.getFoodDic().put(<span class="string">&quot;尖椒肉丝盖饭&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        order2.getFoodDic().put(<span class="string">&quot;小杯雪碧&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建接收者</span></span><br><span class="line">        SeniorChef receiver=<span class="keyword">new</span> <span class="title class_">SeniorChef</span>();</span><br><span class="line">        <span class="comment">//将订单和接收者封装成命令对象</span></span><br><span class="line">        <span class="type">OrderCommand</span> <span class="variable">cmd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderCommand</span>(receiver, order1);</span><br><span class="line">        <span class="type">OrderCommand</span> <span class="variable">cmd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderCommand</span>(receiver, order2);</span><br><span class="line">        <span class="comment">//创建调用者 waitor</span></span><br><span class="line">        <span class="type">Waitor</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Waitor</span>();</span><br><span class="line">        invoker.setCommand(cmd1);</span><br><span class="line">        invoker.setCommand(cmd2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将订单带到柜台 并向厨师喊 订单来了</span></span><br><span class="line">        invoker.orderUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-优缺点">6.3.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li><li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”，对扩展比较灵活。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li><li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li></ul><p><strong>2，缺点：</strong></p><ul><li>使用命令模式可能会导致某些系统有过多的具体命令类。</li><li>系统结构更加复杂。</li></ul><h3 id="6-3-5-使用场景">6.3.5 使用场景</h3><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li></ul><h3 id="6-3-6-JDK源码解析">6.3.6 JDK源码解析</h3><p>Runable是一个典型命令模式，Runnable担当命令的角色，Thread充当的是调用者，start方法就是其执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令接口(抽象命令角色)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Runnable target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">        group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会调用一个native方法start0(),调用系统方法，开启一个线程。而接收者是对程序员开放的，可以自己定义接收者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk Runnable 命令模式</span></span><br><span class="line"><span class="comment"> *TurnOffThread ： 属于具体命令角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TurnOffThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Receiver receiver;<span class="comment">//接收者</span></span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">TurnOffThread</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     receiver.turnOFF();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line">         <span class="type">TurnOffThread</span> <span class="variable">turnOffThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TurnOffThread</span>(receiver);</span><br><span class="line">         <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(turnOffThread);</span><br><span class="line">         thread.start();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-责任链模式">6.4 责任链模式</h2><h3 id="6-4-1-概述">6.4.1 概述</h3><p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传花”游戏等。</p><p><strong>定义：</strong></p><p>又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p><h3 id="6-4-2-结构">6.4.2 结构</h3><p>职责链模式主要包含以下角色:</p><ul><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ul><h3 id="6-4-3-案例实现">6.4.3 案例实现</h3><p>现需要开发一个请假流程控制系统。请假一天以下的假只需要小组长同意即可；请假1天到3天的假还需要部门经理同意；请求3天到7天还需要总经理同意才行。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/8c3a267540660d32f051697fab4f6cb1.png" alt="责任链模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请假条</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaveRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;<span class="comment">//请假天数</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//请假内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeaveRequest</span><span class="params">(String name, <span class="type">int</span> num, String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理者抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_ONE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_THREE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_SEVEN</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该领导处理的请假天数区间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numEnd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//领导上面还有领导</span></span><br><span class="line">    <span class="keyword">private</span> Handler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请假天数范围 上不封顶</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="type">int</span> numStart)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numStart = numStart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请假天数范围</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="type">int</span> numStart, <span class="type">int</span> numEnd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numStart = numStart;</span><br><span class="line">        <span class="built_in">this</span>.numEnd = numEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置上级领导</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextHandler</span><span class="params">(Handler nextHandler)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.nextHandler = nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交请假条</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(LeaveRequest leave)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">this</span>.numStart)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果请假天数达到该领导者的处理要求</span></span><br><span class="line">        <span class="keyword">if</span>(leave.getNum() &gt;= <span class="built_in">this</span>.numStart)&#123;</span><br><span class="line">            <span class="built_in">this</span>.handleLeave(leave);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果还有上级 并且请假天数超过了当前领导的处理范围</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != <span class="built_in">this</span>.nextHandler &amp;&amp; leave.getNum() &gt; numEnd)&#123;</span><br><span class="line">                <span class="built_in">this</span>.nextHandler.submit(leave);<span class="comment">//继续提交</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流程结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//各级领导处理请假条方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小组长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupLeader</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GroupLeader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//小组长处理1-3天的请假</span></span><br><span class="line">        <span class="built_in">super</span>(Handler.NUM_ONE, Handler.NUM_THREE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span> &#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天,&quot;</span> + leave.getContent() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小组长审批：同意。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部门经理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//部门经理处理3-7天的请假</span></span><br><span class="line">        <span class="built_in">super</span>(Handler.NUM_THREE, Handler.NUM_SEVEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span> &#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天,&quot;</span> + leave.getContent() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;部门经理审批：同意。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//总经理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralManager</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneralManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//部门经理处理7天以上的请假</span></span><br><span class="line">        <span class="built_in">super</span>(Handler.NUM_SEVEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span> &#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天,&quot;</span> + leave.getContent() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总经理审批：同意。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//请假条来一张</span></span><br><span class="line">        <span class="type">LeaveRequest</span> <span class="variable">leave</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="string">&quot;小花&quot;</span>,<span class="number">5</span>,<span class="string">&quot;身体不适&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//各位领导</span></span><br><span class="line">        <span class="type">GroupLeader</span> <span class="variable">groupLeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupLeader</span>();</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        <span class="type">GeneralManager</span> <span class="variable">generalManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneralManager</span>();</span><br><span class="line"></span><br><span class="line">        groupLeader.setNextHandler(manager);<span class="comment">//小组长的领导是部门经理</span></span><br><span class="line">        manager.setNextHandler(generalManager);<span class="comment">//部门经理的领导是总经理</span></span><br><span class="line">        <span class="comment">//之所以在这里设置上级领导，是因为可以根据实际需求来更改设置，如果实战中上级领导人都是固定的，则可以移到领导实现类中。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交申请</span></span><br><span class="line">        groupLeader.submit(leave);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-4-优缺点">6.4.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>降低了对象之间的耦合度</p><p>该模式降低了请求发送者和接收者的耦合度。</p></li><li><p>增强了系统的可扩展性</p><p>可以根据需要增加新的请求处理类，满足开闭原则。</p></li><li><p>增强了给对象指派职责的灵活性</p><p>当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。</p></li><li><p>责任链简化了对象之间的连接</p><p>一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。【针对于客户端】</p></li><li><p>责任分担</p><p>每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li></ul><h3 id="6-4-5-源码解析">6.4.5 源码解析</h3><p>在javaWeb应用开发中，FilterChain是职责链（过滤器）模式的典型应用，以下是Filter的模拟实现分析:</p><ul><li><p>模拟web请求Request以及web响应Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Request</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Response</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟web过滤器Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request req,Response res,FilterChain c)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟实现具体过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器1 前置处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先执行所有request再倒序执行所有response</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器1 后置处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器2 前置处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先执行所有request再倒序执行所有response</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器2 后置处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟实现过滤器链FilterChain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Filter&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式调用</span></span><br><span class="line">    <span class="keyword">public</span> FilterChain <span class="title function_">addFilter</span><span class="params">(Filter filter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filters.add(filter);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request request, Response response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == filters.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filters.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        filter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Request</span>  <span class="variable">req</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterChain</span>();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> <span class="title class_">FirstFilter</span>()).addFilter(<span class="keyword">new</span> <span class="title class_">SecondFilter</span>());</span><br><span class="line">        filterChain.doFilter(req,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器1 前置处理</p><p>过滤器2 前置处理</p></li></ul><p>​       过滤器1 后置处理</p><p>​       过滤器2 后置处理</p>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（6）</title>
    <link href="https://yjyrichard.github.io/posts/e381ec24.html"/>
    <id>https://yjyrichard.github.io/posts/e381ec24.html</id>
    <published>2025-05-06T06:47:44.422Z</published>
    <updated>2025-05-06T07:13:08.405Z</updated>
    
    <content type="html"><![CDATA[<h1>6，行为型模式</h1><h2 id="6-11-解释器模式">6.11 解释器模式</h2><h3 id="6-11-1-概述">6.11.1 概述</h3><p><img src="https://photo.459122.xyz/i/7d5a66138d7550f74a0434213139c529.png" alt="image-20200215220322641"></p><p>如上图，设计一个软件用来进行加减计算。我们第一想法就是使用工具类，提供对应的加法和减法的工具方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用于两个整数相加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于两个整数相加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用于n个整数相加</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(Integer ... arr)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">sum</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Integer i : arr) &#123;</span><br><span class="line">        sum += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的形式比较单一、有限，如果形式变化非常多，这就不符合要求，因为加法和减法运算，两个运算符与数值可以有无限种组合方式。比如 1+2+3+4+5、1+2+3-4等等。</p><p>显然，现在需要一种翻译识别机器，能够解析由数字以及 + - 符号构成的合法的运算序列。如果把运算符和数字都看作节点的话，能够逐个节点的进行读取解析运算，这就是解释器模式的思维。</p><p><strong>定义：</strong></p><blockquote><p>给定一个语言，定义它的文法表示，并定义一个解释器，这个解释器使用该标识来解释语言中的句子。</p></blockquote><p>在解释器模式中，我们需要将待解决的问题，提取出规则，抽象为一种“语言”。比如加减法运算，规则为：由数值和±符号组成的合法序列，“1+3-2” 就是这种语言的句子。</p><p>解释器就是要解析出来语句的含义。但是如何描述规则呢？</p><p><strong>文法（语法）规则：</strong></p><p>文法是用于描述语言的语法结构的形式规则。</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">expression</span> ::= value | plus | minus</span><br><span class="line">plus ::= <span class="keyword">expression</span> ‘+’ <span class="keyword">expression</span>   </span><br><span class="line">minus ::= <span class="keyword">expression</span> ‘-’ <span class="keyword">expression</span>  </span><br><span class="line">value ::= integer</span><br></pre></td></tr></table></figure><blockquote><p>注意： 这里的符号“::=”表示“定义为”的意思，竖线 | 表示或，左右的其中一个，引号内为字符本身，引号外为语法。</p></blockquote><p>上面规则描述为 ：</p><p>表达式可以是一个值，也可以是plus或者minus运算，而plus和minus又是由表达式结合运算符构成，值的类型为整型数。</p><p><strong>抽象语法树：</strong></p><p>在计算机科学中，抽象语法树（AbstractSyntaxTree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。</p><p>用树形来表示符合文法规则的句子。</p><p><img src="https://photo.459122.xyz/i/d317a50163ab622c956dfefbbb5a3c2e.png" alt="image-20200215225227616"></p><h3 id="6-11-2-结构">6.11.2 结构</h3><p>解释器模式包含以下主要角色。</p><ul><li><p>抽象表达式（Abstract Expression）角色：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。</p></li><li><p>终结符表达式（Terminal  Expression）角色：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。</p></li><li><p>非终结符表达式（Nonterminal Expression）角色：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</p></li><li><p>环境（Context）角色：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</p></li><li><p>客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</p></li></ul><h3 id="6-11-3-案例实现">6.11.3 案例实现</h3><p>【例】设计实现加减法的软件</p><p><img src="https://photo.459122.xyz/i/41e2d7715247335029b14441b8ef6ff4.png" alt="解释器模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象角色AbstractExpression</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span>;<span class="comment">//只考虑对int型</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//终结符表达式角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Value</span> <span class="keyword">extends</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> value;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Value</span><span class="params">(<span class="type">int</span> value)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.value = value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(value).toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非终结符表达式角色  加法表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Plus</span> <span class="keyword">extends</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression left;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Plus</span><span class="params">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) + right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + left.toString() + <span class="string">&quot; + &quot;</span> + right.toString() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">///非终结符表达式角色 减法表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Minus</span> <span class="keyword">extends</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression left;</span><br><span class="line">    <span class="keyword">private</span> AbstractExpression right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Minus</span><span class="params">(AbstractExpression left, AbstractExpression right)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.left = left;</span><br><span class="line">        <span class="built_in">this</span>.right = right;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> left.interpret(context) - right.interpret(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;(&quot;</span> + left.toString() + <span class="string">&quot; - &quot;</span> + right.toString() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//终结符表达式角色 变量表达式</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Variable</span> <span class="keyword">extends</span> <span class="title class_">AbstractExpression</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Variable</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">interpret</span><span class="params">(Context ctx)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ctx.getValue(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//环境类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;Variable, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;Variable, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">assign</span><span class="params">(Variable <span class="keyword">var</span>, Integer value)</span> &#123;</span><br><span class="line">        map.put(<span class="keyword">var</span>, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getValue</span><span class="params">(Variable <span class="keyword">var</span>)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">value</span> <span class="operator">=</span> map.get(<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Variable</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        <span class="type">Variable</span> <span class="variable">b</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">        <span class="type">Variable</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">        <span class="type">Variable</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;d&quot;</span>);</span><br><span class="line">        <span class="type">Variable</span> <span class="variable">e</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Variable</span>(<span class="string">&quot;e&quot;</span>);</span><br><span class="line">        <span class="comment">//Value v = new Value(1);</span></span><br><span class="line"></span><br><span class="line">        context.assign(a, <span class="number">1</span>);</span><br><span class="line">        context.assign(b, <span class="number">2</span>);</span><br><span class="line">        context.assign(c, <span class="number">3</span>);</span><br><span class="line">        context.assign(d, <span class="number">4</span>);</span><br><span class="line">        context.assign(e, <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">AbstractExpression</span> <span class="variable">expression</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Minus</span>(<span class="keyword">new</span> <span class="title class_">Plus</span>(<span class="keyword">new</span> <span class="title class_">Plus</span>(<span class="keyword">new</span> <span class="title class_">Plus</span>(a, b), c), d), e);</span><br><span class="line"></span><br><span class="line">        System.out.println(expression + <span class="string">&quot;= &quot;</span> + expression.interpret(context));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-11-4-优缺点">6.11.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>易于改变和扩展文法。</p><p>由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。每一条文法规则都可以表示为一个类，因此可以方便地实现一个简单的语言。</p></li><li><p>实现文法较为容易。</p><p>在抽象语法树中每一个表达式节点类的实现方式都是相似的，这些类的代码编写都不会特别复杂。</p></li><li><p>增加新的解释表达式较为方便。</p><p>如果用户需要增加新的解释表达式只需要对应增加一个新的终结符表达式或非终结符表达式类，原有表达式类代码无须修改，符合 “开闭原则”。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li><p>对于复杂文法难以维护。</p><p>在解释器模式中，每一条规则至少需要定义一个类，因此如果一个语言包含太多文法规则，类的个数将会急剧增加，导致系统难以管理和维护。</p></li></ul><ul><li><p>执行效率较低。</p><p>由于在解释器模式中使用了大量的循环和递归调用，因此在解释较为复杂的句子时其速度很慢，而且代码的调试过程也比较麻烦。</p></li></ul><h3 id="6-11-5-使用场景">6.11.5 使用场景</h3><ul><li><p>当语言的文法较为简单，且执行效率不是关键问题时。</p></li><li><p>当问题重复出现，且可以用一种简单的语言来进行表达时。</p></li><li><p>当一个语言需要解释执行，并且语言中的句子可以表示为一个抽象语法树的时候。</p></li></ul><h1>7，自定义Spring框架</h1><h2 id="7-1-spring使用回顾">7.1 spring使用回顾</h2><p>自定义spring框架前，先回顾一下spring框架的使用，从而分析spring的核心，并对核心功能进行模拟。</p><ul><li><p>数据访问层。定义UserDao接口及其子实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userDaoImpl ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>业务逻辑层。定义UserService接口及其子实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setUserDao</span><span class="params">(UserDao userDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.userDao = userDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userServiceImpl ...&quot;</span>);</span><br><span class="line">        userDao.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义UserController类，使用main方法模拟controller层</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建spring容器对象</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//从IOC容器中获取UserService对象</span></span><br><span class="line">        <span class="type">UserService</span> <span class="variable">userService</span> <span class="operator">=</span> applicationContext.getBean(<span class="string">&quot;userService&quot;</span>, UserService.class);</span><br><span class="line">        <span class="comment">//调用UserService对象的add方法</span></span><br><span class="line">        userService.add();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>编写配置文件。在类路径下编写一个名为ApplicationContext.xml的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="line">&lt;beans xmlns:xsi=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="line">       xmlns=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span><br><span class="line">       xmlns:context=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span><br><span class="line">       xsi:schemaLocation=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/beans/spring-beans.xsd</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context</span></span><br><span class="line"><span class="string">        http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userService&quot;</span> class=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span><br><span class="line">        &lt;property name=<span class="string">&quot;userDao&quot;</span> ref=<span class="string">&quot;userDao&quot;</span>&gt;&lt;/property&gt;</span><br><span class="line">    &lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">    &lt;bean id=<span class="string">&quot;userDao&quot;</span> class=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;&lt;/bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure><p>代码运行结果如下：</p><p><img src="https://photo.459122.xyz/i/612baa7350511503fda69ec2497dfa33.png" alt="image-20200429165544151"></p></li></ul><p>通过上面代码及结果可以看出：</p><ul><li>userService对象是从applicationContext容器对象获取到的，也就是userService对象交由spring进行管理。</li><li>上面结果可以看到调用了UserDao对象中的add方法，也就是说UserDao子实现类对象也交由spring管理了。</li><li>UserService中的userDao变量我们并没有进行赋值，但是可以正常使用，说明spring已经将UserDao对象赋值给了userDao变量。</li></ul><p>上面三点体现了Spring框架的IOC（Inversion of Control）和DI（Dependency Injection, DI）</p><h2 id="7-2-spring核心功能结构">7.2 spring核心功能结构</h2><p>Spring大约有20个模块，由1300多个不同的文件构成。这些模块可以分为:</p><p>核心容器、AOP和设备支持、数据访问与集成、Web组件、通信报文和集成测试等，下面是 Spring 框架的总体架构图：</p><p><img src="https://photo.459122.xyz/i/d6a20a9df6b8a26f4a257c090568d8b3.png" alt="image-20200429111324770"></p><p>核心容器由 beans、core、context 和 expression（Spring Expression Language，SpEL）4个模块组成。</p><ul><li>spring-beans和spring-core模块是Spring框架的核心模块，包含了控制反转（Inversion of Control，IOC）和依赖注入（Dependency Injection，DI）。BeanFactory使用控制反转对应用程序的配置和依赖性规范与实际的应用程序代码进行了分离。BeanFactory属于延时加载，也就是说在实例化容器对象后并不会自动实例化Bean，只有当Bean被使用时，BeanFactory才会对该 Bean 进行实例化与依赖关系的装配。</li><li>spring-context模块构架于核心模块之上，扩展了BeanFactory，为它添加了Bean生命周期控制、框架事件体系及资源加载透明化等功能。此外，该模块还提供了许多企业级支持，如邮件访问、远程访问、任务调度等，ApplicationContext 是该模块的核心接口，它的超类是 BeanFactory。与BeanFactory不同，ApplicationContext实例化后会自动对所有的单实例Bean进行实例化与依赖关系的装配，使之处于待用状态。</li><li>spring-context-support模块是对Spring IoC容器及IoC子容器的扩展支持。</li><li>spring-context-indexer模块是Spring的类管理组件和Classpath扫描组件。</li><li>spring-expression 模块是统一表达式语言（EL）的扩展模块，可以查询、管理运行中的对象，同时也可以方便地调用对象方法，以及操作数组、集合等。它的语法类似于传统EL，但提供了额外的功能，最出色的要数函数调用和简单字符串的模板函数。EL的特性是基于Spring产品的需求而设计的，可以非常方便地同Spring IoC进行交互。</li></ul><h3 id="7-1-1-bean概述">7.1.1 bean概述</h3><p>Spring 就是面向 <code>Bean</code> 的编程（BOP,Bean Oriented Programming），Bean 在 Spring 中处于核心地位。Bean对于Spring的意义就像Object对于OOP的意义一样，Spring中没有Bean也就没有Spring存在的意义。Spring IoC容器通过配置文件或者注解的方式来管理bean对象之间的依赖关系。</p><p>spring中bean用于对一个类进行封装。如下面的配置：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为什么Bean如此重要呢？</p><ul><li>spring 将bean对象交由一个叫IOC容器进行管理。</li><li>bean对象之间的依赖关系在配置文件中体现，并由spring完成。</li></ul><h2 id="7-3-Spring-IOC相关接口分析">7.3 Spring IOC相关接口分析</h2><h3 id="7-3-1-BeanFactory解析">7.3.1 BeanFactory解析</h3><p>Spring中Bean的创建是典型的工厂模式，这一系列的Bean工厂，即IoC容器，为开发者管理对象之间的依赖关系提供了很多便利和基础服务，在Spring中有许多IoC容器的实现供用户选择，其相互关系如下图所示。</p><p><img src="https://photo.459122.xyz/i/4de1dde8f56c6dde9046f459719614bc.png" alt="image-20200429185050396"></p><p>其中，BeanFactory作为最顶层的一个接口，定义了IoC容器的基本功能规范，BeanFactory有三个重要的子接口：ListableBeanFactory、HierarchicalBeanFactory和AutowireCapableBeanFactory。但是从类图中我们可以发现最终的默认实现类是DefaultListableBeanFactory，它实现了所有的接口。</p><p>那么为何要定义这么多层次的接口呢？</p><p>每个接口都有它的使用场合，主要是为了区分在Spring内部操作过程中对象的传递和转化，对对象的数据访问所做的限制。例如，</p><ul><li>ListableBeanFactory接口表示这些Bean可列表化。【可以通过列表进行存储】</li><li>HierarchicalBeanFactory表示这些Bean 是有继承关系的，也就是每个 Bean 可能有父 Bean</li><li>AutowireCapableBeanFactory 接口定义Bean的自动装配规则。</li></ul><p>这三个接口共同定义了Bean的集合、Bean之间的关系及Bean行为。最基本的IoC容器接口是BeanFactory，来看一下它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="type">String</span> <span class="variable">FACTORY_BEAN_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;&amp;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据bean的名称获取IOC容器中的的bean对象</span></span><br><span class="line">Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"><span class="comment">//根据bean的名称获取IOC容器中的的bean对象，并指定获取到的bean对象的类型，这样我们使用时就不需要进行类型强转了</span></span><br><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">Object <span class="title function_">getBean</span><span class="params">(String name, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line">&lt;T&gt; T <span class="title function_">getBean</span><span class="params">(Class&lt;T&gt; requiredType, Object... args)</span> <span class="keyword">throws</span> BeansException;</span><br><span class="line"></span><br><span class="line">&lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(Class&lt;T&gt; requiredType)</span>;</span><br><span class="line">&lt;T&gt; ObjectProvider&lt;T&gt; <span class="title function_">getBeanProvider</span><span class="params">(ResolvableType requiredType)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断容器中是否包含指定名称的bean对象</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsBean</span><span class="params">(String name)</span>;</span><br><span class="line"><span class="comment">//根据bean的名称判断是否是单例</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isSingleton</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isPrototype</span><span class="params">(String name)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isTypeMatch</span><span class="params">(String name, ResolvableType typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isTypeMatch</span><span class="params">(String name, Class&lt;?&gt; typeToMatch)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">Class&lt;?&gt; getType(String name) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">String[] getAliases(String name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BeanFactory里只对IoC容器的基本行为做了定义，根本不关心你的Bean是如何定义及怎样加载的。正如我们只关心能从工厂里得到什么产品，不关心工厂是怎么生产这些产品的。</p><p>BeanFactory有一个很重要的子接口，就是ApplicationContext接口，该接口主要来规范容器中的bean对象是非延时加载，即在创建容器对象的时候就对象bean进行初始化，并存储到一个容器中。</p><p><img src="https://photo.459122.xyz/i/e33d3881d742b85a333aa0f887106532.png" alt="image-20200430220155371"></p><p>要知道工厂是如何产生对象的，我们需要看具体的IoC容器实现，Spring提供了许多IoC容器实现，比如：</p><ul><li>ClasspathXmlApplicationContext : 根据类路径加载xml配置文件，并创建IOC容器对象。</li><li>FileSystemXmlApplicationContext ：根据系统路径加载xml配置文件，并创建IOC容器对象。</li><li>AnnotationConfigApplicationContext ：加载注解类配置，并创建IOC容器。</li></ul><h3 id="7-3-2-BeanDefinition解析">7.3.2 BeanDefinition解析</h3><p>Spring IoC容器管理我们定义的各种Bean对象及其相互关系，而Bean对象在Spring实现中是以BeanDefinition来描述的，如下面配置文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">bean标签还有很多属性：</span><br><span class="line">scope、init-method、destory-method等。</span><br></pre></td></tr></table></figure><p>其继承体系如下图所示。</p><p><img src="https://photo.459122.xyz/i/06efded8b595c8fe0d6e6a955e7def83.png" alt="image-20200429204239868"></p><h3 id="7-3-3-BeanDefinitionReader解析">7.3.3 BeanDefinitionReader解析</h3><p>Bean的解析过程非常复杂，功能被分得很细，因为这里需要被扩展的地方很多，必须保证足够的灵活性，以应对可能的变化。Bean的解析主要就是对Spring配置文件的解析。这个解析过程主要通过BeanDefinitionReader来完成，看看Spring中BeanDefinitionReader的类结构图，如下图所示。</p><p><img src="https://photo.459122.xyz/i/82e8a8aa207920974f01b6d8feb088c1.png" alt="image-20200429204700956"></p><p>看看BeanDefinitionReader接口定义的功能来理解它具体的作用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionReader</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取BeanDefinitionRegistry注册器对象</span></span><br><span class="line">BeanDefinitionRegistry <span class="title function_">getRegistry</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">ResourceLoader <span class="title function_">getResourceLoader</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">ClassLoader <span class="title function_">getBeanClassLoader</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">BeanNameGenerator <span class="title function_">getBeanNameGenerator</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">下面的loadBeanDefinitions都是加载bean定义，从指定的资源中</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource resource)</span> <span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line"><span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(Resource... resources)</span> <span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line"><span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String location)</span> <span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line"><span class="type">int</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String... locations)</span> <span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-3-4-BeanDefinitionRegistry解析">7.3.4 BeanDefinitionRegistry解析</h3><p>BeanDefinitionReader用来解析bean定义，并封装BeanDefinition对象，而我们定义的配置文件中定义了很多bean标签，所以就有一个问题，解析的BeanDefinition对象存储到哪儿？答案就是BeanDefinition的注册中心，而该注册中心顶层接口就是BeanDefinitionRegistry。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionRegistry</span> <span class="keyword">extends</span> <span class="title class_">AliasRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//往注册表中注册bean</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span></span><br><span class="line"><span class="keyword">throws</span> BeanDefinitionStoreException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从注册表中删除指定名称的bean</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取注册表中指定名称的bean</span></span><br><span class="line">BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//判断注册表中是否已经注册了指定名称的bean</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">containsBeanDefinition</span><span class="params">(String beanName)</span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取注册表中所有的bean的名称</span></span><br><span class="line">String[] getBeanDefinitionNames();</span><br><span class="line">    </span><br><span class="line"><span class="type">int</span> <span class="title function_">getBeanDefinitionCount</span><span class="params">()</span>;</span><br><span class="line"><span class="type">boolean</span> <span class="title function_">isBeanNameInUse</span><span class="params">(String beanName)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继承结构图如下：</p><p><img src="https://photo.459122.xyz/i/09a9c01203c6c1097944a5d84751befb.png" alt="image-20200429211132185"></p><p>从上面类图可以看到BeanDefinitionRegistry接口的子实现类主要有以下几个：</p><ul><li><p>DefaultListableBeanFactory</p><p>在该类中定义了如下代码，就是用来注册bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">256</span>);</span><br></pre></td></tr></table></figure></li><li><p>SimpleBeanDefinitionRegistry</p><p>在该类中定义了如下代码，就是用来注册bean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;(<span class="number">64</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="7-3-5-创建容器">7.3.5 创建容器</h3><p>ClassPathXmlApplicationContext对Bean配置资源的载入是从refresh（）方法开始的。refresh（）方法是一个模板方法，规定了 IoC 容器的启动流程，有些逻辑要交给其子类实现。它对 Bean 配置资源进行载入，ClassPathXmlApplicationContext通过调用其父类AbstractApplicationContext的refresh（）方法启动整个IoC容器对Bean定义的载入过程。</p><h2 id="7-4-自定义SpringIOC">7.4 自定义SpringIOC</h2><p>现要对下面的配置文件进行解析，并自定义Spring框架的IOC对涉及到的对象进行管理。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.UserServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;userDao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.UserDaoImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-4-1-定义bean相关的pojo类">7.4.1 定义bean相关的pojo类</h3><h4 id="7-4-1-1-PropertyValue类">7.4.1.1 PropertyValue类</h4><p>用于封装bean的属性，体现到上面的配置文件就是封装bean标签的子标签property标签数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PropertyValue</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> String ref;</span><br><span class="line">  <span class="keyword">private</span> String value;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PropertyValue</span><span class="params">()</span> &#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="title function_">PropertyValue</span><span class="params">(String name, String ref,String value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">    <span class="built_in">this</span>.ref = ref;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.name = name;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getRef</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ref;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRef</span><span class="params">(String ref)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.ref = ref;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> String <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setValue</span><span class="params">(String value)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.value = value;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-1-2-MutablePropertyValues类">7.4.1.2 MutablePropertyValues类</h4><p>一个bean标签可以有多个property子标签，所以再定义一个MutablePropertyValues类，用来存储并管理多个PropertyValue对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MutablePropertyValues</span> <span class="keyword">implements</span> <span class="title class_">Iterable</span>&lt;PropertyValue&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;PropertyValue&gt; propertyValueList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MutablePropertyValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyValueList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PropertyValue&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MutablePropertyValues</span><span class="params">(List&lt;PropertyValue&gt; propertyValueList)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyValueList = (propertyValueList != <span class="literal">null</span> ? propertyValueList : <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;PropertyValue&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PropertyValue[] getPropertyValues() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.propertyValueList.toArray(<span class="keyword">new</span> <span class="title class_">PropertyValue</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> PropertyValue <span class="title function_">getPropertyValue</span><span class="params">(String propertyName)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (PropertyValue pv : <span class="built_in">this</span>.propertyValueList) &#123;</span><br><span class="line">            <span class="keyword">if</span> (pv.getName().equals(propertyName)) &#123;</span><br><span class="line">                <span class="keyword">return</span> pv;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;PropertyValue&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyValueList.iterator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isEmpty</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.propertyValueList.isEmpty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MutablePropertyValues <span class="title function_">addPropertyValue</span><span class="params">(PropertyValue pv)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="built_in">this</span>.propertyValueList.size(); i++) &#123;</span><br><span class="line">            <span class="type">PropertyValue</span> <span class="variable">currentPv</span> <span class="operator">=</span> <span class="built_in">this</span>.propertyValueList.get(i);</span><br><span class="line">            <span class="keyword">if</span> (currentPv.getName().equals(pv.getName())) &#123;</span><br><span class="line">                <span class="built_in">this</span>.propertyValueList.set(i, <span class="keyword">new</span> <span class="title class_">PropertyValue</span>(pv.getName(),pv.getRef(), pv.getValue()));</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.propertyValueList.add(pv);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">contains</span><span class="params">(String propertyName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPropertyValue(propertyName) != <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-1-3-BeanDefinition类">7.4.1.3 BeanDefinition类</h4><p>BeanDefinition类用来封装bean信息的，主要包含id（即bean对象的名称）、class（需要交由spring管理的类的全类名）及子标签property数据。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanDefinition</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line">    <span class="keyword">private</span> String className;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MutablePropertyValues propertyValues;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BeanDefinition</span><span class="params">()</span> &#123;</span><br><span class="line">        propertyValues = <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(String id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getClassName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setClassName</span><span class="params">(String className)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.className = className;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPropertyValues</span><span class="params">(MutablePropertyValues propertyValues)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.propertyValues = propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> MutablePropertyValues <span class="title function_">getPropertyValues</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> propertyValues;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-2-定义注册表相关类">7.4.2 定义注册表相关类</h3><h4 id="7-4-2-1-BeanDefinitionRegistry接口">7.4.2.1 BeanDefinitionRegistry接口</h4><p>BeanDefinitionRegistry接口定义了注册表的相关操作，定义如下功能：</p><ul><li>注册BeanDefinition对象到注册表中</li><li>从注册表中删除指定名称的BeanDefinition对象</li><li>根据名称从注册表中获取BeanDefinition对象</li><li>判断注册表中是否包含指定名称的BeanDefinition对象</li><li>获取注册表中BeanDefinition对象的个数</li><li>获取注册表中所有的BeanDefinition的名称</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注册BeanDefinition对象到注册表中</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从注册表中删除指定名称的BeanDefinition对象</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据名称从注册表中获取BeanDefinition对象</span></span><br><span class="line">    BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">containsBeanDefinition</span><span class="params">(String beanName)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">getBeanDefinitionCount</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    String[] getBeanDefinitionNames();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-2-2-SimpleBeanDefinitionRegistry类">7.4.2.2 SimpleBeanDefinitionRegistry类</h4><p>该类实现了BeanDefinitionRegistry接口，定义了Map集合作为注册表容器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleBeanDefinitionRegistry</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionRegistry</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, BeanDefinition&gt; beanDefinitionMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, BeanDefinition&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerBeanDefinition</span><span class="params">(String beanName, BeanDefinition beanDefinition)</span> &#123;</span><br><span class="line">        beanDefinitionMap.put(beanName,beanDefinition);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        beanDefinitionMap.remove(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BeanDefinition <span class="title function_">getBeanDefinition</span><span class="params">(String beanName)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.get(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">containsBeanDefinition</span><span class="params">(String beanName)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.containsKey(beanName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getBeanDefinitionCount</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String[] getBeanDefinitionNames() &#123;</span><br><span class="line">        <span class="keyword">return</span> beanDefinitionMap.keySet().toArray(<span class="keyword">new</span> <span class="title class_">String</span>[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-3-定义解析器相关类">7.4.3 定义解析器相关类</h3><h4 id="7-4-3-1-BeanDefinitionReader接口">7.4.3.1 BeanDefinitionReader接口</h4><p>BeanDefinitionReader是用来解析配置文件并在注册表中注册bean的信息。定义了两个规范：</p><ul><li>获取注册表的功能，让外界可以通过该对象获取注册表对象。</li><li>加载配置文件，并注册bean数据。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanDefinitionReader</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取注册表对象</span></span><br><span class="line">    BeanDefinitionRegistry <span class="title function_">getRegistry</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//加载配置文件并在注册表中进行注册</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-3-2-XmlBeanDefinitionReader类">7.4.3.2 XmlBeanDefinitionReader类</h4><p>XmlBeanDefinitionReader类是专门用来解析xml配置文件的。该类实现BeanDefinitionReader接口并实现接口中的两个功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XmlBeanDefinitionReader</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionReader</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BeanDefinitionRegistry registry;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">XmlBeanDefinitionReader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registry = <span class="keyword">new</span> <span class="title class_">SimpleBeanDefinitionRegistry</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> BeanDefinitionRegistry <span class="title function_">getRegistry</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> registry;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">loadBeanDefinitions</span><span class="params">(String configLocation)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(configLocation);</span><br><span class="line">        <span class="type">SAXReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SAXReader</span>();</span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> reader.read(is);</span><br><span class="line">        <span class="type">Element</span> <span class="variable">rootElement</span> <span class="operator">=</span> document.getRootElement();</span><br><span class="line">        <span class="comment">//解析bean标签</span></span><br><span class="line">        parseBean(rootElement);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">parseBean</span><span class="params">(Element rootElement)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Element&gt; elements = rootElement.elements();</span><br><span class="line">        <span class="keyword">for</span> (Element element : elements) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> element.attributeValue(<span class="string">&quot;class&quot;</span>);</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanDefinition</span>();</span><br><span class="line">            beanDefinition.setId(id);</span><br><span class="line">            beanDefinition.setClassName(className);</span><br><span class="line">            List&lt;Element&gt; list = element.elements(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">            <span class="type">MutablePropertyValues</span> <span class="variable">mutablePropertyValues</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MutablePropertyValues</span>();</span><br><span class="line">            <span class="keyword">for</span> (Element element1 : list) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> element1.attributeValue(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> element1.attributeValue(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> element1.attributeValue(<span class="string">&quot;value&quot;</span>);</span><br><span class="line">                <span class="type">PropertyValue</span> <span class="variable">propertyValue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PropertyValue</span>(name,ref,value);</span><br><span class="line">                mutablePropertyValues.addPropertyValue(propertyValue);</span><br><span class="line">            &#125;</span><br><span class="line">            beanDefinition.setPropertyValues(mutablePropertyValues);</span><br><span class="line"></span><br><span class="line">            registry.registerBeanDefinition(id,beanDefinition);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-4-IOC容器相关类">7.4.4 IOC容器相关类</h3><h4 id="7-4-4-1-BeanFactory接口">7.4.4.1 BeanFactory接口</h4><p>在该接口中定义IOC容器的统一规范即获取bean对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"><span class="comment">//根据bean对象的名称获取bean对象</span></span><br><span class="line">    Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//根据bean对象的名称获取bean对象，并进行类型转换</span></span><br><span class="line">    &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;? extends T&gt; clazz)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-4-2-ApplicationContext接口">7.4.4.2 ApplicationContext接口</h4><p>该接口的所以的子实现类对bean对象的创建都是非延时的，所以在该接口中定义 <code>refresh()</code> 方法，该方法主要完成以下两个功能：</p><ul><li>加载配置文件。</li><li>根据注册表中的BeanDefinition对象封装的数据进行bean对象的创建。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">BeanFactory</span> &#123;</span><br><span class="line"><span class="comment">//进行配置文件加载并进行对象创建</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException, Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-4-4-3-AbstractApplicationContext类">7.4.4.3 AbstractApplicationContext类</h4><ul><li><p>作为ApplicationContext接口的子类，所以该类也是非延时加载，所以需要在该类中定义一个Map集合，作为bean对象存储的容器。</p></li><li><p>声明BeanDefinitionReader类型的变量，用来进行xml配置文件的解析，符合单一职责原则。</p><p>BeanDefinitionReader类型的对象创建交由子类实现，因为只有子类明确到底创建BeanDefinitionReader哪儿个子实现类对象。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractApplicationContext</span> <span class="keyword">implements</span> <span class="title class_">ApplicationContext</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> BeanDefinitionReader beanDefinitionReader;</span><br><span class="line">    <span class="comment">//用来存储bean对象的容器   key存储的是bean的id值，value存储的是bean对象</span></span><br><span class="line">    <span class="keyword">protected</span> Map&lt;String, Object&gt; singletonObjects = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//存储配置文件的路径</span></span><br><span class="line">    <span class="keyword">protected</span> String configLocation;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refresh</span><span class="params">()</span> <span class="keyword">throws</span> IllegalStateException, Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//加载BeanDefinition</span></span><br><span class="line">        beanDefinitionReader.loadBeanDefinitions(configLocation);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化bean</span></span><br><span class="line">        finishBeanInitialization();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//bean的初始化</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">finishBeanInitialization</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> beanDefinitionReader.getRegistry();</span><br><span class="line">        String[] beanNames = registry.getBeanDefinitionNames();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (String beanName : beanNames) &#123;</span><br><span class="line">            <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> registry.getBeanDefinition(beanName);</span><br><span class="line">            getBean(beanName);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：该类finishBeanInitialization()方法中调用getBean()方法使用到了模板方法模式。</p></blockquote><h4 id="7-4-4-4-ClassPathXmlApplicationContext类">7.4.4.4 ClassPathXmlApplicationContext类</h4><p>该类主要是加载类路径下的配置文件，并进行bean对象的创建，主要完成以下功能：</p><ul><li>在构造方法中，创建BeanDefinitionReader对象。</li><li>在构造方法中，调用refresh()方法，用于进行配置文件加载、创建bean对象并存储到容器中。</li><li>重写父接口中的getBean()方法，并实现依赖注入操作。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassPathXmlApplicationContext</span> <span class="keyword">extends</span> <span class="title class_">AbstractApplicationContext</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ClassPathXmlApplicationContext</span><span class="params">(String configLocation)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.configLocation = configLocation;</span><br><span class="line">        <span class="comment">//构建XmlBeanDefinitionReader对象</span></span><br><span class="line">        beanDefinitionReader = <span class="keyword">new</span> <span class="title class_">XmlBeanDefinitionReader</span>();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.refresh();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据bean的id属性值获取bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getBean</span><span class="params">(String name)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//return singletonObjects.get(name);</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> singletonObjects.get(name);</span><br><span class="line">        <span class="keyword">if</span>(obj != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> obj;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> beanDefinitionReader.getRegistry();</span><br><span class="line">        <span class="type">BeanDefinition</span> <span class="variable">beanDefinition</span> <span class="operator">=</span> registry.getBeanDefinition(name);</span><br><span class="line">        <span class="keyword">if</span>(beanDefinition == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> beanDefinition.getClassName();</span><br><span class="line">        Class&lt;?&gt; clazz = Class.forName(className);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">beanObj</span> <span class="operator">=</span> clazz.newInstance();</span><br><span class="line">        <span class="type">MutablePropertyValues</span> <span class="variable">propertyValues</span> <span class="operator">=</span> beanDefinition.getPropertyValues();</span><br><span class="line">        <span class="keyword">for</span> (PropertyValue propertyValue : propertyValues) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">propertyName</span> <span class="operator">=</span> propertyValue.getName();</span><br><span class="line">            <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> propertyValue.getValue();</span><br><span class="line">            <span class="type">String</span> <span class="variable">ref</span> <span class="operator">=</span> propertyValue.getRef();</span><br><span class="line">            <span class="keyword">if</span>(ref != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(ref)) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getBean(ref);</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> StringUtils.getSetterMethodNameByFieldName(propertyName);</span><br><span class="line">                Method[] methods = clazz.getMethods();</span><br><span class="line">                <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(method.getName().equals(methodName)) &#123;</span><br><span class="line">                        method.invoke(beanObj,bean);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(value != <span class="literal">null</span> &amp;&amp; !<span class="string">&quot;&quot;</span>.equals(value)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> StringUtils.getSetterMethodNameByFieldName(propertyName);</span><br><span class="line">                <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(methodName, String.class);</span><br><span class="line">                method.invoke(beanObj,value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        singletonObjects.put(name,beanObj);</span><br><span class="line">        <span class="keyword">return</span> beanObj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; T <span class="title function_">getBean</span><span class="params">(String name, Class&lt;? extends T&gt; clazz)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> getBean(name);</span><br><span class="line">        <span class="keyword">if</span>(bean != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> clazz.cast(bean);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-4-5-自定义Spring-IOC总结">7.4.5 自定义Spring IOC总结</h3><h4 id="7-4-5-1-使用到的设计模式">7.4.5.1 使用到的设计模式</h4><ul><li>工厂模式。这个使用工厂模式 + 配置文件的方式。</li><li>单例模式。Spring IOC管理的bean对象都是单例的，此处的单例不是通过构造器进行单例的控制的，而是spring框架对每一个bean只创建了一个对象。</li><li>模板方法模式。AbstractApplicationContext类中的finishBeanInitialization()方法调用了子类的getBean()方法，因为getBean()的实现和环境息息相关。</li><li>迭代器模式。对于MutablePropertyValues类定义使用到了迭代器模式，因为此类存储并管理PropertyValue对象，也属于一个容器，所以给该容器提供一个遍历方式。</li></ul><p>spring框架其实使用到了很多设计模式，如AOP使用到了代理模式，选择JDK代理或者CGLIB代理使用到了策略模式，还有适配器模式，装饰者模式，观察者模式等。</p><h4 id="7-4-5-2-符合大部分设计原则">7.4.5.2 符合大部分设计原则</h4><h4 id="7-4-5-3-整个设计和Spring的设计还是有一定的出入">7.4.5.3 整个设计和Spring的设计还是有一定的出入</h4><p>spring框架底层是很复杂的，进行了很深入的封装，并对外提供了很好的扩展性。而我们自定义SpringIOC有以下几个目的：</p><ul><li>了解Spring底层对对象的大体管理机制。</li><li>了解设计模式在具体的开发中的使用。</li><li>以后学习spring源码，通过该案例的实现，可以降低spring学习的入门成本。</li></ul>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（3）</title>
    <link href="https://yjyrichard.github.io/posts/d45f1c16.html"/>
    <id>https://yjyrichard.github.io/posts/d45f1c16.html</id>
    <published>2025-05-04T09:15:25.779Z</published>
    <updated>2025-05-05T14:37:56.450Z</updated>
    
    <content type="html"><![CDATA[<h1>5，结构型模式</h1><p>结构型模式描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。</p><p>由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。</p><p>结构型模式分为以下 7 种：</p><ul><li>代理模式</li><li>适配器模式</li><li>装饰者模式</li><li>桥接模式</li><li>外观模式</li><li>组合模式</li><li>享元模式</li></ul><h2 id="5-1-代理模式">5.1 代理模式</h2><h3 id="5-1-1-概述">5.1.1 概述</h3><p>由于某些原因需要给某对象提供一个代理以控制对该对象的访问。这时，访问对象不适合或者不能直接引用目标对象，代理对象作为访问对象和目标对象之间的中介。</p><p>Java中的代理按照代理类生成时机不同又分为静态代理和动态代理。静态代理代理类在编译期就生成，而动态代理代理类则是在Java运行时动态生成。动态代理又有JDK代理和CGLib代理两种。</p><h3 id="5-1-2-结构">5.1.2 结构</h3><p>代理（Proxy）模式分为三种角色：</p><ul><li>抽象主题（Subject）类： 通过接口或抽象类声明真实主题和代理对象实现的业务方法。</li><li>真实主题（Real Subject）类： 实现了抽象主题中的具体业务，是代理对象所代表的真实对象，是最终要引用的对象。</li><li>代理（Proxy）类 ： 提供了与真实主题相同的接口，其内部含有对真实主题的引用，它可以访问、控制或扩展真实主题的功能。</li></ul><h3 id="5-1-3-静态代理">5.1.3 静态代理</h3><p>我们通过案例来感受一下静态代理。</p><p>【例】火车站卖票</p><p>如果要买火车票的话，需要去火车站买票，坐车到火车站，排队等一系列的操作，显然比较麻烦。而火车站在多个地方都有代售点，我们去代售点买票就方便很多了。这个例子其实就是典型的代理模式，火车站是目标对象，代售点是代理对象。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/04/6817304c3ada8.png" alt="静态代理.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代售点</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyPoint</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用&quot;</span>);</span><br><span class="line">        station.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ProxyPoint</span> <span class="variable">pp</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyPoint</span>();</span><br><span class="line">        pp.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码中可以看出测试类直接访问的是ProxyPoint类对象，也就是说ProxyPoint作为访问对象和目标对象的中介。同时也对sell方法进行了增强（代理点收取一些服务费用）。</p><h3 id="5-1-4-JDK动态代理">5.1.4 JDK动态代理</h3><p>接下来我们使用动态代理实现上面案例，先说说JDK提供的动态代理。Java中提供了一个动态代理类Proxy，Proxy并不是我们上述所说的代理对象的类，而是提供了一个创建代理对象的静态方法（newProxyInstance方法）来获取代理对象。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//卖票接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//火车站  火车站具有卖票功能，所以需要实现SellTickets接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂，用来创建代理对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SellTickets <span class="title function_">getProxyObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用Proxy获取代理对象</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            newProxyInstance()方法参数说明：</span></span><br><span class="line"><span class="comment">                ClassLoader loader ： 类加载器，用于加载代理类，使用真实对象的类加载器即可</span></span><br><span class="line"><span class="comment">                Class&lt;?&gt;[] interfaces ： 真实对象所实现的接口，代理模式真实对象和代理对象实现相同的接口</span></span><br><span class="line"><span class="comment">                InvocationHandler h ： 代理对象的调用处理程序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">sellTickets</span> <span class="operator">=</span> (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                        InvocationHandler中invoke方法参数说明：</span></span><br><span class="line"><span class="comment">                            proxy ： 代理对象 和 proxyObject对象是同一个对象 在invoke方法中基本不用</span></span><br><span class="line"><span class="comment">                            method ： 对应于在代理对象上调用的接口方法的 Method 实例 </span></span><br><span class="line"><span class="comment">                            args ： 代理对象调用接口方法时传递的实际参数</span></span><br><span class="line"><span class="comment">                     */</span></span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        <span class="comment">//执行真实对象</span></span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">        </span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyObject</span> <span class="operator">=</span> factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">使用了动态代理，我们思考下面问题：</font></p><ul><li><p>ProxyFactory是代理类吗？</p><p>ProxyFactory不是代理模式中所说的代理类，而代理类是程序在运行过程中动态的在内存中生成的类。通过阿里巴巴开源的 Java 诊断工具（Arthas【阿尔萨斯】）查看代理类的结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sun.proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.proxy.dynamic.jdk.SellTickets;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.UndeclaredThrowableException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m1;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m2;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m0;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            m1 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;equals&quot;</span>, Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>));</span><br><span class="line">            m2 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;toString&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            m0 = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getMethod(<span class="string">&quot;hashCode&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (NoSuchMethodException noSuchMethodException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchMethodError</span>(noSuchMethodException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (ClassNotFoundException classNotFoundException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoClassDefFoundError</span>(classNotFoundException.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Boolean)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m1, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;object&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (String)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m2, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> (Integer)<span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m0, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="literal">null</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Error | RuntimeException throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> throwable;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UndeclaredThrowableException</span>(throwable);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的类中，我们可以看到以下几个信息：</p><ul><li>代理类（$Proxy0）实现了SellTickets。这也就印证了我们之前说的真实类和代理类实现同样的接口。</li><li>代理类（$Proxy0）将我们提供了的匿名内部类对象传递给了父类。</li></ul></li><li><p>动态代理的执行流程是什么样？</p><p>下面是摘取的重点代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//程序运行过程中动态生成的代理类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">$Proxy0</span> <span class="keyword">extends</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">SellTickets</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Method m3;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> $Proxy0(InvocationHandler invocationHandler) &#123;</span><br><span class="line">        <span class="built_in">super</span>(invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        m3 = Class.forName(<span class="string">&quot;com.itheima.proxy.dynamic.jdk.SellTickets&quot;</span>).getMethod(<span class="string">&quot;sell&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h.invoke(<span class="built_in">this</span>, m3, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Java提供的动态代理相关类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Proxy</span> <span class="keyword">implements</span> <span class="title class_">java</span>.io.Serializable &#123;</span><br><span class="line"><span class="keyword">protected</span> InvocationHandler h;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">protected</span> <span class="title function_">Proxy</span><span class="params">(InvocationHandler h)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.h = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">station</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SellTickets <span class="title function_">getProxyObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">sellTickets</span> <span class="operator">=</span> (SellTickets) Proxy.newProxyInstance(station.getClass().getClassLoader(),</span><br><span class="line">                station.getClass().getInterfaces(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line"></span><br><span class="line">                        System.out.println(<span class="string">&quot;代理点收取一些服务费用(JDK动态代理方式)&quot;</span>);</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(station, args);</span><br><span class="line">                        <span class="keyword">return</span> result;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">        <span class="keyword">return</span> sellTickets;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//测试访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">        <span class="type">SellTickets</span> <span class="variable">proxyObject</span> <span class="operator">=</span> factory.getProxyObject();</span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>执行流程如下：</p><ol><li>在测试类中通过代理对象调用sell()方法</li><li>根据多态的特性，执行的是代理类（$Proxy0）中的sell()方法</li><li>代理类（$Proxy0）中的sell()方法中又调用了InvocationHandler接口的子实现类对象的invoke方法</li><li>invoke方法通过反射执行了真实对象所属类(TrainStation)中的sell()方法</li></ol><h3 id="5-1-5-CGLIB动态代理">5.1.5 CGLIB动态代理</h3><p>同样是上面的案例，我们再次使用CGLIB代理实现。</p><p>如果没有定义SellTickets接口，只定义了TrainStation(火车站类)。很显然JDK代理是无法使用了，因为JDK动态代理要求必须定义接口，对接口进行代理。</p><p>CGLIB是一个功能强大，高性能的代码 生成包。它为没有实现接口的类提供代理，为JDK的动态代理提供了很好的补充。</p><p>CGLIB是第三方提供的包，所以需要引入jar包的坐标：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>cglib<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//火车站</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TrainStation</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sell</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;火车站卖票&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> <span class="keyword">implements</span> <span class="title class_">MethodInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">TrainStation</span> <span class="variable">target</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TrainStation</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> TrainStation <span class="title function_">getProxyObject</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建Enhancer对象，类似于JDK动态代理的Proxy类，下一步就是设置几个参数</span></span><br><span class="line">        <span class="type">Enhancer</span> <span class="variable">enhancer</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">Enhancer</span>();</span><br><span class="line">        <span class="comment">//设置父类的字节码对象</span></span><br><span class="line">        enhancer.setSuperclass(target.getClass());</span><br><span class="line">        <span class="comment">//设置回调函数</span></span><br><span class="line">        enhancer.setCallback(<span class="built_in">this</span>);</span><br><span class="line">        <span class="comment">//创建代理对象</span></span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">obj</span> <span class="operator">=</span> (TrainStation) enhancer.create();</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        intercept方法参数说明：</span></span><br><span class="line"><span class="comment">            o ： 代理对象</span></span><br><span class="line"><span class="comment">            method ： 真实对象中的方法的Method实例</span></span><br><span class="line"><span class="comment">            args ： 实际参数</span></span><br><span class="line"><span class="comment">            methodProxy ：代理对象中的方法的method实例</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> TrainStation <span class="title function_">intercept</span><span class="params">(Object o, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;代理点收取一些服务费用(CGLIB动态代理方式)&quot;</span>);</span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">result</span> <span class="operator">=</span> (TrainStation) methodProxy.invokeSuper(o, args);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建代理工厂对象</span></span><br><span class="line">        <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>();</span><br><span class="line">        <span class="comment">//获取代理对象</span></span><br><span class="line">        <span class="type">TrainStation</span> <span class="variable">proxyObject</span> <span class="operator">=</span> factory.getProxyObject();</span><br><span class="line"></span><br><span class="line">        proxyObject.sell();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-1-6-三种代理的对比">5.1.6 三种代理的对比</h3><ul><li><p>jdk代理和CGLIB代理</p><p>使用CGLib实现动态代理，CGLib底层采用ASM字节码生成框架，使用字节码技术生成代理类，在JDK1.6之前比使用Java反射效率要高。唯一需要注意的是，CGLib不能对声明为final的类或者方法进行代理，因为CGLib原理是动态生成被代理类的子类。</p><p>在JDK1.6、JDK1.7、JDK1.8逐步对JDK动态代理优化之后，在调用次数较少的情况下，JDK代理效率高于CGLib代理效率，只有当进行大量调用的时候，JDK1.6和JDK1.7比CGLib代理效率低一点，但是到JDK1.8的时候，JDK代理效率高于CGLib代理。所以如果有接口使用JDK动态代理，如果没有接口使用CGLIB代理。</p></li><li><p>动态代理和静态代理</p><p>动态代理与静态代理相比较，最大的好处是接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。这样，在接口方法数量比较多的时候，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</p><p>如果接口增加一个方法，静态代理模式除了所有实现类需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。而动态代理不会出现该问题</p></li></ul><h3 id="5-1-7-优缺点">5.1.7 优缺点</h3><p><strong>优点：</strong></p><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><p><strong>缺点：</strong></p><ul><li>增加了系统的复杂度；</li></ul><h3 id="5-1-8-使用场景">5.1.8 使用场景</h3><ul><li><p>远程（Remote）代理</p><p>本地服务通过网络请求远程服务。为了实现本地到远程的通信，我们需要实现网络通信，处理其中可能的异常。为良好的代码设计和可维护性，我们将网络通信部分隐藏起来，只暴露给本地服务一个接口，通过该接口即可访问远程服务提供的功能，而不必过多关心通信部分的细节。</p></li><li><p>防火墙（Firewall）代理</p><p>当你将浏览器配置成使用代理功能时，防火墙就将你的浏览器的请求转给互联网；当互联网返回响应时，代理服务器再把它转给你的浏览器。</p></li><li><p>保护（Protect or Access）代理</p><p>控制对一个对象的访问，如果需要，可以给不同的用户提供不同级别的使用权限。</p></li></ul><h2 id="5-2-适配器模式">5.2 适配器模式</h2><h3 id="5-2-1-概述">5.2.1 概述</h3><p>如果去欧洲国家去旅游的话，他们的插座如下图最左边，是欧洲标准。而我们使用的插头如下图最右边的。因此我们的笔记本电脑，手机在当地不能直接充电。所以就需要一个插座转换器，转换器第1面插入当地的插座，第2面供我们充电，这样使得我们的插头在当地能使用。生活中这样的例子很多，手机充电器（将220v转换为5v的电压），读卡器等，其实就是使用到了适配器模式。</p><p><img src="https://img.picui.cn/free/2025/05/04/6817304b78b76.png" alt="转接头.png"></p><p><strong>定义：</strong></p><p>​将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。</p><p>​适配器模式分为类适配器模式和对象适配器模式，前者类（继承）之间的耦合度比后者（组合或者聚合）高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><h3 id="5-2-2-结构">5.2.2 结构</h3><p>适配器模式（Adapter）包含以下主要角色：</p><ul><li>目标（Target）接口：当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>适配者（Adaptee）类：它是被访问和适配的现存组件库中的组件接口。</li><li>适配器（Adapter）类：它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><h3 id="5-2-3-类适配器模式">5.2.3 类适配器模式</h3><p>实现方式：定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>【例】读卡器</p><p>现有一台电脑只能读取SD卡，而要读取TF卡中的内容的话就需要使用到适配器模式。创建一个读卡器，将TF卡中的内容读取出来。</p><p>类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/04/6817304c11c54.png" alt="适配器模式.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SD卡的接口 目标接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SDCard</span> &#123;</span><br><span class="line">    <span class="comment">//读取SD卡方法</span></span><br><span class="line">    String <span class="title function_">readSD</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//写入SD卡功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SD卡实现类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDCardImpl</span> <span class="keyword">implements</span> <span class="title class_">SDCard</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;sd card read a msg :hello word SD&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;sd card write msg : &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电脑类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">(SDCard sdCard)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(sdCard == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>(<span class="string">&quot;sd card null&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sdCard.readSD();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TF卡接口 适配者类的接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TFCard</span> &#123;</span><br><span class="line">    <span class="comment">//读取TF卡方法 从TF卡中读取数据</span></span><br><span class="line">    String <span class="title function_">readTF</span><span class="params">()</span>;</span><br><span class="line">    <span class="comment">//写入TF卡功能 往TF卡中写数据</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">writeTF</span><span class="params">(String msg)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//TF卡实现类 适配者类 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TFCardImpl</span> <span class="keyword">implements</span> <span class="title class_">TFCard</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readTF</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span><span class="string">&quot;tf card read msg : hello word tf card&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeTF</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;tf card write a msg : &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义适配器类（SD兼容TF）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDAdapterTF</span> <span class="keyword">extends</span> <span class="title class_">TFCardImpl</span> <span class="keyword">implements</span> <span class="title class_">SDCard</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter read tf card &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> readTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter write tf card&quot;</span>);</span><br><span class="line">        writeTF(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">SDCard</span> <span class="variable">sdCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SDCardImpl</span>();</span><br><span class="line">        System.out.println(computer.readSD(sdCard));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">SDAdapterTF</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SDAdapterTF</span>();</span><br><span class="line">        System.out.println(computer.readSD(adapter));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类适配器模式违背了合成复用原则。类适配器是客户类有一个接口规范的情况下可用，反之不可用。</p><h3 id="5-2-4-对象适配器模式">5.2.4 对象适配器模式</h3><p>实现方式：对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。</p><p>【例】读卡器</p><p>我们使用对象适配器模式将读卡器的案例进行改写。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/04/681730485f6a8.png" alt="对象适配器模式.png"></p><p>代码如下：</p><p>类适配器模式的代码，我们只需要修改适配器类（SDAdapterTF）和测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建适配器对象（SD兼容TF）</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SDAdapterTF</span>  <span class="keyword">implements</span> <span class="title class_">SDCard</span> &#123;</span><br><span class="line"><span class="comment">//声明适配者类</span></span><br><span class="line">    <span class="keyword">private</span> TFCard tfCard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SDAdapterTF</span><span class="params">(TFCard tfCard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tfCard = tfCard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">readSD</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter read tf card &quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> tfCard.readTF();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">writeSD</span><span class="params">(String msg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;adapter write tf card&quot;</span>);</span><br><span class="line">        tfCard.writeTF(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        <span class="type">SDCard</span> <span class="variable">sdCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SDCardImpl</span>();</span><br><span class="line">        System.out.println(computer.readSD(sdCard));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">TFCard</span> <span class="variable">tfCard</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TFCardImpl</span>();</span><br><span class="line">        <span class="type">SDAdapterTF</span> <span class="variable">adapter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SDAdapterTF</span>(tfCard);</span><br><span class="line">        System.out.println(computer.readSD(adapter));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：还有一个适配器模式是接口适配器模式。当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter ，实现所有方法。而此时我们只需要继承该抽象类即 可。</p></blockquote><h3 id="5-2-5-应用场景">5.2.5 应用场景</h3><ul><li>以前开发的系统存在满足新系统功能需求的类，但其接口同新系统的接口不一致。</li><li>使用第三方提供的组件，但组件接口定义和自己要求的接口定义不同。</li></ul><h3 id="5-2-6-JDK源码解析">5.2.6 JDK源码解析</h3><p>Reader（字符流）、InputStream（字节流）的适配使用的是InputStreamReader。</p><p>InputStreamReader继承自java.io包中的Reader，对他中的抽象的未实现的方法给出实现。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> sd.read();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">char</span> cbuf[], <span class="type">int</span> offset, <span class="type">int</span> length)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">return</span> sd.read(cbuf, offset, length);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如上代码中的sd（StreamDecoder类对象【解码是将字节数据转化为字符数据，因为我们认识字符数据。】），在Sun的JDK实现中，实际的方法实现是对sun.nio.cs.StreamDecoder类的同名方法的调用封装。类结构图如下：</p><p><img src="img%5C%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F-jdk%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.png" alt=""></p><p>从上图可以看出：</p><ul><li>InputStreamReader是对同样实现了Reader的StreamDecoder的封装。</li><li>StreamDecoder不是Java SE API中的内容，是Sun  JDK给出的自身实现。但我们知道他们对构造方法中的字节流类（InputStream）进行封装，并通过该类进行了字节流和字符流之间的解码转换。</li></ul><p><font color="red">结论：</font></p><p>​从表层来看，InputStreamReader做了InputStream字节流类到Reader字符流之间的转换。而从如上Sun JDK中的实现类关系结构中可以看出，是StreamDecoder的设计实现在实际上采用了适配器模式。</p><blockquote><h3 id="适配器模式（Adapter-Pattern）总结">适配器模式（Adapter Pattern）总结</h3><h4 id="1-核心定义">1. <strong>核心定义</strong></h4><p>适配器模式是一种<strong>结构型设计模式</strong>，用于解决接口不兼容问题。它通过引入一个中间层（适配器类），将一个类的接口转换为客户端期望的另一种接口，使原本不兼容的类能够协同工作。 <strong>类比现实</strong>：类似于电源转换插头，将不同标准的电压或插头接口转换为目标设备所需的接口。</p><h4 id="2-模式结构与角色">2. <strong>模式结构与角色</strong></h4><p>适配器模式包含三个核心角色：</p><ul><li><strong>目标接口（Target）</strong>：客户端期望使用的接口（如USB接口）。</li><li><strong>适配者（Adaptee）</strong>：需要被适配的现有类（如两相插头）。</li><li><strong>适配器（Adapter）</strong>：通过继承或组合方式，将适配者的接口转换为目标接口（如转换器）</li></ul><h4 id="3-实现方式">3. <strong>实现方式</strong></h4><p>适配器模式有两种实现形式，适用于不同场景：</p><ul><li><strong>类适配器</strong>（继承方式）：<ul><li><strong>原理</strong>：适配器类通过继承适配者并实现目标接口。</li><li><strong>缺点</strong>：Java等单继承语言中不灵活，且需适配者类可被继承</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 类适配器示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassAdapter</span> <span class="keyword">extends</span> <span class="title class_">Adaptee</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123; specificRequest(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>对象适配器</strong>（组合方式，推荐）：</p><ul><li><strong>原理</strong>：适配器类持有适配者对象实例，并实现目标接口。</li><li><strong>优点</strong>：更灵活，支持多个适配者，符合“合成复用原则</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 对象适配器示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ObjectAdapter</span> <span class="keyword">implements</span> <span class="title class_">Target</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Adaptee adaptee;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ObjectAdapter</span><span class="params">(Adaptee adaptee)</span> &#123; <span class="built_in">this</span>.adaptee = adaptee; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">request</span><span class="params">()</span> &#123; adaptee.specificRequest(); &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-适用场景">4. <strong>适用场景</strong></h4><p>适配器模式常用于以下场景：</p><ul><li><p>接口兼容：新旧系统接口不兼容时（如旧日志系统适配新接口）</p></li><li><p>复用现有类：复用第三方库或遗留代码，但接口不匹配（如第三方支付接口适配）</p></li><li><p>数据格式转换：统一不同格式的数据（如XML转JSON）</p></li><li><p>协议适配：网络通信中不同协议的转换（如HTTP转TCP/IP）</p></li><li><p>默认适配器：简化接口实现（如Java的MouseAdapter空实现事件监听接口）</p></li></ul><h4 id="5-优缺点分析">5. <strong>优缺点分析</strong></h4><ul><li><p><strong>优点</strong>：</p></li><li><p>解耦：客户端与适配者解耦，无需修改原有代码</p><ul><li>复用性：复用现有类，避免重复开发</li></ul></li><li><p>灵活性</p><p>：支持动态适配多个对象</p></li><li><p><strong>缺点</strong>：</p></li><li><p>复杂性：增加适配器类，系统结构变复杂</p></li><li><p>性能损耗：多层转发可能影响性能</p></li></ul><h4 id="6-实际应用案例">6. <strong>实际应用案例</strong></h4><ul><li>Java标准库：</li></ul><p>InputStreamReader</p><p>将字节流适配为字符流MouseAdapter简化鼠标事件监听接口实现</p><ul><li><p>框架整合：Spring框架中大量使用适配器模式（如HandlerAdapter适配不同Controller类型）</p></li><li><p>第三方服务封装：将不同支付接口（支付宝、微信）适配为统一接口</p></li></ul><h3 id="总结"><strong>总结</strong></h3><p>适配器模式的核心是**“接口转换”**，通过适配器类屏蔽底层差异，使系统更灵活、可扩展。使用时需权衡灵活性与复杂度，优先选择对象适配器，避免因继承导致的结构僵化。在接口升级、系统集成等场景中，它是解决兼容性问题的利器</p></blockquote><h2 id="5-3-装饰者模式">5.3 装饰者模式</h2><h3 id="5-3-1-概述">5.3.1 概述</h3><p>我们先来看一个快餐店的例子。</p><p>快餐店有炒面、炒饭这些快餐，可以额外附加鸡蛋、火腿、培根这些配菜，当然加配菜需要额外加钱，每个配菜的价钱通常不太一样，那么计算总价就会显得比较麻烦。</p><p><img src="https://img.picui.cn/free/2025/05/04/681730492222d.png" alt="装饰者模式-使用前.png"></p><p>使用继承的方式存在的问题：</p><ul><li><p>扩展性不好</p><p>如果要再加一种配料（火腿肠），我们就会发现需要给FriedRice和FriedNoodles分别定义一个子类。如果要新增一个快餐品类（炒河粉）的话，就需要定义更多的子类。</p></li><li><p>产生过多的子类</p></li></ul><p><strong>定义：</strong></p><p>​指在不改变现有对象结构的情况下，动态地给该对象增加一些职责（即增加其额外功能）的模式。</p><h3 id="5-3-2-结构">5.3.2 结构</h3><p>装饰（Decorator）模式中的角色：</p><ul><li>抽象构件（Component）角色 ：定义一个抽象接口以规范准备接收附加责任的对象。</li><li>具体构件（Concrete  Component）角色 ：实现抽象构件，通过装饰角色为其添加一些职责。</li><li>抽象装饰（Decorator）角色 ： 继承或实现抽象构件，并包含具体构件的实例，可以通过其子类扩展具体构件的功能。</li><li>具体装饰（ConcreteDecorator）角色 ：实现抽象装饰的相关方法，并给具体构件对象添加附加的责任。</li></ul><h3 id="5-3-3-案例">5.3.3 案例</h3><p>我们使用装饰者模式对快餐店案例进行改进，体会装饰者模式的精髓。</p><p>类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/04/68173049b656b.png" alt="装饰者模式.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//快餐接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FastFood</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">float</span> price;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastFood</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FastFood</span><span class="params">(<span class="type">float</span> price, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(<span class="type">float</span> price)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDesc</span><span class="params">(String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span>;  <span class="comment">//获取价格</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//炒饭</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedRice</span> <span class="keyword">extends</span> <span class="title class_">FastFood</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedRice</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">10</span>, <span class="string">&quot;炒饭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//炒面</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FriedNoodles</span> <span class="keyword">extends</span> <span class="title class_">FastFood</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">FriedNoodles</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(<span class="number">12</span>, <span class="string">&quot;炒面&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//配料类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Garnish</span> <span class="keyword">extends</span> <span class="title class_">FastFood</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> FastFood fastFood;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> FastFood <span class="title function_">getFastFood</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFastFood</span><span class="params">(FastFood fastFood)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Garnish</span><span class="params">(FastFood fastFood, <span class="type">float</span> price, String desc)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(price,desc);</span><br><span class="line">        <span class="built_in">this</span>.fastFood = fastFood;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//鸡蛋配料</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Egg</span> <span class="keyword">extends</span> <span class="title class_">Garnish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Egg</span><span class="params">(FastFood fastFood)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(fastFood,<span class="number">1</span>,<span class="string">&quot;鸡蛋&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//培根配料</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bacon</span> <span class="keyword">extends</span> <span class="title class_">Garnish</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Bacon</span><span class="params">(FastFood fastFood)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">super</span>(fastFood,<span class="number">2</span>,<span class="string">&quot;培根&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">float</span> <span class="title function_">cost</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getPrice() + getFastFood().getPrice();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getDesc</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.getDesc() + getFastFood().getDesc();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//点一份炒饭</span></span><br><span class="line">        <span class="type">FastFood</span> <span class="variable">food</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRice</span>();</span><br><span class="line">        <span class="comment">//花费的价格</span></span><br><span class="line">        System.out.println(food.getDesc() + <span class="string">&quot; &quot;</span> + food.cost() + <span class="string">&quot;元&quot;</span>);<span class="comment">//10.0元</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        <span class="comment">//点一份加鸡蛋的炒饭</span></span><br><span class="line">        <span class="type">FastFood</span> <span class="variable">food1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedRice</span>();</span><br><span class="line"></span><br><span class="line">        food1 = <span class="keyword">new</span> <span class="title class_">Egg</span>(food1);</span><br><span class="line">        <span class="comment">//花费的价格</span></span><br><span class="line">        System.out.println(food1.getDesc() + <span class="string">&quot; &quot;</span> + food1.cost() + <span class="string">&quot;元&quot;</span>);<span class="comment">//11.0元</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;========&quot;</span>);</span><br><span class="line">        <span class="comment">//点一份加培根的炒面</span></span><br><span class="line">        <span class="type">FastFood</span> <span class="variable">food2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FriedNoodles</span>();</span><br><span class="line">        food2 = <span class="keyword">new</span> <span class="title class_">Bacon</span>(food2);</span><br><span class="line">        <span class="comment">//花费的价格</span></span><br><span class="line">        System.out.println(food2.getDesc() + <span class="string">&quot; &quot;</span> + food2.cost() + <span class="string">&quot;元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好处：</strong></p><ul><li><p>装饰者模式可以带来比继承更加灵活性的扩展功能，使用更加方便，可以通过组合不同的装饰者对象来获取具有不同行为状态的多样化的结果。装饰者模式比继承更具良好的扩展性，完美的遵循开闭原则，继承是静态的附加责任，装饰者则是动态的附加责任。</p></li><li><p>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p></li></ul><h3 id="5-3-4-使用场景">5.3.4 使用场景</h3><ul><li><p>当不能采用继承的方式对系统进行扩充或者采用继承不利于系统扩展和维护时。</p><p>不能采用继承的情况主要有两类：</p><ul><li>第一类是系统中存在大量独立的扩展，为支持每一种组合将产生大量的子类，使得子类数目呈爆炸性增长；</li><li>第二类是因为类定义不能继承（如final类）</li></ul></li><li><p>在不影响其他对象的情况下，以动态、透明的方式给单个对象添加职责。</p></li><li><p>当对象的功能要求可以动态地添加，也可以再动态地撤销时。</p></li></ul><h3 id="5-3-5-JDK源码解析">5.3.5 JDK源码解析</h3><p>IO流中的包装类使用到了装饰者模式。BufferedInputStream，BufferedOutputStream，BufferedReader，BufferedWriter。</p><p>我们以BufferedWriter举例来说明，先看看如何使用BufferedWriter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//创建BufferedWriter对象</span></span><br><span class="line">        <span class="comment">//创建FileWriter对象</span></span><br><span class="line">        <span class="type">FileWriter</span> <span class="variable">fw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>);</span><br><span class="line">        <span class="type">BufferedWriter</span> <span class="variable">bw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(fw);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//写数据</span></span><br><span class="line">        bw.write(<span class="string">&quot;hello Buffered&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bw.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用起来感觉确实像是装饰者模式，接下来看它们的结构：</p><p><img src="https://img.picui.cn/free/2025/05/04/6817304915d81.png" alt="装饰者模式-jdk源码.png"></p><blockquote><p><font color="red">小结：</font></p><p>​BufferedWriter使用装饰者模式对Writer子实现类进行了增强，添加了缓冲区，提高了写数据的效率。</p></blockquote><h3 id="5-3-6-代理和装饰者的区别">5.3.6 代理和装饰者的区别</h3><p>静态代理和装饰者模式的区别：</p><ul><li>相同点：<ul><li>都要实现与目标类相同的业务接口</li><li>在两个类中都要声明目标对象</li><li>都可以在不修改目标类的前提下增强目标方法</li></ul></li><li>不同点：<ul><li>目的不同<br>装饰者是为了增强目标对象<br>静态代理是为了保护和隐藏目标对象</li><li>获取目标对象构建的地方不同<br>装饰者是由外界传递进来，可以通过构造方法传递<br>静态代理是在代理类内部创建，以此来隐藏目标对象</li></ul></li></ul><h2 id="5-4-桥接模式">5.4 桥接模式</h2><h3 id="5-4-1-概述">5.4.1 概述</h3><p>现在有一个需求，需要创建不同的图形，并且每个图形都有可能会有不同的颜色。我们可以利用继承的方式来设计类的关系：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14d4f585.png" alt="image-20200207194617620.png"></p><p>我们可以发现有很多的类，假如我们再增加一个形状或再增加一种颜色，就需要创建更多的类。</p><p>试想，在一个有多种可能会变化的维度的系统中，用继承方式会造成类爆炸，扩展起来不灵活。每次在一个维度上新增一个具体实现都要增加多个子类。为了更加灵活的设计系统，我们此时可以考虑使用桥接模式。</p><p><strong>定义：</strong></p><p>​将抽象与实现分离，使它们可以独立变化。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p><h3 id="5-4-2-结构">5.4.2 结构</h3><p>桥接（Bridge）模式包含以下主要角色：</p><ul><li>抽象化（Abstraction）角色 ：定义抽象类，并包含一个对实现化对象的引用。</li><li>扩展抽象化（Refined  Abstraction）角色 ：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>实现化（Implementor）角色 ：定义实现化角色的接口，供扩展抽象化角色调用。</li><li>具体实现化（Concrete Implementor）角色 ：给出实现化角色接口的具体实现。</li></ul><h3 id="5-4-3-案例">5.4.3 案例</h3><p>【例】视频播放器</p><p>需要开发一个跨平台视频播放器，可以在不同操作系统平台（如Windows、Mac、Linux等）上播放多种格式的视频文件，常见的视频格式包括RMVB、AVI、WMV等。该播放器包含了两个维度，适合使用桥接模式。</p><p>类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/04/6817304888118.png" alt="桥接模式.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//视频文件 (实现化角色)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">VideoFile</span> &#123;</span><br><span class="line">    <span class="comment">//解码功能</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(String fileName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//avi文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AVIFile</span> <span class="keyword">implements</span> <span class="title class_">VideoFile</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;avi视频文件：&quot;</span>+ fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rmvb文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMVBFile</span> <span class="keyword">implements</span> <span class="title class_">VideoFile</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;rmvb文件：&quot;</span> + fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//操作系统版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">OperatingSystemVersion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> VideoFile videoFile;<span class="comment">//聚合</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OperatingSystemVersion</span><span class="params">(VideoFile videoFile)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.videoFile = videoFile;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String fileName)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Windows版本 扩展抽象化角色 </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Windows</span> <span class="keyword">extends</span> <span class="title class_">OperatingSystem</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Windows</span><span class="params">(VideoFile videoFile)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(videoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">        videoFile.decode(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//mac版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mac</span> <span class="keyword">extends</span> <span class="title class_">OperatingSystemVersion</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Mac</span><span class="params">(VideoFile videoFile)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(videoFile);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">play</span><span class="params">(String fileName)</span> &#123;</span><br><span class="line">videoFile.decode(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">OperatingSystem</span> <span class="variable">os</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Windows</span>(<span class="keyword">new</span> <span class="title class_">AVIFile</span>());</span><br><span class="line">        os.play(<span class="string">&quot;战狼3&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好处：</strong></p><ul><li><p>桥接模式提高了系统的可扩充性，在两个变化维度中任意扩展一个维度，都不需要修改原有系统。</p><p>如：如果现在还有一种视频文件类型wmv，我们只需要再定义一个类实现VideoFile接口即可，其他类不需要发生变化。</p></li><li><p>实现细节对客户透明</p></li></ul><h3 id="5-4-4-使用场景">5.4.4 使用场景</h3><ul><li>当一个类存在两个独立变化的维度，且这两个维度都需要进行扩展时。</li><li>当一个系统不希望使用继承或因为多层次继承导致系统类的个数急剧增加时。</li><li>当一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性时。避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。</li></ul><p>装饰者模式是主体与附加功能的解耦，桥接是抽象与具体的解耦</p><h2 id="5-5-外观模式">5.5 外观模式</h2><h3 id="5-5-1-概述">5.5.1 概述</h3><p>有些人可能炒过股票，但其实大部分人都不太懂，这种没有足够了解证券知识的情况下做股票是很容易亏钱的，刚开始炒股肯定都会想，如果有个懂行的帮帮手就好，其实基金就是个好帮手，支付宝里就有许多的基金，它将投资者分散的资金集中起来，交由专业的经理人进行管理，投资于股票、债券、外汇等领域，而基金投资的收益归持有者所有，管理机构收取一定比例的托管管理费用。</p><p><strong>定义：</strong></p><p>​又名门面模式，是一种通过为多个复杂的子系统提供一个一致的接口，而使这些子系统更加容易被访问的模式。该模式对外有一个统一接口，外部应用程序不用关心内部子系统的具体的细节，这样会大大降低应用程序的复杂度，提高了程序的可维护性。</p><p>​外观（Facade）模式是“迪米特法则”的典型应用</p><p><img src="https://img.picui.cn/free/2025/05/04/681730467d9a9.jpg" alt="外观模式引入.jpg"></p><h3 id="5-5-2-结构">5.5.2 结构</h3><p>外观（Facade）模式包含以下主要角色：</p><ul><li>外观（Facade）角色：为多个子系统对外提供一个共同的接口。</li><li>子系统（Sub System）角色：实现系统的部分功能，客户可以通过外观角色访问它。</li></ul><h3 id="5-5-3-案例">5.5.3 案例</h3><p>【例】智能家电控制</p><p>小明的爷爷已经60岁了，一个人在家生活：每次都需要打开灯、打开电视、打开空调；睡觉时关闭灯、关闭电视、关闭空调；操作起来都比较麻烦。所以小明给爷爷买了智能音箱，可以通过语音直接控制这些智能家电的开启和关闭。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/04/6817304660189.png" alt="外观模式.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//灯类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Light</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开了灯....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭了灯....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//电视类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TV</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开了电视....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭了电视....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//控制类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AirCondition</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;打开了空调....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;关闭了空调....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//智能音箱</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SmartAppliancesFacade</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Light light;</span><br><span class="line">    <span class="keyword">private</span> TV tv;</span><br><span class="line">    <span class="keyword">private</span> AirCondition airCondition;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SmartAppliancesFacade</span><span class="params">()</span> &#123;</span><br><span class="line">        light = <span class="keyword">new</span> <span class="title class_">Light</span>();</span><br><span class="line">        tv = <span class="keyword">new</span> <span class="title class_">TV</span>();</span><br><span class="line">        airCondition = <span class="keyword">new</span> <span class="title class_">AirCondition</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">say</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">&quot;打开&quot;</span>)) &#123;</span><br><span class="line">            on();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(message.contains(<span class="string">&quot;关闭&quot;</span>)) &#123;</span><br><span class="line">            off();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我还听不懂你说的！！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//起床后一键开电器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">on</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;起床了&quot;</span>);</span><br><span class="line">        light.on();</span><br><span class="line">        tv.on();</span><br><span class="line">        airCondition.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//睡觉一键关电器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">off</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;睡觉了&quot;</span>);</span><br><span class="line">        light.off();</span><br><span class="line">        tv.off();</span><br><span class="line">        airCondition.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建外观对象</span></span><br><span class="line">        <span class="type">SmartAppliancesFacade</span> <span class="variable">facade</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SmartAppliancesFacade</span>();</span><br><span class="line">        <span class="comment">//客户端直接与外观对象进行交互</span></span><br><span class="line">        facade.say(<span class="string">&quot;打开家电&quot;</span>);</span><br><span class="line">        facade.say(<span class="string">&quot;关闭家电&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>好处：</strong></p><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li></ul><p><strong>缺点：</strong></p><ul><li>不符合开闭原则，修改很麻烦</li></ul><h3 id="5-5-4-使用场景">5.5.4 使用场景</h3><ul><li>对分层结构系统构建时，使用外观模式定义子系统中每层的入口点可以简化子系统之间的依赖关系。</li><li>当一个复杂系统的子系统很多时，外观模式可以为系统设计一个简单的接口供外界访问。</li><li>当客户端与多个子系统之间存在很大的联系时，引入外观模式可将它们分离，从而提高子系统的独立性和可移植性。</li></ul><h3 id="5-5-5-源码解析">5.5.5 源码解析</h3><p>使用tomcat作为web容器时，接收浏览器发送过来的请求，tomcat会将请求信息封装成ServletRequest对象，如下图①处对象。但是大家想想ServletRequest是一个接口，它还有一个子接口HttpServletRequest，而我们知道该request对象肯定是一个HttpServletRequest对象的子实现类对象，到底是哪个类的对象呢？可以通过输出request对象，我们就会发现是一个名为RequestFacade的类的对象。</p><p><img src="https://img.picui.cn/free/2025/05/04/681730463f041.png" alt="image-20200207234545691.png"></p><p>RequestFacade类就使用了外观模式。先看结构图：</p><p><img src="https://img.picui.cn/free/2025/05/04/681730460e78d.png" alt="外观模式-jdk源码解析.png"></p><p><strong>为什么在此处使用外观模式呢？</strong></p><p>​定义 RequestFacade 类，分别实现 ServletRequest ，同时定义私有成员变量 Request ，并且方法的实现调用 Request  的实现。然后，将 RequestFacade上转为 ServletRequest  传给 servlet 的 service 方法，这样即使在 servlet 中被下转为 RequestFacade ，也不能访问私有成员变量对象中的方法。既用了 Request ，又能防止其中方法被不合理的访问。</p><blockquote><p>这里的外观模式运用，可以类比为给「服务员」和「后厨」之间加了一道传菜窗口：</p><ol><li><strong>隐藏复杂细节</strong>（保护Request）<ul><li>Request类如同后厨的炒菜师傅，有各种危险刀具（敏感方法）</li><li>通过RequestFacade这个传菜窗口，只暴露打菜、收银等安全方法（ServletRequest接口）</li><li>即使服务员（Servlet）知道窗口后的师傅叫老王（RequestFacade类型），但隔着玻璃（私有变量保护）也无法直接让老王用菜刀</li></ul></li><li><strong>统一服务标准</strong>（解耦）<ul><li>所有服务员只需记住：「按菜单（ServletRequest接口）向窗口点菜」</li><li>后厨升级炒锅（修改Request实现）或换厨师（替换Request对象），只要窗口服务标准不变，服务员无需重新培训</li></ul></li><li><strong>双重安全锁</strong><ul><li>向上转型：Servlet拿到的本质是传菜窗口（ServletRequest接口类型）</li><li>向下转型：即便强行认定这是传菜窗口（RequestFacade），也无法穿透玻璃操作后厨设备（request变量受protected保护）</li></ul></li></ol><p>这种设计就像在银行柜台：您能通过防弹玻璃上的小窗口（RequestFacade）办理业务（调用ServletRequest方法），但无法碰到柜台内的现金（Request的内部方法），即使您知道柜员名字也无法直接命令他打开金库。</p></blockquote>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（2）</title>
    <link href="https://yjyrichard.github.io/posts/6ce37b73.html"/>
    <id>https://yjyrichard.github.io/posts/6ce37b73.html</id>
    <published>2025-05-03T08:02:12.305Z</published>
    <updated>2025-05-05T14:37:32.233Z</updated>
    
    <content type="html"><![CDATA[<h1>4，创建型模式</h1><h2 id="4-2-工厂模式">4.2 工厂模式</h2><h3 id="4-2-1-概述">4.2.1 概述</h3><p>需求：设计一个咖啡店点餐系统。</p><p>设计一个咖啡类（Coffee），并定义其两个子类（美式咖啡【AmericanCoffee】和拿铁咖啡【LatteCoffee】）；再设计一个咖啡店类（CoffeeStore），咖啡店具有点咖啡的功能。</p><p>具体类的设计如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc8b20ee.png" alt="工厂设计模式引入.png"></p><p>在java中，万物皆对象，这些对象都需要创建，如果创建的时候直接new该对象，就会对该对象耦合严重，假如我们要更换对象，所有new对象的地方都需要修改一遍，这显然违背了软件设计的开闭原则。如果我们使用工厂来生产对象，我们就只和工厂打交道就可以了，彻底和对象解耦，如果要更换对象，直接在工厂里更换该对象即可，达到了与对象解耦的目的；所以说，工厂模式最大的优点就是：<strong>解耦</strong>。</p><p>在本教程中会介绍三种工厂的使用</p><ul><li>简单工厂模式（不属于GOF的23种经典设计模式）</li><li>工厂方法模式</li><li>抽象工厂模式</li></ul><h3 id="4-2-2-简单工厂模式">4.2.2 简单工厂模式</h3><p>简单工厂不是一种设计模式，反而比较像是一种编程习惯。</p><h4 id="4-2-2-1-结构">4.2.2.1 结构</h4><p>简单工厂包含如下角色：</p><ul><li>抽象产品 ：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品 ：实现或者继承抽象产品的子类</li><li>具体工厂 ：提供了创建产品的方法，调用者通过该方法来获取产品。</li></ul><h4 id="4-2-2-2-实现">4.2.2.2 实现</h4><p>现在使用简单工厂对上面案例进行改进，类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdcadf146.png" alt="简单工厂模式.png"></p><p>工厂类代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleCoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">AmericanoCoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂（factory）处理创建对象的细节，一旦有了SimpleCoffeeFactory，CoffeeStore类中的orderCoffee()就变成此对象的客户，后期如果需要Coffee对象直接从工厂中获取即可。这样也就解除了和Coffee实现类的耦合，同时又产生了新的耦合，CoffeeStore对象和SimpleCoffeeFactory工厂对象的耦合，工厂对象和商品对象的耦合。</p><p>后期如果再加新品种的咖啡，我们势必要需求修改SimpleCoffeeFactory的代码，违反了开闭原则。工厂类的客户端可能有很多，比如创建美团外卖等，这样只需要修改工厂类的代码，省去其他的修改操作。</p><h4 id="4-2-2-4-优缺点">4.2.2.4 优缺点</h4><p><strong>优点：</strong></p><p>封装了创建对象的过程，可以通过参数直接获取对象。把对象的创建和业务逻辑层分开，这样以后就避免了修改客户代码，如果要实现新产品直接修改工厂类，而不需要在原代码中修改，这样就降低了客户代码修改的可能性，更加容易扩展。</p><p><strong>缺点：</strong></p><p>增加新产品时还是需要修改工厂类的代码，违背了“开闭原则”。</p><h4 id="4-2-2-3-扩展">4.2.2.3 扩展</h4><p><strong>静态工厂</strong></p><p>在开发中也有一部分人将工厂类中的创建对象的功能定义为静态的，这个就是静态工厂模式，它也不是23种设计模式中的。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleCoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title function_">createCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;americano&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">AmericanoCoffee</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;latte&quot;</span>.equals(type)) &#123;</span><br><span class="line">            coffee = <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> coffe;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-2-3-工厂方法模式">4.2.3 工厂方法模式</h3><p>针对上例中的缺点，使用工厂方法模式就可以完美的解决，完全遵循开闭原则。</p><h4 id="4-2-3-1-概念">4.2.3.1 概念</h4><p>定义一个用于创建对象的接口，让子类决定实例化哪个产品类对象。工厂方法使一个产品类的实例化延迟到其工厂的子类。</p><h4 id="4-2-3-2-结构">4.2.3.2 结构</h4><p>工厂方法模式的主要角色：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，调用者通过它访问具体工厂的工厂方法来创建产品。</li><li>具体工厂（ConcreteFactory）：主要是实现抽象工厂中的抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它同具体工厂之间一一对应。</li></ul><h4 id="4-2-3-3-实现">4.2.3.3 实现</h4><p>使用工厂方法模式对上例进行改进，类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc86edce.png" alt="工厂方法模式.png"></p><p>代码如下：</p><p>抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LatteCoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanCoffeeFactory</span> <span class="keyword">implements</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>咖啡店类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> CoffeeFactory factory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CoffeeStore</span><span class="params">(CoffeeFactory factory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.factory = factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">orderCoffee</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="type">Coffee</span> <span class="variable">coffee</span> <span class="operator">=</span> factory.createCoffee();</span><br><span class="line">        coffee.addMilk();</span><br><span class="line">        coffee.addsugar();</span><br><span class="line">        <span class="keyword">return</span> coffee;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从以上的编写的代码可以看到，要增加产品类时也要相应地增加工厂类，不需要修改工厂类的代码了，这样就解决了简单工厂模式的缺点。</p><p>工厂方法模式是简单工厂模式的进一步抽象。由于使用了多态性，工厂方法模式保持了简单工厂模式的优点，而且克服了它的缺点。</p><h4 id="4-2-3-4-优缺点">4.2.3.4 优缺点</h4><p><strong>优点：</strong></p><ul><li>用户只需要知道具体工厂的名称就可得到所要的产品，无须知道产品的具体创建过程；</li><li>在系统增加新的产品时只需要添加具体产品类和对应的具体工厂类，无须对原工厂进行任何修改，满足开闭原则；</li></ul><p><strong>缺点：</strong></p><ul><li>每增加一个产品就要增加一个具体产品类和一个对应的具体工厂类，这增加了系统的复杂度。</li></ul><h3 id="4-2-4-抽象工厂模式">4.2.4 抽象工厂模式</h3><p>前面介绍的工厂方法模式中考虑的是一类产品的生产，如畜牧场只养动物、电视机厂只生产电视机等。</p><p>这些工厂只生产同种类产品，同种类产品称为同等级产品，也就是说：工厂方法模式只考虑生产同等级的产品，但是在现实生活中许多工厂是综合型的工厂，能生产多等级（种类） 的产品，如电器厂既生产电视机又生产洗衣机或空调，大学既有软件专业又有生物专业等。</p><p>本节要介绍的抽象工厂模式将考虑多等级产品的生产，将同一个具体工厂所生产的位于不同等级的一组产品称为一个产品族，下图所示横轴是产品等级，也就是同一类产品；纵轴是产品族，也就是同一品牌的产品，同一品牌的产品产自同一个工厂。</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc2ad76b.png" alt="image-20200401214509176.png"></p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc410f45.png" alt="image-20200401222951963.png"></p><h4 id="4-2-4-1-概念">4.2.4.1 概念</h4><p>是一种为访问类提供一个创建一组相关或相互依赖对象的接口，且访问类无须指定所要产品的具体类就能得到同族的不同等级的产品的模式结构。</p><p>抽象工厂模式是工厂方法模式的升级版本，工厂方法模式只生产一个等级的产品，而抽象工厂模式可生产多个等级的产品。</p><h4 id="4-2-4-2-结构">4.2.4.2 结构</h4><p>抽象工厂模式的主要角色如下：</p><ul><li>抽象工厂（Abstract Factory）：提供了创建产品的接口，它包含多个创建产品的方法，可以创建多个不同等级的产品。</li><li>具体工厂（Concrete Factory）：主要是实现抽象工厂中的多个抽象方法，完成具体产品的创建。</li><li>抽象产品（Product）：定义了产品的规范，描述了产品的主要特性和功能，抽象工厂模式有多个抽象产品。</li><li>具体产品（ConcreteProduct）：实现了抽象产品角色所定义的接口，由具体工厂来创建，它 同具体工厂之间是多对一的关系。</li></ul><h4 id="4-2-4-2-实现">4.2.4.2 实现</h4><p>现咖啡店业务发生改变，不仅要生产咖啡还要生产甜点，如提拉米苏、抹茶慕斯等，要是按照工厂方法模式，需要定义提拉米苏类、抹茶慕斯类、提拉米苏工厂、抹茶慕斯工厂、甜点工厂类，很容易发生类爆炸情况。其中拿铁咖啡、美式咖啡是一个产品等级，都是咖啡；提拉米苏、抹茶慕斯也是一个产品等级；拿铁咖啡和提拉米苏是同一产品族（也就是都属于意大利风味），美式咖啡和抹茶慕斯是同一产品族（也就是都属于美式风味）。所以这个案例可以使用抽象工厂模式实现。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc98988a.png" alt="抽象工厂模式.png"></p><p>代码如下：</p><p>抽象工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DessertFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    Coffee <span class="title function_">createCoffee</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Dessert <span class="title function_">createDessert</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体工厂：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//美式甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AmericanDessertFactory</span> <span class="keyword">implements</span> <span class="title class_">DessertFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">AmericanCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dessert <span class="title function_">createDessert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MatchaMousse</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//意大利风味甜点工厂</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItalyDessertFactory</span> <span class="keyword">implements</span> <span class="title class_">DessertFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Coffee <span class="title function_">createCoffee</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LatteCoffee</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dessert <span class="title function_">createDessert</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Tiramisu</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要加同一个产品族的话，只需要再加一个对应的工厂类即可，不需要修改其他的类。</p><h4 id="4-2-4-3-优缺点">4.2.4.3 优缺点</h4><p><strong>优点：</strong></p><p>当一个产品族中的多个对象被设计成一起工作时，它能保证客户端始终只使用同一个产品族中的对象。</p><p><strong>缺点：</strong></p><p>当产品族中需要增加一个新的产品时，所有的工厂类都需要进行修改。</p><h4 id="4-2-4-4-使用场景">4.2.4.4 使用场景</h4><ul><li><p>当需要创建的对象是一系列相互关联或相互依赖的产品族时，如电器工厂中的电视机、洗衣机、空调等。</p></li><li><p>系统中有多个产品族，但每次只使用其中的某一族产品。如有人只喜欢穿某一个品牌的衣服和鞋。</p></li><li><p>系统中提供了产品的类库，且所有产品的接口相同，客户端不依赖产品实例的创建细节和内部结构。</p></li></ul><p>如：输入法换皮肤，一整套一起换。生成不同操作系统的程序。</p><h3 id="4-2-5-模式扩展">4.2.5 模式扩展</h3><p><strong>简单工厂+配置文件解除耦合</strong></p><p>可以通过工厂模式+配置文件的方式解除工厂对象和产品对象的耦合。在工厂类中加载配置文件中的全类名，并创建对象进行存储，客户端如果需要对象，直接进行获取即可。</p><p>第一步：定义配置文件</p><p>为了演示方便，我们使用properties文件作为配置文件，名称为bean.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">american</span>=<span class="string">com.itheima.pattern.factory.config_factory.AmericanCoffee</span></span><br><span class="line"><span class="attr">latte</span>=<span class="string">com.itheima.pattern.factory.config_factory.LatteCoffee</span></span><br></pre></td></tr></table></figure><p>第二步：改进工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CoffeeFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Coffee&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="type">Properties</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> CoffeeFactory.class.getClassLoader().getResourceAsStream(<span class="string">&quot;bean.properties&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            p.load(is);</span><br><span class="line">            <span class="comment">//遍历Properties集合对象</span></span><br><span class="line">            Set&lt;Object&gt; keys = p.keySet();</span><br><span class="line">            <span class="keyword">for</span> (Object key : keys) &#123;</span><br><span class="line">                <span class="comment">//根据键获取值（全类名）</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> p.getProperty((String) key);</span><br><span class="line">                <span class="comment">//获取字节码对象</span></span><br><span class="line">                <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(className);</span><br><span class="line">                <span class="type">Coffee</span> <span class="variable">obj</span> <span class="operator">=</span> (Coffee) clazz.newInstance();</span><br><span class="line">                map.put((String)key,obj);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Coffee <span class="title function_">createCoffee</span><span class="params">(String name)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态成员变量用来存储创建的对象（键存储的是名称，值存储的是对应的对象），而读取配置文件以及创建对象写在静态代码块中，目的就是只需要执行一次。</p><h3 id="4-2-6-JDK源码解析-Collection-iterator方法">4.2.6 JDK源码解析-Collection.iterator方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">&quot;令狐冲&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;风清扬&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;任我行&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取迭代器对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="comment">//使用迭代器遍历</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">ele</span> <span class="operator">=</span> it.next();</span><br><span class="line">            System.out.println(ele);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对上面的代码大家应该很熟，使用迭代器遍历集合，获取集合中的元素。而单列集合获取迭代器的方法就使用到了工厂方法模式。我们看通过类图看看结构：</p><img src="img/JDK源码解析.png" style="zoom:75%;" /><p>Collection接口是抽象工厂类，ArrayList是具体的工厂类；Iterator接口是抽象商品类，ArrayList类中的Iter内部类是具体的商品类。在具体的工厂类中iterator()方法创建具体的商品类的对象。</p><blockquote><p>另：</p><p>​1,DateForamt类中的getInstance()方法使用的是工厂模式；</p><p>​2,Calendar类中的getInstance()方法使用的是工厂模式；</p></blockquote><h2 id="4-3-原型模式">4.3 原型模式</h2><h3 id="4-3-1-概述">4.3.1 概述</h3><p>用一个已经创建的实例作为原型，通过复制该原型对象来创建一个和原型对象相同的新对象。</p><h3 id="4-3-2-结构">4.3.2 结构</h3><p>原型模式包含如下角色：</p><ul><li>抽象原型类：规定了具体原型对象必须实现的的 clone() 方法。</li><li>具体原型类：实现抽象原型类的 clone() 方法，它是可被复制的对象。</li><li>访问类：使用具体原型类中的 clone() 方法来复制新的对象。</li></ul><p>接口类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc2cfb97.png" alt="原型模式.png"></p><h3 id="4-3-3-实现">4.3.3 实现</h3><p>原型模式的克隆分为浅克隆和深克隆。</p><blockquote><p>浅克隆：创建一个新对象，新对象的属性和原来对象完全相同，对于非基本类型属性，仍指向原有属性所指向的对象的内存地址。</p><p>深克隆：创建一个新对象，属性中引用的其他对象也会被克隆，不再指向原有对象地址。</p></blockquote><p>Java中的Object类中提供了 <code>clone()</code> 方法来实现浅克隆。 Cloneable 接口是上面的类图中的抽象原型类，而实现了Cloneable接口的子实现类就是具体的原型类。代码如下：</p><p><strong>Realizetype（具体的原型类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Realizetype</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Realizetype</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体的原型对象创建完成！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Realizetype <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;具体原型复制成功！&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> (Realizetype) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PrototypeTest（测试访问类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrototypeTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Realizetype</span> <span class="variable">r1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Realizetype</span>();</span><br><span class="line">        <span class="type">Realizetype</span> <span class="variable">r2</span> <span class="operator">=</span> r1.clone();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;对象r1和r2是同一个对象？&quot;</span> + (r1 == r2));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-4-案例">4.3.4 案例</h3><p><strong>用原型模式生成“三好学生”奖状</strong></p><p>同一学校的“三好学生”奖状除了获奖人姓名不同，其他都相同，可以使用原型模式复制多个“三好学生”奖状出来，然后在修改奖状上的名字即可。</p><p>类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc5a2a8e.png" alt="原型模式1.png"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//奖状类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Citation</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;同学：在2025学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Citation <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Citation) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试访问类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CitationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="type">Citation</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Citation</span>();</span><br><span class="line">        c1.setName(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制奖状</span></span><br><span class="line">        <span class="type">Citation</span> <span class="variable">c2</span> <span class="operator">=</span> c1.clone();</span><br><span class="line">        <span class="comment">//将奖状的名字修改李四</span></span><br><span class="line">        c2.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        c1.show();</span><br><span class="line">        c2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-3-5-使用场景">4.3.5 使用场景</h3><ul><li>对象的创建非常复杂，可以使用原型模式快捷的创建对象。</li><li>性能和安全要求比较高。</li></ul><h3 id="4-3-6-扩展（深克隆）">4.3.6 扩展（深克隆）</h3><p>将上面的“三好学生”奖状的案例中Citation类的name属性修改为Student类型的属性。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//奖状类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Citation</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Student stu;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">getStu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStu</span><span class="params">(Student stu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stu = stu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(stu.getName() + <span class="string">&quot;同学：在2025学年第一学期中表现优秀，被评为三好学生。特发此状！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Citation <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> (Citation) <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAddress</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAddress</span><span class="params">(String address)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CitationTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Citation</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Citation</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        c1.setStu(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//复制奖状</span></span><br><span class="line">        <span class="type">Citation</span> <span class="variable">c2</span> <span class="operator">=</span> c1.clone();</span><br><span class="line">        <span class="comment">//获取c2奖状所属学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> c2.getStu();</span><br><span class="line">        stu1.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断stu对象和stu1对象是否是同一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;stu和stu1是同一个对象？&quot;</span> + (stu == stu1));</span><br><span class="line"></span><br><span class="line">        c1.show();</span><br><span class="line">        c2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc5c6dac.png" alt="原型模式2.png"></p><p><font color="red">说明：</font></p><p>​stu对象和stu1对象是同一个对象，就会产生将stu1对象中name属性值改为“李四”，两个Citation（奖状）对象中显示的都是李四。这就是浅克隆的效果，对具体原型类（Citation）中的引用类型的属性进行引用的复制。这种情况需要使用深克隆，而进行深克隆需要使用对象流。代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CitationTest1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Citation</span> <span class="variable">c1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Citation</span>();</span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;西安&quot;</span>);</span><br><span class="line">        c1.setStu(stu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象输出流对象</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\Think\\Desktop\\b.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将c1对象写出到文件中</span></span><br><span class="line">        oos.writeObject(c1);</span><br><span class="line">        oos.close();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建对象出入流对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Think\\Desktop\\b.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//读取对象</span></span><br><span class="line">        <span class="type">Citation</span> <span class="variable">c2</span> <span class="operator">=</span> (Citation) ois.readObject();</span><br><span class="line">        <span class="comment">//获取c2奖状所属学生对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu1</span> <span class="operator">=</span> c2.getStu();</span><br><span class="line">        stu1.setName(<span class="string">&quot;李四&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断stu对象和stu1对象是否是同一个对象</span></span><br><span class="line">        System.out.println(<span class="string">&quot;stu和stu1是同一个对象？&quot;</span> + (stu == stu1));</span><br><span class="line"></span><br><span class="line">        c1.show();</span><br><span class="line">        c2.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果为：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc5c180c.png" alt="原型模式3.png"></p><blockquote><p>注意：Citation类和Student类必须实现Serializable接口，否则会抛NotSerializableException异常。</p></blockquote><h2 id="4-5-建造者模式">4.5 建造者模式</h2><h3 id="4-4-1-概述">4.4.1 概述</h3><p>将一个复杂对象的构建与表示分离，使得同样的构建过程可以创建不同的表示。</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc473a10.png" alt="image-20200413225341516.png"></p><ul><li>分离了部件的构造(由Builder来负责)和装配(由Director负责)。 从而可以构造出复杂的对象。这个模式适用于：某个对象的构建过程复杂的情况。</li><li>由于实现了构建和装配的解耦。不同的构建器，相同的装配，也可以做出不同的对象；相同的构建器，不同的装配顺序也可以做出不同的对象。也就是实现了构建算法、装配算法的解耦，实现了更好的复用。</li><li>建造者模式可以将部件和其组装过程分开，一步一步创建一个复杂的对象。用户只需要指定复杂对象的类型就可以得到该对象，而无须知道其内部的具体构造细节。</li></ul><h3 id="4-4-2-结构">4.4.2 结构</h3><p>建造者（Builder）模式包含如下角色：</p><ul><li><p>抽象建造者类（Builder）：这个接口规定要实现复杂对象的那些部分的创建，并不涉及具体的部件对象的创建。</p></li><li><p>具体建造者类（ConcreteBuilder）：实现 Builder 接口，完成复杂产品的各个部件的具体创建方法。在构造过程完成后，提供产品的实例。</p></li><li><p>产品类（Product）：要创建的复杂对象。</p></li><li><p>指挥者类（Director）：调用具体建造者来创建复杂对象的各个部分，在指导者中不涉及具体产品的信息，只负责保证对象各部分完整创建或按某种顺序创建。</p></li></ul><p>类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc8bdfb7.png" alt="建造者模式.png"></p><h3 id="4-4-3-实例">4.4.3 实例</h3><p><strong>创建共享单车</strong></p><p>生产自行车是一个复杂的过程，它包含了车架，车座等组件的生产。而车架又有碳纤维，铝合金等材质的，车座有橡胶，真皮等材质。对于自行车的生产就可以使用建造者模式。</p><p>这里Bike是产品，包含车架，车座等组件；Builder是抽象建造者，MobikeBuilder和OfoBuilder是具体的建造者；Director是指挥者。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/03/6815cdc947def.png" alt="建造者模式1.png"></p><p>具体的代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自行车类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Bike</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String frame;</span><br><span class="line">    <span class="keyword">private</span> String seat;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFrame</span><span class="params">(String frame)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.frame = frame;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> seat;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSeat</span><span class="params">(String seat)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.seat = seat;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 抽象 builder 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Bike</span> <span class="variable">mBike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title function_">createBike</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//摩拜单车Builder类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MobikeBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;铝合金车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;真皮车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ofo单车Builder类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OfoBuilder</span> <span class="keyword">extends</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setFrame(<span class="string">&quot;碳纤维车架&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span> &#123;</span><br><span class="line">        mBike.setSeat(<span class="string">&quot;橡胶车座&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">createBike</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mBike;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指挥者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Director</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Builder mBuilder;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Director</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        mBuilder = builder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        mBuilder.buildFrame();</span><br><span class="line">        mBuilder.buildSeat();</span><br><span class="line">        <span class="keyword">return</span> mBuilder.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        showBike(<span class="keyword">new</span> <span class="title class_">OfoBuilder</span>());</span><br><span class="line">        showBike(<span class="keyword">new</span> <span class="title class_">MobikeBuilder</span>());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">showBike</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        <span class="type">Director</span> <span class="variable">director</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Director</span>(builder);</span><br><span class="line">        <span class="type">Bike</span> <span class="variable">bike</span> <span class="operator">=</span> director.construct();</span><br><span class="line">        System.out.println(bike.getFrame());</span><br><span class="line">        System.out.println(bike.getSeat());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>上面示例是 Builder模式的常规用法，指挥者类 Director 在建造者模式中具有很重要的作用，它用于指导具体构建者如何构建产品，控制调用先后次序，并向调用者返回完整的产品类，但是有些情况下需要简化系统结构，可以把指挥者类和抽象建造者进行结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 抽象 builder 类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">Bike</span> <span class="variable">mBike</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bike</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildFrame</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">buildSeat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Bike <span class="title function_">createBike</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Bike <span class="title function_">construct</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.buildFrame();</span><br><span class="line">        <span class="built_in">this</span>.BuildSeat();</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.createBike();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>这样做确实简化了系统结构，但同时也加重了抽象建造者类的职责，也不是太符合单一职责原则，如果construct() 过于复杂，建议还是封装到 Director 中。</p><h3 id="4-4-4-优缺点">4.4.4 优缺点</h3><p><strong>优点：</strong></p><ul><li>建造者模式的封装性很好。使用建造者模式可以有效的封装变化，在使用建造者模式的场景中，一般产品类和建造者类是比较稳定的，因此，将主要的业务逻辑封装在指挥者类中对整体而言可以取得比较好的稳定性。</li><li>在建造者模式中，客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得相同的创建过程可以创建不同的产品对象。</li><li>可以更加精细地控制产品的创建过程 。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</li><li>建造者模式很容易进行扩展。如果有新的需求，通过实现一个新的建造者类就可以完成，基本上不用修改之前已经测试通过的代码，因此也就不会对原有功能引入风险。符合开闭原则。</li></ul><p><strong>缺点：</strong></p><p>造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性很大，则不适合使用建造者模式，因此其使用范围受到一定的限制。</p><h3 id="4-4-5-使用场景">4.4.5 使用场景</h3><p>建造者（Builder）模式创建的是复杂对象，其产品的各个部分经常面临着剧烈的变化，但将它们组合在一起的算法却相对稳定，所以它通常在以下场合使用。</p><ul><li>创建的对象较复杂，由多个部件构成，各部件面临着复杂的变化，但构件间的建造顺序是稳定的。</li><li>创建复杂对象的算法独立于该对象的组成部分以及它们的装配方式，即产品的构建过程和最终的表示是独立的。</li></ul><h3 id="4-4-6-模式扩展">4.4.6 模式扩展</h3><p>建造者模式除了上面的用途外，在开发中还有一个常用的使用方式，就是当一个类构造器需要传入很多参数时，如果创建这个类的实例，代码可读性会非常差，而且很容易引入错误，此时就可以利用建造者模式进行重构。</p><p>重构前代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Phone</span><span class="params">(String cpu, String screen, String memory, String mainboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">        <span class="built_in">this</span>.screen = screen;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">        <span class="built_in">this</span>.mainboard = mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(String cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getScreen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setScreen</span><span class="params">(String screen)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.screen = screen;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(String memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMainboard</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMainboard</span><span class="params">(String mainboard)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mainboard = mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//构建Phone对象</span></span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="string">&quot;intel&quot;</span>,<span class="string">&quot;三星屏幕&quot;</span>,<span class="string">&quot;金士顿&quot;</span>,<span class="string">&quot;华硕&quot;</span>);</span><br><span class="line">        System.out.println(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面在客户端代码中构建Phone对象，传递了四个参数，如果参数更多呢？代码的可读性及使用的成本就是比较高。</p><p>重构后代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String cpu;</span><br><span class="line">    <span class="keyword">private</span> String screen;</span><br><span class="line">    <span class="keyword">private</span> String memory;</span><br><span class="line">    <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Phone</span><span class="params">(Builder builder)</span> &#123;</span><br><span class="line">        cpu = builder.cpu;</span><br><span class="line">        screen = builder.screen;</span><br><span class="line">        memory = builder.memory;</span><br><span class="line">        mainboard = builder.mainboard;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Builder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> String cpu;</span><br><span class="line">        <span class="keyword">private</span> String screen;</span><br><span class="line">        <span class="keyword">private</span> String memory;</span><br><span class="line">        <span class="keyword">private</span> String mainboard;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">Builder</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">cpu</span><span class="params">(String val)</span> &#123;</span><br><span class="line">            cpu = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">screen</span><span class="params">(String val)</span> &#123;</span><br><span class="line">            screen = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">memory</span><span class="params">(String val)</span> &#123;</span><br><span class="line">            memory = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Builder <span class="title function_">mainboard</span><span class="params">(String val)</span> &#123;</span><br><span class="line">            mainboard = val;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">public</span> Phone <span class="title function_">build</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Phone</span>(<span class="built_in">this</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Phone&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;cpu=&#x27;&quot;</span> + cpu + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, screen=&#x27;&quot;</span> + screen + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, memory=&#x27;&quot;</span> + memory + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, mainboard=&#x27;&quot;</span> + mainboard + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Phone</span> <span class="variable">phone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Phone</span>.Builder()</span><br><span class="line">                .cpu(<span class="string">&quot;intel&quot;</span>)</span><br><span class="line">                .mainboard(<span class="string">&quot;华硕&quot;</span>)</span><br><span class="line">                .memory(<span class="string">&quot;金士顿&quot;</span>)</span><br><span class="line">                .screen(<span class="string">&quot;三星&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        System.out.println(phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重构后的代码在使用起来更方便，某种程度上也可以提高开发效率。从软件设计上，对程序员的要求比较高。</p><h2 id="4-6-创建者模式对比">4.6 创建者模式对比</h2><h3 id="4-6-1-工厂方法模式VS建造者模式">4.6.1 工厂方法模式VS建造者模式</h3><p>工厂方法模式注重的是整体对象的创建方式；而建造者模式注重的是部件构建的过程，意在通过一步一步地精确构造创建出一个复杂的对象。</p><p>我们举个简单例子来说明两者的差异，如要制造一个超人，如果使用工厂方法模式，直接产生出来的就是一个力大无穷、能够飞翔、内裤外穿的超人；而如果使用建造者模式，则需要组装手、头、脚、躯干等部分，然后再把内裤外穿，于是一个超人就诞生了。</p><h3 id="4-6-2-抽象工厂模式VS建造者模式">4.6.2 抽象工厂模式VS建造者模式</h3><p>抽象工厂模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式则是不需要关心构建过程，只关心什么产品由什么工厂生产即可。</p><p>建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p><p>如果将抽象工厂模式看成汽车配件生产工厂，生产一个产品族的产品，那么建造者模式就是一个汽车组装工厂，通过对部件的组装可以返回一辆完整的汽车。</p>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式概述</title>
    <link href="https://yjyrichard.github.io/posts/bb7571ed.html"/>
    <id>https://yjyrichard.github.io/posts/bb7571ed.html</id>
    <published>2025-05-02T14:07:18.981Z</published>
    <updated>2025-05-05T14:37:15.966Z</updated>
    
    <content type="html"><![CDATA[<h1>1，设计模式概述</h1><h2 id="1-1-软件设计模式的产生背景">1.1 软件设计模式的产生背景</h2><p>&quot;设计模式&quot;最初并不是出现在软件设计中，而是被用于建筑领域的设计中。</p><p>1977年美国著名建筑大师、加利福尼亚大学伯克利分校环境结构中心主任<code>克里斯托夫·亚历山大（Christopher Alexander）</code>在他的著作《建筑模式语言：城镇、建筑、构造》中描述了一些常见的建筑设计问题，并提出了 253 种关于对城镇、邻里、住宅、花园和房间等进行设计的基本模式。</p><p>1990年软件工程界开始研讨设计模式的话题，后来召开了多次关于设计模式的研讨会。直到1995 年，艾瑞克·伽马（ErichGamma）、理査德·海尔姆（Richard Helm）、拉尔夫·约翰森（Ralph Johnson）、约翰·威利斯迪斯（John Vlissides）等 4 位作者合作出版了《设计模式：可复用面向对象软件的基础》一书，在此书中收录了 23 个设计模式，这是设计模式领域里程碑的事件，导致了软件设计模式的突破。这 4 位作者在软件开发领域里也以他们的“四人组”（Gang of Four，GoF）著称。</p><h2 id="1-2-软件设计模式的概念">1.2 软件设计模式的概念</h2><p>软件设计模式（Software Design Pattern），又称设计模式，是一套被反复使用、多数人知晓的、经过分类编目的、代码设计经验的总结。它描述了在软件设计过程中的一些不断重复发生的问题，以及该问题的解决方案。也就是说，它是解决特定问题的一系列套路，是前辈们的代码设计经验的总结，具有一定的普遍性，可以反复使用。</p><h2 id="1-3-学习设计模式的必要性">1.3 学习设计模式的必要性</h2><p>设计模式的本质是面向对象设计原则的实际运用，是对类的封装性、继承性和多态性以及类的关联关系和组合关系的充分理解。</p><p>正确使用设计模式具有以下优点。</p><ul><li>可以提高程序员的思维能力、编程能力和设计能力。</li><li>使程序设计更加标准化、代码编制更加工程化，使软件开发效率大大提高，从而缩短软件的开发周期。</li><li>使设计的代码可重用性高、可读性强、可靠性高、灵活性好、可维护性强。</li></ul><h2 id="1-4-设计模式分类">1.4 设计模式分类</h2><ul><li><p><strong>创建型模式</strong></p><p>用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF（四人组）书中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</p></li><li><p><strong>结构型模式</strong></p><p>用于描述如何将类或对象按某种布局组成更大的结构，GoF（四人组）书中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</p></li><li><p><strong>行为型模式</strong></p><p>用于描述类或对象之间怎样相互协作共同完成单个对象无法单独完成的任务，以及怎样分配职责。GoF（四人组）书中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。</p></li></ul><h1>2，UML图</h1><p>统一建模语言（Unified Modeling Language，UML）是用来设计软件的可视化建模语言。它的特点是简单、统一、图形化、能表达软件设计中的动态与静态信息。</p><p>UML 从目标系统的不同角度出发，定义了用例图、类图、对象图、状态图、活动图、时序图、协作图、构件图、部署图等 9 种图。</p><h2 id="2-1-类图概述">2.1 类图概述</h2><p>类图(Class diagram)是显示了模型的静态结构，特别是模型中存在的类、类的内部结构以及它们与其他类的关系等。类图不显示暂时性的信息。类图是面向对象建模的主要组成部分。</p><h2 id="2-2-类图的作用">2.2 类图的作用</h2><ul><li>在软件工程中，类图是一种静态的结构图，描述了系统的类的集合，类的属性和类之间的关系，可以简化了人们对系统的理解；</li><li>类图是系统分析和设计阶段的重要产物，是系统编码和测试的重要模型。</li></ul><h2 id="2-3-类图表示法">2.3 类图表示法</h2><h3 id="2-3-1-类的表示方式">2.3.1 类的表示方式</h3><p>在UML类图中，类使用包含类名、属性(field) 和方法(method) 且带有分割线的矩形来表示，比如下图表示一个Employee类，它包含name,age和address这3个属性，以及work()方法。</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14a2379f.jpg" alt="Employee.jpg"></p><p>属性/方法名称前加的加号和减号表示了这个属性/方法的可见性，UML类图中表示可见性的符号有三种：</p><ul><li><p>+：表示public</p></li><li><p>-：表示private</p></li><li><p>#：表示protected</p></li></ul><p>属性的完整表示方式是： <strong>可见性  名称 ：类型 [ = 缺省值]</strong></p><p>方法的完整表示方式是： <strong>可见性  名称(参数列表) [ ： 返回类型]</strong></p><blockquote><p>注意：</p><p>​1，中括号中的内容表示是可选的</p><p>​2，也有将类型放在变量名前面，返回值类型放在方法名前面</p></blockquote><p><strong>举个栗子：</strong></p><p><img src="https://img.picui.cn/free/2025/05/02/6814d149d32cb.png" alt="demo.png"></p><p>上图Demo类定义了三个方法：</p><ul><li>method()方法：修饰符为public，没有参数，没有返回值。</li><li>method1()方法：修饰符为private，没有参数，返回值类型为String。</li><li>method2()方法：修饰符为protected，接收两个参数，第一个参数类型为int，第二个参数类型为String，返回值类型是int。</li></ul><h3 id="2-3-2-类与类之间关系的表示方式">2.3.2 类与类之间关系的表示方式</h3><h4 id="2-3-2-1-关联关系">2.3.2.1 关联关系</h4><p>关联关系是对象之间的一种引用关系，用于表示一类对象与另一类对象之间的联系，如老师和学生、师傅和徒弟、丈夫和妻子等。关联关系是类与类之间最常用的一种关系，分为一般关联关系、聚合关系和组合关系。我们先介绍一般关联。</p><p>关联又可以分为单向关联，双向关联，自关联。</p><p><strong>1，单向关联</strong></p><p><img src="https://img.picui.cn/free/2025/05/02/6814d149d10eb.png" alt="customer_address.png"></p><p>在UML类图中单向关联用一个带箭头的实线表示。上图表示每个顾客都有一个地址，这通过让Customer类持有一个类型为Address的成员变量类实现。</p><p><strong>2，双向关联</strong></p><p><img src="https://img.picui.cn/free/2025/05/02/6814d149c41a5.png" alt="customer_product.png"></p><p>从上图中我们很容易看出，所谓的双向关联就是双方各自持有对方类型的成员变量。</p><p>在UML类图中，双向关联用一个不带箭头的直线表示。上图中在Customer类中维护一个List&lt;Product&gt;，表示一个顾客可以购买多个商品；在Product类中维护一个Customer类型的成员变量表示这个产品被哪个顾客所购买。</p><p><strong>3，自关联</strong></p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14ee68e3.png" alt="node.png"></p><p>自关联在UML类图中用一个带有箭头且指向自身的线表示。上图的意思就是Node类包含类型为Node的成员变量，也就是“自己包含自己”。</p><h4 id="2-3-2-2-聚合关系">2.3.2.2 聚合关系</h4><p>聚合关系是关联关系的一种，是强关联关系，是整体和部分之间的关系。</p><p>聚合关系也是通过成员对象来实现的，其中成员对象是整体对象的一部分，但是成员对象可以脱离整体对象而独立存在。例如，学校与老师的关系，学校包含老师，但如果学校停办了，老师依然存在。</p><p>在 UML 类图中，聚合关系可以用带空心菱形的实线来表示，菱形指向整体。下图所示是大学和教师的关系图：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14a3b893.png" alt="image-20191229173422328.png"></p><h4 id="2-3-2-3-组合关系">2.3.2.3 组合关系</h4><p>组合表示类之间的整体与部分的关系，但它是一种更强烈的聚合关系。</p><p>在组合关系中，整体对象可以控制部分对象的生命周期，一旦整体对象不存在，部分对象也将不存在，部分对象不能脱离整体对象而存在。例如，头和嘴的关系，没有了头，嘴也就不存在了。</p><p>在 UML 类图中，组合关系用带实心菱形的实线来表示，菱形指向整体。下图所示是头和嘴的关系图：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14c56977.png" alt="image-20191229173455149.png"></p><h4 id="2-3-2-4-依赖关系">2.3.2.4 依赖关系</h4><p>依赖关系是一种使用关系，它是对象之间耦合度最弱的一种关联方式，是临时性的关联。在代码中，某个类的方法通过局部变量、方法的参数或者对静态方法的调用来访问另一个类（被依赖类）中的某些方法来完成一些职责。</p><p>在 UML 类图中，依赖关系使用带箭头的虚线来表示，箭头从使用类指向被依赖的类。下图所示是司机和汽车的关系图，司机驾驶汽车：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14c9733e.png" alt="image-20191229173518926.png"></p><h4 id="2-3-2-5-继承关系">2.3.2.5 继承关系</h4><p>继承关系是对象之间耦合度最大的一种关系，表示一般与特殊的关系，是父类与子类之间的关系，是一种继承关系。</p><p>在 UML 类图中，泛化关系用带空心三角箭头的实线来表示，箭头从子类指向父类。在代码实现时，使用面向对象的继承机制来实现泛化关系。例如，Student 类和 Teacher 类都是 Person 类的子类，其类图如下图所示：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14cbadbc.png" alt="image-20191229173539838.png"></p><h4 id="2-3-2-6-实现关系">2.3.2.6 实现关系</h4><p>实现关系是接口与实现类之间的关系。在这种关系中，类实现了接口，类中的操作实现了接口中所声明的所有的抽象操作。</p><p>在 UML 类图中，实现关系使用带空心三角箭头的虚线来表示，箭头从实现类指向接口。例如，汽车和船实现了交通工具，其类图如图 9 所示。</p><p><img src="img%5Cimage-20191229173554296.png" alt=""></p><h1>3，软件设计原则</h1><p>在软件开发中，为了提高软件系统的可维护性和可复用性，增加软件的可扩展性和灵活性，程序员要尽量根据6条原则来开发程序，从而提高软件开发效率、节约软件开发成本和维护成本。</p><h2 id="3-1-开闭原则">3.1 开闭原则</h2><p><strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。</p><p>想要达到这样的效果，我们需要使用接口和抽象类。</p><p>因为抽象灵活性好，适应性广，只要抽象的合理，可以基本保持软件架构的稳定。而软件中易变的细节可以从抽象派生来的实现类来进行扩展，当软件需要发生变化时，只需要根据需求重新派生一个实现类来扩展就可以了。</p><p>下面以 <code>搜狗输入法</code> 的皮肤为例介绍开闭原则的应用。</p><p>【例】<code>搜狗输入法</code> 的皮肤设计。</p><p>分析：<code>搜狗输入法</code> 的皮肤是输入法背景图片、窗口颜色和声音等元素的组合。用户可以根据自己的喜爱更换自己的输入法的皮肤，也可以从网上下载新的皮肤。这些皮肤有共同的特点，可以为其定义一个抽象类（AbstractSkin），而每个具体的皮肤（DefaultSpecificSkin和HeimaSpecificSkin）是其子类。用户窗体可以根据需要选择或者增加新的主题，而不需要修改原代码，所以它是满足开闭原则的。</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14f3225f.png" alt="open-close.png"></p><h2 id="3-2-里氏代换原则">3.2 里氏代换原则</h2><p>里氏代换原则是面向对象设计的基本原则之一。</p><p>里氏代换原则：任何基类可以出现的地方，子类一定可以出现。通俗理解：子类可以扩展父类的功能，但不能改变父类原有的功能。换句话说，子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。</p><p>如果通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的概率会非常大。</p><p>下面看一个里氏替换原则中经典的一个例子</p><p>【例】正方形不是长方形。</p><p>在数学领域里，正方形毫无疑问是长方形，它是一个长宽相等的长方形。所以，我们开发的一个与几何图形相关的软件系统，就可以顺理成章的让正方形继承自长方形。</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d1538ad4a.png" alt="正方形不是长方形.png"></p><p>代码如下：</p><p><strong>长方形类（Rectangle）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> length;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">double</span> width;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getLength</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.length = length;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">double</span> <span class="title function_">getWidth</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.width = width;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>正方形（Square）：</strong></p><p>由于正方形的长和宽相同，所以在方法setLength和setWidth中，对长度和宽度都需要赋相同值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Rectangle</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWidth</span><span class="params">(<span class="type">double</span> width)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setLength(width);</span><br><span class="line">        <span class="built_in">super</span>.setWidth(width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLength</span><span class="params">(<span class="type">double</span> length)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.setLength(length);</span><br><span class="line">        <span class="built_in">super</span>.setWidth(length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>类RectangleDemo是我们的软件系统中的一个组件，它有一个resize方法依赖基类Rectangle，resize方法是RectandleDemo类中的一个方法，用来实现宽度逐渐增长的效果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RectangleDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">resize</span><span class="params">(Rectangle rectangle)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (rectangle.getWidth() &lt;= rectangle.getLength()) &#123;</span><br><span class="line">            rectangle.setWidth(rectangle.getWidth() + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印长方形的长和宽</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">printLengthAndWidth</span><span class="params">(Rectangle rectangle)</span> &#123;</span><br><span class="line">        System.out.println(rectangle.getLength());</span><br><span class="line">        System.out.println(rectangle.getWidth());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Rectangle</span>();</span><br><span class="line">        rectangle.setLength(<span class="number">20</span>);</span><br><span class="line">        rectangle.setWidth(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle);</span><br><span class="line">        printLengthAndWidth(rectangle);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;============&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Rectangle</span> <span class="variable">rectangle1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Square</span>();</span><br><span class="line">        rectangle1.setLength(<span class="number">10</span>);</span><br><span class="line">        resize(rectangle1);</span><br><span class="line">        printLengthAndWidth(rectangle1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们运行一下这段代码就会发现，假如我们把一个普通长方形作为参数传入resize方法，就会看到长方形宽度逐渐增长的效果，当宽度大于长度,代码就会停止，这种行为的结果符合我们的预期；假如我们再把一个正方形作为参数传入resize方法后，就会看到正方形的宽度和长度都在不断增长，代码会一直运行下去，直至系统产生溢出错误。所以，普通的长方形是适合这段代码的，正方形不适合。<br>我们得出结论：在resize方法中，Rectangle类型的参数是不能被Square类型的参数所代替，如果进行了替换就得不到预期结果。因此，Square类和Rectangle类之间的继承关系违反了里氏代换原则，它们之间的继承关系不成立，正方形不是长方形。</p><p>如何改进呢？此时我们需要重新设计他们之间的关系。抽象出来一个四边形接口(Quadrilateral)，让Rectangle类和Square类实现Quadrilateral接口</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d15475359.png" alt="正方形不是长方形改进.png"></p><h2 id="3-3-依赖倒转原则">3.3 依赖倒转原则</h2><p>高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。</p><p>下面看一个例子来理解依赖倒转原则</p><p>【例】组装电脑</p><p>现要组装一台电脑，需要配件cpu，硬盘，内存条。只有这些配置都有了，计算机才能正常的运行。选择cpu有很多选择，如Intel，AMD等，硬盘可以选择希捷，西数等，内存条可以选择金士顿，海盗船等。</p><p><strong>类图如下：</strong></p><p><img src="https://img.picui.cn/free/2025/05/02/6814d14f6ef21.png" alt="依赖倒转原则.png"></p><p>代码如下：</p><p><strong>希捷硬盘类（XiJieHardDisk）:</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiJieHardDisk</span> <span class="keyword">implements</span> <span class="title class_">HardDisk</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(String data)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷硬盘存储数据&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用希捷希捷硬盘取数据&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;数据&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Intel处理器（IntelCpu）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IntelCpu</span> <span class="keyword">implements</span> <span class="title class_">Cpu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用Intel处理器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>金士顿内存条（KingstonMemory）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">KingstonMemory</span> <span class="keyword">implements</span> <span class="title class_">Memory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;使用金士顿作为内存条&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> XiJieHardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> IntelCpu cpu;</span><br><span class="line">    <span class="keyword">private</span> KingstonMemory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> IntelCpu <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(IntelCpu cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> KingstonMemory <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(KingstonMemory memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> XiJieHardDisk <span class="title function_">getHardDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHardDisk</span><span class="params">(XiJieHardDisk hardDisk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.save();</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> hardDisk.get();</span><br><span class="line">        System.out.println(<span class="string">&quot;从硬盘中获取的数据为：&quot;</span> + data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试类（TestComputer）：</strong></p><p>测试类用来组装电脑。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestComputer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Computer</span> <span class="variable">computer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Computer</span>();</span><br><span class="line">        computer.setHardDisk(<span class="keyword">new</span> <span class="title class_">XiJieHardDisk</span>());</span><br><span class="line">        computer.setCpu(<span class="keyword">new</span> <span class="title class_">IntelCpu</span>());</span><br><span class="line">        computer.setMemory(<span class="keyword">new</span> <span class="title class_">KingstonMemory</span>());</span><br><span class="line"></span><br><span class="line">        computer.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到已经组装了一台电脑，但是似乎组装的电脑的cpu只能是Intel的，内存条只能是金士顿的，硬盘只能是希捷的，这对用户肯定是不友好的，用户有了机箱肯定是想按照自己的喜好，选择自己喜欢的配件。</p><p>根据依赖倒转原则进行改进：</p><p>代码我们只需要修改Computer类，让Computer类依赖抽象（各个配件的接口），而不是依赖于各个组件具体的实现类。</p><p><strong>类图如下：</strong></p><p><img src="https://img.picui.cn/free/2025/05/02/6814d151008d0.png" alt="依赖倒转原则改进.png"></p><p><strong>电脑（Computer）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Computer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> HardDisk hardDisk;</span><br><span class="line">    <span class="keyword">private</span> Cpu cpu;</span><br><span class="line">    <span class="keyword">private</span> Memory memory;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HardDisk <span class="title function_">getHardDisk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHardDisk</span><span class="params">(HardDisk hardDisk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.hardDisk = hardDisk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Cpu <span class="title function_">getCpu</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCpu</span><span class="params">(Cpu cpu)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.cpu = cpu;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memory <span class="title function_">getMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemory</span><span class="params">(Memory memory)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memory = memory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;计算机工作&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>面向对象的开发很好的解决了这个问题，一般情况下抽象的变化概率很小，让用户程序依赖于抽象，实现的细节也依赖于抽象。即使实现细节不断变动，只要抽象不变，客户程序就不需要变化。这大大降低了客户程序与实现细节的耦合度。</p><h2 id="3-4-接口隔离原则">3.4 接口隔离原则</h2><p>客户端不应该被迫依赖于它不使用的方法；一个类对另一个类的依赖应该建立在最小的接口上。</p><p>下面看一个例子来理解接口隔离原则</p><p>【例】安全门案例</p><p>我们需要创建一个<code>黑马</code>品牌的安全门，该安全门具有防火、防水、防盗的功能。可以将防火，防水，防盗功能提取成一个接口，形成一套规范。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d15291e21.png" alt="接口隔离原则.png"></p><p>上面的设计我们发现了它存在的问题，黑马品牌的安全门具有防盗，防水，防火的功能。现在如果我们还需要再创建一个传智品牌的安全门，而该安全门只具有防盗、防水功能呢？很显然如果实现SafetyDoor接口就违背了接口隔离原则，那么我们如何进行修改呢？看如下类图：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d152a5bcd.png" alt="接口隔离原则1.png"></p><p>代码如下：</p><p><strong>AntiTheft（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AntiTheft</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">antiTheft</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Fireproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Fireproof</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">fireproof</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Waterproof（接口）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Waterproof</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">waterproof</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeiMaSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeiMaSafetyDoor</span> <span class="keyword">implements</span> <span class="title class_">AntiTheft</span>,Fireproof,Waterproof &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">antiTheft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireproof</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">waterproof</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防水&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>ItcastSafetyDoor（类）：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ItcastSafetyDoor</span> <span class="keyword">implements</span> <span class="title class_">AntiTheft</span>,Fireproof &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">antiTheft</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防盗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fireproof</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;防火&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-5-迪米特法则">3.5 迪米特法则</h2><p>迪米特法则又叫最少知识原则。</p><p>只和你的直接朋友交谈，不跟“陌生人”说话（Talk only to your immediate friends and not to strangers）。</p><p>其含义是：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。</p><p>迪米特法则中的“朋友”是指：当前对象本身、当前对象的成员对象、当前对象所创建的对象、当前对象的方法参数等，这些对象同当前对象存在关联、聚合或组合关系，可以直接访问这些对象的方法。</p><p>下面看一个例子来理解迪米特法则</p><p>【例】明星与经纪人的关系实例</p><p>明星由于全身心投入艺术，所以许多日常事务由经纪人负责处理，如和粉丝的见面会，和媒体公司的业务洽淡等。这里的经纪人是明星的朋友，而粉丝和媒体公司是陌生人，所以适合使用迪米特法则。</p><p>类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d1550bb09.png" alt="迪米特法则.png"></p><p>代码如下：</p><p><strong>明星类（Star）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Star</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Star</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>粉丝类（Fans）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fans</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Fans</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>媒体公司类（Company）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Company</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Company</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>经纪人类（Agent）</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Agent</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Star star;</span><br><span class="line">    <span class="keyword">private</span> Fans fans;</span><br><span class="line">    <span class="keyword">private</span> Company company;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStar</span><span class="params">(Star star)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.star = star;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFans</span><span class="params">(Fans fans)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fans = fans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompany</span><span class="params">(Company company)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.company = company;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">meeting</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(fans.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;见面了。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">business</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(company.getName() + <span class="string">&quot;与明星&quot;</span> + star.getName() + <span class="string">&quot;洽淡业务。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-合成复用原则">3.6 合成复用原则</h2><p>合成复用原则是指：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现。</p><p>通常类的复用分为继承复用和合成复用两种。</p><p>继承复用虽然有简单和易实现的优点，但它也存在以下缺点：</p><ol><li>继承复用破坏了类的封装性。因为继承会将父类的实现细节暴露给子类，父类对子类是透明的，所以这种复用又称为“白箱”复用。</li><li>子类与父类的耦合度高。父类的实现的任何改变都会导致子类的实现发生变化，这不利于类的扩展与维护。</li><li>它限制了复用的灵活性。从父类继承而来的实现是静态的，在编译时已经定义，所以在运行时不可能发生变化。</li></ol><p>采用组合或聚合复用时，可以将已有对象纳入新对象中，使之成为新对象的一部分，新对象可以调用已有对象的功能，它有以下优点：</p><ol><li>它维持了类的封装性。因为成分对象的内部细节是新对象看不见的，所以这种复用又称为“黑箱”复用。</li><li>对象间的耦合度低。可以在类的成员位置声明抽象。</li><li>复用的灵活性高。这种复用可以在运行时动态进行，新对象可以动态地引用与成分对象类型相同的对象。</li></ol><p>下面看一个例子来理解合成复用原则</p><p>【例】汽车分类管理程序</p><p>汽车按“动力源”划分可分为汽油汽车、电动汽车等；按“颜色”划分可分为白色汽车、黑色汽车和红色汽车等。如果同时考虑这两种分类，其组合就很多。类图如下：</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d151aa704.png" alt="合成复用原则.png"></p><p>从上面类图我们可以看到使用继承复用产生了很多子类，如果现在又有新的动力源或者新的颜色的话，就需要再定义新的类。我们试着将继承复用改为聚合复用看一下。</p><p><img src="https://img.picui.cn/free/2025/05/02/6814d151d03d1.png" alt="合成复用原则1.png"></p><h1>4，创建者模式</h1><p>创建型模式的主要关注点是“怎样创建对象？”，它的主要特点是“将对象的创建与使用分离”。</p><p>这样可以降低系统的耦合度，使用者不需要关注对象的创建细节。</p><p>创建型模式分为：</p><ul><li>单例模式</li><li>工厂方法模式</li><li>抽象工程模式</li><li>原型模式</li><li>建造者模式</li></ul><h2 id="4-1-单例设计模式">4.1 单例设计模式</h2><p>单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。</p><p>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。</p><h3 id="4-1-1-单例模式的结构">4.1.1 单例模式的结构</h3><p>单例模式的主要有以下角色：</p><ul><li>单例类。只能创建一个实例的类</li><li>访问类。使用单例类</li></ul><h3 id="4-1-2-单例模式的实现">4.1.2 单例模式的实现</h3><blockquote><p>单例设计模式分类两种：</p><p>​饿汉式：类加载就会导致该单实例对象被创建</p><p>​懒汉式：类加载不会导致该单实例对象被创建，而是首次使用该对象时才会创建</p></blockquote><ol><li><p>饿汉式-方式1（静态变量方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 饿汉式</span></span><br><span class="line"><span class="comment"> *      静态变量创建类的对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//具体测试可以创建两个对象看看是否是同一个对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​该方式在成员位置声明Singleton类型的静态变量，并创建Singleton类的对象instance。instance对象是随着类的加载而创建的。如果该对象足够大的话，而一直没有使用就会造成内存的浪费。</p></li><li><p>饿汉式-方式2（静态代码块方式）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 恶汉式</span></span><br><span class="line"><span class="comment"> *      在静态代码块中创建该类对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法 外界无法创建</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象 声明singleton类型的变量</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance; <span class="comment">//null </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​该方式在成员位置声明Singleton类型的静态变量，而对象的创建是在静态代码块中，也是对着类的加载而创建。所以和饿汉式的方式1基本上一样，当然该方式也存在内存浪费问题。</p></li><li><p>懒汉式-方式1（线程不安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> *  线程不安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​从上面代码我们可以看出该方式在成员位置声明Singleton类型的静态变量，并没有进行对象的赋值操作，那么什么时候赋值的呢？当调用getInstance()方法获取Singleton类的对象的时候才创建Singleton类的对象，这样就实现了懒加载的效果。但是，如果是多线程环境，会出现线程安全问题。</p></li><li><p>懒汉式-方式2（线程安全）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 懒汉式</span></span><br><span class="line"><span class="comment"> *  线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在成员位置创建该类的对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​该方式也实现了懒加载效果，同时又解决了线程安全问题。但是在getInstance()方法上添加了synchronized关键字，导致该方法的执行效果特别低。从上面代码我们可以看出，其实就是在初始化instance的时候才会出现线程安全问题，一旦初始化完成就不存在了。</p></li><li><p>懒汉式-方式3（双重检查锁）</p><p>再来讨论一下懒汉模式中加锁的问题，对于 <code>getInstance()</code> 方法来说，绝大部分的操作都是读操作，读操作是线程安全的，所以我们没必让每个线程必须持有锁才能调用该方法，我们需要调整加锁的时机。由此也产生了一种新的实现模式：双重检查锁模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123; </span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实例</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">//抢到锁之后再次判断是否为null</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双重检查锁模式是一种非常好的单例实现模式，解决了单例、性能、线程安全问题，上面的双重检测锁模式看上去完美无缺，其实是存在问题，在多线程的情况下，可能会出现空指针问题，出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。</p><p>要解决双重检查锁模式带来空指针异常的问题，只需要使用 <code>volatile</code> 关键字, <code>volatile</code> 关键字可以保证可见性和有序性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 双重检查方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="comment">//第一次判断，如果instance不为null，不进入抢锁阶段，直接返回实际</span></span><br><span class="line">        <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">                <span class="comment">//抢到锁之后再次判断是否为空</span></span><br><span class="line">                <span class="keyword">if</span>(instance == <span class="literal">null</span>) &#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">小结：</font></p><p>添加 <code>volatile</code> 关键字之后的双重检查锁模式是一种比较好的单例实现模式，能够保证在多线程的情况下线程安全也不会有性能问题。</p></li><li><p>懒汉式-方式4（静态内部类方式）</p><p>静态内部类单例模式中实例由内部类创建，由于 JVM 在加载外部类的过程中, 是不会加载静态内部类的, 只有内部类的属性/方法被调用时才会被加载, 并初始化其静态属性。静态属性由于被 <code>static</code> 修饰，保证只被实例化一次，并且严格保证实例化顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 静态内部类方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​第一次加载Singleton类时不会去初始化INSTANCE，只有第一次调用getInstance，虚拟机加载SingletonHolder</p><p>并初始化INSTANCE，这样不仅能确保线程安全，也能保证 Singleton 类的唯一性。</p><p><font color="red">小结：</font></p><p>​静态内部类单例模式是一种优秀的单例模式，是开源项目中比较常用的一种单例模式。在没有加任何锁的情况下，保证了多线程下的安全，并且没有任何性能影响和空间的浪费。</p><p>双重检查锁方法和静态内部类方法都可以选择。</p></li><li><p>枚举方式</p><p>枚举类实现单例模式是极力推荐的单例实现模式，因为枚举类型是线程安全的，并且只会装载一次，设计者充分的利用了枚举的这个特性来实现单例模式，枚举的写法非常简单，而且枚举类型是所用单例实现中唯一一种不会被破坏的单例实现模式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 枚举方式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color='red'>说明：</font></p><p>​枚举方式属于恶汉式方式。如果不考虑内存空间首选。</p></li></ol><h3 id="4-1-3-存在的问题">4.1.3 存在的问题</h3><h4 id="4-1-3-1-问题演示">4.1.3.1 问题演示</h4><p>破坏单例模式：</p><p>使上面定义的单例类（Singleton）可以创建多个对象，枚举方式（因为是jvm底层的一个实现）除外。有两种方式，分别是序列化和反射。</p><ul><li><p>序列化反序列化</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//往文件中写对象</span></span><br><span class="line">        <span class="comment">//writeObject2File();</span></span><br><span class="line">        <span class="comment">//从文件中读取对象</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s1</span> <span class="operator">=</span> readObjectFromFile();</span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s2</span> <span class="operator">=</span> readObjectFromFile();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断两个反序列化后的对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从文件读取数据（对象）</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton <span class="title function_">readObjectFromFile</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建对象输入流对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//第一个读取Singleton对象</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> (Singleton) ois.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//向文件中·写数据（对象）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">writeObject2File</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的对象</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">instance</span> <span class="operator">=</span> Singleton.getInstance();</span><br><span class="line">        <span class="comment">//创建对象输出流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;C:\\Users\\Think\\Desktop\\a.txt&quot;</span>));</span><br><span class="line">        <span class="comment">//将instance对象写出到文件中</span></span><br><span class="line">        oos.writeObject(instance);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明序列化和反序列化已经破坏了单例设计模式。打印出来的地址不一样</p></blockquote></li><li><p>反射</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Test类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取Singleton类的字节码对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Singleton.class;</span><br><span class="line">        <span class="comment">//获取Singleton类的私有无参构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor();</span><br><span class="line">        <span class="comment">//取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建Singleton类的对象s1</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s1</span> <span class="operator">=</span> (Singleton) constructor.newInstance();</span><br><span class="line">        <span class="comment">//创建Singleton类的对象s2</span></span><br><span class="line">        <span class="type">Singleton</span> <span class="variable">s2</span> <span class="operator">=</span> (Singleton) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断通过反射创建的两个Singleton对象是否是同一个对象</span></span><br><span class="line">        System.out.println(s1 == s2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>上面代码运行结果是<code>false</code>，表明反射已经破坏了单例设计模式</p></blockquote></li></ul><blockquote><p><font color="red">注意：</font>枚举方式不会出现这两个问题。</p></blockquote><h4 id="4-1-3-2-问题的解决">4.1.3.2 问题的解决</h4><ul><li><p>序列化、反序列方式破坏单例模式的解决方法</p><p>在Singleton类中添加<code>readResolve()</code>方法，在反序列化时被反射调用，如果定义了这个方法，就返回这个方法的值，如果没有定义，则返回新new出来的对象。</p><p><strong>Singleton类：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下面是为了解决序列化反序列化破解单例模式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>源码解析：</strong></p><p>ObjectInputStream类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">readObject</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// if nested read, passHandle contains handle of enclosing object</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">outerHandle</span> <span class="operator">=</span> passHandle;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> readObject0(<span class="literal">false</span>);<span class="comment">//重点查看readObject0方法</span></span><br><span class="line">    .....</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">readObject0</span><span class="params">(<span class="type">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">...</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">switch</span> (tc) &#123;</span><br><span class="line">...</span><br><span class="line"><span class="keyword">case</span> TC_OBJECT:</span><br><span class="line"><span class="keyword">return</span> checkResolve(readOrdinaryObject(unshared));<span class="comment">//重点查看readOrdinaryObject方法</span></span><br><span class="line">...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        depth--;</span><br><span class="line">        bin.setBlockDataMode(oldMode);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">private</span> Object <span class="title function_">readOrdinaryObject</span><span class="params">(<span class="type">boolean</span> unshared)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">...</span><br><span class="line"><span class="comment">//isInstantiable 返回true，执行 desc.newInstance()，通过反射创建新的单例类，</span></span><br><span class="line">    obj = desc.isInstantiable() ? desc.newInstance() : <span class="literal">null</span>; </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 在Singleton类中添加 readRes  olve 方法后 desc.hasReadResolveMethod() 方法执行结果为true</span></span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp; handles.lookupException(passHandle) == <span class="literal">null</span> &amp;&amp; desc.hasReadResolveMethod()) &#123;</span><br><span class="line">    <span class="comment">// 通过反射调用 Singleton 类中的 readResolve 方法，将返回值赋值给rep变量</span></span><br><span class="line">    <span class="comment">// 这样多次调用ObjectInputStream类中的readObject方法，继而就会调用我们定义的readResolve方法，所以返回的是同一个对象。</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">rep</span> <span class="operator">=</span> desc.invokeReadResolve(obj);</span><br><span class="line">     ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>反射方式破解单例的解决方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="comment">//private static boolean flag = false;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">           反射破解单例模式需要添加的代码</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="comment">//这里可以加一个sychronized锁 来保证线程的安全</span></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不能创建多个对象&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//将flag设置为true</span></span><br><span class="line">        <span class="comment">//flag = true;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//对外提供静态方法获取该对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">            <span class="keyword">if</span>(instance != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> instance;</span><br><span class="line">            &#125;</span><br><span class="line">            instance = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><font color="red">说明:</font></p><p>​这种方式比较好理解。当通过反射方式调用构造方法进行创建创建时，直接抛异常。不运行此中操作。</p></li></ul><h3 id="4-1-4-JDK源码解析-Runtime类">4.1.4 JDK源码解析-Runtime类</h3><p>Runtime类就是使用的单例设计模式。</p><ol><li><p>通过源代码查看使用的是哪儿种单例模式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Runtime</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Runtime</span> <span class="variable">currentRuntime</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runtime</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns the runtime object associated with the current Java application.</span></span><br><span class="line"><span class="comment">     * Most of the methods of class &lt;code&gt;Runtime&lt;/code&gt; are instance</span></span><br><span class="line"><span class="comment">     * methods and must be invoked with respect to the current runtime object.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>  the &lt;code&gt;Runtime&lt;/code&gt; object associated with the current</span></span><br><span class="line"><span class="comment">     *          Java application.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title function_">getRuntime</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Don&#x27;t let anyone else instantiate this class */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Runtime</span><span class="params">()</span> &#123;&#125;v</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面源代码中可以看出Runtime类使用的是恶汉式（静态属性）方式来实现单例模式的。</p></li><li><p>使用Runtime类中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RuntimeDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//获取Runtime类对象</span></span><br><span class="line">        <span class="type">Runtime</span> <span class="variable">runtime</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回 Java 虚拟机中的内存总量。</span></span><br><span class="line">        System.out.println(runtime.totalMemory());</span><br><span class="line">        <span class="comment">//返回 Java 虚拟机试图使用的最大内存量。</span></span><br><span class="line">        System.out.println(runtime.maxMemory());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个新的进程执行指定的字符串命令，返回进程对象</span></span><br><span class="line">        <span class="type">Process</span> <span class="variable">process</span> <span class="operator">=</span> runtime.exec(<span class="string">&quot;ipconfig&quot;</span>);</span><br><span class="line">        <span class="comment">//获取命令执行后的结果，通过输入流获取</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> process.getInputStream();</span><br><span class="line">        <span class="type">byte</span>[] arr = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>* <span class="number">100</span>];</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> inputStream.read(arr);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(arr,<span class="number">0</span>,b,<span class="string">&quot;gbk&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>微信支付</title>
    <link href="https://yjyrichard.github.io/posts/3ec27523.html"/>
    <id>https://yjyrichard.github.io/posts/3ec27523.html</id>
    <published>2025-04-20T16:21:07.789Z</published>
    <updated>2025-04-21T00:46:15.623Z</updated>
    
    <content type="html"><![CDATA[<h1>在线支付微信支付</h1><blockquote><p>1.微信支付介绍和接入指引</p><p>2.证书/密钥/签名</p><p>3.案例项目的创建</p><p>SpringBoot+Vue  Java mp Mysql   HTML JS Vue</p><p>4.基础支付API V3</p></blockquote><h3 id="微信支付的支付介绍">微信支付的支付介绍</h3><p><a href="https://pay.weixin.qq.com/static/product/product_index.shtml#payment_product">产品中心 - 微信支付商户平台</a></p><p><img src="https://img.picui.cn/free/2025/04/21/68051c9f828db.png" alt="image-20250420134541699.png"></p><p>具体适用场景可以自己到官网进行查看</p><p>Native支付是用户扫描二维码后直接展示由商家指定的支付金额</p><p>JSAPI 是由用户自己输入金额</p><p>本质一样的只是用于不同的前端中，对于后端来说接入机制都是一样的，我们得学习会以PC网站来实现</p><p><a href="https://pay.weixin.qq.com/static/applyment_guide/applyment_index.shtml">微信支付接入指引 - 微信支付商户平台</a></p><p>在接入指引中选择我有PC网站</p><p><img src="https://img.picui.cn/free/2025/04/21/68051c9f9086b.png" alt="image-20250420135048769.png"></p><p>在我们收钱得过程中微信会收取一定得费用 跟具体类目有关</p><p><a href="https://kf.qq.com/faq/220228IJb2UV220228uEjU3Q.html">入驻结算规则、行业属性及特殊资质 - 腾讯客服</a></p><p>申请流程： 提交资料 =》 签署协议 =》 绑定场景</p><blockquote><p>一、微信支付介绍和接入指引<br>1、微信支付产品介绍<br>1.1、付款码支付<br>用户展示微信钱包内的“付款码”给商家，商家扫描后直接完成支付，适用于线下面对面收银的场景。<br>1.2、JSAPI支付<br>线下场所：商户展示一个支付二维码，用户使用微信扫描二维码后，输入需要支付的金额，完成支<br>付。<br>公众号场景：用户在微信内进入商家公众号，打开某个页面，选择某个产品，完成支付。<br>PC网站场景：在网站中展示二维码，用户使用微信扫描二维码，输入需要支付的金额，完成支<br>付。<br>特点：用户在客户端输入支付金额<br>1.3、小程序支付<br>在微信小程序平台内实现支付的功能。<br>1.4、Native支付<br>Native支付是指商户展示支付二维码，用户再用微信“扫一扫”完成支付的模式。这种方式适用于PC网<br>站。<br>特点：商家预先指定支付金额<br>1.5、APP支付<br>商户通过在移动端独立的APP应用程序中集成微信支付模块，完成支付。<br>1.6、刷脸支付<br>用户在刷脸设备前通过摄像头刷脸、识别身份后进行的一种支付方式。<br>2、接入指引<br>2.1、获取商户号<br>微信商户平台：<a href="https://pay.weixin.qq.com/">https://pay.weixin.qq.com/</a><br>场景：Native支付<br>步骤：提交资料 =&gt; 签署协议 =&gt; 获取商户号<br>2.2、获取APPID<br>微信公众平台：<a href="https://mp.weixin.qq.com/">https://mp.weixin.qq.com/</a><br>步骤：注册服务号 =&gt; 服务号认证 =&gt; 获取APPID =&gt; 绑定商户号<br>2.3、获取API秘钥<br>APIv2版本的接口需要此秘钥<br>步骤：登录商户平台 =&gt; 选择 账户中心 =&gt; 安全中心 =&gt; API安全 =&gt; 设置API密钥<br>2.4、获取APIv3秘钥<br>APIv3版本的接口需要此秘钥<br>步骤：登录商户平台 =&gt; 选择 账户中心 =&gt; 安全中心 =&gt; API安全 =&gt; 设置APIv3密钥<br>随机密码生成工具：<a href="https://suijimimashengcheng.bmcx.com/">https://suijimimashengcheng.bmcx.com/</a><br>2.5、申请商户API证书<br>APIv3版本的所有接口都需要；APIv2版本的高级接口需要（如：退款、企业红包、企业付款等）<br>步骤：登录商户平台 =&gt; 选择 账户中心 =&gt; 安全中心 =&gt; API安全 =&gt; 申请API证书<br>2.6、获取微信平台证书<br>可以预先下载，也可以通过编程的方式获取。后面的课程中，我们会通过编程的方式来获取。<br>注意：以上所有API秘钥和证书需妥善保管防止泄露</p></blockquote><p>这个过程怎么保证安全呢？</p><p><img src="https://img.picui.cn/free/2025/04/21/68051c9fc5a83.png" alt="image-20250420140655522.png"></p><p>•密钥的度量单位是位 bit，如，秘钥长度128，就是16字节的二进制串<br>•按照密钥的使用方式，加密可以分为两大类：对称加密和非对称加密</p><p>•AES加密算法，密钥长度128、192或256，安全强度很高，性能很好<br>•加密分组模式：将明文分组加密，微信支付中使用 AEAD_AES_256_GCM</p><p><img src="https://img.picui.cn/free/2025/04/21/68051c9fc2833.png" alt="image-20250420140752147.png"></p><p>•使用公钥加密后只能用私钥解密，反过来，私钥加密后也只能用公钥解密<br>•RSA加密算法：最著名的非对称加密算法</p><p>对称加密</p><p>•优点：运算速度快<br>•缺点秘钥需要信息交换的双方共享， —旦被窃取， 消息会被破解</p><p>非对称加密</p><p>•优点私钥严格保密， 公钥任意分发， 黑客获取公钥无法破解密文<br>•缺点：运算速度非常慢</p><p>有人可能会问了：</p><p>那可不可以抛弃对称加密呢？ 很遗憾，非对称加密是基于非常复杂得数学算法，因此呢它得运行速度非常慢，如果我们在互联网上传输信息的话，通信速度呢是无法保证的，所以一般情况下，如果要保证信息传输的安全性，一般呢都是对称加密和非对称加密相结合的</p><p>例如我们可以先用非对称加密的方式先传输对称加密需要的密钥，这样呢可以保证密钥被安全的传递，那后期的信息交换的过程呢就可以安全地使用对称加密进行了。这样既能保证对称加密需要地密钥呢不会再传输地过程当中被拦截被窃取，又能保证再后续地信息传输地过程当中加密和解密的效率，https的底层使用的就是这个原理。</p><p>下面是一个例子：</p><p><img src="https://img.picui.cn/free/2025/04/21/68051c9fc504b.png" alt="image-20250420141443709.png"></p><p>Bob有一对密钥，他给他的朋友们公钥。只有自己有私钥，Susan想给Bob写信，信的内容需要加密，那么她可以使用Bob的公钥将内容进行加密然后发送给Bob，Bob用自己的私钥解密查看。那如果Bob也行给Susan写一封加密的信，应该如何保证数据的安全呢？我们可以想到Susan就要也拥有自己的公钥和私钥然后将公钥分发给她的朋友们</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca14765c.png" alt="image-20250420141745413.png"></p><p>如果私钥加密公钥解密有什么效果呢？</p><p>他的朋友们都可以知道这封信写了什么</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca188426.png" alt="image-20250420141829258.png"></p><p>所以这到底有什么效果呢？</p><p>朋友们可以确定这封信是Bob发出的，其实就是身份认证。</p><p><strong>摘要算法和数据的完整性</strong></p><p>那么如何保证信件不给篡改，即信息的完整性？</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca2600ec.png" alt="image-20250420142032604.png"></p><p>特点：</p><p>1.不可逆：只有算法，没有密钥，只能加密，不能解密</p><p>2.难题友好性：想要破解，只能暴力枚举</p><p>3.发散性：只要对原文进行一点点改动，摘要就会发生剧烈变化</p><p>4.抗碰撞性：原文不同，计算后的摘要也要不同</p><p>常见的摘要算法：MD5 ,SHA1,SHA2（SHA224,SHA256,SHA484） 生成xx字节的摘要</p><p>使用最多的时候SHA2</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca305fbf.png" alt="image-20250420142307110.png"></p><p>Bob发文章给Pat,Bob先用摘要算法生成一段哈希值，然后把这段哈希值附带在文章的下边。Pat收到后，他也用对应的摘要算法生成一段哈希值看看是否一样，如果一样证明没有被篡改过。但是如果过程中被黑客劫持，并且黑客直接修改了原文，并且根据原文生成了新的摘要放在原文的下面，伪装成Bob将信件发送给Pat那么Pat接收后呢是完全差距不出来的。这样还是没有办法鉴别出信息传输的完整性。如果保证无法被篡改呢？</p><p>答案是一定要加入密钥确保机密性</p><p><strong>数字签名</strong></p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca324a21.png" alt="image-20250420142721529.png"></p><p>过程是这样的：Bob先用摘要算法生成一段摘要，然后Bob用自己的私钥来生成签名（认证身份），附加在文章下方，Pat拿到信件之后先用Bob的公钥对签名进行解密得到摘要，然后用相应的摘要算法对文章进行摘要，比对两者是否一致如果一致的话那么信件就算Bob发出的并且没有篡改过。这个过程叫验证签名。</p><p>那么微信支付中的签名和验签的过程呢就是这个原理了</p><p>数字签名可以保证信息传递的过程中不可以被篡改以及信息传递者身份的认证。</p><p><strong>数字证书</strong></p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca3b0f3f.png" alt="image-20250420143131623.png"></p><p>Doug想欺骗Pat,他把自己的公钥给了Pat但是跟她说这是Bob的公钥，当Doug用自己的私钥发送信件给Pat，Pat用Doug给的公钥发现可以解开，她会以为她正在跟Bob对话。</p><p>这里其实就是一个公钥信息的问题：黑客可以伪造公钥，怎么判断公钥是真实的？</p><p>解决这个问题的答案就是数字证书</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca409a1c.png" alt="image-20250420143516012.png"></p><p>•公钥：Bob的公钥<br>•所有者：Bob<br>•颁发者：CA（Certificate Authority，证书认证机构）<br>•有效期：证书的使用期限<br>•签名哈希算法：指定摘要算法，用来计算证书的摘要<br>•指纹：证书的摘要，保证证书的完整性<br>•签名算法：用于生成签名，确保证书是由CA签发</p><p>序列号：证书的唯一标识</p><p>那么下面我们来看看数字证书的颁发过程</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca4be075.png" alt="image-20250420144420773.png"></p><p>CA先用数字证书的信息用摘要算法生成一段摘要，然后用CA自己的密钥进行加密，生成签名，把这个签名放在数字证书后边，也就是对应的数字证书。</p><p><img src="./%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98.assets/image-20250420144650044.png" alt="image-20250420144650044"></p><p>数字证书- https协议</p><p>还有一些情况比如数字证书过期或者数字证书被吊销或者是颁发数字证书的CA机构不是特别正规，那么这些情况我们的浏览器就会发出一些网站不安全的一些警告信息，如果数字证书是可靠的那么客户端呢就可以顺利地从证书中获取到网站地公钥了</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca5ca495.png" alt="image-20250420145037634.png"></p><blockquote><p>二、支付安全（证书/秘钥/签名）<br>1、信息安全的基础 - 机密性<br>明文：加密前的消息叫“明文”（plain text）<br>密文：加密后的文本叫“密文”（cipher text）<br>密钥：只有掌握特殊“钥匙”的人，才能对加密的文本进行解密，这里的“钥匙”就叫做“密钥”（key）<br>“密钥”就是一个字符串，度量单位是“位”（bit），比如，密钥长度是 128，就是 16 字节的二<br>进制串<br>加密：实现机密性最常用的手段是“加密”（encrypt）<br>按照密钥的使用方式，加密可以分为两大类：对称加密和非对称加密。<br>解密：使用密钥还原明文的过程叫“解密”（decrypt）<br>加密算法：加密解密的操作过程就是“加密算法”<br>所有的加密算法都是公开的，而算法使用的“密钥”则必须保密<br>2、对称加密和非对称加密<br>对称加密<br>特点：只使用一个密钥，密钥必须保密，常用的有 AES算法<br>优点：运算速度快<br>缺点：秘钥需要信息交换的双方共享，一旦被窃取，消息会被破解，无法做到安全的密钥交<br>换<br>非对称加密<br>特点：使用两个密钥：公钥和私钥，公钥可以任意分发而私钥保密，常用的有 RSA<br>优点：黑客获取公钥无法破解密文，解决了密钥交换的问题<br>缺点：运算速度非常慢<br>混合加密<br>实际场景中把对称加密和非对称加密结合起来使用。</p></blockquote><blockquote><p>3、身份认证<br>公钥加密，私钥解密的作用是加密信息<br>私钥加密，公钥解密的作用是身份认证<br>4、摘要算法（Digest Algorithm）<br>摘要算法就是我们常说的散列函数、哈希函数（Hash Function），它能够把任意长度的数据“压缩”成<br>固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”。<br>作用：<br>保证信息的完整性<br>特性：<br>不可逆：只有算法，没有秘钥，只能加密，不能解密<br>难题友好性：想要破解，只能暴力枚举<br>发散性：只要对原文进行一点点改动，摘要就会发生剧烈变化<br>抗碰撞性：原文不同，计算后的摘要也要不同<br>常见摘要算法：<br>MD5、SHA1、SHA2（SHA224、SHA256、SHA384）</p></blockquote><blockquote><p>5、数字签名<br>数字签名是使用私钥对摘要加密生成签名，需要由公钥将签名解密后进行验证，实现身份认证和不可否<br>认<br>签名和验证签名的流程：</p></blockquote><blockquote><p>6、数字证书<br>数字证书解决“公钥的信任”问题，可以防止黑客伪造公钥。<br>不能直接分发公钥，公钥的分发必须使用数字证书，数字证书由CA颁发<br>https协议中的数字证书：</p></blockquote><h2 id="在线微信支付案例">在线微信支付案例</h2><p>7.微信APIv3证书<br>商户证书：<br>商户API证书是指由商户申请的，包含商户的商户号、公司名称、公钥信息的证书。<br>商户证书在商户后台申请：<a href="https://pay.weixin.qq.com/index.php/core/cert/api_cert#/">https://pay.weixin.qq.com/index.php/core/cert/api_cert#/</a></p><p>平台证书（微信支付平台）：<br>微信支付平台证书是指由微信支付 负责申请的，包含微信支付平台标识、公钥信息的证书。商户可以使<br>用平台证书中的公钥进行验签。<br>平台证书的获取：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay3_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay3_0.shtml</a></p><p>8、API密钥和APIv3密钥<br>都是对称加密需要使用的加密和解密密钥，一定要保管好，不能泄露。<br>API密钥对应V2版本的API<br>APIv3密钥对应V3版本的API</p><p>1、创建SpringBoot项目</p><p>1.1、新建项目<br>注意：Java版本选择8</p><p>1.2、添加依赖<br>添加SpringBoot web依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.3、配置application.yml文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">8090</span> <span class="comment">#服务端口</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">application:</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">payment-demo</span> <span class="comment"># 应用名称</span></span><br></pre></td></tr></table></figure><p>1.4、创建controller<br>创建controller包，创建ProductController类<br>1.5、测试<br>访问：<a href="http://localhost:8090/api/product/test">http://localhost:8090/api/product/test</a><br>2、引入Swagger<br>作用：自动生成接口文档和测试页面。<br>2.1、引入依赖<br>2.2、Swagger配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yjy.paymentdemo.controller;<span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/product&quot;)</span></span><br><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//跨域</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"><span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.5、测试<br>访问：<a href="http://localhost:8090/api/product/test">http://localhost:8090/api/product/test</a><br>2、引入Swagger<br>作用：自动生成接口文档和测试页面。<br>2.1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--Swagger--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--Swagger ui--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.2、Swagger配置文件</p><p>创建config包，创建Swagger2Config类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Swagger2Config</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(<span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>().title(<span class="string">&quot;微信支付案例接口文档&quot;</span>).build());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.3、Swagger注解<br>controller中可以添加常用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags=&quot;商品管理&quot;)</span> <span class="comment">//用在类上</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;测试接口&quot;)</span> <span class="comment">//用在方法上</span></span><br></pre></td></tr></table></figure><p>2.4、测试<br>访问：<a href="http://localhost:8090/swagger-ui.html">http://localhost:8090/swagger-ui.html</a><br>3、定义统一结果<br>作用：定义统一响应结果，为前端返回标准格式的数据。<br>3.1、引入lombok依赖<br>简化实体类的开发</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3.2、创建R类<br>创建统一结果类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors(chain = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer code; <span class="comment">//响应码</span></span><br><span class="line">    <span class="keyword">private</span> String message; <span class="comment">//响应消息</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setCode(<span class="number">0</span>);</span><br><span class="line">        r.setMessage(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R <span class="title function_">error</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.setCode(-<span class="number">1</span>);</span><br><span class="line">        r.setMessage(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">data</span><span class="params">(String key, Object value)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.data.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.3、修改controller<br>修改test方法，返回统一结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;测试控制器&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getWxPayConfig</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">mchId</span> <span class="operator">=</span> wxPayConfig.getMchId();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;mchId&quot;</span>, mchId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.4、配置json时间格式</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">payment-demo</span> <span class="comment">#应用的名字</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">jackson:</span></span><br><span class="line">    <span class="attr">date-format:</span> <span class="string">yyyy-MM-dd</span> <span class="string">HH:mm:ss</span></span><br><span class="line">    <span class="attr">time-zone:</span> <span class="string">GMT+8</span></span><br></pre></td></tr></table></figure><p>3.5、Swagger测试<br>4、创建数据库<br>4.1、创建数据库<br>4.2、IDEA配置数据库连接<br>（1）打开数据库面板</p><p>payment_demo.sql</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">USE `payment_demo`;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_order_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_order_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">11</span>) unsigned <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;订单id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单标题&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `user_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;用户id&#x27;</span>,</span><br><span class="line">  `product_id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付产品id&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单金额(分)&#x27;</span>,</span><br><span class="line">  `code_url` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单二维码连接&#x27;</span>,</span><br><span class="line">  `order_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;订单状态&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_payment_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_payment_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;支付记录id&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `transaction_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付系统交易编号&#x27;</span>,</span><br><span class="line">  `payment_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付类型&#x27;</span>,</span><br><span class="line">  `trade_type` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易类型&#x27;</span>,</span><br><span class="line">  `trade_state` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;交易状态&#x27;</span>,</span><br><span class="line">  `payer_total` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付金额(分)&#x27;</span>,</span><br><span class="line">  `content` text COMMENT <span class="string">&#x27;通知参数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_product` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_product` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;商品id&#x27;</span>,</span><br><span class="line">  `title` <span class="type">varchar</span>(<span class="number">20</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商品名称&#x27;</span>,</span><br><span class="line">  `price` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;价格（分）&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Data for the table `t_product` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert  into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;Java课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert  into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;大数据课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert  into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;前端课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"><span class="keyword">insert  into</span> `t_product`(`title`,`price`) <span class="keyword">values</span> (<span class="string">&#x27;UI课程&#x27;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Table structure for table `t_refund_info` */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_refund_info` (</span><br><span class="line">  `id` <span class="type">bigint</span>(<span class="number">20</span>) unsigned <span class="keyword">NOT NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;退款单id&#x27;</span>,</span><br><span class="line">  `order_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户订单编号&#x27;</span>,</span><br><span class="line">  `refund_no` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;商户退款单编号&#x27;</span>,</span><br><span class="line">  `refund_id` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;支付系统退款单号&#x27;</span>,</span><br><span class="line">  `total_fee` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;原订单金额(分)&#x27;</span>,</span><br><span class="line">  `refund` <span class="type">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款金额(分)&#x27;</span>,</span><br><span class="line">  `reason` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款原因&#x27;</span>,</span><br><span class="line">  `refund_status` <span class="type">varchar</span>(<span class="number">10</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;退款状态&#x27;</span>,</span><br><span class="line">  `content_return` text COMMENT <span class="string">&#x27;申请退款返回参数&#x27;</span>,</span><br><span class="line">  `content_notify` text COMMENT <span class="string">&#x27;退款结果通知参数&#x27;</span>,</span><br><span class="line">  `create_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `update_time` datetime <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5、集成MyBatis-Plus<br>5.1、引入依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--mysql 驱动--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--MyBatis-Plus：是MyBatis的增强--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.2、配置数据库连接</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">datasource:</span></span><br><span class="line">  <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/payment_demo?serverTimezone=GMT%2B8&amp;characterEncoding=utf-8</span></span><br><span class="line">  <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">password:</span> <span class="string">root</span></span><br></pre></td></tr></table></figure><p>5.3、定义实体类<br>BaseEntity是父类，其他类继承BaseEntity</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BaseEntity</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义主键策略：跟随数据库的主键自增</span></span><br><span class="line">    <span class="meta">@TableId(value = &quot;id&quot;, type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> String id; <span class="comment">//主键</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date createTime;<span class="comment">//创建时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;<span class="comment">//更新时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.4、定义持久层<br>定义Mapper接口继承 BaseMapper&lt;&gt;，<br>定义xml配置文件</p><p>5.5、定义MyBatis-Plus的配置文件<br>在config包中创建配置文件 MybatisPlusConfig</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.atguigu.paymentdemo.mapper&quot;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//启用事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>5.6、定义yml配置文件<br>添加持久层日志和xml文件位置的配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="attr">configuration:</span> <span class="comment">#sql日志</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:com/atguigu/paymentdemo/mapper/xml/*.xml</span></span><br><span class="line"></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>5.7、定义业务层</p><p>定义业务层接口继承 IService&lt;&gt;<br>定义业务层接口的实现类，并继承 ServiceImpl&lt;,&gt;</p><p>5.8、定义接口方法查询所有商品<br>在 public class ProductController 中添加一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//开放前端的跨域访问</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ProductService productService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;测试接口&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;hello&quot;</span>).data(<span class="string">&quot;now&quot;</span>, <span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;商品列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;Product&gt; list = productService.list();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;productList&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.9、Swagger中测试<br>5.10、pom中配置build节点<br>因为maven工程在默认情况下 src/main/java 目录下的所有资源文件是不发布到 target 目录下的，我们<br>在 pom 文件的 节点下配置一个资源发布过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 项目打包时会将java目录中的*.xml文件也进行打包 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果不添加此节点mybatis的mapper.xml文件都会被漏掉。 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.yml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>6、搭建前端环境<br>6.1、安装Node.js<br>Node.js是一个基于JavaScript引擎的服务器端环境，前端项目在开发环境下要基于Node.js来运行<br>安装：node-v14.18.0-x64.msi<br>6.2、运行前端项目<br>将项目放在磁盘的一个目录中，例如 D:\demo\payment-demo-front<br>进入项目目录，运行下面的命令启动项目：</p><p>内容：</p><ol><li>引入支付参数</li><li>加载商户私钥</li><li>获取平台证书和验签器</li><li>获取HttpClient对象</li><li>API字典和接口规则</li><li>内网穿透</li><li>API v3</li></ol><p>wxpay.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 微信支付相关参数</span></span><br><span class="line"><span class="comment"># 商户号</span></span><br><span class="line"><span class="attr">wxpay.mch-id</span>=<span class="string">1558950191</span></span><br><span class="line"><span class="comment"># 商户API证书序列号</span></span><br><span class="line"><span class="attr">wxpay.mch-serial-no</span>=<span class="string">34345964330B66427E0D3D28826C4993C77E631F</span></span><br><span class="line"><span class="comment"># 商户私钥文件</span></span><br><span class="line"><span class="attr">wxpay.private-key-path</span>=<span class="string">apiclient_key.pem</span></span><br><span class="line"><span class="comment"># APIv3密钥</span></span><br><span class="line"><span class="attr">wxpay.api-v3-key</span>=<span class="string">UDuLFDcmy5Eb6o0nTNZdu6ek4DDh4K8B</span></span><br><span class="line"><span class="comment"># APPID</span></span><br><span class="line"><span class="attr">wxpay.appid</span>=<span class="string">wx74862e0dfcf69954</span></span><br><span class="line"><span class="comment"># 微信服务器地址</span></span><br><span class="line"><span class="attr">wxpay.domain</span>=<span class="string">https://api.mch.weixin.qq.com</span></span><br><span class="line"><span class="comment"># 接收结果通知地址</span></span><br><span class="line"><span class="comment"># 注意：每次重新启动ngrok，都需要根据实际情况修改这个配置</span></span><br><span class="line"><span class="attr">wxpay.notify-domain</span>=<span class="string">https://fb8a-183-36-237-242.ngrok-free.app/</span></span><br><span class="line"><span class="comment"># APIv2密钥</span></span><br><span class="line"><span class="attr">wxpay.partnerKey</span>: <span class="string">T6m9iK73b0kn9g5v426MKfHQH7X8rKwb</span></span><br></pre></td></tr></table></figure><p>商户的私钥文件加载到应用程序的目的是为了做签名，我们用私钥对我们得请求做签名，然后把我们得请求发送给微信得服务器端，微信得服务器端会根据商户API证书序列号找到这个序列号对应的证书，从证书当中解析出公钥，用公钥对我们得请求进行验签，这样就是请求和接收得过程，也是就签名和验签的过程。</p><p>1.2、读取支付参数<br>将资料文件夹中的 config 目录中的 WxPayConfig.java 复制到源码目录中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:wxpay.properties&quot;)</span> <span class="comment">//读取配置文件</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix=&quot;wxpay&quot;)</span> <span class="comment">//读取wxpay节点</span></span><br><span class="line"><span class="meta">@Data</span> <span class="comment">//使用set方法将wxpay节点中的值填充到当前类的属性中</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户号</span></span><br><span class="line">    <span class="keyword">private</span> String mchId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户API证书序列号</span></span><br><span class="line">    <span class="keyword">private</span> String mchSerialNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 商户私钥文件</span></span><br><span class="line">    <span class="keyword">private</span> String privateKeyPath;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APIv3密钥</span></span><br><span class="line">    <span class="keyword">private</span> String apiV3Key;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APPID</span></span><br><span class="line">    <span class="keyword">private</span> String appid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 微信服务器地址</span></span><br><span class="line">    <span class="keyword">private</span> String domain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收结果通知地址</span></span><br><span class="line">    <span class="keyword">private</span> String notifyDomain;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// APIv2密钥</span></span><br><span class="line">    <span class="keyword">private</span> String partnerKey;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商户的私钥文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String filename)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;私钥文件不存在&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取签名验证器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ScheduledUpdateCertificatesVerifier <span class="title function_">getVerifier</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;获取签名验证器&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取商户私钥</span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//私钥签名对象</span></span><br><span class="line">        <span class="type">PrivateKeySigner</span> <span class="variable">privateKeySigner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(mchSerialNo, privateKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//身份认证对象</span></span><br><span class="line">        <span class="type">WechatPay2Credentials</span> <span class="variable">wechatPay2Credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(mchId, privateKeySigner);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用定时更新的签名验证器，不需要传入证书</span></span><br><span class="line">        <span class="type">ScheduledUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledUpdateCertificatesVerifier</span>(</span><br><span class="line">                wechatPay2Credentials,</span><br><span class="line">                apiV3Key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> verifier;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取http请求对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> verifier</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;wxPayClient&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CloseableHttpClient <span class="title function_">getWxPayClient</span><span class="params">(ScheduledUpdateCertificatesVerifier verifier)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;获取httpClient&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取商户私钥</span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line"></span><br><span class="line">        <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">                .withMerchant(mchId, mchSerialNo, privateKey)</span><br><span class="line">                .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier));</span><br><span class="line">        <span class="comment">// ... 接下来，你仍然可以通过builder设置各种参数，来配置你的HttpClient</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取HttpClient，无需进行应答签名验证，跳过验签的流程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;wxPayNoSignClient&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> CloseableHttpClient <span class="title function_">getWxPayNoSignClient</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取商户私钥</span></span><br><span class="line">        <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//用于构造HttpClient</span></span><br><span class="line">        <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">                <span class="comment">//设置商户信息</span></span><br><span class="line">                .withMerchant(mchId, mchSerialNo, privateKey)</span><br><span class="line">                <span class="comment">//无需进行签名验证、通过withValidator((response) -&gt; true)实现</span></span><br><span class="line">                .withValidator((response) -&gt; <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;== getWxPayNoSignClient END ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> httpClient;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.3、测试支付参数的获取<br>在 controller 包中创建 TestController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;测试控制器&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/test&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">getWxPayConfig</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">mchId</span> <span class="operator">=</span> wxPayConfig.getMchId();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;mchId&quot;</span>, mchId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1.4、配置 Annotation Processor<br>可以帮助我们生成自定义配置的元数据信息，让配置文件和Java代码之间的对应参数可以自动定位，方<br>便开发。也就是我们可以从properties中点进去使用到的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 生成自定义配置的元数据信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.5、在IDEA中设置 SpringBoot 配置文件<br>让IDEA可以识别配置文件，将配置文件的图标展示成SpringBoot的图标，同时配置文件的内容可以高<br>亮显示<br>File -&gt; Project Structure -&gt; Modules -&gt; 选择小叶子</p><p>点击（+） 图标</p><p>选中配置文件：</p><p>2、加载商户私钥<br>2.1、复制商户私钥<br>将下载的私钥文件复制到项目根目录下</p><p>2.2、引入SDK<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay6_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay6_0.shtml</a><br>我们可以使用官方提供的 SDK，帮助我们完成开发。实现了请求签名的生成和应答签名的验证。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--微信支付SDK--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.wechatpay-apiv3<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>wechatpay-apache-httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.3、获取商户私钥<br><a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient</a> （如何加载商户私钥）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商户的私钥文件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filename</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> PrivateKey <span class="title function_">getPrivateKey</span><span class="params">(String filename)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> PemUtil.loadPrivateKey(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(filename));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;私钥文件不存在&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>2.4、测试商户私钥的获取<br>在 PaymentDemoApplicationTests 测试类中添加如下方法，测试私钥对象是否能够获取出来。<br>（将前面的方法改成public的再进行测试）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PaymentDemoApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> CloseableHttpClient wxPayClient;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取商户的私钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Test</span></span><br><span class="line"><span class="comment">    void testGetPrivateKey() &#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //获取私钥路径</span></span><br><span class="line"><span class="comment">        String privateKeyPath = wxPayConfig.getPrivateKeyPath();</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //获取私钥</span></span><br><span class="line"><span class="comment">        PrivateKey privateKey = wxPayConfig.getPrivateKey(privateKeyPath);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        System.out.println(privateKey);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>3、获取签名验证器和HttpClient<br>3.1、证书密钥使用说明<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3_partner/wechatpay/wechatpay3_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3_partner/wechatpay/wechatpay3_0.shtml</a></p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca671195.png" alt="image-20250420154510985.png"></p><p>对于我们编程来说要实现 M（密钥）计算签名和W（公钥）验证签名</p><p>我们之前引入的SDK可以帮助我们完成这个任务我们需要给一些参数给它，比如签名得给私钥等</p><p>3.2、获取签名验证器<br><a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient</a> （定时更新平台证书功能）<br>平台证书：平台证书封装了微信的公钥，商户可以使用平台证书中的公钥进行验签。<br>签名验证器：帮助我们进行验签工作，我们单独将它定义出来，方便后面的开发。</p><p>3.4、获取 HttpClient 对象<br><a href="https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient">https://github.com/wechatpay-apiv3/wechatpay-apache-httpclient</a> （定时更新平台证书功能）<br>HttpClient 对象：是建立远程连接的基础，我们通过SDK创建这个对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取签名验证器</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean</span></span><br><span class="line">   <span class="keyword">public</span> ScheduledUpdateCertificatesVerifier <span class="title function_">getVerifier</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;获取签名验证器&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取商户私钥</span></span><br><span class="line">       <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//私钥签名对象</span></span><br><span class="line">       <span class="type">PrivateKeySigner</span> <span class="variable">privateKeySigner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrivateKeySigner</span>(mchSerialNo, privateKey);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//身份认证对象</span></span><br><span class="line">       <span class="type">WechatPay2Credentials</span> <span class="variable">wechatPay2Credentials</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2Credentials</span>(mchId, privateKeySigner);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用定时更新的签名验证器，不需要传入证书</span></span><br><span class="line">       <span class="type">ScheduledUpdateCertificatesVerifier</span> <span class="variable">verifier</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ScheduledUpdateCertificatesVerifier</span>(</span><br><span class="line">               wechatPay2Credentials,</span><br><span class="line">               apiV3Key.getBytes(StandardCharsets.UTF_8));</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> verifier;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取http请求对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> verifier</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean(name = &quot;wxPayClient&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> CloseableHttpClient <span class="title function_">getWxPayClient</span><span class="params">(ScheduledUpdateCertificatesVerifier verifier)</span>&#123;</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;获取httpClient&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取商户私钥</span></span><br><span class="line">       <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line"></span><br><span class="line">       <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">               .withMerchant(mchId, mchSerialNo, privateKey)</span><br><span class="line">               .withValidator(<span class="keyword">new</span> <span class="title class_">WechatPay2Validator</span>(verifier));</span><br><span class="line">       <span class="comment">// ... 接下来，你仍然可以通过builder设置各种参数，来配置你的HttpClient</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line">       <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> httpClient;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取HttpClient，无需进行应答签名验证，跳过验签的流程</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Bean(name = &quot;wxPayNoSignClient&quot;)</span></span><br><span class="line">   <span class="keyword">public</span> CloseableHttpClient <span class="title function_">getWxPayNoSignClient</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取商户私钥</span></span><br><span class="line">       <span class="type">PrivateKey</span> <span class="variable">privateKey</span> <span class="operator">=</span> getPrivateKey(privateKeyPath);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//用于构造HttpClient</span></span><br><span class="line">       <span class="type">WechatPayHttpClientBuilder</span> <span class="variable">builder</span> <span class="operator">=</span> WechatPayHttpClientBuilder.create()</span><br><span class="line">               <span class="comment">//设置商户信息</span></span><br><span class="line">               .withMerchant(mchId, mchSerialNo, privateKey)</span><br><span class="line">               <span class="comment">//无需进行签名验证、通过withValidator((response) -&gt; true)实现</span></span><br><span class="line">               .withValidator((response) -&gt; <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 通过WechatPayHttpClientBuilder构造的HttpClient，会自动的处理签名和验签，并进行证书自动更新</span></span><br><span class="line">       <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> builder.build();</span><br><span class="line"></span><br><span class="line">       log.info(<span class="string">&quot;== getWxPayNoSignClient END ==&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> httpClient;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>后续传输比较大的数据的时候需要使用对称加密</p><p>4、API字典和相关工具<br>4.1、API列表<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_3.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_3.shtml</a><br>我们的项目中要实现以下所有API的功能。</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca689aed.png" alt="image-20250420160206041.png"></p><p>4.2、接口规则<br><a href="https://pay.weixin.qq.com/doc/v3/partner/4012738659">Native下单_Native支付|微信支付合作伙伴文档中心</a><br>微信支付 APIv3 使用 JSON 作为消息体的数据交换格式。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--json处理器--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.google.code.gson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>gson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>4.3、定义枚举<br>将资料文件夹中的 enums 目录复制到源码目录中。<br>为了开发方便，我们预先在项目中定义一些枚举。枚举中定义的内容包括接口地址，支付状态等信息。</p><p>在enums下面还有两个枚举类：</p><p>OrderStatus:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">OrderStatus</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOTPAY(<span class="string">&quot;未支付&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="string">&quot;支付成功&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLOSED(<span class="string">&quot;超时已关闭&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CANCEL(<span class="string">&quot;用户已取消&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND_PROCESSING(<span class="string">&quot;退款中&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已退款</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND_SUCCESS(<span class="string">&quot;已退款&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND_ABNORMAL(<span class="string">&quot;退款异常&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">PayType</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 微信</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    WXPAY(<span class="string">&quot;微信&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付宝</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ALIPAY(<span class="string">&quot;支付宝&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>下面还有一个包wxpay</p><p>官网中有不同Api的地址：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Native下单</span><br><span class="line">请求方式：【POST】/v3/pay/partner/transactions/<span class="keyword">native</span></span><br><span class="line">    </span><br><span class="line">商户订单号查询订单</span><br><span class="line">请求方式：【GET】/v3/pay/partner/transactions/out-trade-no/&#123;out_trade_no&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>那么我们也开发了一个对应的枚举类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxApiType</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Native下单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_PAY(<span class="string">&quot;/v3/pay/transactions/native&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Native下单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_PAY_V2(<span class="string">&quot;/pay/unifiedorder&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">ORDER_QUERY_BY_NO(<span class="string">&quot;/v3/pay/transactions/out-trade-no/%s&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 关闭订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">CLOSE_ORDER_BY_NO(<span class="string">&quot;/v3/pay/transactions/out-trade-no/%s/close&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOMESTIC_REFUNDS(<span class="string">&quot;/v3/refund/domestic/refunds&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询单笔退款</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOMESTIC_REFUNDS_QUERY(<span class="string">&quot;/v3/refund/domestic/refunds/%s&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请交易账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">TRADE_BILLS(<span class="string">&quot;/v3/bill/tradebill&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 申请资金账单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">FUND_FLOW_BILLS(<span class="string">&quot;/v3/bill/fundflowbill&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>还有几个通知，这几个通知需要我们在商户平台上进行开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxNotifyType</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_NOTIFY(<span class="string">&quot;/api/wx-pay/native/notify&quot;</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 支付通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">NATIVE_NOTIFY_V2(<span class="string">&quot;/api/wx-pay-v2/native/notify&quot;</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 退款结果通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">REFUND_NOTIFY(<span class="string">&quot;/api/wx-pay/refunds/notify&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的主机地址我们在wxpay.properties中配置了，倒时候进行组装即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxRefundStatus</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="string">&quot;SUCCESS&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLOSED(<span class="string">&quot;CLOSED&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款处理中</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    PROCESSING(<span class="string">&quot;PROCESSING&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ABNORMAL(<span class="string">&quot;ABNORMAL&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支付订单状态，这是我们得商户平台和微信会产生一笔要发起支付得支付交易，这是这个订单状态</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">WxTradeState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    SUCCESS(<span class="string">&quot;SUCCESS&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 未支付</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    NOTPAY(<span class="string">&quot;NOTPAY&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 已关闭</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    CLOSED(<span class="string">&quot;CLOSED&quot;</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转入退款</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    REFUND(<span class="string">&quot;REFUND&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前面得OrderStatus是发生在用户和商户平台之间。</p><p>4.4、添加工具类<br>将资料文件夹中的 util 目录复制到源码目录中，我们将会使用这些辅助工具简化项目的开发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 订单号工具类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> yjy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderNoUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取订单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getOrderNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ORDER_&quot;</span> + getNo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取退款单编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getRefundNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;REFUND_&quot;</span> + getNo();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取编号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getNo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">sdf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyyMMddHHmmss&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">newDate</span> <span class="operator">=</span> sdf.format(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="type">Random</span> <span class="variable">random</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Random</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">            result += random.nextInt(<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> newDate + result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将通知参数转化为字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">readData</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">br</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">StringBuilder</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">            br = request.getReader();</span><br><span class="line">            <span class="keyword">for</span> (String line; (line = br.readLine()) != <span class="literal">null</span>; ) &#123;</span><br><span class="line">                <span class="keyword">if</span> (result.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    result.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                result.append(line);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> result.toString();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (br != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    br.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5、Native下单API</p><p>5.1、Native支付流程<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_4.shtml</a></p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca6a96ad.png" alt="image-20250420200208207.png"></p><p>5.2、Native下单API<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml</a><br>商户端发起支付请求，微信端创建支付订单并生成支付二维码链接，微信端将支付二维码返回给商户<br>端，商户端显示支付二维码，用户使用微信客户端扫码后发起支付。<br>（1）创建 WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//跨域</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/wx-pay&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;网站微信支付APIv3&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Native下单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;调用统一下单API，生成支付二维码&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/native/&#123;productId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">nativePay</span><span class="params">(<span class="meta">@PathVariable</span> Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;发起支付请求 v3&quot;</span>); </span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回支付二维码链接和订单号</span></span><br><span class="line">        Map&lt;String, Object&gt; map = wxPayService.nativePay(productId);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().setData(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）创建 WxPayService<br>接口</p><p>（4）定义WxPayService方法<br>参考：<br>API字典 -&gt; 基础支付 -&gt; Native支付 -&gt; Native下单：<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_1.shtml</a><br>指引文档 -&gt; 基础支付 -&gt; Native支付 -&gt; 开发指引 -&gt;【服务端】Native下单：<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_2.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/open/pay/chapter2_7_2.shtml</a><br>接口<br>实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line">    <span class="meta">@Accessors(chain = true)</span> <span class="comment">//链式操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; <span class="title function_">nativePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> WxPayConfig wxPayConfig;</span><br><span class="line">        <span class="meta">@Resource</span></span><br><span class="line">        <span class="keyword">private</span> CloseableHttpClient wxPayClient;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">========================================</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * 创建订单，调用Native支付接口</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> code_url 和 订单号</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">nativePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">            log.info(<span class="string">&quot;生成订单&quot;</span>);</span><br><span class="line">            <span class="comment">//生成订单</span></span><br><span class="line">            <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">            orderInfo.setTitle(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">            orderInfo.setOrderNo(OrderNoUtils.getOrderNo()); <span class="comment">//订单号</span></span><br><span class="line">            orderInfo.setProductId(productId);</span><br><span class="line">            orderInfo.setTotalFee(<span class="number">1</span>); <span class="comment">//分</span></span><br><span class="line">            orderInfo.setOrderStatus(OrderStatus.NOTPAY.getType());</span><br><span class="line">            <span class="comment">//TODO：存入数据库</span></span><br><span class="line">            log.info(<span class="string">&quot;调用统一下单API&quot;</span>);</span><br><span class="line">            <span class="comment">//调用统一下单API</span></span><br><span class="line">            <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span></span><br><span class="line">                <span class="title class_">HttpPost</span>(wxPayConfig.getDomain().concat(WxApiType.NATIVE_PAY.getType()));</span><br><span class="line">            <span class="comment">// 请求body参数</span></span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            <span class="type">Map</span> <span class="variable">paramsMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            paramsMap.put(<span class="string">&quot;appid&quot;</span>, wxPayConfig.getAppid());</span><br><span class="line">            paramsMap.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">            paramsMap.put(<span class="string">&quot;description&quot;</span>, orderInfo.getTitle());</span><br><span class="line">            paramsMap.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">            paramsMap.put(<span class="string">&quot;notify_url&quot;</span>,</span><br><span class="line">                wxPayConfig.getNotifyDomain().concat(WxNotifyType.NATIVE_NOTIFY.getType()));</span><br><span class="line">            <span class="type">Map</span> <span class="variable">amountMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">            amountMap.put(<span class="string">&quot;total&quot;</span>, orderInfo.getTotalFee());</span><br><span class="line">            amountMap.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line">            paramsMap.put(<span class="string">&quot;amount&quot;</span>, amountMap);</span><br><span class="line">            <span class="comment">//将参数转换成json字符串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> gson.toJson(paramsMap);</span><br><span class="line">            log.info(<span class="string">&quot;请求参数：&quot;</span> + jsonParams);</span><br><span class="line">            <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonParams,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">            entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            httpPost.setEntity(entity);</span><br><span class="line">            httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">            <span class="comment">//完成签名并执行请求</span></span><br><span class="line">            <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpPost);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());<span class="comment">//响应体</span></span><br><span class="line">                <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();<span class="comment">//响应状态码</span></span><br><span class="line">                <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123; <span class="comment">//处理成功</span></span><br><span class="line">                    log.info(<span class="string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123; <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">                    log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;Native下单失败,响应码 = &quot;</span> + statusCode+ <span class="string">&quot;,返回结果 = &quot;</span> +</span><br><span class="line">                        bodyAsString);</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//响应结果</span></span><br><span class="line">                Map&lt;String, String&gt; resultMap = gson.fromJson(bodyAsString,</span><br><span class="line">                    HashMap.class);</span><br><span class="line">                <span class="comment">//二维码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">codeUrl</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line">                Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">                map.put(<span class="string">&quot;codeUrl&quot;</span>, codeUrl);</span><br><span class="line">                map.put(<span class="string">&quot;orderNo&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">                <span class="keyword">return</span> map;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>前端</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios 发送ajax请求</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//查询商品列表</span></span><br><span class="line">  <span class="title function_">list</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/product/list&#x27;</span>,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>request.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Message</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:8090&#x27;</span>, <span class="comment">// api 的 base_url</span></span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">20000</span> <span class="comment">// 请求超时时间</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// request拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Do something with request error</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// response 拦截器</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">const</span> res = response.<span class="property">data</span></span><br><span class="line">    <span class="keyword">if</span> (res.<span class="property">code</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>(&#123;</span><br><span class="line">        <span class="attr">message</span>: res.<span class="property">message</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">        <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&#x27;error&#x27;</span>)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> response.<span class="property">data</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Message</span>(&#123;</span><br><span class="line">      <span class="attr">message</span>: error.<span class="property">message</span>,</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">      <span class="attr">duration</span>: <span class="number">5</span> * <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>wxpay.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// axios 发送ajax请求</span></span><br><span class="line"><span class="keyword">import</span> request <span class="keyword">from</span> <span class="string">&#x27;@/utils/request&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Native下单</span></span><br><span class="line">  <span class="title function_">nativePay</span>(<span class="params">productId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/wx-pay/native/&#x27;</span> + productId,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//Native下单(v2)</span></span><br><span class="line">  <span class="title function_">nativePayV2</span>(<span class="params">productId</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/wx-pay-v2/native/&#x27;</span> + productId,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">cancel</span>(<span class="params">orderNo</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/wx-pay/cancel/&#x27;</span> + orderNo,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="title function_">refunds</span>(<span class="params">orderNo, reason</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">      <span class="attr">url</span>: <span class="string">&#x27;/api/wx-pay/refunds/&#x27;</span> + orderNo + <span class="string">&#x27;/&#x27;</span> + reason,</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;post&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>要引入二维码组件：qriously</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;bg-fa of&quot;&gt;</span><br><span class="line">    &lt;section id=&quot;index&quot; class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;header class=&quot;comm-title&quot;&gt;</span><br><span class="line">        &lt;h2 class=&quot;fl tac&quot;&gt;</span><br><span class="line">          &lt;span class=&quot;c-333&quot;&gt;课程列表&lt;/span&gt;</span><br><span class="line">        &lt;/h2&gt;</span><br><span class="line">      &lt;/header&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;li v-for=&quot;product in productList&quot; :key=&quot;product.id&quot;&gt;</span><br><span class="line">          &lt;a :class=&quot;[&#x27;orderBtn&#x27;, &#123;current:payOrder.productId === product.id&#125;]&quot; </span><br><span class="line">            @click=&quot;selectItem(product.id)&quot; </span><br><span class="line">            href=&quot;javascript:void(0);&quot; &gt;</span><br><span class="line">            &#123;&#123;product.title&#125;&#125; </span><br><span class="line">            ¥&#123;&#123;product.price / 100&#125;&#125;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      </span><br><span class="line">      &lt;div class=&quot;PaymentChannel_payment-channel-panel&quot;&gt;</span><br><span class="line">        &lt;h3 class=&quot;PaymentChannel_title&quot;&gt; </span><br><span class="line">          选择支付方式 </span><br><span class="line">        &lt;/h3&gt;</span><br><span class="line">        &lt;div class=&quot;PaymentChannel_channel-options&quot; &gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 选择微信 --&gt;</span><br><span class="line">          &lt;div :class=&quot;[&#x27;ChannelOption_payment-channel-option&#x27;, &#123;current:payOrder.payType === &#x27;wxpay&#x27;&#125;]&quot;</span><br><span class="line">          @click=&quot;selectPayType(&#x27;wxpay&#x27;)&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;ChannelOption_channel-icon&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;../assets/img/wxpay.png&quot; class=&quot;ChannelOption_icon&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;ChannelOption_channel-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;ChannelOption_channel-label&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;ChannelOption_label&quot;&gt;微信支付&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;ChannelOption_sub-label&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;ChannelOption_check-option&quot;&gt;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">          &lt;!-- 选择支付宝 --&gt;</span><br><span class="line">          &lt;div :class=&quot;[&#x27;ChannelOption_payment-channel-option&#x27;, &#123;current:payOrder.payType === &#x27;alipay&#x27;&#125;]&quot;</span><br><span class="line">          @click=&quot;selectPayType(&#x27;alipay&#x27;)&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;ChannelOption_channel-icon&quot;&gt;</span><br><span class="line">              &lt;img src=&quot;../assets/img/alipay.png&quot; class=&quot;ChannelOption_icon&quot;&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;div class=&quot;ChannelOption_channel-info&quot;&gt;</span><br><span class="line">              &lt;div class=&quot;ChannelOption_channel-label&quot;&gt;</span><br><span class="line">                &lt;div class=&quot;ChannelOption_label&quot;&gt;支付宝&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;ChannelOption_sub-label&quot;&gt;&lt;/div&gt;</span><br><span class="line">                &lt;div class=&quot;ChannelOption_check-option&quot;&gt;&lt;/div&gt;</span><br><span class="line">              &lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">          &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;payButtom&quot;&gt;</span><br><span class="line">        &lt;el-button </span><br><span class="line">        :disabled=&quot;payBtnDisabled&quot;</span><br><span class="line">        type=&quot;warning&quot; </span><br><span class="line">        round </span><br><span class="line">        style=&quot;width: 180px;height: 44px;font-size: 18px;&quot;</span><br><span class="line">        @click=&quot;toPay()&quot;&gt;</span><br><span class="line">          确认支付V3</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">        &lt;el-button </span><br><span class="line">        :disabled=&quot;payBtnDisabled&quot;</span><br><span class="line">        type=&quot;warning&quot; </span><br><span class="line">        round </span><br><span class="line">        style=&quot;width: 180px;height: 44px;font-size: 18px;&quot;</span><br><span class="line">        @click=&quot;toPayV2()&quot;&gt;</span><br><span class="line">          确认支付V2</span><br><span class="line">        &lt;/el-button&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/section&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 微信支付二维码 --&gt;</span><br><span class="line">    &lt;el-dialog</span><br><span class="line">      :visible.sync=&quot;codeDialogVisible&quot;</span><br><span class="line">      :show-close=&quot;false&quot;</span><br><span class="line">      @close=&quot;closeDialog&quot;</span><br><span class="line">      width=&quot;350px&quot;</span><br><span class="line">      center&gt;</span><br><span class="line">     &lt;qriously :value=&quot;codeUrl&quot; :size=&quot;300&quot;/&gt;</span><br><span class="line">        &lt;!-- &lt;img src=&quot;../assets/img/code.png&quot; alt=&quot;&quot; style=&quot;width:100%&quot;&gt;&lt;br&gt; --&gt;</span><br><span class="line">        使用微信扫码支付</span><br><span class="line">    &lt;/el-dialog&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import productApi from &#x27;../api/product&#x27;</span><br><span class="line">import wxPayApi from &#x27;../api/wxPay&#x27;</span><br><span class="line">import orderInfoApi from &#x27;../api/orderInfo&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line"></span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      payBtnDisabled: false, //确认支付按钮是否禁用</span><br><span class="line">      codeDialogVisible: false, //微信支付二维码弹窗</span><br><span class="line">      productList: [], //商品列表</span><br><span class="line">      payOrder: &#123; //订单信息</span><br><span class="line">        productId: &#x27;&#x27;, //商品id</span><br><span class="line">        payType: &#x27;wxpay&#x27; //支付方式</span><br><span class="line">      &#125;,</span><br><span class="line">      codeUrl: &#x27;&#x27;, // 二维码</span><br><span class="line">      orderNo: &#x27;&#x27;, //订单号</span><br><span class="line">      timer: null // 定时器</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  //页面加载时执行</span><br><span class="line">  created () &#123;</span><br><span class="line">    //获取商品列表</span><br><span class="line">    productApi.list().then(response =&gt; &#123;</span><br><span class="line">      this.productList = response.data.productList</span><br><span class="line">      this.payOrder.productId = this.productList[0].id</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  methods: &#123;</span><br><span class="line">    //选择商品</span><br><span class="line">    selectItem(productId) &#123;</span><br><span class="line">      console.log(&#x27;商品id：&#x27; + productId)</span><br><span class="line">      this.payOrder.productId = productId</span><br><span class="line">      console.log(this.payOrder)</span><br><span class="line">      //this.$router.push(&#123; path: &#x27;/order&#x27; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //选择支付方式</span><br><span class="line">    selectPayType(type) &#123;</span><br><span class="line">      console.log(&#x27;支付方式：&#x27; + type)</span><br><span class="line">      this.payOrder.payType = type</span><br><span class="line">      //this.$router.push(&#123; path: &#x27;/order&#x27; &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //确认支付</span><br><span class="line">    toPay()&#123;</span><br><span class="line">      //禁用按钮，防止重复提交</span><br><span class="line">      this.payBtnDisabled = true</span><br><span class="line"></span><br><span class="line">      //微信支付</span><br><span class="line">      if(this.payOrder.payType === &#x27;wxpay&#x27;)&#123;</span><br><span class="line">          //调用统一下单接口</span><br><span class="line">        wxPayApi.nativePay(this.payOrder.productId).then(response =&gt; &#123;</span><br><span class="line">          this.codeUrl = response.data.codeUrl</span><br><span class="line">          this.orderNo = response.data.orderNo</span><br><span class="line">          </span><br><span class="line">          //打开二维码弹窗</span><br><span class="line">          this.codeDialogVisible = true</span><br><span class="line"></span><br><span class="line">          //启动定时器</span><br><span class="line">          this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">            //查询订单是否支付成功</span><br><span class="line">            this.queryOrderStatus()</span><br><span class="line">          &#125;, 3000)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //确认支付</span><br><span class="line">    toPayV2()&#123;</span><br><span class="line">      //禁用按钮，防止重复提交</span><br><span class="line">      this.payBtnDisabled = true</span><br><span class="line"></span><br><span class="line">      //微信支付</span><br><span class="line">      if(this.payOrder.payType === &#x27;wxpay&#x27;)&#123;</span><br><span class="line">          //调用统一下单接口</span><br><span class="line">        wxPayApi.nativePayV2(this.payOrder.productId).then(response =&gt; &#123;</span><br><span class="line">          this.codeUrl = response.data.codeUrl</span><br><span class="line">          this.orderNo = response.data.orderNo</span><br><span class="line">          </span><br><span class="line">          //打开二维码弹窗</span><br><span class="line">          this.codeDialogVisible = true</span><br><span class="line"></span><br><span class="line">          //启动定时器</span><br><span class="line">          this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">            //查询订单是否支付成功</span><br><span class="line">            this.queryOrderStatus()</span><br><span class="line">          &#125;, 3000)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    //关闭微信支付二维码对话框时让“确认支付”按钮可用</span><br><span class="line">    closeDialog()&#123;</span><br><span class="line">      console.log(&#x27;close.................&#x27;)</span><br><span class="line">      this.payBtnDisabled = false</span><br><span class="line">      console.log(&#x27;清除定时器&#x27;)</span><br><span class="line">      clearInterval(this.timer)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 查询订单状态</span><br><span class="line">    queryOrderStatus() &#123;</span><br><span class="line"></span><br><span class="line">      orderInfoApi.queryOrderStatus(this.orderNo).then(response =&gt; &#123;</span><br><span class="line">        console.log(&#x27;查询订单状态：&#x27; + response.code)</span><br><span class="line"></span><br><span class="line">        // 支付成功后的页面跳转</span><br><span class="line">        if (response.code === 0) &#123;</span><br><span class="line">          console.log(&#x27;清除定时器&#x27;)</span><br><span class="line">          clearInterval(this.timer)</span><br><span class="line">          // 三秒后跳转到订单列表</span><br><span class="line">          setTimeout(() =&gt; &#123;</span><br><span class="line">            this.$router.push(&#123; path: &#x27;/success&#x27; &#125;)</span><br><span class="line">          &#125;, 3000)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>5.3、签名和验签源码解析<br>（1）签名原理<br>开启debug日志</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line"><span class="attr">level:</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">info</span></span><br></pre></td></tr></table></figure><p>签名生成流程：<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_0.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_0.shtml</a><br>签名生成源码：</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca796a60.png" alt="image-20250420205739959.png"></p><p>（2）验签原理<br>签名验证流程：<br><a href="https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_1.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/wechatpay/wechatpay4_1.shtml</a><br>签名验证源码：</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca7a1ffb.png" alt="image-20250420205909042.png"></p><p>获取平台证书：</p><p>签名验证的前提就是获取平台证书</p><p>源码： 在SDK中</p><p>验签：相应超时时间的情况</p><p>正常验签流程：</p><p>5.4、创建课程订单<br>（1）保存订单<br>OrderInfoService<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OrderInfo <span class="title function_">createOrderByProductId</span><span class="params">(Long productId)</span>;</span><br></pre></td></tr></table></figure><p>实现：</p><p>OrderInfoService.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> OrderInfo <span class="title function_">createOrderByProductId</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找已存在但未支付的订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="built_in">this</span>.getNoPayOrderByProductId(productId);</span><br><span class="line">        <span class="keyword">if</span>( orderInfo != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> orderInfo;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取商品信息</span></span><br><span class="line">        <span class="type">Product</span> <span class="variable">product</span> <span class="operator">=</span> productMapper.selectById(productId);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成订单</span></span><br><span class="line">        orderInfo = <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setTitle(product.getTitle());</span><br><span class="line">        orderInfo.setOrderNo(OrderNoUtils.getOrderNo()); <span class="comment">//订单号</span></span><br><span class="line">        orderInfo.setProductId(productId);</span><br><span class="line">        orderInfo.setTotalFee(product.getPrice()); <span class="comment">//分</span></span><br><span class="line">        orderInfo.setOrderStatus(OrderStatus.NOTPAY.getType());</span><br><span class="line">        baseMapper.insert(orderInfo);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据商品id查询未支付订单</span></span><br><span class="line"><span class="comment">     * 防止重复创建订单对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfo <span class="title function_">getNoPayOrderByProductId</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;product_id&quot;</span>, productId);</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;order_status&quot;</span>, OrderStatus.NOTPAY.getType());</span><br><span class="line"><span class="comment">//        queryWrapper.eq(&quot;user_id&quot;, userId);</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> orderInfo;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>修改：nativePay</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建订单，调用Native支付接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> productId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> code_url 和 订单号</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">nativePay</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;生成订单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成订单</span></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> orderInfoService.createOrderByProductId(productId);</span><br><span class="line">        <span class="type">String</span> <span class="variable">codeUrl</span> <span class="operator">=</span> orderInfo.getCodeUrl();</span><br><span class="line">        <span class="keyword">if</span>(orderInfo != <span class="literal">null</span> &amp;&amp; !StringUtils.isEmpty(codeUrl))&#123;</span><br><span class="line">            log.info(<span class="string">&quot;订单已存在，二维码已保存&quot;</span>);</span><br><span class="line">            <span class="comment">//返回二维码</span></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;codeUrl&quot;</span>, codeUrl);</span><br><span class="line">            map.put(<span class="string">&quot;orderNo&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;调用统一下单API&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用统一下单API</span></span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(wxPayConfig.getDomain().concat(WxApiType.NATIVE_PAY.getType()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求body参数</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">paramsMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        paramsMap.put(<span class="string">&quot;appid&quot;</span>, wxPayConfig.getAppid());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;description&quot;</span>, orderInfo.getTitle());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;out_trade_no&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line">        paramsMap.put(<span class="string">&quot;notify_url&quot;</span>, wxPayConfig.getNotifyDomain().concat(WxNotifyType.NATIVE_NOTIFY.getType()));</span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">amountMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();<span class="comment">//嵌套</span></span><br><span class="line">        amountMap.put(<span class="string">&quot;total&quot;</span>, orderInfo.getTotalFee());</span><br><span class="line">        amountMap.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);</span><br><span class="line"></span><br><span class="line">        paramsMap.put(<span class="string">&quot;amount&quot;</span>, amountMap);<span class="comment">//学习! 怎么处理这个嵌套</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//将参数转换成json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> gson.toJson(paramsMap);</span><br><span class="line">        log.info(<span class="string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span> + jsonParams);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonParams,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成签名并执行请求   自动做验签</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());<span class="comment">//响应体</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();<span class="comment">//响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123; <span class="comment">//处理成功</span></span><br><span class="line">                log.info(<span class="string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123; <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Native下单失败,响应码 = &quot;</span> + statusCode+ <span class="string">&quot;,返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//响应结果</span></span><br><span class="line">            Map&lt;String, String&gt; resultMap = gson.fromJson(bodyAsString, HashMap.class);</span><br><span class="line">            <span class="comment">//二维码</span></span><br><span class="line">            codeUrl = resultMap.get(<span class="string">&quot;code_url&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//保存二维码</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> orderInfo.getOrderNo();</span><br><span class="line">            orderInfoService.saveCodeUrl(orderNo, codeUrl);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//返回二维码</span></span><br><span class="line">            Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            map.put(<span class="string">&quot;codeUrl&quot;</span>, codeUrl);</span><br><span class="line">            map.put(<span class="string">&quot;orderNo&quot;</span>, orderInfo.getOrderNo());</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> map;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）缓存二维码</p><p>code_url 为两个小时</p><p>OrderInfoService<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderInfoService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;OrderInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line">    OrderInfo <span class="title function_">createOrderByProductId</span><span class="params">(Long productId)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveCodeUrl</span><span class="params">(String orderNo, String codeUrl)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>impl:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 存储订单二维码</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> codeUrl</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveCodeUrl</span><span class="params">(String orderNo, String codeUrl)</span> &#123;</span><br><span class="line"></span><br><span class="line">       QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">       <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">       orderInfo.setCodeUrl(codeUrl);</span><br><span class="line"></span><br><span class="line">       baseMapper.update(orderInfo, queryWrapper);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在nativePay哪里保存</p><p>5.5、显示订单列表<br>在我的订单页面按时间倒序显示订单列表<br>（1）创建OrderInfoController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//开放前端的跨域访问</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品订单管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order-info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;订单列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;OrderInfo&gt; list = orderInfoService.listOrderByCreateTimeDesc();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;OrderInfo&gt; <span class="title function_">listOrderByCreateTimeDesc</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询订单列表，并倒序查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title function_">listOrderByCreateTimeDesc</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;OrderInfo&gt;().orderByDesc(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectList(queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6、支付通知API<br>6.1、内网穿透<br>（1）访问ngrok官网</p><p>也可以用cpolar</p><p>异步通知</p><p>6.2、接收通知和返回应答<br>支付通知API：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_5.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_5.shtml</a></p><p>（2）设置通知地址<br>wxpay.properties<br>注意：每次重新启动ngrok，都需要根据实际情况修改这个配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wxpay.notify-domain=https:<span class="comment">//7d92-115-171-63-135.ngrok.io</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">3</span>）创建通知接口</span><br><span class="line">通知规则：用户支付完成后，微信会把相关支付结果和用户信息发送给商户，商户需要接收处理</span><br><span class="line">该消息，并返回应答。对后台通知交互时，如果微信收到商户的应答不符合规范或超时，微信认</span><br><span class="line">为通知失败，微信会通过一定的策略定期重新发起通知，尽可能提高通知的成功率，但微信不保</span><br><span class="line">证通知最终能成功。（通知频率为</span><br><span class="line">15s/15s/30s/3m/10m/20m/30m/30m/30m/60m/3h/3h/3h/6h/6h - 总计 24h4m）</span><br></pre></td></tr></table></figure><p>（4）测试失败应答<br>用失败应答替换成功应答</p><p>（5）测试超时应答<br>回调通知注意事项：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/Practices/chapter1_1_5.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/Practices/chapter1_1_5.shtml</a><br>商户系统收到支付结果通知，需要在5秒内返回应答报文，否则微信支付认为通知失败，后续会<br>重复发送通知。</p><p>6.3、验签<br>（1）工具类<br>参考SDK源码中的 WechatPay2Validator 创建通知验签工具类 WechatPay2ValidatorForRequest</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.yjy.paymentdemo.util;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wechat.pay.contrib.apache.httpclient.auth.Verifier;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.HttpEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.StandardCharsets;</span><br><span class="line"><span class="keyword">import</span> java.time.DateTimeException;</span><br><span class="line"><span class="keyword">import</span> java.time.Duration;</span><br><span class="line"><span class="keyword">import</span> java.time.Instant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.wechat.pay.contrib.apache.httpclient.constant.WechatPayHttpHeaders.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xy-peng</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WechatPay2ValidatorForRequest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">log</span> <span class="operator">=</span> LoggerFactory.getLogger(WechatPay2ValidatorForRequest.class);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 应答超时时间，单位为分钟</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">RESPONSE_EXPIRED_MINUTES</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Verifier verifier;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String requestId;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String body;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改 这儿添加requestId</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WechatPay2ValidatorForRequest</span><span class="params">(Verifier verifier, String requestId, String body)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.verifier = verifier;</span><br><span class="line">        <span class="built_in">this</span>.requestId = requestId;</span><br><span class="line">        <span class="built_in">this</span>.body = body;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IllegalArgumentException <span class="title function_">parameterError</span><span class="params">(String message, Object... args)</span> &#123;</span><br><span class="line">        message = String.format(message, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;parameter error: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">static</span> IllegalArgumentException <span class="title function_">verifyFail</span><span class="params">(String message, Object... args)</span> &#123;</span><br><span class="line">        message = String.format(message, args);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;signature verify fail: &quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//response 改为request</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">validate</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//处理请求参数</span></span><br><span class="line">            validateParameters(request);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//构造验签名串</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> buildMessage(request);</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">serial</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_SERIAL);</span><br><span class="line">            <span class="type">String</span> <span class="variable">signature</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_SIGNATURE);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//验签</span></span><br><span class="line">            <span class="keyword">if</span> (!verifier.verify(serial, message.getBytes(StandardCharsets.UTF_8), signature)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> verifyFail(<span class="string">&quot;serial=[%s] message=[%s] sign=[%s], request-id=[%s]&quot;</span>,</span><br><span class="line">                        serial, message, signature, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">            log.warn(e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">validateParameters</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// <span class="doctag">NOTE:</span> ensure HEADER_WECHAT_PAY_TIMESTAMP at last</span></span><br><span class="line">        String[] headers = &#123;WECHAT_PAY_SERIAL, WECHAT_PAY_SIGNATURE, WECHAT_PAY_NONCE, WECHAT_PAY_TIMESTAMP&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">header</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (String headerName : headers) &#123;</span><br><span class="line">            header = request.getHeader(headerName);</span><br><span class="line">            <span class="keyword">if</span> (header == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> parameterError(<span class="string">&quot;empty [%s], request-id=[%s]&quot;</span>, headerName, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断请求是否过期</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">timestampStr</span> <span class="operator">=</span> header;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">Instant</span> <span class="variable">responseTime</span> <span class="operator">=</span> Instant.ofEpochSecond(Long.parseLong(timestampStr));</span><br><span class="line">            <span class="comment">// 拒绝过期请求</span></span><br><span class="line">            <span class="keyword">if</span> (Duration.between(responseTime, Instant.now()).abs().toMinutes() &gt;= RESPONSE_EXPIRED_MINUTES) &#123;</span><br><span class="line">                <span class="keyword">throw</span> parameterError(<span class="string">&quot;timestamp=[%s] expires, request-id=[%s]&quot;</span>, timestampStr, requestId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (DateTimeException | NumberFormatException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> parameterError(<span class="string">&quot;invalid timestamp=[%s], request-id=[%s]&quot;</span>, timestampStr, requestId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">buildMessage</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">timestamp</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_TIMESTAMP);</span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> request.getHeader(WECHAT_PAY_NONCE);</span><br><span class="line">        <span class="keyword">return</span> timestamp + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + nonce + <span class="string">&quot;\n&quot;</span></span><br><span class="line">                + body + <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> String <span class="title function_">getResponseBody</span><span class="params">(CloseableHttpResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="keyword">return</span> (entity != <span class="literal">null</span> &amp;&amp; entity.isRepeatable()) ? EntityUtils.toString(entity) : <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）验签</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> Verifier verifier;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支付通知</span></span><br><span class="line"><span class="comment">     * 微信支付通过支付通知接口将用户支付成功消息通知给商户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;支付通知&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/native/notify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">nativeNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//应答对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理通知参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> HttpUtils.readData(request);<span class="comment">//之前引入的工具类</span></span><br><span class="line">            Map&lt;String, Object&gt; bodyMap = gson.fromJson(body, HashMap.class);<span class="comment">//json转MAP</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> (String)bodyMap.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;支付通知的id ===&gt; &#123;&#125;&quot;</span>, requestId);</span><br><span class="line">            <span class="comment">//log.info(&quot;支付通知的完整数据 ===&gt; &#123;&#125;&quot;, body);</span></span><br><span class="line">            <span class="comment">//int a = 9 / 0;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//签名的验证</span></span><br><span class="line">            <span class="type">WechatPay2ValidatorForRequest</span> <span class="variable">wechatPay2ValidatorForRequest</span></span><br><span class="line">                    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2ValidatorForRequest</span>(verifier, requestId, body);</span><br><span class="line">            <span class="keyword">if</span>(!wechatPay2ValidatorForRequest.validate(request))&#123;</span><br><span class="line"></span><br><span class="line">                log.error(<span class="string">&quot;通知验签失败&quot;</span>);</span><br><span class="line">                <span class="comment">//失败应答</span></span><br><span class="line">                response.setStatus(<span class="number">500</span>);</span><br><span class="line">                map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;通知验签失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;通知验签成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理订单</span></span><br><span class="line">            wxPayService.processOrder(bodyMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//应答超时</span></span><br><span class="line">            <span class="comment">//模拟接收微信端的重复通知</span></span><br><span class="line">            TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//成功应答</span></span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//失败应答</span></span><br><span class="line">            response.setStatus(<span class="number">500</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>wxpayService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密报文</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将明文转换成map</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">plainTextMap</span> <span class="operator">=</span> gson.fromJson(plainText, HashMap.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*在对业务数据进行状态检查和处理之前，</span></span><br><span class="line"><span class="comment">        要采用数据锁进行并发控制，</span></span><br><span class="line"><span class="comment">        以避免函数重入造成的数据混乱*/</span></span><br><span class="line">        <span class="comment">//尝试获取锁：</span></span><br><span class="line">        <span class="comment">// 成功获取则立即返回true，获取失败则立即返回false。不必一直等待锁的释放</span></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//处理重复的通知</span></span><br><span class="line">                <span class="comment">//接口调用的幂等性：无论接口被调用多少次，产生的结果是一致的。</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">                <span class="keyword">if</span>(!OrderStatus.NOTPAY.getType().equals(orderStatus))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//模拟通知并发</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新订单状态</span></span><br><span class="line">                orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录支付日志</span></span><br><span class="line">                paymentInfoService.createPaymentInfo(plainText);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//要主动释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.4、解密</p><p>报文解密：</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca7bf4aa.png" alt="image-20250420213721082.png"></p><p>（1）WxPayController<br>nativeNotify 方法中添加处理订单的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理订单</span></span><br><span class="line">wxPayService.processOrder(bodyMap);</span><br></pre></td></tr></table></figure><p>（1）WxPayService<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span></span><br><span class="line">GeneralSecurityException &#123;</span><br><span class="line">log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line"><span class="comment">//转换明文</span></span><br><span class="line"><span class="comment">//更新订单状态</span></span><br><span class="line"><span class="comment">//记录支付日志</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>辅助方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 对称解密</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bodyMap</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">decryptFromResource</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;密文解密&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通知数据</span></span><br><span class="line">        Map&lt;String, String&gt; resourceMap = (Map) bodyMap.get(<span class="string">&quot;resource&quot;</span>);</span><br><span class="line">        <span class="comment">//数据密文</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">ciphertext</span> <span class="operator">=</span> resourceMap.get(<span class="string">&quot;ciphertext&quot;</span>);</span><br><span class="line">        <span class="comment">//随机串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">nonce</span> <span class="operator">=</span> resourceMap.get(<span class="string">&quot;nonce&quot;</span>);</span><br><span class="line">        <span class="comment">//附加数据</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">associatedData</span> <span class="operator">=</span> resourceMap.get(<span class="string">&quot;associated_data&quot;</span>);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;密文 ===&gt; &#123;&#125;&quot;</span>, ciphertext);</span><br><span class="line">        <span class="type">AesUtil</span> <span class="variable">aesUtil</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AesUtil</span>(wxPayConfig.getApiV3Key().getBytes(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> aesUtil.decryptToString(associatedData.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">                nonce.getBytes(StandardCharsets.UTF_8),</span><br><span class="line">                ciphertext);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;明文 ===&gt; &#123;&#125;&quot;</span>, plainText);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> plainText;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>6.5、处理订单<br>（1）完善processOrder方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> PaymentInfoService paymentInfoService;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span></span><br><span class="line">GeneralSecurityException &#123;</span><br><span class="line">log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line"><span class="comment">//转换明文</span></span><br><span class="line"><span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">Map&lt;String, Object&gt; plainTextMap = gson.fromJson(plainText, HashMap.class);</span><br><span class="line"><span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"><span class="comment">//更新订单状态</span></span><br><span class="line">orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line"><span class="comment">//记录支付日志</span></span><br><span class="line">paymentInfoService.createPaymentInfo(plainText);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>（2）更新订单状态<br>OrderInfoService<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">updateStatusByOrderNo</span><span class="params">(String orderNo, OrderStatus orderStatus)</span>;</span><br></pre></td></tr></table></figure><p>实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据订单号更新订单状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderStatus</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStatusByOrderNo</span><span class="params">(String orderNo, OrderStatus orderStatus)</span> &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;更新订单状态 ===&gt; &#123;&#125;&quot;</span>, orderStatus.getType());</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderInfo</span>();</span><br><span class="line">        orderInfo.setOrderStatus(orderStatus.getType());</span><br><span class="line"></span><br><span class="line">        baseMapper.update(orderInfo, queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>（3）处理支付日志<br>PaymentInfoService<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">PaymentInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">createPaymentInfo</span><span class="params">(String plainText)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PaymentInfoServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;PaymentInfoMapper, PaymentInfo&gt; <span class="keyword">implements</span> <span class="title class_">PaymentInfoService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录支付日志</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> plainText</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createPaymentInfo</span><span class="params">(String plainText)</span> &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;记录支付日志&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">plainTextMap</span> <span class="operator">=</span> gson.fromJson(plainText, HashMap.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//订单号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line">        <span class="comment">//业务编号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">transactionId</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;transaction_id&quot;</span>);</span><br><span class="line">        <span class="comment">//支付类型</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeType</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;trade_type&quot;</span>);</span><br><span class="line">        <span class="comment">//交易状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tradeState</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;trade_state&quot;</span>);</span><br><span class="line">        <span class="comment">//用户实际支付金额</span></span><br><span class="line">        Map&lt;String, Object&gt; amount = (Map)plainTextMap.get(<span class="string">&quot;amount&quot;</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">payerTotal</span> <span class="operator">=</span> ((Double) amount.get(<span class="string">&quot;payer_total&quot;</span>)).intValue();</span><br><span class="line"></span><br><span class="line">        <span class="type">PaymentInfo</span> <span class="variable">paymentInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PaymentInfo</span>();</span><br><span class="line">        paymentInfo.setOrderNo(orderNo);</span><br><span class="line">        paymentInfo.setPaymentType(PayType.WXPAY.getType());</span><br><span class="line">        paymentInfo.setTransactionId(transactionId);</span><br><span class="line">        paymentInfo.setTradeType(tradeType);</span><br><span class="line">        paymentInfo.setTradeState(tradeState);</span><br><span class="line">        paymentInfo.setPayerTotal(payerTotal);</span><br><span class="line">        paymentInfo.setContent(plainText);</span><br><span class="line"></span><br><span class="line">        baseMapper.insert(paymentInfo);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6.6、处理重复通知</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca8050b6.png" alt="image-20250420214534563.png"></p><p>（1）测试重复的通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应答超时</span></span><br><span class="line"><span class="comment">//设置响应超时，可以接收到微信支付的重复的支付结果通知。</span></span><br><span class="line"><span class="comment">//通知重复，数据库会记录多余的支付日志</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br></pre></td></tr></table></figure><p>（2）处理重复通知<br>在 processOrder 方法中，更新订单状态之前，添加如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理重复通知</span></span><br><span class="line"><span class="comment">//保证接口调用的幂等性：无论接口被调用多少次，产生的结果是一致的</span></span><br><span class="line"><span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line"><span class="keyword">if</span> (!OrderStatus.NOTPAY.getType().equals(orderStatus)) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>OrderInfoService<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String <span class="title function_">getOrderStatus</span><span class="params">(String orderNo)</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据订单号获取订单状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> String <span class="title function_">getOrderStatus</span><span class="params">(String orderNo)</span> &#123;</span><br><span class="line"></span><br><span class="line">       QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">       queryWrapper.eq(<span class="string">&quot;order_no&quot;</span>, orderNo);</span><br><span class="line">       <span class="type">OrderInfo</span> <span class="variable">orderInfo</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">       <span class="comment">//防止被删除的订单的回调通知的调用</span></span><br><span class="line">       <span class="keyword">if</span>(orderInfo == <span class="literal">null</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> orderInfo.getOrderStatus();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>6.7、数据锁</p><p><img src="https://img.picui.cn/free/2025/04/21/68051ca84a62c.png" alt="image-20250420215308142.png"></p><p>（1）测试通知并发</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//处理重复的通知</span></span><br><span class="line"><span class="comment">//模拟通知并发</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//更新订单状态</span></span><br><span class="line"><span class="comment">//记录支付日志</span></span><br></pre></td></tr></table></figure><p>（2）定义ReentrantLock<br>定义 ReentrantLock 进行并发控制。注意，必须手动释放锁。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="type">ReentrantLock</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReentrantLock</span>();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processOrder</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> GeneralSecurityException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;处理订单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密报文</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将明文转换成map</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">plainTextMap</span> <span class="operator">=</span> gson.fromJson(plainText, HashMap.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*在对业务数据进行状态检查和处理之前，</span></span><br><span class="line"><span class="comment">        要采用数据锁进行并发控制，</span></span><br><span class="line"><span class="comment">        以避免函数重入造成的数据混乱*/</span></span><br><span class="line">        <span class="comment">//尝试获取锁：</span></span><br><span class="line">        <span class="comment">// 成功获取则立即返回true，获取失败则立即返回false。不必一直等待锁的释放</span></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//处理重复的通知</span></span><br><span class="line">                <span class="comment">//接口调用的幂等性：无论接口被调用多少次，产生的结果是一致的。</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">                <span class="keyword">if</span>(!OrderStatus.NOTPAY.getType().equals(orderStatus))&#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//模拟通知并发</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep(<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新订单状态</span></span><br><span class="line">                orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//记录支付日志</span></span><br><span class="line">                paymentInfoService.createPaymentInfo(plainText);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//要主动释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>打开支付二维码后用户如何判断是否支付成功了？如果没有成功就停留，如果成功应该告诉他成功啦！</p><p>所以需要定时查询</p><p>7、商户定时查询本地订单<br>7.1、后端定义商户查单接口<br>支付成功后，商户侧查询本地数据库，订单是否支付成功</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span> <span class="comment">//开放前端的跨域访问</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;商品订单管理&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/order-info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderInfoController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;订单列表&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        List&lt;OrderInfo&gt; list = orderInfoService.listOrderByCreateTimeDesc();</span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;list&quot;</span>, list);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询本地订单状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询本地订单状态&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query-order-status/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">queryOrderStatus</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">        <span class="keyword">if</span>(OrderStatus.SUCCESS.getType().equals(orderStatus))&#123;</span><br><span class="line">            <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;支付成功&quot;</span>); <span class="comment">//支付成功</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().setCode(<span class="number">101</span>).setMessage(<span class="string">&quot;支付中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前端：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//确认支付</span></span><br><span class="line">    <span class="title function_">toPayV2</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="comment">//禁用按钮，防止重复提交</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">payBtnDisabled</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">//微信支付</span></span><br><span class="line">      <span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">payOrder</span>.<span class="property">payType</span> === <span class="string">&#x27;wxpay&#x27;</span>)&#123;</span><br><span class="line">          <span class="comment">//调用统一下单接口</span></span><br><span class="line">        wxPayApi.<span class="title function_">nativePayV2</span>(<span class="variable language_">this</span>.<span class="property">payOrder</span>.<span class="property">productId</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">codeUrl</span> = response.<span class="property">data</span>.<span class="property">codeUrl</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">orderNo</span> = response.<span class="property">data</span>.<span class="property">orderNo</span></span><br><span class="line">          </span><br><span class="line">          <span class="comment">//打开二维码弹窗</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">codeDialogVisible</span> = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">          <span class="comment">//启动定时器</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">//查询订单是否支付成功</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">queryOrderStatus</span>()</span><br><span class="line">          &#125;, <span class="number">3000</span>)</span><br><span class="line"></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="comment">//关闭微信支付二维码对话框时让“确认支付”按钮可用</span></span><br><span class="line">    <span class="title function_">closeDialog</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;close.................&#x27;</span>)</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">payBtnDisabled</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;清除定时器&#x27;</span>)</span><br><span class="line">      <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><p>8、用户取消订单API<br>实现用户主动取消订单的功能<br>8.1、定义取消订单接口<br>WxPayController中添加接口方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户取消订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;用户取消订单&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/cancel/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">cancel</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;取消订单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        wxPayService.cancelOrder(orderNo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;订单已取消&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用户取消订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">cancelOrder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用微信支付的关单接口</span></span><br><span class="line">        <span class="built_in">this</span>.closeOrder(orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新商户端的订单状态</span></span><br><span class="line">        orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.CANCEL);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关单接口的调用</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">closeOrder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;关单接口的调用，订单号 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建远程请求对象 根据订单号查询订单 里面有一个%s</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(WxApiType.CLOSE_ORDER_BY_NO.getType(), orderNo);</span><br><span class="line">        url = wxPayConfig.getDomain().concat(url);</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装json请求体</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; paramsMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        paramsMap.put(<span class="string">&quot;mchid&quot;</span>, wxPayConfig.getMchId());</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> gson.toJson(paramsMap);</span><br><span class="line">        log.info(<span class="string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span>, jsonParams);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将请求参数设置到请求对象中</span></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonParams,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">        httpPost.setEntity(entity);</span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();<span class="comment">//响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123; <span class="comment">//处理成功</span></span><br><span class="line">                log.info(<span class="string">&quot;成功200&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123; <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">                log.info(<span class="string">&quot;成功204&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;Native下单失败,响应码 = &quot;</span> + statusCode);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>9、微信支付查单API<br>9.1、查单接口的调用<br>商户后台未收到异步支付结果通知时，商户应该主动调用《微信支付查单接口》<a href="https://pay.weixin.qq.com/doc/v3/partner/4012759714">商户订单号查询订单_Native支付|微信支付合作伙伴文档中心</a>，同步订单状态。<br>（1）WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询订单：测试订单状态用&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query/&#123;orderNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">queryOrder</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;查询订单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> wxPayService.queryOrder(orderNo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;查询成功&quot;</span>).data(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryOrder</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;查单接口调用 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> String.format(WxApiType.ORDER_QUERY_BY_NO.getType(), orderNo);</span><br><span class="line">        url = wxPayConfig.getDomain().concat(url).concat(<span class="string">&quot;?mchid=&quot;</span>).concat(wxPayConfig.getMchId());</span><br><span class="line"></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        httpGet.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());<span class="comment">//响应体</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();<span class="comment">//响应状态码</span></span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123; <span class="comment">//处理成功</span></span><br><span class="line">                log.info(<span class="string">&quot;成功, 返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123; <span class="comment">//处理成功，无返回Body</span></span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                log.info(<span class="string">&quot;查单接口调用,响应码 = &quot;</span> + statusCode+ <span class="string">&quot;,返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IOException</span>(<span class="string">&quot;request failed&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> bodyAsString;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>9.2、集成Spring Task<br>Spring 3.0后提供Spring Task实现任务调度<br>（1）启动类添加注解<br>statistics启动类添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableScheduling</span></span><br></pre></td></tr></table></figure><p>（2）测试定时任务<br>创建 task 包，创建 WxPayTask.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WxPayTask</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderInfoService orderInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxPayService wxPayService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RefundInfoService refundInfoService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秒 分 时 日 月 周</span></span><br><span class="line"><span class="comment">     * 以秒为例</span></span><br><span class="line"><span class="comment">     * *：每秒都执行</span></span><br><span class="line"><span class="comment">     * 1-3：从第1秒开始执行，到第3秒结束执行</span></span><br><span class="line"><span class="comment">     * 0/3：从第0秒开始，每隔3秒执行1次</span></span><br><span class="line"><span class="comment">     * 1,2,3：在指定的第1、2、3秒执行</span></span><br><span class="line"><span class="comment">     * ?：不指定</span></span><br><span class="line"><span class="comment">     * 日和周不能同时制定，指定其中之一，则另一个设置为?</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">//@Scheduled(cron = &quot;0/3 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">task1</span><span class="params">()</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;task1 被执行......&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>9.3、定时查找超时订单<br>（1）WxPayTask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从第0秒开始每隔30秒执行1次，查询创建超过5分钟，并且未支付的订单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderConfirm</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;orderConfirm 被执行......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderInfo&gt; orderInfoList = orderInfoService.getNoPayOrderByDuration(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (OrderInfo orderInfo : orderInfoList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> orderInfo.getOrderNo();</span><br><span class="line">            log.warn(<span class="string">&quot;超时订单 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//核实订单状态：调用微信支付查单接口</span></span><br><span class="line">            wxPayService.checkOrderStatus(orderNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询创建超过minutes分钟并且未支付的订单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> minutes</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;OrderInfo&gt; <span class="title function_">getNoPayOrderByDuration</span><span class="params">(<span class="type">int</span> minutes)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Instant</span> <span class="variable">instant</span> <span class="operator">=</span> Instant.now().minus(Duration.ofMinutes(minutes));</span><br><span class="line"></span><br><span class="line">        QueryWrapper&lt;OrderInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;order_status&quot;</span>, OrderStatus.NOTPAY.getType());</span><br><span class="line">        queryWrapper.le(<span class="string">&quot;create_time&quot;</span>, instant);</span><br><span class="line"></span><br><span class="line">        List&lt;OrderInfo&gt; orderInfoList = baseMapper.selectList(queryWrapper);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> orderInfoList;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据订单号查询微信支付查单接口，核实订单状态</span></span><br><span class="line"><span class="comment">    * 如果订单已支付，则更新商户端订单状态，并记录支付日志</span></span><br><span class="line"><span class="comment">    * 如果订单未支付，则调用关单接口关闭订单，并更新商户端订单状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkOrderStatus</span><span class="params">(String orderNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">       log.warn(<span class="string">&quot;根据订单号核实订单状态 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//调用微信支付查单接口</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.queryOrder(orderNo);</span><br><span class="line"></span><br><span class="line">       <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">       Map&lt;String, String&gt; resultMap = gson.fromJson(result, HashMap.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取微信支付端的订单状态</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">tradeState</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;trade_state&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//判断订单状态</span></span><br><span class="line">       <span class="keyword">if</span>(WxTradeState.SUCCESS.getType().equals(tradeState))&#123;</span><br><span class="line"></span><br><span class="line">           log.warn(<span class="string">&quot;核实订单已支付 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果确认订单已支付则更新本地订单状态</span></span><br><span class="line">           orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.SUCCESS);</span><br><span class="line">           <span class="comment">//记录支付日志</span></span><br><span class="line">           paymentInfoService.createPaymentInfo(result);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(WxTradeState.NOTPAY.getType().equals(tradeState))&#123;</span><br><span class="line">           log.warn(<span class="string">&quot;核实订单未支付 ===&gt; &#123;&#125;&quot;</span>, orderNo);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果订单未支付，则调用关单接口</span></span><br><span class="line">           <span class="built_in">this</span>.closeOrder(orderNo);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//更新本地订单状态</span></span><br><span class="line">           orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.CLOSED);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>11、申请退款API<br>文档：<a href="https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_9.shtml">https://pay.weixin.qq.com/wiki/doc/apiv3/apis/chapter3_4_9.shtml</a><br>11.1、创建退款单<br>（1）根据订单号查询订单<br>OrderInfoService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;申请退款&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/refunds/&#123;orderNo&#125;/&#123;reason&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">refunds</span><span class="params">(<span class="meta">@PathVariable</span> String orderNo, <span class="meta">@PathVariable</span> String reason)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;申请退款&quot;</span>);</span><br><span class="line">        wxPayService.refund(orderNo, reason);</span><br><span class="line">        <span class="keyword">return</span> R.ok();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;t_refund_info&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefundInfo</span> <span class="keyword">extends</span> <span class="title class_">BaseEntity</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String orderNo;<span class="comment">//商品订单编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String refundNo;<span class="comment">//退款单编号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String refundId;<span class="comment">//支付系统退款单号</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer totalFee;<span class="comment">//原订单金额(分)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer refund;<span class="comment">//退款金额(分)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String reason;<span class="comment">//退款原因</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String refundStatus;<span class="comment">//退款单状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String contentReturn;<span class="comment">//申请退款返回参数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String contentNotify;<span class="comment">//退款结果通知参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> orderNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> reason</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refund</span><span class="params">(String orderNo, String reason)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;创建退款单记录&quot;</span>);</span><br><span class="line">        <span class="comment">//根据订单编号创建退款单</span></span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundsInfo</span> <span class="operator">=</span> refundsInfoService.createRefundByOrderNo(orderNo, reason);</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;调用退款API&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用统一下单API</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> wxPayConfig.getDomain().concat(WxApiType.DOMESTIC_REFUNDS.getType());</span><br><span class="line">        <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 请求body参数</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">Map</span> <span class="variable">paramsMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        paramsMap.put(<span class="string">&quot;out_trade_no&quot;</span>, orderNo);<span class="comment">//订单编号</span></span><br><span class="line">        paramsMap.put(<span class="string">&quot;out_refund_no&quot;</span>, refundsInfo.getRefundNo());<span class="comment">//退款单编号</span></span><br><span class="line">        paramsMap.put(<span class="string">&quot;reason&quot;</span>,reason);<span class="comment">//退款原因</span></span><br><span class="line">        paramsMap.put(<span class="string">&quot;notify_url&quot;</span>, wxPayConfig.getNotifyDomain().concat(WxNotifyType.REFUND_NOTIFY.getType()));<span class="comment">//退款通知地址</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Map</span> <span class="variable">amountMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        amountMap.put(<span class="string">&quot;refund&quot;</span>, refundsInfo.getRefund());<span class="comment">//退款金额</span></span><br><span class="line">        amountMap.put(<span class="string">&quot;total&quot;</span>, refundsInfo.getTotalFee());<span class="comment">//原订单金额 默认一致可以改</span></span><br><span class="line">        amountMap.put(<span class="string">&quot;currency&quot;</span>, <span class="string">&quot;CNY&quot;</span>);<span class="comment">//退款币种</span></span><br><span class="line">        paramsMap.put(<span class="string">&quot;amount&quot;</span>, amountMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将参数转换成json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonParams</span> <span class="operator">=</span> gson.toJson(paramsMap);</span><br><span class="line">        log.info(<span class="string">&quot;请求参数 ===&gt; &#123;&#125;&quot;</span> + jsonParams);</span><br><span class="line"></span><br><span class="line">        <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonParams,<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">        entity.setContentType(<span class="string">&quot;application/json&quot;</span>);<span class="comment">//设置请求报文格式</span></span><br><span class="line">        httpPost.setEntity(entity);<span class="comment">//将请求报文放入请求对象</span></span><br><span class="line">        httpPost.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);<span class="comment">//设置响应报文格式</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成签名并执行请求，并完成验签</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpPost);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//解析响应结果</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功, 退款返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;退款异常, 响应码 = &quot;</span> + statusCode+ <span class="string">&quot;, 退款返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新订单状态</span></span><br><span class="line">            orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.REFUND_PROCESSING);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新退款单</span></span><br><span class="line">            refundsInfoService.updateRefund(bodyAsString);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 记录退款记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateRefund</span><span class="params">(String content)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将json字符串转换成Map</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; resultMap = gson.fromJson(content, HashMap.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据退款单编号修改退款单</span></span><br><span class="line">        QueryWrapper&lt;RefundInfo&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(<span class="string">&quot;refund_no&quot;</span>, resultMap.get(<span class="string">&quot;out_refund_no&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置要修改的字段</span></span><br><span class="line">        <span class="type">RefundInfo</span> <span class="variable">refundInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RefundInfo</span>();</span><br><span class="line"></span><br><span class="line">        refundInfo.setRefundId(resultMap.get(<span class="string">&quot;refund_id&quot;</span>));<span class="comment">//微信支付退款单号</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//查询退款和申请退款中的返回参数</span></span><br><span class="line">        <span class="keyword">if</span>(resultMap.get(<span class="string">&quot;status&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            refundInfo.setRefundStatus(resultMap.get(<span class="string">&quot;status&quot;</span>));<span class="comment">//退款状态</span></span><br><span class="line">            refundInfo.setContentReturn(content);<span class="comment">//将全部响应结果存入数据库的content字段</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退款回调中的回调参数</span></span><br><span class="line">        <span class="keyword">if</span>(resultMap.get(<span class="string">&quot;refund_status&quot;</span>) != <span class="literal">null</span>)&#123;</span><br><span class="line">            refundInfo.setRefundStatus(resultMap.get(<span class="string">&quot;refund_status&quot;</span>));<span class="comment">//退款状态</span></span><br><span class="line">            refundInfo.setContentNotify(content);<span class="comment">//将全部响应结果存入数据库的content字段</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//更新退款单</span></span><br><span class="line">        baseMapper.update(refundInfo, queryWrapper);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>11.3、申请退款<br>（1）WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询退款</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> refundNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;查询退款：测试用&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/query-refund/&#123;refundNo&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">queryRefund</span><span class="params">(<span class="meta">@PathVariable</span> String refundNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;查询退款&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> wxPayService.queryRefund(refundNo);</span><br><span class="line">        <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;查询成功&quot;</span>).data(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryRefund</span><span class="params">(String refundNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;查询退款接口调用 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span>  String.format(WxApiType.DOMESTIC_REFUNDS_QUERY.getType(), refundNo);</span><br><span class="line">        url = wxPayConfig.getDomain().concat(url);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建远程Get 请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        httpGet.setHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成签名并执行请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功, 查询退款返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;查询退款异常, 响应码 = &quot;</span> + statusCode+ <span class="string">&quot;, 查询退款返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> bodyAsString;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>退款结果通知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退款结果通知</span></span><br><span class="line"><span class="comment">     * 退款状态改变后，微信会把相关退款结果发送给商户。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;退款结果通知&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/refunds/notify&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">refundsNotify</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span>&#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;退款通知执行&quot;</span>);</span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();<span class="comment">//应答对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//处理通知参数</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> HttpUtils.readData(request);</span><br><span class="line">            Map&lt;String, Object&gt; bodyMap = gson.fromJson(body, HashMap.class);</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> (String)bodyMap.get(<span class="string">&quot;id&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;支付通知的id ===&gt; &#123;&#125;&quot;</span>, requestId);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//签名的验证</span></span><br><span class="line">            <span class="type">WechatPay2ValidatorForRequest</span> <span class="variable">wechatPay2ValidatorForRequest</span></span><br><span class="line">                    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WechatPay2ValidatorForRequest</span>(verifier, requestId, body);</span><br><span class="line">            <span class="keyword">if</span>(!wechatPay2ValidatorForRequest.validate(request))&#123;</span><br><span class="line"></span><br><span class="line">                log.error(<span class="string">&quot;通知验签失败&quot;</span>);</span><br><span class="line">                <span class="comment">//失败应答</span></span><br><span class="line">                response.setStatus(<span class="number">500</span>);</span><br><span class="line">                map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">                map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;通知验签失败&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;通知验签成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//处理退款单</span></span><br><span class="line">            wxPayService.processRefund(bodyMap);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//成功应答</span></span><br><span class="line">            response.setStatus(<span class="number">200</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;SUCCESS&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="comment">//失败应答</span></span><br><span class="line">            response.setStatus(<span class="number">500</span>);</span><br><span class="line">            map.put(<span class="string">&quot;code&quot;</span>, <span class="string">&quot;ERROR&quot;</span>);</span><br><span class="line">            map.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;失败&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> gson.toJson(map);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 处理退款单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processRefund</span><span class="params">(Map&lt;String, Object&gt; bodyMap)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;退款单&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解密报文</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">plainText</span> <span class="operator">=</span> decryptFromResource(bodyMap);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将明文转换成map</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        <span class="type">HashMap</span> <span class="variable">plainTextMap</span> <span class="operator">=</span> gson.fromJson(plainText, HashMap.class);</span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> (String)plainTextMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="type">String</span> <span class="variable">orderStatus</span> <span class="operator">=</span> orderInfoService.getOrderStatus(orderNo);</span><br><span class="line">                <span class="keyword">if</span> (!OrderStatus.REFUND_PROCESSING.getType().equals(orderStatus)) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新订单状态</span></span><br><span class="line">                orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.REFUND_SUCCESS);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//更新退款单</span></span><br><span class="line">                refundsInfoService.updateRefund(plainText);</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">//要主动释放锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>12.2、定时查找退款中的订单<br>（1）WxPayTask</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从第0秒开始每隔30秒执行1次，查询创建超过5分钟，并且未成功的退款单</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Scheduled(cron = &quot;0/30 * * * * ?&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">refundConfirm</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;refundConfirm 被执行......&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//找出申请退款超过5分钟并且未成功的退款单</span></span><br><span class="line">        List&lt;RefundInfo&gt; refundInfoList = refundInfoService.getNoRefundOrderByDuration(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (RefundInfo refundInfo : refundInfoList) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">refundNo</span> <span class="operator">=</span> refundInfo.getRefundNo();</span><br><span class="line">            log.warn(<span class="string">&quot;超时未退款的退款单号 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//核实订单状态：调用微信支付查询退款接口</span></span><br><span class="line">            wxPayService.checkRefundStatus(refundNo);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据退款单号核实退款单状态</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> refundNo</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkRefundStatus</span><span class="params">(String refundNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">       log.warn(<span class="string">&quot;根据退款单号核实退款单状态 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//调用查询退款单接口</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.queryRefund(refundNo);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//组装json请求体字符串</span></span><br><span class="line">       <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">       Map&lt;String, String&gt; resultMap = gson.fromJson(result, HashMap.class);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//获取微信支付端退款状态</span></span><br><span class="line">       <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (WxRefundStatus.SUCCESS.getType().equals(status)) &#123;</span><br><span class="line"></span><br><span class="line">           log.warn(<span class="string">&quot;核实订单已退款成功 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果确认退款成功，则更新订单状态</span></span><br><span class="line">           orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.REFUND_SUCCESS);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//更新退款单</span></span><br><span class="line">           refundsInfoService.updateRefund(result);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (WxRefundStatus.ABNORMAL.getType().equals(status)) &#123;</span><br><span class="line"></span><br><span class="line">           log.warn(<span class="string">&quot;核实订单退款异常  ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//如果确认退款成功，则更新订单状态</span></span><br><span class="line">           orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.REFUND_ABNORMAL);</span><br><span class="line"></span><br><span class="line">           <span class="comment">//更新退款单</span></span><br><span class="line">           refundsInfoService.updateRefund(result);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>12.3、处理超时未退款订单<br>WxPayService<br>核实订单状态<br>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据退款单号核实退款单状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> refundNo</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">checkRefundStatus</span><span class="params">(String refundNo)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.warn(<span class="string">&quot;根据退款单号核实退款单状态 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//调用查询退款单接口</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> <span class="built_in">this</span>.queryRefund(refundNo);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//组装json请求体字符串</span></span><br><span class="line">        <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">        Map&lt;String, String&gt; resultMap = gson.fromJson(result, HashMap.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取微信支付端退款状态</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">status</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;status&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">orderNo</span> <span class="operator">=</span> resultMap.get(<span class="string">&quot;out_trade_no&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (WxRefundStatus.SUCCESS.getType().equals(status)) &#123;</span><br><span class="line"></span><br><span class="line">            log.warn(<span class="string">&quot;核实订单已退款成功 ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果确认退款成功，则更新订单状态</span></span><br><span class="line">            orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.REFUND_SUCCESS);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新退款单</span></span><br><span class="line">            refundsInfoService.updateRefund(result);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (WxRefundStatus.ABNORMAL.getType().equals(status)) &#123;</span><br><span class="line"></span><br><span class="line">            log.warn(<span class="string">&quot;核实订单退款异常  ===&gt; &#123;&#125;&quot;</span>, refundNo);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果确认退款成功，则更新订单状态</span></span><br><span class="line">            orderInfoService.updateStatusByOrderNo(orderNo, OrderStatus.REFUND_ABNORMAL);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//更新退款单</span></span><br><span class="line">            refundsInfoService.updateRefund(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>14、账单<br>14.1、申请交易账单和资金账单<br>（1）WxPayController</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;获取账单url：测试用&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/querybill/&#123;billDate&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">queryTradeBill</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> String billDate,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;获取账单url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadUrl</span> <span class="operator">=</span> wxPayService.queryBill(billDate, type);</span><br><span class="line">        <span class="keyword">return</span> R.ok().setMessage(<span class="string">&quot;获取账单url成功&quot;</span>).data(<span class="string">&quot;downloadUrl&quot;</span>, downloadUrl);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;下载账单&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/downloadbill/&#123;billDate&#125;/&#123;type&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">downloadBill</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> String billDate,</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;下载账单&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> wxPayService.downloadBill(billDate, type);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.ok().data(<span class="string">&quot;result&quot;</span>, result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 申请账单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> billDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">queryBill</span><span class="params">(String billDate, String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;申请账单接口调用 &#123;&#125;&quot;</span>, billDate);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;tradebill&quot;</span>.equals(type))&#123;</span><br><span class="line">            url =  WxApiType.TRADE_BILLS.getType();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">&quot;fundflowbill&quot;</span>.equals(type))&#123;</span><br><span class="line">            url =  WxApiType.FUND_FLOW_BILLS.getType();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;不支持的账单类型&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        url = wxPayConfig.getDomain().concat(url).concat(<span class="string">&quot;?bill_date=&quot;</span>).concat(billDate);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建远程Get 请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(url);</span><br><span class="line">        httpGet.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用wxPayClient发送请求得到响应</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功, 申请账单返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;申请账单异常, 响应码 = &quot;</span> + statusCode+ <span class="string">&quot;, 申请账单返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//获取账单下载地址</span></span><br><span class="line">            <span class="type">Gson</span> <span class="variable">gson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Gson</span>();</span><br><span class="line">            Map&lt;String, String&gt; resultMap = gson.fromJson(bodyAsString, HashMap.class);</span><br><span class="line">            <span class="keyword">return</span> resultMap.get(<span class="string">&quot;download_url&quot;</span>);</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 下载账单</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> billDate</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">downloadBill</span><span class="params">(String billDate, String type)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.warn(<span class="string">&quot;下载账单接口调用 &#123;&#125;, &#123;&#125;&quot;</span>, billDate, type);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取账单url地址</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">downloadUrl</span> <span class="operator">=</span> <span class="built_in">this</span>.queryBill(billDate, type);</span><br><span class="line">        <span class="comment">//创建远程Get 请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(downloadUrl);</span><br><span class="line">        httpGet.addHeader(<span class="string">&quot;Accept&quot;</span>, <span class="string">&quot;application/json&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用wxPayClient发送请求得到响应</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> wxPayNoSignClient.execute(httpGet);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">String</span> <span class="variable">bodyAsString</span> <span class="operator">=</span> EntityUtils.toString(response.getEntity());</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">            <span class="keyword">if</span> (statusCode == <span class="number">200</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功, 下载账单返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">204</span>) &#123;</span><br><span class="line">                log.info(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;下载账单异常, 响应码 = &quot;</span> + statusCode+ <span class="string">&quot;, 下载账单返回结果 = &quot;</span> + bodyAsString);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> bodyAsString;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            response.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">java整合微信的网页支付包含原理</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Home页</title>
    <link href="https://yjyrichard.github.io/posts/d454cca6.html"/>
    <id>https://yjyrichard.github.io/posts/d454cca6.html</id>
    <published>2025-04-15T15:53:56.865Z</published>
    <updated>2025-04-15T15:10:42.654Z</updated>
    
    <content type="html"><![CDATA[<h1>静态结构搭建和分类实现</h1><h2 id="1-整体结构创建">1. 整体结构创建</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1675417667651-eb841c73-5b36-48a5-a8ee-118dbeaaeb0d.png#averageHue=%23fcf8f8&amp;clientId=u19c1ce9d-cad7-4&amp;from=paste&amp;height=458&amp;id=u7e2d2595&amp;name=image.png&amp;originHeight=916&amp;originWidth=1368&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=37531&amp;status=done&amp;style=none&amp;taskId=uf8f39479-333b-4074-b888-53dc829c807&amp;title=&amp;width=684" alt="image.png"></p><p>1- 按照结构新增五个组件，准备最简单的模版，分别在Home模块的入口组件中引入</p><ul><li>HomeCategory</li><li>HomeBanner</li><li>HomeNew</li><li>HomeHot</li><li>HomeProduct</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt; HomeCategory &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>2- Home模块入口组件中引入并渲染</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import HomeCategory from &#x27;./components/HomeCategory.vue&#x27;</span><br><span class="line">import HomeBanner from &#x27;./components/HomeBanner.vue&#x27;</span><br><span class="line">import HomeNew from &#x27;./components/HomeNew.vue&#x27;</span><br><span class="line">import HomeHot from &#x27;./components/HomeHot.vue&#x27;</span><br><span class="line">import homeProduct from &#x27;./components/HomeProduct.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;HomeCategory /&gt;</span><br><span class="line">    &lt;HomeBanner /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;HomeNew /&gt;</span><br><span class="line">  &lt;HomeHot /&gt;</span><br><span class="line">  &lt;homeProduct /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="2-分类实现">2. 分类实现</h2><p><img src="https://img.picui.cn/free/2025/03/28/67e65a25dfe06.png" alt="image-20250327221055896.png"></p><p>1- 准备详细模版</p><p>HomeCategory.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-category&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;menu&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in 9&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;居家&lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink v-for=&quot;i in 2&quot; :key=&quot;i&quot; to=&quot;/&quot;&gt;南北干货&lt;/RouterLink&gt;</span><br><span class="line">        &lt;!-- 弹层layer位置 --&gt;</span><br><span class="line">        &lt;div class=&quot;layer&quot;&gt;</span><br><span class="line">          &lt;h4&gt;分类推荐 &lt;small&gt;根据您的购买或浏览记录推荐&lt;/small&gt;&lt;/h4&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;i in 5&quot; :key=&quot;i&quot;&gt;</span><br><span class="line">              &lt;RouterLink to=&quot;/&quot;&gt;</span><br><span class="line">                &lt;img alt=&quot;&quot; /&gt;</span><br><span class="line">                &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">                  &lt;p class=&quot;name ellipsis-2&quot;&gt;</span><br><span class="line">                    男士外套</span><br><span class="line">                  &lt;/p&gt;</span><br><span class="line">                  &lt;p class=&quot;desc ellipsis&quot;&gt;男士外套，冬季必选&lt;/p&gt;</span><br><span class="line">                  &lt;p class=&quot;price&quot;&gt;&lt;i&gt;¥&lt;/i&gt;200.00&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/RouterLink&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.home-category &#123;</span><br><span class="line">  width: 250px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  background: rgba(0, 0, 0, 0.8);</span><br><span class="line">  position: relative;</span><br><span class="line">  z-index: 99;</span><br><span class="line"></span><br><span class="line">  .menu &#123;</span><br><span class="line">    li &#123;</span><br><span class="line">      padding-left: 40px;</span><br><span class="line">      height: 55px;</span><br><span class="line">      line-height: 55px;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        background: $xtxColor;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      a &#123;</span><br><span class="line">        margin-right: 4px;</span><br><span class="line">        color: #fff;</span><br><span class="line"></span><br><span class="line">        &amp;:first-child &#123;</span><br><span class="line">          font-size: 16px;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .layer &#123;</span><br><span class="line">        width: 990px;</span><br><span class="line">        height: 500px;</span><br><span class="line">        background: rgba(255, 255, 255, 0.8);</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 250px;</span><br><span class="line">        top: 0;</span><br><span class="line">        display: none;</span><br><span class="line">        padding: 0 15px;</span><br><span class="line"></span><br><span class="line">        h4 &#123;</span><br><span class="line">          font-size: 20px;</span><br><span class="line">          font-weight: normal;</span><br><span class="line">          line-height: 80px;</span><br><span class="line"></span><br><span class="line">          small &#123;</span><br><span class="line">            font-size: 16px;</span><br><span class="line">            color: #666;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ul &#123;</span><br><span class="line">          display: flex;</span><br><span class="line">          flex-wrap: wrap;</span><br><span class="line"></span><br><span class="line">          li &#123;</span><br><span class="line">            width: 310px;</span><br><span class="line">            height: 120px;</span><br><span class="line">            margin-right: 15px;</span><br><span class="line">            margin-bottom: 15px;</span><br><span class="line">            border: 1px solid #eee;</span><br><span class="line">            border-radius: 4px;</span><br><span class="line">            background: #fff;</span><br><span class="line"></span><br><span class="line">            &amp;:nth-child(3n) &#123;</span><br><span class="line">              margin-right: 0;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            a &#123;</span><br><span class="line">              display: flex;</span><br><span class="line">              width: 100%;</span><br><span class="line">              height: 100%;</span><br><span class="line">              align-items: center;</span><br><span class="line">              padding: 10px;</span><br><span class="line"></span><br><span class="line">              &amp;:hover &#123;</span><br><span class="line">                background: #e3f9f4;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              img &#123;</span><br><span class="line">                width: 95px;</span><br><span class="line">                height: 95px;</span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line">              .info &#123;</span><br><span class="line">                padding-left: 10px;</span><br><span class="line">                line-height: 24px;</span><br><span class="line">                overflow: hidden;</span><br><span class="line"></span><br><span class="line">                .name &#123;</span><br><span class="line">                  font-size: 16px;</span><br><span class="line">                  color: #666;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                .desc &#123;</span><br><span class="line">                  color: #999;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                .price &#123;</span><br><span class="line">                  font-size: 22px;</span><br><span class="line">                  color: $priceColor;</span><br><span class="line"></span><br><span class="line">                  i &#123;</span><br><span class="line">                    font-size: 16px;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 关键样式  hover状态下的layer盒子变成block</span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        .layer &#123;</span><br><span class="line">          display: block;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/03/28/67e65a2528211.png" alt="image-20250327221217102.png"></p><p>2- 完成代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCategoryStore &#125; from &#x27;@/stores/category&#x27;</span><br><span class="line"></span><br><span class="line">const categoryStore = useCategoryStore()</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-category&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;menu&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in categoryStore.categoryList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink v-for=&quot;i in item.children.slice(0, 2)&quot; :key=&quot;i&quot; to=&quot;/&quot;&gt;&#123;&#123; i.name &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">        &lt;!-- 弹层layer位置 --&gt;</span><br><span class="line">        &lt;div class=&quot;layer&quot;&gt;</span><br><span class="line">          &lt;h4&gt;分类推荐 &lt;small&gt;根据您的购买或浏览记录推荐&lt;/small&gt;&lt;/h4&gt;</span><br><span class="line">          &lt;ul&gt;</span><br><span class="line">            &lt;li v-for=&quot;i in item.goods&quot; :key=&quot;i.id&quot;&gt;</span><br><span class="line">              &lt;RouterLink to=&quot;/&quot;&gt;</span><br><span class="line">                &lt;img :src=&quot;i.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">                &lt;div class=&quot;info&quot;&gt;</span><br><span class="line">                  &lt;p class=&quot;name ellipsis-2&quot;&gt;</span><br><span class="line">                    &#123;&#123; i.name &#125;&#125;</span><br><span class="line">                  &lt;/p&gt;</span><br><span class="line">                  &lt;p class=&quot;desc ellipsis&quot;&gt;&#123;&#123; i.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">                  &lt;p class=&quot;price&quot;&gt;&lt;i&gt;¥&lt;/i&gt;&#123;&#123; i.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">                &lt;/div&gt;</span><br><span class="line">              &lt;/RouterLink&gt;</span><br><span class="line">            &lt;/li&gt;</span><br><span class="line">          &lt;/ul&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>banner轮播图实现</h1><h2 id="1-熟悉组件">1. 熟悉组件</h2><p><img src="https://img.picui.cn/free/2025/03/28/67e65a25e80b3.png" alt="image-20250327221742047.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-banner&quot;&gt;</span><br><span class="line">    &lt;el-carousel height=&quot;500px&quot;&gt;</span><br><span class="line">      &lt;el-carousel-item v-for=&quot;item in 4&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;img src=&quot;http://yjy-xiaotuxian-dev.oss-cn-beijing.aliyuncs.com/picture/2021-04-15/6d202d8e-bb47-4f92-9523-f32ab65754f4.jpg&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;/el-carousel-item&gt;</span><br><span class="line">    &lt;/el-carousel&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.home-banner &#123;</span><br><span class="line">  width: 1240px;</span><br><span class="line">  height: 500px;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 98;</span><br><span class="line"></span><br><span class="line">  img &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 500px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-获取数据渲染组件">2. 获取数据渲染组件</h2><p>1- 封装接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取banner图</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; httpInstance &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/http&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getBannerAPI</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;home/banner&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2- 获取数据渲染模版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; getBannerAPI &#125; from &#x27;@/apis/home&#x27;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">const bannerList = ref([])</span><br><span class="line"></span><br><span class="line">const getBanner = async () =&gt; &#123;</span><br><span class="line">  const res = await getBannerAPI()</span><br><span class="line">  console.log(res)</span><br><span class="line">  bannerList.value = res.result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">onMounted(() =&gt; getBanner())</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-banner&quot;&gt;</span><br><span class="line">    &lt;el-carousel height=&quot;500px&quot;&gt;</span><br><span class="line">      &lt;el-carousel-item v-for=&quot;item in bannerList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;item.imgUrl&quot; alt=&quot;&quot;&gt;</span><br><span class="line">      &lt;/el-carousel-item&gt;</span><br><span class="line">    &lt;/el-carousel&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1>面板组件封装</h1><p>场景说明</p><p>问： 组件封装解决了什么问题？</p><p>1.复用问题   2.业务维护问题</p><p>新鲜好物和人气推荐模块，在结构上非常相似，只是内容不同，可以通过组件封装可以实现复用结构的效果</p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a25ea723.png" alt="image-20250328084519296.png"></p><h2 id="1-纯静态结构">1. 纯静态结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;head&quot;&gt;</span><br><span class="line">         &lt;!-- 主标题和副标题 --&gt;</span><br><span class="line">        &lt;h3&gt;</span><br><span class="line">          新鲜好物&lt;small&gt;新鲜出炉 品质靠谱&lt;/small&gt;</span><br><span class="line">        &lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 主体内容区域 --&gt;</span><br><span class="line">      &lt;div&gt; 主体内容 &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.home-panel &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line"></span><br><span class="line">  .head &#123;</span><br><span class="line">    padding: 40px 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: flex-end;</span><br><span class="line"></span><br><span class="line">    h3 &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      font-size: 32px;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">      margin-left: 6px;</span><br><span class="line">      height: 35px;</span><br><span class="line">      line-height: 35px;</span><br><span class="line"></span><br><span class="line">      small &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #999;</span><br><span class="line">        margin-left: 20px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-完整代码">2. 完整代码</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;</span><br><span class="line">  &#125;,</span><br><span class="line">  subTitle: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &#x27;&#x27;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-panel&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;head&quot;&gt;</span><br><span class="line">        &lt;!-- 主标题和副标题 --&gt;</span><br><span class="line">        &lt;h3&gt;</span><br><span class="line">          &#123;&#123; title &#125;&#125;&lt;small&gt;&#123;&#123; subTitle &#125;&#125;&lt;/small&gt;</span><br><span class="line">        &lt;/h3&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 主体内容区域 --&gt;</span><br><span class="line">      &lt;slot name=&quot;main&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.home-panel &#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line"></span><br><span class="line">  .head &#123;</span><br><span class="line">    padding: 40px 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: flex-end;</span><br><span class="line"></span><br><span class="line">    h3 &#123;</span><br><span class="line">      flex: 1;</span><br><span class="line">      font-size: 32px;</span><br><span class="line">      font-weight: normal;</span><br><span class="line">      margin-left: 6px;</span><br><span class="line">      height: 35px;</span><br><span class="line">      line-height: 35px;</span><br><span class="line"></span><br><span class="line">      small &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        color: #999;</span><br><span class="line">        margin-left: 20px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>测试代码：</p><p>在Home下的index.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import HomeCategory from &#x27;./components/HomeCategory.vue&#x27;</span><br><span class="line">import HomeBanner from &#x27;./components/HomeBanner.vue&#x27;</span><br><span class="line">import HomeNew from &#x27;./components/HomeNew.vue&#x27;</span><br><span class="line">import HomeHot from &#x27;./components/HomeHot.vue&#x27;</span><br><span class="line">import homeProduct from &#x27;./components/HomeProduct.vue&#x27;</span><br><span class="line">import HomePanel from &#x27;./components/HomePanel.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">    &lt;HomeCategory /&gt;</span><br><span class="line">    &lt;HomeBanner /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;HomeNew /&gt;</span><br><span class="line">  &lt;HomeHot /&gt;</span><br><span class="line">  &lt;homeProduct /&gt;</span><br><span class="line">  &lt;!-- 测试面板组件 --&gt;</span><br><span class="line">  &lt;HomePanel title=&quot;新鲜好物&quot; sub-title=&quot;新鲜毫无 好多商品&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是新鲜好物的插槽内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/HomePanel&gt;</span><br><span class="line">  &lt;HomePanel title=&quot;人气推荐&quot; sub-title=&quot;人气推荐 好多商品&quot;&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      我是新鲜好物的插槽内容</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/HomePanel&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>新鲜好物实现</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e65a2640d89.png" alt="image-20250328085819225.png"></p><h2 id="1-准备模版">1. 准备模版</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;&lt;/div&gt;</span><br><span class="line">  &lt;!-- 下面是插槽主体内容模版</span><br><span class="line">  &lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in newList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">      &lt;RouterLink to=&quot;/&quot;&gt;</span><br><span class="line">        &lt;img :src=&quot;item.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">        &lt;p class=&quot;name&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;p class=&quot;price&quot;&gt;&amp;yen;&#123;&#123; item.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">      &lt;/RouterLink&gt;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">  --&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.goods-list &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  height: 406px;</span><br><span class="line"></span><br><span class="line">  li &#123;</span><br><span class="line">    width: 306px;</span><br><span class="line">    height: 406px;</span><br><span class="line"></span><br><span class="line">    background: #f0f9f4;</span><br><span class="line">    transition: all .5s;</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      transform: translate3d(0, -3px, 0);</span><br><span class="line">      box-shadow: 0 3px 8px rgb(0 0 0 / 20%);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">      width: 306px;</span><br><span class="line">      height: 306px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p &#123;</span><br><span class="line">      font-size: 22px;</span><br><span class="line">      padding-top: 12px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      text-overflow: ellipsis;</span><br><span class="line">      overflow: hidden;</span><br><span class="line">      white-space: nowrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .price &#123;</span><br><span class="line">      color: $priceColor;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-封装接口">2. 封装接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取新鲜好物</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">findNewAPI</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/home/new&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-获取数据渲染模版">3. 获取数据渲染模版</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import HomePanel from &#x27;./HomePanel.vue&#x27;</span><br><span class="line">import &#123; getNewAPI &#125; from &#x27;@/apis/home&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const newList = ref([])</span><br><span class="line">const getNewList = async () =&gt; &#123;</span><br><span class="line">  const res = await getNewAPI()</span><br><span class="line">  newList.value = res.result</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getNewList()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;HomePanel title=&quot;新鲜好物&quot; sub-title=&quot;新鲜出炉 品质靠谱&quot;&gt;</span><br><span class="line">    &lt;template #main&gt;</span><br><span class="line">      &lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">        &lt;li v-for=&quot;item in newList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;RouterLink :to=&quot;`/detail/$&#123;item.id&#125;`&quot;&gt;</span><br><span class="line">            &lt;img :src=&quot;item.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">            &lt;p class=&quot;name&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p class=&quot;price&quot;&gt;&amp;yen;&#123;&#123; item.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/HomePanel&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>人气推荐实现</h1><h2 id="1-封装接口">1. 封装接口</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取人气推荐</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getHotAPI</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/hot&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-获取数据渲染模版">2. 获取数据渲染模版</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import HomePanel from &#x27;./HomePanel.vue&#x27;</span><br><span class="line">import &#123; getHotAPI &#125; from &#x27;@/apis/home&#x27;</span><br><span class="line">import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const hotList = ref([])</span><br><span class="line">const getHotList = async () =&gt; &#123;</span><br><span class="line">  const res = await getHotAPI()</span><br><span class="line">  hotList.value = res.result</span><br><span class="line">&#125;</span><br><span class="line">onMounted(() =&gt; &#123;</span><br><span class="line">  getHotList()</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;HomePanel title=&quot;人气推荐&quot; sub-title=&quot;人气爆款 不容错过&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in hotList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;item.picture&quot; alt=&quot;&quot;&gt;</span><br><span class="line">          &lt;p class=&quot;name&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;p class=&quot;desc&quot;&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/RouterLink&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/HomePanel&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.goods-list &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: space-between;</span><br><span class="line">  height: 426px;</span><br><span class="line"></span><br><span class="line">  li &#123;</span><br><span class="line">    width: 306px;</span><br><span class="line">    height: 406px;</span><br><span class="line">    transition: all .5s;</span><br><span class="line"></span><br><span class="line">    &amp;:hover &#123;</span><br><span class="line">      transform: translate3d(0, -3px, 0);</span><br><span class="line">      box-shadow: 0 3px 8px rgb(0 0 0 / 20%);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    img &#123;</span><br><span class="line">      width: 306px;</span><br><span class="line">      height: 306px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    p &#123;</span><br><span class="line">      font-size: 22px;</span><br><span class="line">      padding-top: 12px;</span><br><span class="line">      text-align: center;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .desc &#123;</span><br><span class="line">      color: #999;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h1>懒加载指令实现</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e65a26ed953.png" alt="image-20250328130426602.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a270afb5.png" alt="image-20250328130526169.png"></p><h2 id="1-封装全局指令">1. 封装全局指令</h2><p>main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义懒加载插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; useIntersectionObserver &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> lazyPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span> (app) &#123;</span><br><span class="line">    <span class="comment">// 懒加载指令逻辑</span></span><br><span class="line">    app.<span class="title function_">directive</span>(<span class="string">&#x27;img-lazy&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">mounted</span> (el, binding) &#123;</span><br><span class="line">        <span class="comment">// el: 指令绑定的那个元素 img</span></span><br><span class="line">        <span class="comment">// binding: binding.value  指令等于号后面绑定的表达式的值  图片url</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(el, binding.<span class="property">value</span>)</span><br><span class="line">        <span class="keyword">const</span> &#123; stop &#125; = <span class="title function_">useIntersectionObserver</span>(</span><br><span class="line">          el,</span><br><span class="line">          <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(isIntersecting)</span><br><span class="line">            <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">              <span class="comment">// 进入视口区域</span></span><br><span class="line">              el.<span class="property">src</span> = binding.<span class="property">value</span></span><br><span class="line">              <span class="title function_">stop</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改掉HomeHot.vue中的img标签的src</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;HomePanel title=&quot;人气推荐&quot; sub-title=&quot;人气爆款 不容错过&quot;&gt;</span><br><span class="line">    &lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">      &lt;li v-for=&quot;item in hotList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;</span><br><span class="line">          &lt;img v-img-lazy=&quot;item.picture&quot; alt=&quot;&quot;&gt;</span><br><span class="line">          &lt;p class=&quot;name&quot;&gt;&#123;&#123; item.title &#125;&#125;&lt;/p&gt;</span><br><span class="line">          &lt;p class=&quot;desc&quot;&gt;&#123;&#123; item.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/RouterLink&gt;</span><br><span class="line">      &lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">  &lt;/HomePanel&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/03/28/67e65a27a6e40.png" alt="image-20250328141115694.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a28188e3.png" alt="image-20250328141203214.png"></p><p>懒加载指令优化：</p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a2805009.png" alt="image-20250328141907025.png"></p><p>在directives 文件夹下创建一个index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义懒加载插件</span></span><br><span class="line"><span class="keyword">import</span> &#123; useIntersectionObserver &#125; <span class="keyword">from</span> <span class="string">&#x27;@vueuse/core&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> lazyPlugin = &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app</span>) &#123;</span><br><span class="line">    <span class="comment">//懒加载指令逻辑</span></span><br><span class="line">    app.<span class="title function_">directive</span>(<span class="string">&#x27;img-lazy&#x27;</span>, &#123;</span><br><span class="line">      <span class="title function_">mounted</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">        <span class="comment">//el : 指令绑定的哪个元素 img</span></span><br><span class="line">        <span class="comment">//binding: binding.value  指令等于号后面绑定的表达式的值 图片url</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(el, binding.<span class="property">value</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; stop &#125; = <span class="title function_">useIntersectionObserver</span>(</span><br><span class="line">          el,</span><br><span class="line">          <span class="function">(<span class="params">[&#123; isIntersecting &#125;]</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(isIntersecting)</span><br><span class="line">            <span class="keyword">if</span> (isIntersecting) &#123;</span><br><span class="line">              <span class="comment">// 进入视口区域</span></span><br><span class="line">              el.<span class="property">src</span> = binding.<span class="property">value</span></span><br><span class="line">              <span class="title function_">stop</span>()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">        )</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入初始化的样式文件</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@/styles/common.scss&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入懒加载指令插件并且注册</span></span><br><span class="line"><span class="keyword">import</span> &#123; lazyPlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;@/directives&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">use</span>(lazyPlugin)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/03/28/67e65a285aebf.png" alt="image-20250328142413390.png"></p><h2 id="2-注册全局指令">2. 注册全局指令</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局指令注册</span></span><br><span class="line"><span class="keyword">import</span> &#123; directivePlugin &#125; <span class="keyword">from</span> <span class="string">&#x27;@/directives&#x27;</span></span><br><span class="line">app.<span class="title function_">use</span>(directivePlugin)</span><br></pre></td></tr></table></figure><h1>Product产品列表实现</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e65a28a6379.png" alt="image-20250328142531405.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a292d8b3.png" alt="image-20250328142539172.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a293a104.png" alt="image-20250328142610702.png"></p><h2 id="1-基础数据渲染">1. 基础数据渲染</h2><p>1- 准备静态模版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import HomePanel from &#x27;./HomePanel.vue&#x27;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-product&quot;&gt;</span><br><span class="line">    &lt;!-- &lt;HomePanel :title=&quot;cate.name&quot; v-for=&quot;cate in goodsProduct&quot; :key=&quot;cate.id&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;RouterLink class=&quot;cover&quot; to=&quot;/&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;cate.picture&quot; /&gt;</span><br><span class="line">          &lt;strong class=&quot;label&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; cate.name &#125;&#125;馆&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; cate.saleInfo &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/strong&gt;</span><br><span class="line">        &lt;/RouterLink&gt;</span><br><span class="line">        &lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">          &lt;li v-for=&quot;good in cate.goods&quot; :key=&quot;good.id&quot;&gt;</span><br><span class="line">            &lt;RouterLink to=&quot;/&quot; class=&quot;goods-item&quot;&gt;</span><br><span class="line">              &lt;img :src=&quot;good.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">              &lt;p class=&quot;name ellipsis&quot;&gt;&#123;&#123; good.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;desc ellipsis&quot;&gt;&#123;&#123; good.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;price&quot;&gt;&amp;yen;&#123;&#123; good.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/RouterLink&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/HomePanel&gt; --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.home-product &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line">  margin-top: 20px;</span><br><span class="line">  .sub &#123;</span><br><span class="line">    margin-bottom: 2px;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">      padding: 2px 12px;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">      border-radius: 4px;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        background: $xtxColor;</span><br><span class="line">        color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:last-child &#123;</span><br><span class="line">        margin-right: 80px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .box &#123;</span><br><span class="line">    display: flex;</span><br><span class="line"></span><br><span class="line">    .cover &#123;</span><br><span class="line">      width: 240px;</span><br><span class="line">      height: 610px;</span><br><span class="line">      margin-right: 10px;</span><br><span class="line">      position: relative;</span><br><span class="line"></span><br><span class="line">      img &#123;</span><br><span class="line">        width: 100%;</span><br><span class="line">        height: 100%;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .label &#123;</span><br><span class="line">        width: 188px;</span><br><span class="line">        height: 66px;</span><br><span class="line">        display: flex;</span><br><span class="line">        font-size: 18px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        line-height: 66px;</span><br><span class="line">        font-weight: normal;</span><br><span class="line">        position: absolute;</span><br><span class="line">        left: 0;</span><br><span class="line">        top: 50%;</span><br><span class="line">        transform: translate3d(0, -50%, 0);</span><br><span class="line"></span><br><span class="line">        span &#123;</span><br><span class="line">          text-align: center;</span><br><span class="line"></span><br><span class="line">          &amp;:first-child &#123;</span><br><span class="line">            width: 76px;</span><br><span class="line">            background: rgba(0, 0, 0, 0.9);</span><br><span class="line">          &#125;</span><br><span class="line"></span><br><span class="line">          &amp;:last-child &#123;</span><br><span class="line">            flex: 1;</span><br><span class="line">            background: rgba(0, 0, 0, 0.7);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .goods-list &#123;</span><br><span class="line">      width: 990px;</span><br><span class="line">      display: flex;</span><br><span class="line">      flex-wrap: wrap;</span><br><span class="line"></span><br><span class="line">      li &#123;</span><br><span class="line">        width: 240px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">        margin-bottom: 10px;</span><br><span class="line"></span><br><span class="line">        &amp;:nth-last-child(-n + 4) &#123;</span><br><span class="line">          margin-bottom: 0;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &amp;:nth-child(4n) &#123;</span><br><span class="line">          margin-right: 0;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .goods-item &#123;</span><br><span class="line">      display: block;</span><br><span class="line">      width: 220px;</span><br><span class="line">      padding: 20px 30px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      transition: all .5s;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        transform: translate3d(0, -3px, 0);</span><br><span class="line">        box-shadow: 0 3px 8px rgb(0 0 0 / 20%);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      img &#123;</span><br><span class="line">        width: 160px;</span><br><span class="line">        height: 160px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      p &#123;</span><br><span class="line">        padding-top: 10px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .name &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .desc &#123;</span><br><span class="line">        color: #999;</span><br><span class="line">        height: 29px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      .price &#123;</span><br><span class="line">        color: $priceColor;</span><br><span class="line">        font-size: 20px;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>2- 封装接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 获取所有商品模块</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">*</span>&#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">getGoodsAPI</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/goods&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3- 获取并渲染数据</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import HomePanel from &#x27;./HomePanel.vue&#x27;</span><br><span class="line">import &#123; getGoodsAPI &#125; from &#x27;@/apis/home&#x27;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const goodsProduct = ref([])</span><br><span class="line">const getGoods = async () =&gt; &#123;</span><br><span class="line">  const &#123; result &#125; = await getGoodsAPI()</span><br><span class="line">  goodsProduct.value = result</span><br><span class="line">&#125;</span><br><span class="line">onMounted( ()=&gt; getGoods() )</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home-product&quot;&gt;</span><br><span class="line">    &lt;HomePanel :title=&quot;cate.name&quot; v-for=&quot;cate in goodsProduct&quot; :key=&quot;cate.id&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;box&quot;&gt;</span><br><span class="line">        &lt;RouterLink class=&quot;cover&quot; to=&quot;/&quot;&gt;</span><br><span class="line">          &lt;img :src=&quot;cate.picture&quot; /&gt;</span><br><span class="line">          &lt;strong class=&quot;label&quot;&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; cate.name &#125;&#125;馆&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123; cate.saleInfo &#125;&#125;&lt;/span&gt;</span><br><span class="line">          &lt;/strong&gt;</span><br><span class="line">        &lt;/RouterLink&gt;</span><br><span class="line">        &lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">          &lt;li v-for=&quot;goods in cate.goods&quot; :key=&quot;good.id&quot;&gt;</span><br><span class="line">            &lt;RouterLink to=&quot;/&quot; class=&quot;goods-item&quot;&gt;</span><br><span class="line">              &lt;img :src=&quot;goods.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">              &lt;p class=&quot;name ellipsis&quot;&gt;&#123;&#123; goods.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;desc ellipsis&quot;&gt;&#123;&#123; goods.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">              &lt;p class=&quot;price&quot;&gt;&amp;yen;&#123;&#123; goods.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;/RouterLink&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">        &lt;/ul&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/HomePanel&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="2-图片懒加载">2. 图片懒加载</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home-product&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">HomePanel</span> <span class="attr">:title</span>=<span class="string">&quot;cate.name&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;cate in goodsProduct&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;cate.id&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指令替换 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-img-lazy</span>=<span class="string">&quot;cate.picture&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;goods-list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;goods in cate.goods&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;goods.id&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">RouterLink</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span> <span class="attr">class</span>=<span class="string">&quot;goods-item&quot;</span>&gt;</span></span><br><span class="line">             <span class="comment">&lt;!-- 指令替换 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">v-img-lazy</span>=<span class="string">&quot;goods.picture&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">RouterLink</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">HomePanel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>GoodsItem组件封装</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e65a297d20a.png" alt="image-20250328143325395.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e65a299767c.png" alt="image-20250328143409038.png"></p><h2 id="1-封装组件">1. 封装组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  goods: &#123;</span><br><span class="line">    type: Object,</span><br><span class="line">    default: () =&gt; &#123; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;RouterLink to=&quot;/&quot; class=&quot;goods-item&quot;&gt;</span><br><span class="line">    &lt;img :src=&quot;goods.picture&quot; alt=&quot;&quot; /&gt;</span><br><span class="line">    &lt;p class=&quot;name ellipsis&quot;&gt;&#123;&#123; goods.name &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;desc ellipsis&quot;&gt;&#123;&#123; goods.desc &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;p class=&quot;price&quot;&gt;&amp;yen;&#123;&#123; goods.price &#125;&#125;&lt;/p&gt;</span><br><span class="line">  &lt;/RouterLink&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.goods-item &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  width: 220px;</span><br><span class="line">  padding: 20px 30px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  transition: all .5s;</span><br><span class="line"></span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    transform: translate3d(0, -3px, 0);</span><br><span class="line">    box-shadow: 0 3px 8px rgb(0 0 0 / 20%);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  img &#123;</span><br><span class="line">    width: 160px;</span><br><span class="line">    height: 160px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  p &#123;</span><br><span class="line">    padding-top: 10px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .name &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .desc &#123;</span><br><span class="line">    color: #999;</span><br><span class="line">    height: 29px;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .price &#123;</span><br><span class="line">    color: $priceColor;</span><br><span class="line">    font-size: 20px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-使用组件">2. 使用组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;ul class=&quot;goods-list&quot;&gt;</span><br><span class="line">  &lt;li v-for=&quot;goods in cate.goods&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">    &lt;GoodsItem :goods=&quot;goods&quot; /&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/03/28/67e65a29d4250.png" alt="image-20250328145159426.png"></p>]]></content>
    
    
    <summary type="html">Vue3项目</summary>
    
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Layout页</title>
    <link href="https://yjyrichard.github.io/posts/3df7151f.html"/>
    <id>https://yjyrichard.github.io/posts/3df7151f.html</id>
    <published>2025-04-15T15:53:56.860Z</published>
    <updated>2025-04-15T15:10:42.654Z</updated>
    
    <content type="html"><![CDATA[<h1>组件结构快速搭建</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6594a8ad98.png" alt="image-20250327205426257.png"></p><p>LayoutNav.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;nav class=&quot;app-topnav&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;ul&gt;</span><br><span class="line">        &lt;template v-if=&quot;true&quot;&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&quot;&gt;&lt;i class=&quot;iconfont icon-user&quot;&gt;&lt;/i&gt;周杰伦&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;</span><br><span class="line">            &lt;el-popconfirm title=&quot;确认退出吗?&quot; confirm-button-text=&quot;确认&quot; cancel-button-text=&quot;取消&quot;&gt;</span><br><span class="line">              &lt;template #reference&gt;</span><br><span class="line">                &lt;a href=&quot;javascript:;&quot;&gt;退出登录&lt;/a&gt;</span><br><span class="line">              &lt;/template&gt;</span><br><span class="line">            &lt;/el-popconfirm&gt;</span><br><span class="line">          &lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;我的订单&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;会员中心&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">        &lt;template v-else&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;请先登录&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;帮助中心&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">          &lt;li&gt;&lt;a href=&quot;javascript:;&quot;&gt;关于我们&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">        &lt;/template&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/nav&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line">.app-topnav &#123;</span><br><span class="line">  background: #333;</span><br><span class="line">  ul &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 53px;</span><br><span class="line">    justify-content: flex-end;</span><br><span class="line">    align-items: center;</span><br><span class="line">    li &#123;</span><br><span class="line">      a &#123;</span><br><span class="line">        padding: 0 15px;</span><br><span class="line">        color: #cdcdcd;</span><br><span class="line">        line-height: 1;</span><br><span class="line">        display: inline-block;</span><br><span class="line"></span><br><span class="line">        i &#123;</span><br><span class="line">          font-size: 14px;</span><br><span class="line">          margin-right: 2px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          color: $xtxColor;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      ~li &#123;</span><br><span class="line">        a &#123;</span><br><span class="line">          border-left: 2px solid #666;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>LayoutHeader.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header class=&#x27;app-header&#x27;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;logo&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;小兔鲜&lt;/RouterLink&gt;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      &lt;ul class=&quot;app-header-nav&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;home&quot;&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt; &lt;RouterLink to=&quot;/&quot;&gt;居家&lt;/RouterLink&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt; &lt;RouterLink to=&quot;/&quot;&gt;美食&lt;/RouterLink&gt; &lt;/li&gt;</span><br><span class="line">        &lt;li&gt; &lt;RouterLink to=&quot;/&quot;&gt;服饰&lt;/RouterLink&gt; &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div class=&quot;search&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont icon-search&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;搜一搜&quot;&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">      &lt;!-- 头部购物车 --&gt;</span><br><span class="line">      </span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.app-header &#123;</span><br><span class="line">  background: #fff;</span><br><span class="line"></span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .logo &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">      display: block;</span><br><span class="line">      height: 132px;</span><br><span class="line">      width: 100%;</span><br><span class="line">      text-indent: -9999px;</span><br><span class="line">      background: url(&#x27;@/assets/images/logo.png&#x27;) no-repeat center 18px / contain;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .app-header-nav &#123;</span><br><span class="line">    width: 820px;</span><br><span class="line">    display: flex;</span><br><span class="line">    padding-left: 40px;</span><br><span class="line">    position: relative;</span><br><span class="line">    z-index: 998;</span><br><span class="line">  </span><br><span class="line">    li &#123;</span><br><span class="line">      margin-right: 40px;</span><br><span class="line">      width: 38px;</span><br><span class="line">      text-align: center;</span><br><span class="line">  </span><br><span class="line">      a &#123;</span><br><span class="line">        font-size: 16px;</span><br><span class="line">        line-height: 32px;</span><br><span class="line">        height: 32px;</span><br><span class="line">        display: inline-block;</span><br><span class="line">  </span><br><span class="line">        &amp;:hover &#123;</span><br><span class="line">          color: $xtxColor;</span><br><span class="line">          border-bottom: 1px solid $xtxColor;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  </span><br><span class="line">      .active &#123;</span><br><span class="line">        color: $xtxColor;</span><br><span class="line">        border-bottom: 1px solid $xtxColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .search &#123;</span><br><span class="line">    width: 170px;</span><br><span class="line">    height: 32px;</span><br><span class="line">    position: relative;</span><br><span class="line">    border-bottom: 1px solid #e7e7e7;</span><br><span class="line">    line-height: 32px;</span><br><span class="line"></span><br><span class="line">    .icon-search &#123;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">      margin-left: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    input &#123;</span><br><span class="line">      width: 140px;</span><br><span class="line">      padding-left: 5px;</span><br><span class="line">      color: #666;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .cart &#123;</span><br><span class="line">    width: 50px;</span><br><span class="line"></span><br><span class="line">    .curr &#123;</span><br><span class="line">      height: 32px;</span><br><span class="line">      line-height: 32px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      position: relative;</span><br><span class="line">      display: block;</span><br><span class="line"></span><br><span class="line">      .icon-cart &#123;</span><br><span class="line">        font-size: 22px;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      em &#123;</span><br><span class="line">        font-style: normal;</span><br><span class="line">        position: absolute;</span><br><span class="line">        right: 0;</span><br><span class="line">        top: 0;</span><br><span class="line">        padding: 1px 6px;</span><br><span class="line">        line-height: 1;</span><br><span class="line">        background: $helpColor;</span><br><span class="line">        color: #fff;</span><br><span class="line">        font-size: 12px;</span><br><span class="line">        border-radius: 10px;</span><br><span class="line">        font-family: Arial;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>LayoutFooter.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;footer class=&quot;app_footer&quot;&gt;</span><br><span class="line">    &lt;!-- 联系我们 --&gt;</span><br><span class="line">    &lt;div class=&quot;contact&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;dl&gt;</span><br><span class="line">          &lt;dt&gt;客户服务&lt;/dt&gt;</span><br><span class="line">          &lt;dd&gt;&lt;i class=&quot;iconfont icon-kefu&quot;&gt;&lt;/i&gt; 在线客服&lt;/dd&gt;</span><br><span class="line">          &lt;dd&gt;&lt;i class=&quot;iconfont icon-question&quot;&gt;&lt;/i&gt; 问题反馈&lt;/dd&gt;</span><br><span class="line">        &lt;/dl&gt;</span><br><span class="line">        &lt;dl&gt;</span><br><span class="line">          &lt;dt&gt;关注我们&lt;/dt&gt;</span><br><span class="line">          &lt;dd&gt;&lt;i class=&quot;iconfont icon-weixin&quot;&gt;&lt;/i&gt; 公众号&lt;/dd&gt;</span><br><span class="line">          &lt;dd&gt;&lt;i class=&quot;iconfont icon-weibo&quot;&gt;&lt;/i&gt; 微博&lt;/dd&gt;</span><br><span class="line">        &lt;/dl&gt;</span><br><span class="line">        &lt;dl&gt;</span><br><span class="line">          &lt;dt&gt;下载APP&lt;/dt&gt;</span><br><span class="line">          &lt;dd class=&quot;qrcode&quot;&gt;&lt;img src=&quot;@/assets/images/qrcode.jpg&quot; /&gt;&lt;/dd&gt;</span><br><span class="line">          &lt;dd class=&quot;download&quot;&gt;</span><br><span class="line">            &lt;span&gt;扫描二维码&lt;/span&gt;</span><br><span class="line">            &lt;span&gt;立马下载APP&lt;/span&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;下载页面&lt;/a&gt;</span><br><span class="line">          &lt;/dd&gt;</span><br><span class="line">        &lt;/dl&gt;</span><br><span class="line">        &lt;dl&gt;</span><br><span class="line">          &lt;dt&gt;服务热线&lt;/dt&gt;</span><br><span class="line">          &lt;dd class=&quot;hotline&quot;&gt;400-0000-000 &lt;small&gt;周一至周日 8:00-18:00&lt;/small&gt;&lt;/dd&gt;</span><br><span class="line">        &lt;/dl&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;!-- 其它 --&gt;</span><br><span class="line">    &lt;div class=&quot;extra&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;slogan&quot;&gt;</span><br><span class="line">          &lt;a href=&quot;javascript:;&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-footer01&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span&gt;价格亲民&lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &lt;a href=&quot;javascript:;&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-footer02&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span&gt;物流快捷&lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">          &lt;a href=&quot;javascript:;&quot;&gt;</span><br><span class="line">            &lt;i class=&quot;iconfont icon-footer03&quot;&gt;&lt;/i&gt;</span><br><span class="line">            &lt;span&gt;品质新鲜&lt;/span&gt;</span><br><span class="line">          &lt;/a&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">        &lt;!-- 版权信息 --&gt;</span><br><span class="line">        &lt;div class=&quot;copyright&quot;&gt;</span><br><span class="line">          &lt;p&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;关于我们&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;帮助中心&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;售后服务&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;配送与验收&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;商务合作&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;搜索推荐&lt;/a&gt;</span><br><span class="line">            &lt;a href=&quot;javascript:;&quot;&gt;友情链接&lt;/a&gt;</span><br><span class="line">          &lt;/p&gt;</span><br><span class="line">          &lt;p&gt;CopyRight © 小兔鲜儿&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/footer&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.app_footer &#123;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  background-color: #f5f5f5;</span><br><span class="line">  padding-top: 20px;</span><br><span class="line"></span><br><span class="line">  .contact &#123;</span><br><span class="line">    background: #fff;</span><br><span class="line"></span><br><span class="line">    .container &#123;</span><br><span class="line">      padding: 60px 0 40px 25px;</span><br><span class="line">      display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dl &#123;</span><br><span class="line">      height: 190px;</span><br><span class="line">      text-align: center;</span><br><span class="line">      padding: 0 72px;</span><br><span class="line">      border-right: 1px solid #f2f2f2;</span><br><span class="line">      color: #999;</span><br><span class="line"></span><br><span class="line">      &amp;:first-child &#123;</span><br><span class="line">        padding-left: 0;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:last-child &#123;</span><br><span class="line">        border-right: none;</span><br><span class="line">        padding-right: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dt &#123;</span><br><span class="line">      line-height: 1;</span><br><span class="line">      font-size: 18px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dd &#123;</span><br><span class="line">      margin: 36px 12px 0 0;</span><br><span class="line">      float: left;</span><br><span class="line">      width: 92px;</span><br><span class="line">      height: 92px;</span><br><span class="line">      padding-top: 10px;</span><br><span class="line">      border: 1px solid #ededed;</span><br><span class="line"></span><br><span class="line">      .iconfont &#123;</span><br><span class="line">        font-size: 36px;</span><br><span class="line">        display: block;</span><br><span class="line">        color: #666;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        .iconfont &#123;</span><br><span class="line">          color: $xtxColor;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      &amp;:last-child &#123;</span><br><span class="line">        margin-right: 0;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .qrcode &#123;</span><br><span class="line">      width: 92px;</span><br><span class="line">      height: 92px;</span><br><span class="line">      padding: 7px;</span><br><span class="line">      border: 1px solid #ededed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .download &#123;</span><br><span class="line">      padding-top: 5px;</span><br><span class="line">      font-size: 14px;</span><br><span class="line">      width: auto;</span><br><span class="line">      height: auto;</span><br><span class="line">      border: none;</span><br><span class="line"></span><br><span class="line">      span &#123;</span><br><span class="line">        display: block;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      a &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        line-height: 1;</span><br><span class="line">        padding: 10px 25px;</span><br><span class="line">        margin-top: 5px;</span><br><span class="line">        color: #fff;</span><br><span class="line">        border-radius: 2px;</span><br><span class="line">        background-color: $xtxColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .hotline &#123;</span><br><span class="line">      padding-top: 20px;</span><br><span class="line">      font-size: 22px;</span><br><span class="line">      color: #666;</span><br><span class="line">      width: auto;</span><br><span class="line">      height: auto;</span><br><span class="line">      border: none;</span><br><span class="line"></span><br><span class="line">      small &#123;</span><br><span class="line">        display: block;</span><br><span class="line">        font-size: 15px;</span><br><span class="line">        color: #999;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .extra &#123;</span><br><span class="line">    background-color: #333;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .slogan &#123;</span><br><span class="line">    height: 178px;</span><br><span class="line">    line-height: 58px;</span><br><span class="line">    padding: 60px 100px;</span><br><span class="line">    border-bottom: 1px solid #434343;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: space-between;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">      height: 58px;</span><br><span class="line">      line-height: 58px;</span><br><span class="line">      color: #fff;</span><br><span class="line">      font-size: 28px;</span><br><span class="line"></span><br><span class="line">      i &#123;</span><br><span class="line">        font-size: 50px;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        margin-right: 10px;</span><br><span class="line">        font-weight: 100;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      span &#123;</span><br><span class="line">        vertical-align: middle;</span><br><span class="line">        text-shadow: 0 0 1px #333;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .copyright &#123;</span><br><span class="line">    height: 170px;</span><br><span class="line">    padding-top: 40px;</span><br><span class="line">    text-align: center;</span><br><span class="line">    color: #999;</span><br><span class="line">    font-size: 15px;</span><br><span class="line"></span><br><span class="line">    p &#123;</span><br><span class="line">      line-height: 1;</span><br><span class="line">      margin-bottom: 20px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">      color: #999;</span><br><span class="line">      line-height: 1;</span><br><span class="line">      padding: 0 10px;</span><br><span class="line">      border-right: 1px solid #999;</span><br><span class="line"></span><br><span class="line">      &amp;:last-child &#123;</span><br><span class="line">        border-right: none;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>Layout下的index.vue 也就是首页</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import LayoutNav from &#x27;./components/LayoutNav.vue&#x27;</span><br><span class="line">import LayoutHeader from &#x27;./components/LayoutHeader.vue&#x27;</span><br><span class="line">import LayoutFooter from &#x27;./components/LayoutFooter.vue&#x27;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;LayoutNav /&gt;</span><br><span class="line">  &lt;LayoutHeader /&gt;</span><br><span class="line">  &lt;RouterView /&gt;</span><br><span class="line">  &lt;LayoutFooter /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/03/28/67e6594a7fd79.png" alt="image-20250327211434833.png"></p><h1>字体图标渲染</h1><p>如果不这样做 前面引入的首页会有很多空白</p><blockquote><p>字体图标采用的是阿里的字体图标库，样式文件已经准备好，在 <code>index.html</code>文件中引入即可</p><p>font-class 方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;//at.alicdn.com/t/font_2143783_iq6z4ey5vu.css&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>一级导航渲染</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1677638045286-b328a3ce-8241-4ce7-9db3-e9c872da5b73.png#averageHue=%23f9f6f3&amp;clientId=u4a91ceff-e2c9-4&amp;from=paste&amp;height=77&amp;id=u7c505a73&amp;name=image.png&amp;originHeight=103&amp;originWidth=1253&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=22333&amp;status=done&amp;style=none&amp;taskId=u1a062488-8d43-4b66-a7e9-591b938bde7&amp;title=&amp;width=940" alt="image.png"><br><strong>实现步骤</strong></p><ol><li>封装接口函数</li><li>调用接口函数</li><li>v-for渲染模版</li></ol><p><strong>代码落地</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> httpInstance <span class="keyword">from</span> <span class="string">&#x27;@/utils/http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCategoryAPI</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">httpInstance</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;/home/category/head&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; getCategoryAPI &#125; from &#x27;@/apis/layout&#x27;</span><br><span class="line">  import &#123; onMounted, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  const categoryList = ref([])</span><br><span class="line">  const getCategory = async () =&gt; &#123;</span><br><span class="line">    const res = await getCategoryAPI()</span><br><span class="line">    categoryList.value = res.result</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  onMounted(() =&gt; getCategory())</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;header class=&#x27;app-header&#x27;&gt;</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;h1 class=&quot;logo&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;小兔鲜&lt;/RouterLink&gt;</span><br><span class="line">      &lt;/h1&gt;</span><br><span class="line">      &lt;ul class=&quot;app-header-nav&quot;&gt;</span><br><span class="line">        &lt;li class=&quot;home&quot; v-for=&quot;item in categoryList&quot; :key=&quot;item.id&quot;&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line">      &lt;div class=&quot;search&quot;&gt;</span><br><span class="line">        &lt;i class=&quot;iconfont icon-search&quot;&gt;&lt;/i&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; placeholder=&quot;搜一搜&quot;&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">      &lt;!-- 头部购物车 --&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/header&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>吸顶导航交互实现</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6594ad3c81.png" alt="image-20250327213309861.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e6594a94402.png" alt="image-20250327213328589.png"></p><h2 id="1-准备组件静态结构">1. 准备组件静态结构</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-header-sticky&quot;&gt;  //这里添加一个show 类名即可显示</span><br><span class="line">    &lt;div class=&quot;container&quot;&gt;</span><br><span class="line">      &lt;RouterLink class=&quot;logo&quot; to=&quot;/&quot; /&gt;</span><br><span class="line">      &lt;!-- 导航区域 --&gt;</span><br><span class="line">      &lt;ul class=&quot;app-header-nav &quot;&gt;</span><br><span class="line">        &lt;li class=&quot;home&quot;&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;首页&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;居家&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;美食&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;服饰&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;母婴&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;个护&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;严选&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;数码&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;运动&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">        &lt;li&gt;</span><br><span class="line">          &lt;RouterLink to=&quot;/&quot;&gt;杂项&lt;/RouterLink&gt;</span><br><span class="line">        &lt;/li&gt;</span><br><span class="line">      &lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">      &lt;div class=&quot;right&quot;&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;品牌&lt;/RouterLink&gt;</span><br><span class="line">        &lt;RouterLink to=&quot;/&quot;&gt;专题&lt;/RouterLink&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;style scoped lang=&#x27;scss&#x27;&gt;</span><br><span class="line">.app-header-sticky &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 80px;</span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  top: 0;</span><br><span class="line">  z-index: 999;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">  border-bottom: 1px solid #e4e4e4;</span><br><span class="line">  // 此处为关键样式!!!</span><br><span class="line">  // 状态一：往上平移自身高度 + 完全透明</span><br><span class="line">  transform: translateY(-100%);</span><br><span class="line">  opacity: 0;</span><br><span class="line"></span><br><span class="line">  // 状态二：移除平移 + 完全不透明</span><br><span class="line">  &amp;.show &#123;</span><br><span class="line">    transition: all 0.3s linear;</span><br><span class="line">    transform: none;</span><br><span class="line">    opacity: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .container &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    align-items: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .logo &#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 80px;</span><br><span class="line">    background: url(&quot;@/assets/images/logo.png&quot;) no-repeat right 2px;</span><br><span class="line">    background-size: 160px auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .right &#123;</span><br><span class="line">    width: 220px;</span><br><span class="line">    display: flex;</span><br><span class="line">    text-align: center;</span><br><span class="line">    padding-left: 40px;</span><br><span class="line">    border-left: 2px solid $xtxColor;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">      width: 38px;</span><br><span class="line">      margin-right: 40px;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">      line-height: 1;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        color: $xtxColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.app-header-nav &#123;</span><br><span class="line">  width: 820px;</span><br><span class="line">  display: flex;</span><br><span class="line">  padding-left: 40px;</span><br><span class="line">  position: relative;</span><br><span class="line">  z-index: 998;</span><br><span class="line"></span><br><span class="line">  li &#123;</span><br><span class="line">    margin-right: 40px;</span><br><span class="line">    width: 38px;</span><br><span class="line">    text-align: center;</span><br><span class="line"></span><br><span class="line">    a &#123;</span><br><span class="line">      font-size: 16px;</span><br><span class="line">      line-height: 32px;</span><br><span class="line">      height: 32px;</span><br><span class="line">      display: inline-block;</span><br><span class="line"></span><br><span class="line">      &amp;:hover &#123;</span><br><span class="line">        color: $xtxColor;</span><br><span class="line">        border-bottom: 1px solid $xtxColor;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .active &#123;</span><br><span class="line">      color: $xtxColor;</span><br><span class="line">      border-bottom: 1px solid $xtxColor;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="2-渲染基础数据">2. 渲染基础数据</h2><h2 id="3-实现吸顶交互">3. 实现吸顶交互</h2><blockquote><p>核心逻辑：根据滚动距离判断当前show类名是否显示，大于78显示，小于78，不显示</p><p>vueUse解决获取滚动距离的问题</p><p>下载VueUse      npm i @vueuse/core</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import LayoutHeaderUl from &#x27;./LayoutHeaderUl.vue&#x27;</span><br><span class="line">// vueUse</span><br><span class="line">import &#123; useScroll &#125; from &#x27;@vueuse/core&#x27;</span><br><span class="line">const &#123; y &#125; = useScroll(window)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app-header-sticky&quot; :class=&quot;&#123; show: y &gt; 78 &#125;&quot;&gt;</span><br><span class="line">    &lt;!-- 省略部分代码 --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>Pinia优化重复请求</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6594a94340.png" alt="image-20250327214408984.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e6594b83276.png" alt="image-20250327214648126.png"></p><p>新增一个store category.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getCategoryAPI &#125; <span class="keyword">from</span> <span class="string">&#x27;@/apis/layout&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCategoryStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;category&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// 导航列表的数据管理</span></span><br><span class="line">  <span class="comment">// state 导航列表数据</span></span><br><span class="line">  <span class="keyword">const</span> categoryList = <span class="title function_">ref</span>([])</span><br><span class="line"></span><br><span class="line">  <span class="comment">// action 获取导航数据的方法</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getCategory</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">getCategoryAPI</span>()</span><br><span class="line">    categoryList.<span class="property">value</span> = res.<span class="property">result</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    categoryList,</span><br><span class="line">    getCategory</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>接着在 父组件中 ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutNav</span> <span class="keyword">from</span> <span class="string">&#x27;./components/LayoutNav.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutHeader</span> <span class="keyword">from</span> <span class="string">&#x27;./components/LayoutHeader.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutFooter</span> <span class="keyword">from</span> <span class="string">&#x27;./components/LayoutFooter.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">LayoutFixed</span> <span class="keyword">from</span> <span class="string">&#x27;./components/LayoutFixed.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发获取导航列表的action</span></span><br><span class="line"><span class="comment">// pinia 里面的action需要被调用 所以在父组件index中调用 这样只需要发送一次请求</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCategoryStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/category&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> categoryStore = <span class="title function_">useCategoryStore</span>()</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> categoryStore.<span class="title function_">getCategory</span>())</span><br><span class="line"><span class="comment">// 接着去两个子组件中调用数据</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">LayoutFixed</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">LayoutNav</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">LayoutHeader</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">RouterView</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">LayoutFooter</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>然后分别在两个子组件中引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用pinia中的数据</span></span><br><span class="line"><span class="keyword">import</span> &#123; useCategoryStore &#125; <span class="keyword">from</span> <span class="string">&#x27;@/stores/category&#x27;</span></span><br><span class="line"><span class="keyword">const</span> categoryStore = <span class="title function_">useCategoryStore</span>()</span><br><span class="line"></span><br><span class="line">然后再template中的categoryList 遍历哪个地方前面加上categoryStore.</span><br></pre></td></tr></table></figure><p>这样就实现发送一次请求了！</p>]]></content>
    
    
    <summary type="html">Vue3项目</summary>
    
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>项目起步</title>
    <link href="https://yjyrichard.github.io/posts/653f87a2.html"/>
    <id>https://yjyrichard.github.io/posts/653f87a2.html</id>
    <published>2025-04-15T15:53:56.857Z</published>
    <updated>2025-04-15T15:10:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1>创建项目并整理目录</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2022/png/274425/1670247123883-f43f81f8-7600-4fd7-aa82-2751d9032a54.png#averageHue=%23212120&amp;clientId=ufebee43b-b163-4&amp;from=paste&amp;height=494&amp;id=u1b534575&amp;name=image.png&amp;originHeight=659&amp;originWidth=1280&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=3380277&amp;status=done&amp;style=none&amp;taskId=ud39028ba-b1d4-47ed-adf7-79865628edd&amp;title=&amp;width=960" alt="image.png"></p><p><img src="https://img.picui.cn/free/2025/03/28/67e6585d17cba.png" alt="image-20250327193359034.png"></p><p>git 管理项目 我放到gitee进行管理</p><p><strong>什么是别名路径联想提示</strong></p><p>在编写代码的过程中，一旦输入 @/，VSCode会立刻联想出src下所有子目录和文件，统一文件路径访问不容易出错</p><p>配置如下：</p><h1>jsconfig.json配置别名路径</h1><blockquote><p>配置别名路径可以在写代码时联想提示路径</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;baseUrl&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;./&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;paths&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;@/*&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span><span class="string">&quot;src/*&quot;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://img.picui.cn/free/2025/03/28/67e6585d26d65.png" alt="image-20250327194159871.png"></p><h1>elementPlus引入</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6585d26415.png" alt="image-20250327194257492.png"></p><p>看文档如何 按需导入</p><h2 id="1-安装elementPlus和自动导入插件">1. 安装elementPlus和自动导入插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus --save</span><br><span class="line">npm install -D unplugin-vue-components unplugin-auto-import  //D : 在开发环境中引入</span><br></pre></td></tr></table></figure><h2 id="2-配置自动按需导入">2. 配置自动按需导入</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入插件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 配置插件</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="3-测试组件">3. 测试组件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;el-button type=&quot;primary&quot;&gt;i am button&lt;/el-button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>定制elementPlus主题</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6585d3dcbe.png" alt="image-20250327195355614.png"></p><h2 id="1-安装sass">1. 安装sass</h2><blockquote><p>基于vite的项目默认不支持css预处理器，需要开发者单独安装</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i sass -D</span><br></pre></td></tr></table></figure><h2 id="2-准备定制化的样式文件">2. 准备定制化的样式文件</h2><p>从elementplus 下载</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 只需要重写你需要的即可 */</span></span><br><span class="line">@forward <span class="string">&#x27;element-plus/theme-chalk/src/common/var.scss&#x27;</span> <span class="title function_">with</span> (</span><br><span class="line">  <span class="attr">$colors</span>: (</span><br><span class="line">    <span class="string">&#x27;primary&#x27;</span>: (</span><br><span class="line">      <span class="comment">// 主色</span></span><br><span class="line">      <span class="string">&#x27;base&#x27;</span>: #27ba9b,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;success&#x27;</span>: (</span><br><span class="line">      <span class="comment">// 成功色</span></span><br><span class="line">      <span class="string">&#x27;base&#x27;</span>: #1dc779,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;warning&#x27;</span>: (</span><br><span class="line">      <span class="comment">// 警告色</span></span><br><span class="line">      <span class="string">&#x27;base&#x27;</span>: #ffb302,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;danger&#x27;</span>: (</span><br><span class="line">      <span class="comment">// 危险色</span></span><br><span class="line">      <span class="string">&#x27;base&#x27;</span>: #e26237,</span><br><span class="line">    ),</span><br><span class="line">    <span class="string">&#x27;error&#x27;</span>: (</span><br><span class="line">      <span class="comment">// 错误色</span></span><br><span class="line">      <span class="string">&#x27;base&#x27;</span>: #cf4444,</span><br><span class="line">    ),</span><br><span class="line">  )</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="3-自动导入配置">3. 自动导入配置</h2><blockquote><p>这里自动导入需要深入到elementPlus的组件中，按照官方的配置文档来</p><ol><li>自动导入定制化样式文件进行样式覆盖</li><li>按需定制主题配置 （需要安装 unplugin-element-plus）</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; fileURLToPath, <span class="variable constant_">URL</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;node:url&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vueDevTools <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-devtools&#x27;</span></span><br><span class="line"><span class="comment">// 用于 增强 Vue.js 应用开发体验 的 Vite 插件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// elementPlus按需导入</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ElementPlusResolver</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vite.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title function_">vue</span>(),</span><br><span class="line">    <span class="title function_">vueDevTools</span>(),</span><br><span class="line">    <span class="comment">// 配置插件</span></span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">resolvers</span>: [<span class="title class_">ElementPlusResolver</span>()],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="title class_">Components</span>(&#123;</span><br><span class="line"></span><br><span class="line">      <span class="attr">resolvers</span>: [</span><br><span class="line">        <span class="comment">// 1. 配置elementPlus采用sass样式配色系统</span></span><br><span class="line">        <span class="title class_">ElementPlusResolver</span>(&#123; <span class="attr">importStyle</span>: <span class="string">&quot;sass&quot;</span> &#125;)</span><br><span class="line">      ],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">resolve</span>: &#123;</span><br><span class="line">    <span class="comment">// 实际的路径转换 @ -&gt; src </span></span><br><span class="line">    <span class="attr">alias</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;@&#x27;</span>: <span class="title function_">fileURLToPath</span>(<span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&#x27;./src&#x27;</span>, <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">url</span>))</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">css</span>: &#123;</span><br><span class="line">    <span class="attr">preprocessorOptions</span>: &#123;</span><br><span class="line">      <span class="attr">scss</span>: &#123;</span><br><span class="line">        <span class="comment">// 自动导入定制化样式文件进行样式覆盖</span></span><br><span class="line">        <span class="attr">additionalData</span>: <span class="string">`</span></span><br><span class="line"><span class="string">          @use &quot;@/styles/element/index.scss&quot; as *;</span></span><br><span class="line"><span class="string">        `</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>axios安装并简单封装</h1><h2 id="1-安装axios">1. 安装axios</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i axios</span><br></pre></td></tr></table></figure><h2 id="2-基础配置">2. 基础配置</h2><p><img src="https://img.picui.cn/free/2025/03/28/67e6585d3dcbe.png" alt="image-20250327200616856.png"></p><blockquote><p>官方文档地址：<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a><br>基础配置通常包括：</p><ol><li>实例化 - baseURL + timeout</li><li>拦截器 - 携带token 401拦截等</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> http = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;https://pcapi-xiaotuxian-front-devtest.itheima.net/home/category/head&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios请求拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> config</span><br><span class="line">&#125;, <span class="function"><span class="params">e</span> =&gt;</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(e))</span><br><span class="line"></span><br><span class="line"><span class="comment">// axios响应式拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">data</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(e)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> http</span><br></pre></td></tr></table></figure><h2 id="3-封装请求函数并测试">3. 封装请求函数并测试</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> http <span class="keyword">from</span> <span class="string">&#x27;@/utils/http&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getCategoryAPI</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">http</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;home/category/head&#x27;</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果不同的业务模块需要的接口基地址不同，该怎么做？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="variable">http1</span> <span class="operator">=</span> axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&#x27;https://pcap2i-xiaotuxian-front-devtest.itheima.net/home/category/head&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="type">const</span> <span class="variable">http2</span> <span class="operator">=</span> axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&#x27;https://pcapi-xiaotuxian-front-devtest.itheima.net/home/category/head&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1>路由整体设计</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6585e033ab.png" alt="image-20250327202153109.png"></p><p>路由设计原则：找页面的切换方式，如果是整体切换，则为一级路由，如果是在一级路由的内部进行的内容切换，则为二级路由</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  我是登录页</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  我是首页</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  我是home</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  我是分类</span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// createRouter：创建router实例对象</span></span><br><span class="line"><span class="comment">// createWebHistory：创建history模式的路由</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter, createWebHistory &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Login/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Layout/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Home/index.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Category</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Category/index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">  <span class="attr">history</span>: <span class="title function_">createWebHistory</span>(<span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">env</span>.<span class="property">BASE_URL</span>),</span><br><span class="line">  <span class="comment">// path和component对应关系的位置</span></span><br><span class="line">  <span class="attr">routes</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&#x27;category&#x27;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="title class_">Category</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure><h1>静态资源引入和Error Lens安装</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6585e15b6a.png" alt="image-20250327203806167.png"></p><h2 id="1-静态资源引入">1. 静态资源引入</h2><ol><li>图片资源 - 把 images 文件夹放到 assets 目录下</li><li>样式资源 - 把 common.scss 文件放到 styles 目录下</li></ol><h2 id="2-Error-Lens插件安装">2. Error Lens插件安装</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1677637778086-7314f9de-8130-4388-9fc3-0cf4c59b8454.png#averageHue=%232a2e36&amp;clientId=u68bde7ec-09c8-4&amp;from=paste&amp;height=196&amp;id=udc027a23&amp;name=image.png&amp;originHeight=392&amp;originWidth=1528&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=87943&amp;status=done&amp;style=none&amp;taskId=ue37b0611-a082-4595-9dde-66e51632ef7&amp;title=&amp;width=764" alt="image.png"></p><h1>scss变量自动导入</h1><p><img src="https://img.picui.cn/free/2025/03/28/67e6585e2d0a9.png" alt="image-20250327204244747.png"></p><p>1.新增一个var.scss 文件 存入色值变量</p><p>2.通过vite.config.js 配置自动导入文件</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$xtxColor: <span class="number">#27ba9b</span>;</span><br><span class="line">$helpColor: <span class="number">#e26237</span>;</span><br><span class="line">$sucColor: <span class="number">#1dc779</span>;</span><br><span class="line">$warnColor: <span class="number">#ffb302</span>;</span><br><span class="line">$priceColor: <span class="number">#cf4444</span>;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">css<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    preprocessorOptions<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      scss<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="comment">// 自动导入scss文件</span></span><br><span class="line">        additionalData<span class="punctuation">:</span> `</span><br><span class="line">          @use <span class="string">&quot;@/styles/element/index.scss&quot;</span> as *;</span><br><span class="line">          @use <span class="string">&quot;@/styles/var.scss&quot;</span> as *;</span><br><span class="line">        `<span class="punctuation">,</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>测试</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;style scoped lang=&quot;scss&quot;&gt;</span><br><span class="line"><span class="selector-class">.test</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: $priceColor;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue3项目</summary>
    
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Pinia入门</title>
    <link href="https://yjyrichard.github.io/posts/4d0b6549.html"/>
    <id>https://yjyrichard.github.io/posts/4d0b6549.html</id>
    <published>2025-04-15T15:53:56.854Z</published>
    <updated>2025-04-15T15:10:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1>什么是pinia</h1><p>Pinia 是 Vue 的专属状态管理库，可以实现跨组件或页面共享状态，是 vuex 状态管理工具的替代品，和 Vuex相比，具备以下优势</p><ol><li>提供更加简单的API （去掉了 mutation ）</li><li>提供符合组合式API风格的API （和 Vue3 新语法统一）</li><li>去掉了modules的概念，每一个store都是一个独立的模块</li><li>搭配 TypeScript 一起使用提供可靠的类型推断</li></ol><p>通俗理解： 我们可以认为Pinia 是一个共享储物柜，专门帮你解决Vue项目中组件之间 数据相互拿不到或数据不同步的烦恼</p><h3 id="举个栗子🌰："><strong>举个栗子🌰：</strong></h3><ol><li><strong>场景</strong>： 你做了一个电商网站，用户头像和昵称（比如“小明”）需要在导航栏、个人主页、侧边栏等多个地方显示。如果用传统方法，每个组件都要单独传值，麻烦得要死！</li><li><strong>用 Pinia 后</strong>：<ul><li>建一个叫 <code>userStore</code> 的储物柜，把用户数据（小明的信息）存进去。</li><li>导航栏、个人主页、侧边栏这些组件 <strong>直接去储物柜里拿数据</strong>，不用层层传递。</li><li>如果小明修改了昵称，储物柜里的数据自动更新，所有用到的地方立刻同步！</li></ul></li></ol><h3 id="通俗总结它的用处："><strong>通俗总结它的用处：</strong></h3><ul><li><strong>共享数据</strong>：像购物车、用户信息这类多个页面都要用的数据，不用再靠组件之间“互相传纸条”。</li><li><strong>自动同步</strong>：数据一变，所有用到的地方自动更新（比如购物车数量实时变化）。</li><li><strong>代码清爽</strong>：把零散在各处的数据集中放到“储物柜”，好维护、好找bug。</li></ul><h3 id="再举个生活化例子："><strong>再举个生活化例子：</strong></h3><p>想象全家共用一台智能冰箱（Pinia）：</p><ul><li>妈妈买了苹果（修改数据），所有人打开冰箱都能看到（自动同步）。</li><li>不用挨个打电话通知：“冰箱有苹果啦！”（省掉 props 传值）。</li><li>爸爸想吃香蕉，直接往冰箱里加（任何组件都能改数据）。</li></ul><p>这就是 Pinia 的作用——<strong>让数据共享变简单，告别繁琐传值！</strong> 🚀</p><h1>创建空Vue项目并安装Pinia</h1><h3 id="1-创建空Vue项目">1. 创建空Vue项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><h3 id="2-安装Pinia并注册">2. 安装Pinia并注册</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i pinia</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">// 以插件的形式注册</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">createPinia</span>())</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h1>实现counter</h1><blockquote><p>核心步骤： 官方文档 stores目录下新建一个counter.js</p><ol><li>定义store</li><li>组件使用store</li></ol></blockquote><p>1- 定义store</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 定义数据 （state）</span></span><br><span class="line">  <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 定义修改数据的方法 （action 同步+异步）</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">increment</span> = (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    count.<span class="property">value</span>++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 以对象形式返回供组件使用</span></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    increment</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2- 组件使用store</p><p>App.vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入use方法</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27;</span><br><span class="line">  // 2. 执行方法得到store store里有数据和方法</span><br><span class="line">  const counterStore = useCounterStore()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;counterStore.increment&quot;&gt;</span><br><span class="line">    &#123;&#123; counterStore.count &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>实现getters</h1><blockquote><p>getters直接使用计算属性computed函数进行模拟即可实现</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 数据（state）</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="comment">// getter (computed)</span></span><br><span class="line"><span class="keyword">const</span> doubleCount = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br></pre></td></tr></table></figure><h1>异步action</h1><blockquote><p>思想：action函数既支持同步也支持异步，和在组件中发送网络请求写法保持一致<br>步骤：</p><ol><li>store中定义action</li><li>组件中触发action</li></ol></blockquote><p>1- store中定义action</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">API_URL</span> = <span class="string">&#x27;http://geek.itheima.net/v1_0/channels&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useCounterStore = <span class="title function_">defineStore</span>(<span class="string">&#x27;counter&#x27;</span>, <span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="comment">// 数据</span></span><br><span class="line">  <span class="keyword">const</span> list = <span class="title function_">ref</span>([])</span><br><span class="line">  <span class="comment">// 异步action</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">loadList</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="variable constant_">API_URL</span>)</span><br><span class="line">    list.<span class="property">value</span> = res.<span class="property">data</span>.<span class="property">data</span>.<span class="property">channels</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    list,</span><br><span class="line">    loadList</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2- 组件中调用action</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27;</span><br><span class="line">  const counterStore = useCounterStore()</span><br><span class="line">  // 调用异步action</span><br><span class="line">  counterStore.loadList()</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;ul&gt;</span><br><span class="line">    &lt;li v-for=&quot;item in counterStore.list&quot; :key=&quot;item.id&quot;&gt;&#123;&#123; item.name &#125;&#125;&lt;/li&gt;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h1>storeToRefs保持响应式解构</h1><blockquote><p>直接基于store进行解构赋值，响应式数据（state和getter）会丢失响应式特性，使用storeToRefs辅助保持响应式</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line">import &#123; useCounterStore &#125; from &#x27;@/stores/counter&#x27;</span><br><span class="line">  const counterStore = useCounterStore()</span><br><span class="line">  // 使用它storeToRefs包裹之后解构保持响应式 store getter</span><br><span class="line">  const &#123; count &#125; = storeToRefs(counterStore)</span><br><span class="line"></span><br><span class="line">  const &#123; increment &#125; = counterStore </span><br><span class="line">  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;increment&quot;&gt;</span><br><span class="line">    &#123;&#123; count &#125;&#125;</span><br><span class="line">  &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue3项目</summary>
    
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>Vue3入门</title>
    <link href="https://yjyrichard.github.io/posts/e930893f.html"/>
    <id>https://yjyrichard.github.io/posts/e930893f.html</id>
    <published>2025-04-15T15:53:56.850Z</published>
    <updated>2025-04-15T15:10:42.650Z</updated>
    
    <content type="html"><![CDATA[<h1>认识Vue3</h1><h2 id="1-Vue3组合式API体验">1. Vue3组合式API体验</h2><blockquote><p>通过 Counter 案例 体验Vue3新引入的组合式API</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;button @click=&quot;addCount&quot;&gt;</span><br><span class="line">        &#123;&#123;count&#125;&#125;</span><br><span class="line">    &lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt; //vue2语法</span><br><span class="line">export default &#123;</span><br><span class="line">  data()&#123;//响应数据</span><br><span class="line">    return &#123;</span><br><span class="line">      count:0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    addCount()&#123;//自增事件</span><br><span class="line">      this.count++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;//vue3版本 </span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line">const count = ref(0)</span><br><span class="line">const addCount = ()=&gt; count.value++</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>特点：</p><ol><li>代码量变少</li><li>分散式维护变成集中式维护</li></ol><h2 id="2-Vue3更多的优势">2. Vue3更多的优势</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678178235504-912ad469-1a9a-469d-a8dc-411a55963329.png#averageHue=%23f4dcdc&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=516&amp;id=u779f92e3&amp;name=image.png&amp;originHeight=1032&amp;originWidth=2372&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=301467&amp;status=done&amp;style=none&amp;taskId=u2dca71ca-84b3-48aa-8f52-f746797fcd1&amp;title=&amp;width=1186" alt="image.png"></p><h1>使用create-vue搭建Vue3项目</h1><h2 id="1-认识create-vue">1. 认识create-vue</h2><blockquote><p>create-vue是Vue官方新的脚手架工具，(之前是webpack)底层切换到了 vite （下一代前端工具链），为开发提供极速响应</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678178479590-ac164009-4a72-4448-85bf-67dc13f3d0c4.png#averageHue=%23feefbe&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=402&amp;id=u05a93b8e&amp;name=image.png&amp;originHeight=804&amp;originWidth=1606&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=221602&amp;status=done&amp;style=none&amp;taskId=uf227924e-280a-4766-add6-d34b9331b0d&amp;title=&amp;width=803" alt="image.png"></p><h2 id="2-使用create-vue创建项目">2. 使用create-vue创建项目</h2><blockquote><p>前置条件 - 已安装16.0或更高版本的Node.js</p></blockquote><p>执行如下命令，这一指令将会安装并执行 create-vue</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm -v <span class="comment"># 查看一下vue的版本</span></span><br><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678178685782-71a3b311-423d-4528-aae9-85e6068db452.png#averageHue=%23333332&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=477&amp;id=u807a99d3&amp;name=image.png&amp;originHeight=954&amp;originWidth=1364&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=488023&amp;status=done&amp;style=none&amp;taskId=u4d75c82e-6b19-48a6-a9df-0ee44d9e92c&amp;title=&amp;width=682" alt="image.png"></p><p>到目录后输入 code ./ 用vscode打开</p><p>启动后的页面也是一个不错的学习资源</p><h1>熟悉项目和关键文件</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678178749511-f4a42cbf-987b-46a7-9a01-9cd4f00a5fcf.png#averageHue=%23f1f1ef&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=541&amp;id=u1ac1e797&amp;name=image.png&amp;originHeight=1082&amp;originWidth=2256&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=595592&amp;status=done&amp;style=none&amp;taskId=u38211dc7-742f-4d49-84f3-39a837eb254&amp;title=&amp;width=1128" alt="image.png"></p><h1>组合式API - setup选项</h1><h2 id="1-setup选项的写法和执行时机">1. setup选项的写法和执行时机</h2><p>写法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate()&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>执行时机</p><blockquote><p>在beforeCreate钩子之前执行</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678179048672-603fdc19-4a41-4542-af55-702776625358.png#averageHue=%23fefefd&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=453&amp;id=uf8697cce&amp;name=image.png&amp;originHeight=906&amp;originWidth=1248&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=182575&amp;status=done&amp;style=none&amp;taskId=u2cd1d681-f573-4456-9ddb-d2ab1f41805&amp;title=&amp;width=624" alt="image.png"></p><h2 id="2-setup中写代码的特点">2. setup中写代码的特点</h2><blockquote><p>在setup函数中写的数据和方法需要在末尾以对象的方式return，才能给模版使用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    setup()&#123;</span><br><span class="line">      const message = &#x27;this is message&#x27;</span><br><span class="line">      const logMessage = ()=&gt;&#123;</span><br><span class="line">        console.log(message)</span><br><span class="line">      &#125;</span><br><span class="line">      // 必须return才可以</span><br><span class="line">      return &#123;</span><br><span class="line">        message,</span><br><span class="line">        logMessage</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-script-setup-语法糖">3. <code>&lt;script setup&gt;</code>语法糖</h2><blockquote><p>script标签添加 setup标记，不需要再写导出语句，默认会添加导出语句</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  const message = &#x27;this is message&#x27;</span><br><span class="line">  const logMessage = ()=&gt;&#123;</span><br><span class="line">    console.log(message)</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>1.setup选项的执行时间？</p><p>beforeCreate钩子之前自动执行</p><p>1.setup写代码的特点是什么？</p><p>定义数据 + 函数 然后以对象方式return</p><p>3.<code>&lt;script setup&gt;</code>解决了是吗问题？</p><p>经过语法糖的封装更简单的使用组合式API</p><p>4.setup中的this还指向组件实例吗？</p><p>指向undefined</p><h1>组合式API - reactive和ref函数</h1><h2 id="1-reactive">1. reactive</h2><blockquote><p>接受对象类型数据的参数传入并返回一个响应式的对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"> // 导入</span><br><span class="line"> import &#123; reactive &#125; from &#x27;vue&#x27;</span><br><span class="line"> // 执行函数 传入一个对象类型的参数 变量接收</span><br><span class="line"> const state = reactive(&#123;</span><br><span class="line">   msg:&#x27;this is msg&#x27;</span><br><span class="line"> &#125;)</span><br><span class="line"> const setSate = ()=&gt;&#123;</span><br><span class="line">   // 修改数据更新视图</span><br><span class="line">   state.msg = &#x27;this is new msg&#x27;</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &#123;&#123; state.msg &#125;&#125;</span><br><span class="line">  &lt;button @click=&quot;setState&quot;&gt;change msg&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="2-ref">2. ref</h2><blockquote><p>接收简单类型或者对象类型的数据传入并返回一个响应式的对象</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"> // 导入</span><br><span class="line"> import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"> // 执行函数 传入参数 变量接收</span><br><span class="line"> const count = ref(0)</span><br><span class="line"> const setCount = ()=&gt;&#123;</span><br><span class="line">   // 修改数据更新视图必须加上.value</span><br><span class="line">   count.value++</span><br><span class="line"> &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;button @click=&quot;setCount&quot;&gt;&#123;&#123;count&#125;&#125;&lt;/button&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><h2 id="3-reactive-对比-ref">3. reactive 对比 ref</h2><ol><li>都是用来生成响应式数据</li><li>不同点<ol><li>reactive不能处理简单类型的数据</li><li>ref参数类型支持更好，但是必须通过.value做访问修改</li><li>ref函数内部的实现依赖于reactive函数</li></ol></li><li>在实际工作中的推荐<ol><li>推荐使用ref函数，减少记忆负担，小兔鲜项目都使用ref</li></ol></li></ol><h1>组合式API - computed</h1><blockquote><p>计算属性基本思想和Vue2保持一致，组合式API下的计算属性只是修改了API写法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 导入</span><br><span class="line">import &#123;ref, computed &#125; from &#x27;vue&#x27;</span><br><span class="line">// 原始数据</span><br><span class="line">const count = ref(0)</span><br><span class="line">// 计算属性</span><br><span class="line">const doubleCount = computed(()=&gt;count.value * 2)</span><br><span class="line"></span><br><span class="line">// 原始数据</span><br><span class="line">const list = ref([1,2,3,4,5,6,7,8])</span><br><span class="line">// 计算属性list 筛选大于2的所有项  - filter</span><br><span class="line">const filterList = computed(item=&gt;item &gt; 2) </span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>最佳实践</p><p>1.计算属性中不应该有“副作用”</p><p>比如 : 异步请求/修改dom 我可以交给watch函数使用</p><p>2.避免直接修改计算属性的值</p><p>计算属性应该是只读的</p><h1>组合式API - watch</h1><blockquote><p>侦听一个或者多个数据的变化，数据变化时执行回调函数，俩个额外参数 immediate控制立刻执行，deep开启深度侦听</p></blockquote><h2 id="1-侦听单个数据">1. 侦听单个数据</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  // 2. 调用watch 侦听变化</span><br><span class="line">  watch(count, (newValue, oldValue)=&gt;&#123;</span><br><span class="line">    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="2-侦听多个数据">2. 侦听多个数据</h2><blockquote><p>侦听多个数据，第一个参数可以改写成数组的写法</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  const name = ref(&#x27;cp&#x27;)</span><br><span class="line">  // 2. 调用watch 侦听变化</span><br><span class="line">  watch([count, name], ([newCount, newName],[oldCount,oldName])=&gt;&#123;</span><br><span class="line">    console.log(`count或者name变化了，[newCount, newName],[oldCount,oldName])</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-immediate">3. immediate</h2><blockquote><p>在侦听器创建时立即出发回调，响应式数据变化之后继续执行回调</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const count = ref(0)</span><br><span class="line">  // 2. 调用watch 侦听变化</span><br><span class="line">  watch(count, (newValue, oldValue)=&gt;&#123;</span><br><span class="line">    console.log(`count发生了变化，老值为$&#123;oldValue&#125;,新值为$&#123;newValue&#125;`)</span><br><span class="line">  &#125;,&#123;</span><br><span class="line">    immediate: true</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="4-deep">4. deep</h2><blockquote><p>通过watch监听的ref对象默认是浅层侦听的，直接修改嵌套的对象属性不会触发回调执行，需要开启deep</p><p>deep性能损耗 尽量不开启 可以使用精确监听</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const state = ref(&#123; count: 0 &#125;)</span><br><span class="line">  // 2. 监听对象state</span><br><span class="line">  watch(state, ()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;数据变化了&#x27;)</span><br><span class="line">  &#125;)</span><br><span class="line">  const changeStateByCount = ()=&gt;&#123;</span><br><span class="line">    // 直接修改不会引发回调执行</span><br><span class="line">    state.value.count++</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1. 导入watch</span><br><span class="line">  import &#123; ref, watch &#125; from &#x27;vue&#x27;</span><br><span class="line">  const state = ref(&#123; count: 0 &#125;)</span><br><span class="line">  // 2. 监听对象state 并开启deep</span><br><span class="line">  watch(state, ()=&gt;&#123;</span><br><span class="line">    console.log(&#x27;数据变化了&#x27;)</span><br><span class="line">  &#125;,&#123;deep:true&#125;)</span><br><span class="line">  const changeStateByCount = ()=&gt;&#123;</span><br><span class="line">    // 此时修改可以触发回调</span><br><span class="line">    state.value.count++</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>精确监听某个具体属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">watch</span>(</span><br><span class="line"><span class="function">()=&gt;</span>state.<span class="property">value</span>.<span class="property">age</span>,</span><br><span class="line"><span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;age变化了&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h1>组合式API - 生命周期函数</h1><h2 id="1-选项式对比组合式">1. 选项式对比组合式</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678183720098-4d40e806-bc0d-4c38-bcbe-9aed440f6b23.png#averageHue=%23cdd7e8&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=554&amp;id=uc176ffaf&amp;name=image.png&amp;originHeight=1108&amp;originWidth=2190&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=261737&amp;status=done&amp;style=none&amp;taskId=u64291cff-e1f5-4709-ba14-700b20d39e8&amp;title=&amp;width=1095" alt="image.png"></p><h2 id="2-生命周期函数基本使用">2. 生命周期函数基本使用</h2><blockquote><ol><li>导入生命周期函数</li><li>执行生命周期函数，传入回调</li></ol><p>在Vue中“挂载” 用大白话解释就算： 把你的Vue实例生成的HTML内容“安装”到页面的某个真实DOM元素中，让塔显示出来。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;scirpt setup&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  // 自定义逻辑</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="3-执行多次">3. 执行多次</h2><blockquote><p>生命周期函数执行多次的时候，会按照顺序依次执行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;scirpt setup&gt;</span><br><span class="line">import &#123; onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  // 自定义逻辑</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">onMounted(()=&gt;&#123;</span><br><span class="line">  // 自定义逻辑</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h1>组合式API - 父子通信</h1><h2 id="1-父传子">1. 父传子</h2><blockquote><p>基本思想</p><ol><li>父组件中给子组件绑定属性</li><li>子组件内部通过props选项接收数据</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678184258336-94b25c26-3150-456b-8981-64017ce7b021.png#averageHue=%2323282f&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=337&amp;id=u6f845ad3&amp;name=image.png&amp;originHeight=674&amp;originWidth=2402&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=416739&amp;status=done&amp;style=none&amp;taskId=ubb5c9d64-f3d7-4a1b-bc05-9bf2af1e24d&amp;title=&amp;width=1201" alt="image.png"></p><h2 id="2-子传父">2. 子传父</h2><blockquote><p>基本思想</p><ol><li>父组件中给子组件标签通过@绑定事件</li><li>子组件内部通过 emit 方法触发事件</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678184380538-99cfc459-3e2e-4d2e-9162-350ef5f97ec6.png#averageHue=%23242830&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=388&amp;id=u4588c125&amp;name=image.png&amp;originHeight=776&amp;originWidth=2284&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=573924&amp;status=done&amp;style=none&amp;taskId=ue5c30a58-7910-4a5b-8325-7e572c6348e&amp;title=&amp;width=1142" alt="image.png"></p><h1>组合式API - 模版引用</h1><blockquote><p>概念：通过 ref标识 获取真实的 dom对象或者组件实例对象</p></blockquote><h2 id="1-基本使用">1. 基本使用</h2><blockquote><p>实现步骤：</p><ol><li>调用ref函数生成一个ref对象</li><li>通过ref标识绑定ref对象到标签</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678184653565-b85c6f60-1089-4ad6-bed7-bbf781863db9.png#averageHue=%2324282f&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=442&amp;id=u45efd4ee&amp;name=image.png&amp;originHeight=884&amp;originWidth=1092&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=287093&amp;status=done&amp;style=none&amp;taskId=u8dba8092-8819-44b3-a2ef-769257a611a&amp;title=&amp;width=546" alt="image.png"></p><h2 id="2-defineExpose">2. defineExpose</h2><blockquote><p>默认情况下在 <code>&lt;script setup&gt;</code>语法糖下组件内部的属性和方法是不开放给父组件访问的，可以通过defineExpose编译宏指定哪些属性和方法容许访问<br>说明：指定testMessage属性可以被访问到</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678184774906-7486a911-d18c-42e8-9aa7-fe2caa35e104.png#averageHue=%23ecf2ee&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=292&amp;id=u0d5c6487&amp;name=image.png&amp;originHeight=584&amp;originWidth=2512&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=239701&amp;status=done&amp;style=none&amp;taskId=ub87fd095-cc3e-4e44-92f6-7c9643f831a&amp;title=&amp;width=1256" alt="image.png"></p><p>获取模板引用的时机是什么？ 组件挂载完毕</p><h1>组合式API - provide和inject</h1><h2 id="1-作用和场景">1. 作用和场景</h2><blockquote><p>顶层组件向任意的底层组件传递数据和方法，实现跨层组件通信</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678185158603-5ae6c0e5-7baa-4de9-8a54-d1864d6c45d3.png#averageHue=%23fdf6ef&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=596&amp;id=ua50e576b&amp;name=image.png&amp;originHeight=1192&amp;originWidth=2558&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=414782&amp;status=done&amp;style=none&amp;taskId=u0792870d-aa73-4c03-8342-aaa56e5d8fb&amp;title=&amp;width=1279" alt="image.png"></p><h2 id="2-跨层传递普通数据">2. 跨层传递普通数据</h2><blockquote><p>实现步骤</p><ol><li>顶层组件通过 <code>provide</code> 函数提供数据</li><li>底层组件通过 <code>inject</code> 函数提供数据</li></ol></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678185321144-61e96ddf-f56c-4d57-83bc-c3c6899f72b2.png#averageHue=%23e4efe5&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=435&amp;id=u9eb7aecf&amp;name=image.png&amp;originHeight=870&amp;originWidth=1736&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=242848&amp;status=done&amp;style=none&amp;taskId=u3d40b793-c4bc-44e7-83d9-4df25e56a7d&amp;title=&amp;width=868" alt="image.png"></p><h2 id="3-跨层传递响应式数据">3. 跨层传递响应式数据</h2><blockquote><p>在调用provide函数时，第二个参数设置为ref对象</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678185454566-b866e7f4-fa23-4c44-a199-8ca19b7d438e.png#averageHue=%2381b27d&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=473&amp;id=u4efc7283&amp;name=image.png&amp;originHeight=946&amp;originWidth=1732&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=237788&amp;status=done&amp;style=none&amp;taskId=uf829094c-f2f8-4ca1-a8ed-c20f9eb79e4&amp;title=&amp;width=866" alt="image.png"></p><h2 id="4-跨层传递方法">4. 跨层传递方法</h2><blockquote><p>顶层组件可以向底层组件传递方法，底层组件调用方法修改顶层组件的数据 谁的数据谁负责修改</p></blockquote><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678185556536-669d0753-2dda-41ae-a750-b0e32f837d42.png#averageHue=%2394b88e&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=391&amp;id=u449ca48f&amp;name=image.png&amp;originHeight=782&amp;originWidth=2556&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=242321&amp;status=done&amp;style=none&amp;taskId=u80c0e832-0efd-4886-9a15-05ebfb4c772&amp;title=&amp;width=1278" alt="image.png"></p><h1>综合案例</h1><p><img src="https://cdn.nlark.com/yuque/0/2023/png/274425/1678185631376-9e6cd19a-0788-42ab-90d4-1103fdbb80db.png#averageHue=%23fefefe&amp;clientId=ud0819acc-4d21-4&amp;from=paste&amp;height=544&amp;id=u35ff8500&amp;name=image.png&amp;originHeight=1088&amp;originWidth=2302&amp;originalType=binary&amp;ratio=2&amp;rotation=0&amp;showTitle=false&amp;size=455015&amp;status=done&amp;style=none&amp;taskId=u6338b36f-65be-420e-af70-914bf97813d&amp;title=&amp;width=1151" alt="image.png"></p><h2 id="1-项目地址">1. 项目地址</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span>  http://git.itcast.cn/heimaqianduan/vue3-basic-project.git</span><br></pre></td></tr></table></figure><h2 id="2-项目说明">2. 项目说明</h2><ol><li>模版已经配置好了案例必须的安装包</li><li>案例用到的接口在 README.MD文件 中</li><li>案例项目有俩个分支，main主分支为开发分支，complete分支为完成版分支供开发完参考</li></ol><p>App.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Edit</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Edit.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; onMounted, ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// <span class="doctag">TODO:</span> 列表渲染</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 思路： 声明响应式list -&gt; 调用接口获取数据 -&gt; 后端数据赋值给list -&gt; 绑定到table组件</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> list = <span class="title function_">ref</span>([])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">getList</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 接口调用</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/list&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 交给list</span></span></span><br><span class="line"><span class="language-javascript">  list.<span class="property">value</span> = res.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> <span class="title function_">getList</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// <span class="doctag">TODO:</span> 删除功能</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 思路： 获取当前行的id -&gt; 通过id调用删除接口 -&gt; 更新最新的列表</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 我们使用Mock用假数据进行开发</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onDelete</span> = <span class="keyword">async</span> (<span class="params">id</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(id);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">await</span> axios.<span class="title function_">delete</span>(<span class="string">`/del/<span class="subst">$&#123;id&#125;</span>`</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">getList</span>()</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// <span class="doctag">TODO:</span> 编辑功能</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 思路： 打开弹框 -&gt; 回填数据 -&gt; 更新数据</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//1. 打开弹框 （获取子组件实例 调用方法或者修改属性）</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> editRef = <span class="title function_">ref</span>(<span class="literal">null</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onEdit</span> = (<span class="params">row</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  editRef.<span class="property">value</span>.<span class="title function_">open</span>(row)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//2. 回填数据（调用详情接口 / 当前行的静态数据） 我们调用的时候传递下去就可以了</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;ID&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;籍贯&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;place&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">width</span>=<span class="string">&quot;150&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">default</span>=<span class="string">&quot;&#123; row &#125;&quot;</span>&gt;</span> <span class="comment">&lt;!-- 注意这个地方--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onEdit(row)&quot;</span> <span class="attr">link</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onDelete(row.id)&quot;</span> <span class="attr">link</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">Edit</span> <span class="attr">ref</span>=<span class="string">&quot;editRef&quot;</span> @<span class="attr">on-update</span>=<span class="string">&quot;getList&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.app</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">980px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">100px</span> auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Edit.vue</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// <span class="doctag">TODO:</span> 编辑</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 弹框开关</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> dialogVisible = <span class="title function_">ref</span>(<span class="literal">false</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 准备一个form</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> form = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">place</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">id</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">open</span> = (<span class="params">row</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(row)</span></span><br><span class="line"><span class="language-javascript">  form.<span class="property">value</span>.<span class="property">name</span> = row.<span class="property">name</span></span></span><br><span class="line"><span class="language-javascript">  form.<span class="property">value</span>.<span class="property">place</span> = row.<span class="property">place</span></span></span><br><span class="line"><span class="language-javascript">  form.<span class="property">value</span>.<span class="property">id</span> = row.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">  dialogVisible.<span class="property">value</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="title function_">defineExpose</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  open</span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 更新</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> emit = <span class="title function_">defineEmits</span>([<span class="string">&#x27;on-update&#x27;</span>])</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> <span class="title function_">onUpdate</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 1.收集表单数据 调用接口</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">await</span> axios.<span class="title function_">patch</span>(<span class="string">`/edit/<span class="subst">$&#123;form.value.id&#125;</span>`</span>, &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: form.<span class="property">value</span>.<span class="property">name</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">place</span>: form.<span class="property">value</span>.<span class="property">place</span></span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 2.关闭弹框</span></span></span><br><span class="line"><span class="language-javascript">  dialogVisible.<span class="property">value</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//3. 通知父组件 做列表更新</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">emit</span>(<span class="string">&#x27;on-update&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">v-model</span>=<span class="string">&quot;dialogVisible&quot;</span> <span class="attr">title</span>=<span class="string">&quot;编辑&quot;</span> <span class="attr">width</span>=<span class="string">&quot;400px&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-width</span>=<span class="string">&quot;50px&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;籍贯&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入籍贯&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.place&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> #<span class="attr">footer</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;dialogVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;onUpdate&quot;</span>&gt;</span>确认<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.el-input</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">width</span>: <span class="number">290px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mock</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Mock</span> <span class="keyword">from</span> <span class="string">&quot;mockjs&quot;</span></span><br><span class="line"><span class="comment">// 内存模拟数据</span></span><br><span class="line"><span class="keyword">const</span> arr = []</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">  arr.<span class="title function_">push</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;@id&quot;</span>),</span><br><span class="line">    <span class="attr">name</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;@cname&quot;</span>),</span><br><span class="line">    <span class="attr">place</span>: <span class="title class_">Mock</span>.<span class="title function_">mock</span>(<span class="string">&quot;@county(true)&quot;</span>),</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/list&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/del/:id&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="function">(<span class="params">req</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> index = arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === req.<span class="property">query</span>.<span class="property">id</span>)</span><br><span class="line">      <span class="keyword">if</span> (index &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(index, <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/edit/:id&quot;</span>,</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;patch&quot;</span>,</span><br><span class="line">    <span class="attr">response</span>: <span class="function">(<span class="params">&#123; query, body &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> item = arr.<span class="title function_">find</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> item.<span class="property">id</span> === query.<span class="property">id</span>)</span><br><span class="line">      <span class="keyword">if</span> (item) &#123;</span><br><span class="line">        item.<span class="property">name</span> = body.<span class="property">name</span></span><br><span class="line">        item.<span class="property">place</span> = body.<span class="property">place</span></span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">success</span>: <span class="literal">false</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Vue3项目</summary>
    
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/categories/%E9%A1%B9%E7%9B%AE/"/>
    
    
    <category term="项目" scheme="https://yjyrichard.github.io/tags/%E9%A1%B9%E7%9B%AE/"/>
    
  </entry>
  
</feed>
