<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangjiayu</title>
  
  
  <link href="https://yjyrichard.github.io/atom.xml" rel="self"/>
  
  <link href="https://yjyrichard.github.io/"/>
  <updated>2025-08-25T12:02:26.668Z</updated>
  <id>https://yjyrichard.github.io/</id>
  
  <author>
    <name>Yangjiayu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>英语介词第十二讲</title>
    <link href="https://yjyrichard.github.io/posts/7cb65bfe.html"/>
    <id>https://yjyrichard.github.io/posts/7cb65bfe.html</id>
    <published>2025-08-25T11:59:30.173Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第十二讲</h1><h3 id="介词辨析第二讲：方式、时间、地点与逻辑关系"><strong>介词辨析第二讲：方式、时间、地点与逻辑关系</strong></h3><p>大家好！</p><p>今天我们将深入探讨几组非常重要且容易混淆的介词。它们涉及做事的方式、时间的界限、地点的内外以及逻辑上的包含与排除。掌握它们，你的英语表达会迈上一个新台阶！</p><hr><h3 id="第一部分：表示“方式”的介词-With-By-In"><strong>第一部分：表示“方式”的介词 (With, By, In)</strong></h3><p>这三个介词都可翻译为“用”，但侧重点完全不同。</p><h4 id="1-With-用…工具"><strong>1. With (用…工具)</strong></h4><ul><li><strong>核心含义</strong>：强调使用<strong>具体的、有形的工具、仪器或身体部位</strong>来完成一个动作。</li><li><strong>例句解析</strong>：<ul><li><code>I often do my homework **with a pen**.</code><ul><li>我经常<strong>用钢笔</strong>做作业。（“钢笔”是一个你能握在手里的具体工具。）</li></ul></li><li><code>He cut the apple **with a knife**.</code><ul><li>他<strong>用刀</strong>切开了苹果。（“刀”是具体的工具。）</li></ul></li><li><code>I saw it **with my own eyes**.</code><ul><li>我<strong>用我自己的眼睛</strong>看到了。（“眼睛”是具体的身体部位。）</li></ul></li></ul></li></ul><h4 id="2-By-用…方式-手段"><strong>2. By (用…方式/手段)</strong></h4><ul><li><strong>核心含义</strong>：强调通过<strong>抽象的方式、手段或方法</strong>来达到一个目的。</li><li><strong>例句解析</strong>：<ul><li><code>I learn English well **by working hard**.</code><ul><li>我<strong>通过努力学习</strong>的方式学好英语。（“努力学习”是一个抽象的方法，而不是具体工具。）</li></ul></li><li><code>She travels to work **by car**.</code><ul><li>她<strong>乘汽车</strong>去上班。（这里指“驾车”这种交通方式，而不是特指某辆车这个工具。）</li></ul></li><li><code>You can pay **by credit card**.</code><ul><li>你可以<strong>用信用卡</strong>支付。（“信用卡支付”是一种支付手段。）</li></ul></li></ul></li></ul><h4 id="3-In-用…语言-材料"><strong>3. In (用…语言/材料)</strong></h4><ul><li><strong>核心含义</strong>：强调使用某种<strong>语言、材料、媒介或方式</strong>来表达或呈现。</li><li><strong>例句解析</strong>：<ul><li><code>I can introduce myself **in English**.</code><ul><li>我能<strong>用英语</strong>做自我介绍。（“英语”是一种语言。）</li></ul></li><li><code>Please write your name **in ink**.</code><ul><li>请<strong>用墨水</strong>写下你的名字。（“墨水”是一种书写材料。）</li></ul></li><li><code>He paid for the book **in cash**.</code><ul><li>他<strong>用现金</strong>付了书款。（“现金”是一种支付媒介。）</li></ul></li></ul></li></ul><hr><h3 id="第二部分：表示“时间”的介词"><strong>第二部分：表示“时间”的介词</strong></h3><h4 id="1-For-vs-Since-持续时间-vs-起点"><strong>1. For vs. Since (持续时间 vs. 起点)</strong></h4><ul><li><strong>For (持续了多久)</strong>：后接<strong>一段时间</strong>，回答 <code>how long</code> 的问题，表示动作或状态持续的总时长。<ul><li><code>She has worked here **for ten years**.</code><ul><li>她在这里已经工作<strong>十年了</strong>。（强调总时长是十年。）</li></ul></li></ul></li><li><strong>Since (自从何时)</strong>：后接<strong>一个时间点</strong>，回答 <code>since when</code> 的问题，表示动作或状态从过去某个点开始，一直持续到现在。<ul><li><code>She has lived in Beidaihe **since 1995**.</code><ul><li><strong>自从1995年</strong>，她就一直住在北戴河。（强调起点是1995年。）</li></ul></li></ul></li></ul><h4 id="2-By-vs-Before-vs-Until-截止日期-vs-之前-vs-持续到"><strong>2. By vs. Before vs. Until (截止日期 vs. 之前 vs. 持续到)</strong></h4><ul><li><strong>Before (在…之前)</strong>：表示某个动作必须发生在<strong>某个时间点之前</strong>。<ul><li><code>We must leave here **before 9:00**.</code><ul><li>我们必须在<strong>九点前</strong>离开这里。（离开这个动作发生在九点这个时刻到来之前。）</li></ul></li></ul></li><li><strong>By (到…为止/不晚于)</strong>：强调某个动作完成的<strong>最终期限 (deadline)</strong>。<ul><li><code>You need to finish your homework **by tomorrow**.</code><ul><li>你必须<strong>在明天之前</strong>完成作业。（明天是最后期限。）</li></ul></li></ul></li><li><strong>Until/Till (直到…为止)</strong>：强调一个<strong>持续性的动作或状态</strong>一直延续到某个时间点才结束。常与持续性动词连用，或用于 <code>not...until</code> (直到…才…) 结构。<ul><li><code>I will be right here waiting for you **until you come back**.</code><ul><li>我会一直在这里等你，<strong>直到你回来为止</strong>。（“等待”这个动作会一直持续。）</li></ul></li><li><code>He didn't do it **until his mum left**.</code><ul><li>他<strong>直到他妈妈离开后才</strong>做这件事。（“不做”的状态一直持续到妈妈离开。）</li></ul></li></ul></li></ul><hr><h3 id="第三部分：表示“排除”与“包含”的介词-Except-Besides-But"><strong>第三部分：表示“排除”与“包含”的介词 (Except, Besides, But)</strong></h3><p>这三个词都可翻译为“除了”，但含义截然相反或用法不同。</p><ul><li><strong>Except (排除掉)</strong>：表示“除了…之外（不包括在内）”，是从整体中<strong>减去</strong>一部分。<ul><li><code>We all like dogs **except you**.</code><ul><li><strong>除了你</strong>，我们都喜欢狗。（把“你”排除在外，你不喜欢狗。）</li></ul></li></ul></li><li><strong>Besides (还包括)</strong>：表示“除了…之外（还包括在内）”，是在一部分的基础上<strong>加上</strong>另一部分。<ul><li><code>**Besides me**, they all like dogs.</code><ul><li><strong>除了我之外</strong>，他们也都喜欢狗。（意思是他们喜欢狗，我也喜欢狗，大家都在同一边。）</li></ul></li></ul></li><li><strong>But (除了)</strong>：意思接近 <code>except</code>，也表示排除，但常用于否定词（<code>nobody</code>, <code>none</code>）或 <code>all</code>, <code>any</code> 之后。<ul><li><code>She likes **nobody but you**.</code><ul><li>她谁都不喜欢，<strong>只喜欢你</strong>。（除了你之外，没有别人了。）</li></ul></li></ul></li></ul><hr><h3 id="第四部分：表示“地点”的介词-In-front-of-vs-In-the-front-of"><strong>第四部分：表示“地点”的介词 (In front of vs. In the front of)</strong></h3><ul><li><strong>In front of (在…外部的前面)</strong>：指一个物体在另一个物体<strong>范围之外</strong>的前方。两者是分离的。<ul><li><code>She is walking **in front of the bus**.</code><ul><li>她在公交车<strong>前面</strong>走。（她在车外，车的前方。）</li></ul></li></ul></li><li><strong>In the front of (在…内部的前部)</strong>：指在某个空间或物体<strong>内部范围</strong>的前半部分。<ul><li><code>Mary sits **in the front of the classroom**.</code><ul><li>玛丽坐在教室的<strong>前排</strong>。（她在教室这个空间的内部。）</li></ul></li></ul></li></ul><hr><h3 id="专项练习题"><strong>专项练习题</strong></h3><p><strong>请从 A, B, C, D 四个选项中选择最合适的一个填入空白处。</strong></p><ol><li><p>Please sign the document ______ a blue pen.<br>A. by<br>B. in<br>C. with<br>D. for</p></li><li><p>______ English, what other languages can you speak?<br>A. Except<br>B. Besides<br>C. But<br>D. Beside</p></li><li><p>I have been waiting for the bus here ______ more than half an hour.<br>A. since<br>B. for<br>C. by<br>D. until</p></li><li><p>The teacher asked us to hand in the project ______ next Monday.<br>A. until<br>B. since<br>C. by<br>D. before</p></li><li><p>A beautiful garden is located ______ the museum.<br>A. in the front of<br>B. in front of<br>C. except<br>D. besides</p></li><li><p>He didn’t go to bed ______ he finished all his tasks.<br>A. by<br>B. until<br>C. for<br>D. since</p></li><li><p>He has changed a lot ______ he graduated from college.<br>A. for<br>B. since<br>C. until<br>D. by</p></li><li><p>Everyone passed the test ______ Tom; he will have to take it again.<br>A. besides<br>B. but<br>C. except<br>D. with</p></li><li><p>We can solve this problem ______ communicating with each other.<br>A. with<br>B. in<br>C. by<br>D. for</p></li><li><p>The driver always sits ______ the car.<br>A. in front of<br>B. in the front of<br>C. beside<br>D. except</p></li></ol><hr><h3 id="答案与解析"><strong>答案与解析</strong></h3><ol><li><strong>C. with</strong><ul><li><strong>解析</strong>：“a blue pen”（一支蓝色的笔）是具体的书写工具，所以用 <code>with</code>。</li></ul></li><li><strong>B. Besides</strong><ul><li><strong>解析</strong>：句意是“除了英语之外，你还会说什么别的语言？”，表示在英语的基础上“还包括”其他语言，所以用 <code>Besides</code>。</li></ul></li><li><strong>B. for</strong><ul><li><strong>解析</strong>：“more than half an hour”（半个多小时）是一段时间，表示等待这个动作持续的时长，所以用 <code>for</code>。</li></ul></li><li><strong>C. by</strong><ul><li><strong>解析</strong>：“next Monday”（下周一）是上交项目的最终期限 (deadline)，所以用 <code>by</code>。</li></ul></li><li><strong>B. in front of</strong><ul><li><strong>解析</strong>：花园和博物馆是两个独立的物体，花园位于博物馆的“外部前方”，所以用 <code>in front of</code>。</li></ul></li><li><strong>B. until</strong><ul><li><strong>解析</strong>：这是一个 <code>not...until</code> 结构，表示“直到…才…”。“他直到完成所有任务才去睡觉”，强调“不去睡觉”这个状态一直持续到任务完成。</li></ul></li><li><strong>B. since</strong><ul><li><strong>解析</strong>：“he graduated from college”（他大学毕业）是一个过去的时间点，表示变化的起点，所以用 <code>since</code>。</li></ul></li><li><strong>C. except</strong><ul><li><strong>解析</strong>：句意是“除了汤姆，所有人都通过了考试”，表示将汤姆从通过考试的集体中“排除”出去，所以用 <code>except</code>。</li></ul></li><li><strong>C. by</strong><ul><li><strong>解析</strong>：“communicating with each other”（互相沟通）是一种解决问题的抽象方式或手段，所以用 <code>by</code>。</li></ul></li><li><strong>B. in the front of</strong><ul><li><strong>解析</strong>：司机坐在汽车的“内部前部”，是汽车这个空间的一部分，所以用 <code>in the front of</code>。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">英语介词第十二讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第十一讲</title>
    <link href="https://yjyrichard.github.io/posts/4ca0b726.html"/>
    <id>https://yjyrichard.github.io/posts/4ca0b726.html</id>
    <published>2025-08-25T11:59:30.076Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第十一讲</h1><h3 id="介词辨析第一讲：时间介词-In-On-At-After"><strong>介词辨析第一讲：时间介词 In, On, At &amp; After</strong></h3><p>大家好！</p><p>在英语中，表示时间的介词 <code>in</code>, <code>on</code>, <code>at</code> 是最基础也最容易混淆的。它们就像一个金字塔，范围由大到小。今天我们还会辨析 <code>in</code> 和 <code>after</code> 在表示“之后”时的区别。让我们一起彻底搞懂它们！</p><hr><h3 id="第一部分：时间介词金字塔-In-On-At"><strong>第一部分：时间介词金字塔 In, On, At</strong></h3><p>我们可以把这三个词想象成一个从大到小的范围：</p><ul><li><strong>In (在…里)</strong>：用于最长、最模糊的时间段。</li><li><strong>On (在…上)</strong>：用于具体到“天”。</li><li><strong>At (在…点)</strong>：用于最短、最精确的时间点。</li></ul><h4 id="1-IN-用于大于一天的时间"><strong>1. IN (用于大于一天的时间)</strong></h4><ul><li><p><strong>核心规则</strong>：<code>in</code> 用于表示一段较长的时间，通常是<strong>大于一天</strong>的单位。</p></li><li><p><strong>具体用法</strong>：</p><ul><li><strong>年份</strong>：<code>in 1990</code> (在1990年)</li><li><strong>月份</strong>：<code>in February</code> (在二月)</li><li><strong>季节</strong>：<code>in spring</code> (在春天), <code>in summer</code> (在夏天)</li><li><strong>泛指的上/下午/晚上</strong>：<code>in the morning</code> (在早晨), <code>in the afternoon</code> (在下午), <code>in the evening</code> (在晚上)</li><li><strong>世纪</strong>：<code>in the 21st century</code> (在21世纪)</li></ul></li><li><p><strong>例句</strong>：</p><ul><li><code>My grandfather was born **in 1950**.</code></li><li><code>We usually go skiing **in winter**.</code></li><li><code>I like to read books **in the evening**.</code></li></ul></li></ul><h4 id="2-ON-用于具体某一天"><strong>2. ON (用于具体某一天)</strong></h4><ul><li><p><strong>核心规则</strong>：<code>on</code> 的范围缩小到<strong>具体某一天</strong>。</p></li><li><p><strong>具体用法</strong>：</p><ul><li><strong>星期几</strong>：<code>on Sunday</code> (在周日), <code>on Monday</code> (在周一)</li><li><strong>具体日期</strong>：<code>on March 1st</code> (在三月一号), <code>on my birthday</code> (在我生日那天)</li><li><strong>特指某一天的上/下午/晚上</strong>：<code>on a sunny morning</code> (在一个晴朗的早晨), <code>on a rainy night</code> (在一个雨夜)</li></ul></li><li><p><strong>⭐ 辨析小贴士</strong>：</p><ul><li><code>in the morning</code> (在早上) vs. <code>on Sunday morning</code> (在周日早上)</li><li><code>in the morning</code> 是泛指任何一天的早上，而一旦这个“早上”被具体到某一天（比如周日、一个晴天），就要用 <code>on</code>。</li></ul></li><li><p><strong>例句</strong>：</p><ul><li><code>The meeting is scheduled **on Friday**.</code></li><li><code>He received a special gift **on his birthday**.</code></li><li><code>**On that cold evening**, we sat by the fire.</code></li></ul></li></ul><h4 id="3-AT-用于精确的时间点"><strong>3. AT (用于精确的时间点)</strong></h4><ul><li><p><strong>核心规则</strong>：<code>at</code> 的范围最小，用于表示一个<strong>精确的、短暂的时间点</strong>。</p></li><li><p><strong>具体用法</strong>：</p><ul><li><strong>具体时刻 (钟点)</strong>：<code>at 10 o'clock</code>, <code>at 7:30 a.m.</code></li><li><strong>一些固定的时间点</strong>：<code>at noon</code> (在中午), <code>at night</code> (在夜间), <code>at midnight</code> (在午夜)</li><li><strong>黎明/黄昏</strong>：<code>at dawn</code> (在黎明), <code>at dusk</code> (在黄昏)</li><li><strong>某个特定时刻</strong>：<code>at that time</code> (在那时), <code>at the moment</code> (此刻)</li></ul></li><li><p><strong>⭐ 辨析小贴士</strong>：</p><ul><li>我们说 <code>in the morning/afternoon/evening</code>，但习惯上说 <code>at night</code>。可以记为“白天用in，夜晚用at”。</li></ul></li><li><p><strong>例句</strong>：</p><ul><li><code>The train arrives **at 3 p.m.**</code></li><li><code>I usually feel tired **at noon**.</code></li><li><code>The stars are beautiful **at night**.</code></li></ul></li></ul><hr><h3 id="第二部分：“之后”的两种表达-In-vs-After"><strong>第二部分：“之后”的两种表达 In vs. After</strong></h3><p>这两个词都表示“之后”，但用法和时态语境完全不同。</p><h4 id="1-In-一段时间-用于将来"><strong>1. In + 一段时间 (用于将来)</strong></h4><ul><li><strong>核心规则</strong>：<code>in</code> 加一段时间，表示<strong>从现在算起，将来的一段时间之后</strong>。通常与<strong>将来时态</strong>连用。</li><li><strong>含义</strong>：“…之后”</li><li><strong>例句</strong>：<ul><li><code>I will be back **in two days**.</code> (我<strong>两天后</strong>回来。)<ul><li>(从现在开始算，两天之后)</li></ul></li><li><code>The bridge will be completed **in three years**.</code> (这座桥将在<strong>三年后</strong>建成。)<ul><li>(从现在开始算，三年之后)</li></ul></li></ul></li></ul><h4 id="2-After-用于过去或任何时刻之后"><strong>2. After (用于过去或任何时刻之后)</strong></h4><p><code>after</code> 的用法更灵活，主要有两种情况：</p><ul><li><p><strong>用法一：<code>after</code> + 一段时间 (常用于过去)</strong></p><ul><li><strong>核心规则</strong>：表示<strong>从过去某个时间点算起，一段时间之后</strong>。通常与<strong>过去时态</strong>连用。</li><li><strong>例句</strong>：<ul><li><code>He left home in 2010. **After a few days**, his family started to worry.</code> (他2010年离家。<strong>几天之后</strong>，他的家人开始担心。)<ul><li>(从他离家那个过去的时刻算起)</li></ul></li></ul></li></ul></li><li><p><strong>用法二：<code>after</code> + 具体时间点</strong></p><ul><li><strong>核心规则</strong>：表示<strong>在某个具体时刻之后</strong>，可用于任何时态。</li><li><strong>例句</strong>：<ul><li><code>The class will end **after 10:00 a.m.**</code> (课程将在<strong>上午10点后</strong>结束。)</li><li><code>Let's meet **after lunch**.</code> (我们<strong>午饭后</strong>见。)</li></ul></li></ul></li></ul><hr><h3 id="专项练习题"><strong>专项练习题</strong></h3><p><strong>请从 A, B, C, D 四个选项中选择最合适的一个填入空白处。</strong></p><ol><li><p>My birthday is ______ October 25th.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>The movie starts ______ 8:00 p.m. sharp.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>She told me she would call me back ______ an hour.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>I usually do my homework ______ the afternoon.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>He left his hometown ______ a cold winter morning.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>She felt much better ______ a few days of rest.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>The first man walked on the moon ______ 1969.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>We always have a big family dinner ______ Christmas Day.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>Don’t worry, the bus will arrive ______ ten minutes.<br>A. in<br>B. on<br>C. at<br>D. after</p></li><li><p>I can’t talk right now, I have a meeting ______ noon.<br>A. in<br>B. on<br>C. at<br>D. after</p></li></ol><hr><h3 id="答案与解析"><strong>答案与解析</strong></h3><ol><li><strong>B. on</strong><ul><li><strong>解析</strong>：用于具体的日期 (October 25th)，用 <code>on</code>。</li></ul></li><li><strong>C. at</strong><ul><li><strong>解析</strong>：用于精确的钟点时刻 (8:00 p.m.)，用 <code>at</code>。</li></ul></li><li><strong>A. in</strong><ul><li><strong>解析</strong>：句中时态是将来时 (would call)，表示“一小时后”，用 <code>in</code> + 一段时间。</li></ul></li><li><strong>A. in</strong><ul><li><strong>解析</strong>：泛指“在下午”，是大于一天的时间单位的一部分，用 <code>in</code>。</li></ul></li><li><strong>B. on</strong><ul><li><strong>解析</strong>：“一个寒冷的冬日早晨”是特指某一天的早晨，所以用 <code>on</code>。</li></ul></li><li><strong>D. after</strong><ul><li><strong>解析</strong>：句中时态是过去时 (felt better)，表示“休息几天之后”，描述过去发生的事情，用 <code>after</code>。</li></ul></li><li><strong>A. in</strong><ul><li><strong>解析</strong>：用于年份 (1969)，用 <code>in</code>。</li></ul></li><li><strong>B. on</strong><ul><li><strong>解析</strong>：Christmas Day (圣诞节当天) 是一个具体的日子，用 <code>on</code>。</li></ul></li><li><strong>A. in</strong><ul><li><strong>解析</strong>：句中时态是将来时 (will arrive)，表示“十分钟后”到达，用 <code>in</code>。</li></ul></li><li><strong>C. at</strong><ul><li><strong>解析</strong>：<code>noon</code> (中午) 是一个固定的精确时间点，用 <code>at</code>。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">英语介词第十一讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第十讲</title>
    <link href="https://yjyrichard.github.io/posts/8ac408a.html"/>
    <id>https://yjyrichard.github.io/posts/8ac408a.html</id>
    <published>2025-08-25T11:59:05.926Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第十讲</h1><h3 id="inside-outside-into-onto-within-without-toward-beside-except">inside ,outside,into,onto,within,without,toward,beside,except</h3><p>大家好！</p><p>在上一部分我们学习了表示时间、比较和转折的介词。今天，我们将继续深入，学习一组与<strong>空间位置、移动方向、范围界限</strong>和<strong>包含/排除</strong>关系密切相关的介词。掌握它们，你的英语表达将更加精准和生动！</p><hr><h3 id="第一部分：表示位置的“内外”对立"><strong>第一部分：表示位置的“内外”对立</strong></h3><h4 id="1-inside-在…内部-vs-outside-在…外部"><strong>1. inside (在…内部) vs. outside (在…外部)</strong></h4><p>这是一对非常直观的反义词，用于描述某个物体相对于一个封闭空间或边界的位置。</p><ul><li><p><strong>inside (在…里面)</strong></p><ul><li><strong>核心含义</strong>：强调位于一个空间或物体的<strong>内部</strong>。可以把它拆解为 <code>in + side</code> (在里面的一侧)。</li><li><strong>例句解析</strong>：<ul><li><code>Luckily, no one was **inside** the building when it collapsed.</code><ul><li>幸运的是，房子倒塌时<strong>里面</strong>没有人。（强调在建筑物这个封闭空间的内部）</li></ul></li><li><code>What's **inside** that box? It smells delicious.</code><ul><li>那个盒子<strong>里面</strong>是什么？闻起来好香。</li></ul></li><li><code>Please keep the dog **inside** the house.</code><ul><li>请把狗留在房子<strong>里</strong>。</li></ul></li></ul></li></ul></li><li><p><strong>outside (在…外面)</strong></p><ul><li><strong>核心含义</strong>：强调位于一个空间或物体的<strong>外部</strong>。可以拆解为 <code>out + side</code> (在外面的一侧)。</li><li><strong>例句解析</strong>：<ul><li><code>She sat for two hours on the floor **outside** her house.</code><ul><li>她在房子<strong>外面</strong>的地板上坐了两个小时。（强调在房子这个空间的外部）</li></ul></li><li><code>The children are playing **outside** in the garden.</code><ul><li>孩子们正在<strong>外面</strong>的花园里玩。</li></ul></li><li><code>It was a sunny day **outside**, but the room was dark.</code><ul><li><strong>外面</strong>天气晴朗，但房间里很暗。</li></ul></li></ul></li></ul></li></ul><hr><h3 id="第二部分：表示移动的“动态”过程"><strong>第二部分：表示移动的“动态”过程</strong></h3><h4 id="2-into-进入到…里-vs-onto-移动到…上"><strong>2. into (进入到…里) vs. onto (移动到…上)</strong></h4><p>这对词都强调一个<strong>从A点到B点的动态过程</strong>，一个表示“进入”，一个表示“上到表面”。</p><ul><li><p><strong>into (进入到…里)</strong></p><ul><li><strong>核心含义</strong>：表示从<strong>外部移动到内部</strong>的动作。可以拆解为 <code>in + to</code> (到里面去)。</li><li><strong>例句解析</strong>：<ul><li><code>Let's get **into** the car; it's starting to rain.</code><ul><li>我们上车吧，开始下雨了。（从车外移动到车内的动作）</li></ul></li><li><code>He poured the milk **into** the glass.</code><ul><li>他把牛奶倒<strong>进</strong>了杯子里。（牛奶从外部进入杯子内部）</li></ul></li><li><code>The company is expanding **into** new markets.</code><ul><li>（抽象用法）这家公司正在扩展<strong>到</strong>新市场中。</li></ul></li></ul></li></ul></li><li><p><strong>onto (移动到…上)</strong></p><ul><li><strong>核心含义</strong>：表示移动到某个物体的<strong>表面之上</strong>。可以拆解为 <code>on + to</code> (到上面去)。</li><li><strong>例句解析</strong>：<ul><li><code>The cat jumped **onto** the roof.</code><ul><li>猫跳<strong>到</strong>了屋顶<strong>上</strong>。（从低处移动到屋顶这个表面）</li></ul></li><li><code>The sheep were loaded **onto** trucks.</code><ul><li>羊被装<strong>上</strong>了卡车。（从地面移动到卡车的载货平面上）</li></ul></li><li><code>How did we get **onto** this subject?</code><ul><li>（抽象用法）我们是怎么谈<strong>到</strong>这个话题<strong>上</strong>的？</li></ul></li></ul></li></ul></li></ul><hr><h3 id="第三部分：表示范围与伴随的“界限”"><strong>第三部分：表示范围与伴随的“界限”</strong></h3><h4 id="3-within-在…之内-vs-without-没有，不伴随"><strong>3. within (在…之内) vs. without (没有，不伴随)</strong></h4><p>这对词也构成反义关系，一个表示在某个界限“之内”，一个表示“没有”或“在…之外”。</p><ul><li><p><strong>within (在…之内)</strong></p><ul><li><strong>核心含义</strong>：表示不超过某个<strong>范围、时间或距离的界限</strong>。</li><li><strong>用法精讲</strong>：<ul><li><strong>表示时间</strong>：<code>within two days</code> 意为“两天之内（不超过两天）”，可能是一天，也可能是几个小时。这与 <code>in two days</code>（两天后）不同。</li><li><strong>表示距离/范围</strong>：<code>within 2 miles</code> 意为“在2英里范围之内”。</li></ul></li><li><strong>例句解析</strong>：<ul><li><code>The tickets will reach you **within** two days.</code><ul><li>票将在<strong>两天之内</strong>送到您手中。（强调不会超过两天）</li></ul></li><li><code>We live **within** 2 miles of the coast.</code><ul><li>我们住在离海岸线<strong>不到2英里</strong>的地方。</li></ul></li><li><code>Please keep your spending **within** the budget.</code><ul><li>请将您的开支控制在预算<strong>范围之内</strong>。</li></ul></li></ul></li></ul></li><li><p><strong>without (没有，不伴随)</strong></p><ul><li><strong>核心含义</strong>：它是 <code>with</code> (伴随) 的反义词，表示“缺乏”或“没有”。</li><li><strong>例句解析</strong>：<ul><li><code>He went to take a walk **without** you.</code><ul><li>他<strong>没带你</strong>就去散步了。</li></ul></li><li><code>**Without** your help, none of us could have finished the project.</code><ul><li><strong>没有</strong>你的帮助，我们谁也无法完成这个项目。</li></ul></li><li><code>You can't make an omelet **without** breaking eggs.</code><ul><li>（谚语）不打碎鸡蛋就做不成煎蛋卷（有得必有失）。</li></ul></li></ul></li></ul></li></ul><hr><h3 id="第四部分：表示方向、位置与排除"><strong>第四部分：表示方向、位置与排除</strong></h3><h4 id="4-toward-towards-朝着，向着"><strong>4. toward / towards (朝着，向着)</strong></h4><ul><li><strong>核心含义</strong>：表示移动的<strong>方向</strong>，或者一种<strong>态度</strong>的朝向。不一定到达终点，只强调方向。</li><li><strong>用法说明</strong>：<code>toward</code> 是美式英语，<code>towards</code> 是英式英语，意思完全相同。</li><li><strong>例句解析</strong>：<ul><li><code>She stood up and walked **toward** him.</code><ul><li>她站起来，<strong>朝</strong>他走去。（强调行走的方向）</li></ul></li><li><code>They've always been very friendly **toward** me.</code><ul><li>（抽象用法）他们对我的态度一直很友好。（态度朝向我）</li></ul></li><li><code>He was running **towards** the finish line.</code><ul><li>他正<strong>朝着</strong>终点线奔跑。</li></ul></li></ul></li></ul><h4 id="5-except-除了…之外"><strong>5. except (除了…之外)</strong></h4><ul><li><strong>核心含义</strong>：表示<strong>从整体中排除</strong>某一部分。</li><li><strong>例句解析</strong>：<ul><li><code>Everyone passed the exam **except** Tom.</code><ul><li><strong>除了</strong>汤姆，所有人都通过了考试。（把汤姆排除在外）</li></ul></li><li><code>The store is open every day **except** Sunday.</code><ul><li>这家商店<strong>除了</strong>周日，每天都营业。</li></ul></li></ul></li></ul><h4 id="6-beside-在…旁边"><strong>6. beside (在…旁边)</strong></h4><ul><li><strong>核心含义</strong>：表示位置上的“紧挨着，在…旁边”，等同于 <code>next to</code>。</li><li><strong>易混淆词</strong>：注意不要和 <code>besides</code> (除了…还有…) 混淆。<code>beside</code> 是位置，<code>besides</code> 是添加。</li><li><strong>例句解析</strong>：<ul><li><code>He sat **beside** her on the sofa.</code><ul><li>他坐在她<strong>旁边</strong>的沙发上。</li></ul></li><li><code>There is a small table **beside** the bed.</code><ul><li>床<strong>旁边</strong>有一张小桌子。</li></ul></li></ul></li></ul><hr><h3 id="介词用法专项练习题"><strong>介词用法专项练习题</strong></h3><p><strong>请从 A, B, C, D 四个选项中选择最合适的一个填入空白处。</strong></p><ol><li><p>The kitten was scared and hid ______ the sofa.<br>A. onto<br>B. outside<br>C. inside<br>D. into</p></li><li><p>Could you please put these books ______ the top shelf?<br>A. onto<br>B. into<br>C. within<br>D. without</p></li><li><p>All the students attended the meeting ______ John, who was sick.<br>A. beside<br>B. except<br>C. without<br>D. toward</p></li><li><p>I promise I will finish the report ______ this Friday.<br>A. without<br>B. outside<br>C. within<br>D. toward</p></li><li><p>He walked straight ______ the door without looking back.<br>A. toward<br>B. beside<br>C. inside<br>D. onto</p></li><li><p>We can’t complete this puzzle ______ your help; you have the last piece!<br>A. except<br>B. within<br>C. without<br>D. beside</p></li><li><p>The children jumped ______ the swimming pool to cool off.<br>A. onto<br>B. into<br>C. outside<br>D. beside</p></li><li><p>Come and sit ______ me, there’s plenty of space here.<br>A. except<br>B. without<br>C. toward<br>D. beside</p></li><li><p>It’s dangerous to play ______ the construction site.<br>A. without<br>B. onto<br>C. inside<br>D. except</p></li><li><p>His attitude ______ his work has improved a lot recently.<br>A. onto<br>B. within<br>C. toward<br>D. beside</p></li></ol><hr><h3 id="答案与解析"><strong>答案与解析</strong></h3><ol><li><strong>C. inside</strong><ul><li><strong>解析</strong>：这里描述的是一个静态的位置，小猫藏在沙发“里面”。<code>into</code> 强调进入的动作，但这里更侧重藏在里面的状态。如果句子是 “The kitten ran and hid ______ the sofa”，那么<code>into</code> 也可以考虑，但<code>inside</code>更强调最终位置。</li></ul></li><li><strong>A. onto</strong><ul><li><strong>解析</strong>：把书“放到顶层的架子上”，这是一个从别处移动到架子“表面”的动作，所以用 <code>onto</code>。</li></ul></li><li><strong>B. except</strong><ul><li><strong>解析</strong>：句意是“除了生病的约翰，所有学生都参加了会议”，表示将约翰从全体中“排除”，所以用 <code>except</code>。</li></ul></li><li><strong>C. within</strong><ul><li><strong>解析</strong>：“在本周五之内”完成报告，表示一个时间期限，强调不晚于周五，用 <code>within</code>。</li></ul></li><li><strong>A. toward</strong><ul><li><strong>解析</strong>：“径直朝门口走去”，表示一个方向，所以用 <code>toward</code>。</li></ul></li><li><strong>C. without</strong><ul><li><strong>解析</strong>：“没有你的帮助”，我们无法完成拼图。<code>without</code> 表示“缺乏，没有”。</li></ul></li><li><strong>B. into</strong><ul><li><strong>解析</strong>：“跳进游泳池”，表示一个从池外移动到池内的动作，所以用 <code>into</code>。</li></ul></li><li><strong>D. beside</strong><ul><li><strong>解析</strong>：“过来坐在我旁边”，表示位置上的“紧挨着”，所以用 <code>beside</code>。</li></ul></li><li><strong>C. inside</strong><ul><li><strong>解析</strong>：“在建筑工地内部玩耍是危险的”，<code>inside</code> 表示在某个区域或空间内部。</li></ul></li><li><strong>C. toward</strong><ul><li><strong>解析</strong>：“他对工作的态度”，<code>toward</code> 在这里用于抽象含义，表示态度所朝向的对象。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">英语介词第十讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第五讲</title>
    <link href="https://yjyrichard.github.io/posts/b7365014.html"/>
    <id>https://yjyrichard.github.io/posts/b7365014.html</id>
    <published>2025-08-25T11:59:05.905Z</published>
    <updated>2025-08-25T12:00:49.214Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第五讲</h1><h3 id="by-near-about-around-against-opposite">by near about around against opposite</h3><h3 id="1-by-核心思想：在旁边-挨着-Beside-Next-to"><strong>1. by - 核心思想：在旁边 / 挨着 (Beside / Next to)</strong></h3><p>想象一下，任何事物，无论是人、时间还是方法，都“紧挨着”另一个事物，这就是 <code>by</code> 的感觉。</p><p><strong>用法一：空间上的“旁边”</strong><br>这是最直观的意思，指位置上紧挨着。</p><ul><li><code>Please come and sit by me.</code> (请过来坐我旁边。)</li><li><code>There is a beautiful house by the sea.</code> (海边有一座漂亮的房子。)</li><li><code>We walked past by the library on our way home.</code> (我们回家路上经过了图书馆旁边。)</li><li><code>The children stood side by side to take a photo.</code> (孩子们肩并肩站着拍照。)</li></ul><p><strong>用法二：时间上的“旁边”（不晚于… / 截止到…）</strong><br>表示一个动作完成的最后期限，时间点紧挨着，但不能超过。</p><ul><li><code>You must finish your homework by Friday.</code> (你必须在周五前完成作业。)</li><li><code>Please return the book to me by tomorrow.</code> (请在明天前把书还给我。)</li><li><code>By the end of the year, we will have learned 1000 new words.</code> (到今年年底，我们将学完1000个新单词。)</li><li><code>Time goes by so quickly.</code> (时间过得真快啊。)</li></ul><p><strong>用法三：方式上的“旁边”（依靠 / 通过）</strong><br>表示做某事所依靠或使用的方法、工具，这个“方法”就像伴随在动作旁边。</p><ul><li><code>I go to school by bus every day.</code> (我每天乘公交车上学。)</li><li><code>You can contact me by email or by phone.</code> (你可以通过邮件或电话联系我。)</li><li><code>He paid for the new coat by credit card.</code> (他用信用卡支付了这件新外套。)</li><li><code>I learned the poem by heart.</code> (我靠用心记下了这首诗。)</li><li><code>I met her completely by chance.</code> (我完全是偶然遇见她的。)</li></ul><p><strong>用法四：语法上的“旁边”（被动语态的动作发出者）</strong><br>在被动句中，动作是谁做的，就用 <code>by</code> 把它放在动作旁边。</p><ul><li><code>This cake was made by my mother.</code> (这个蛋糕是我妈妈做的。)</li><li><code>The window was broken by the naughty boy.</code> (窗户是被那个淘气的男孩打碎的。)</li><li><code>The story was written by a famous writer.</code> (这个故事是一位著名作家写的。)</li></ul><hr><h3 id="2-near-核心思想：在…附近-In-the-vicinity-of-Close-to"><strong>2. near - 核心思想：在…附近 (In the vicinity of / Close to)</strong></h3><p><code>near</code> 表示距离上的靠近，但中间有一定空间，不像 <code>by</code> 那样紧挨着。</p><p><strong>用法一：空间上的“附近”</strong><br>指具体的地理位置很近。</p><ul><li><code>Is there a supermarket near our school?</code> (我们学校附近有超市吗？)</li><li><code>Don't stand near the fire; it's dangerous.</code> (别站在火的附近，很危险。)</li><li><code>My best friend lives near my home, so we often play together.</code> (我最好的朋友住在我家附近，所以我们经常一起玩。)</li></ul><p><strong>用法二：抽象概念的“接近”</strong><br>指时间、状态或情感上的靠近。</p><ul><li><code>The summer holiday is drawing near.</code> (暑假快要到了。)</li><li><code>She was near tears when she heard the sad news.</code> (当她听到那个悲伤的消息时，她都快哭了。)</li><li><code>It's near midnight, you should go to bed.</code> (快到午夜了，你应该去睡觉了。)</li></ul><p><strong>小贴士：<code>near</code> (附近) vs <code>nearly</code> (几乎)</strong></p><ul><li><code>The hotel is **near** the station.</code> (酒店在车站附近。) -&gt; 表位置</li><li><code>The bottle is **nearly** empty.</code> (瓶子差不多空了。) -&gt; 表程度</li></ul><hr><h3 id="3-about-around-核心思想：围绕着-四周"><strong>3. about / around - 核心思想：围绕着 / 四周</strong></h3><p>这两个词都有一种“围绕一个中心”的感觉。<code>about</code> 更偏向抽象的话题或大概的范围，而 <code>around</code> 更偏向具体的物理空间。</p><h4 id="about-更偏向抽象的“围绕”"><strong>about (更偏向抽象的“围绕”)</strong></h4><p><strong>用法一：表示“关于” (围绕一个话题)</strong></p><ul><li><code>This is a story about a brave knight.</code> (这是一个关于勇敢骑士的故事。)</li><li><code>What are you talking about?</code> (你们在聊什么呢?)</li><li><code>I'm so worried about the final exam.</code> (我非常担心期末考试。)</li><li><code>Tell me all about your trip to Beijing.</code> (跟我讲讲你北京之行的所有事吧。)</li></ul><p><strong>用法二：表示“大约” (围绕一个数字或时间)</strong></p><ul><li><code>There are about 50 students in our class.</code> (我们班大约有50名学生。)</li><li><code>I waited for you for about half an hour.</code> (我等了你大约半个小时。)</li><li><code>Hurry up! The train is about to leave.</code> (快点！火车马上就要开了。)</li></ul><h4 id="around-更偏向具体的“围绕”"><strong>around (更偏向具体的“围绕”)</strong></h4><p><strong>用法一：表示“环绕 / 在…四周”</strong></p><ul><li><code>We all sat around the table for dinner.</code> (我们都围坐在桌边吃晚饭。)</li><li><code>He plans to travel around the world next year.</code> (他计划明年环游世界。)</li><li><code>The earth moves around the sun.</code> (地球围绕太阳转。)</li><li><code>There are many trees around the lake.</code> (湖的四周有很多树。)</li></ul><p><strong>小贴士：何时可以通用？</strong><br>当表示“到处”或“四处”时，两者有时可以互换。</p><ul><li><code>He looked **around/about** the room, but couldn't find his keys.</code> (他环顾了一下房间，但没找到钥匙。)</li></ul><hr><h3 id="4-against-opposite-核心思想：对抗-对面"><strong>4. against / opposite - 核心思想：对抗 / 对面</strong></h3><p>这两个词都带有“对”的含义，但感觉完全不同。</p><h4 id="against-核心：对抗-顶着"><strong>against (核心：对抗 / 顶着)</strong></h4><p><strong>用法一：表示“反对 / 对抗” (带有冲突感)</strong></p><ul><li><code>Many people are against the plan to build a new factory here.</code> (很多人反对在这里建新工厂的计划。)</li><li><code>It is against the school rules to use a mobile phone in class.</code> (在课堂上使用手机是违反校规的。)</li><li><code>Our team will play against the champion team tomorrow.</code> (我们队明天要和冠军队比赛。)</li></ul><p><strong>用法二：表示“倚靠 / 顶着” (身体靠在某物上)</strong></p><ul><li><code>He was leaning against the wall, waiting for his friend.</code> (他正倚着墙等他的朋友。)</li><li><code>Don't put your bike against the clean window!</code> (别把你的自行车靠在干净的窗户上！)</li></ul><h4 id="opposite-核心：在…对面-相反"><strong>opposite (核心：在…对面 / 相反)</strong></h4><p><strong>用法一：表示“在…对面” (位置上的相对)</strong></p><ul><li><code>The post office is just opposite the bank.</code> (邮局就在银行的对面。)</li><li><code>In the meeting, my teacher sat opposite me.</code> (会议上，我的老师坐在我的对面。)</li><li><code>Our house is opposite a big park.</code> (我们家对面是一个大公园。)</li></ul><p><strong>用法二：表示“相反的” (方向或性质上的对立)</strong></p><ul><li><code>&quot;Up&quot; is the opposite of &quot;down&quot;.</code> (“上”是“下”的反义词。)</li><li><code>They ran in opposite directions.</code> (他们朝着相反的方向跑去。)</li></ul><p><strong>小贴士：如何区分？</strong></p><ul><li><code>against</code> 强调 <strong>冲突</strong> 或 <strong>压力</strong>。<code>fight against him</code> (和他对抗)。</li><li><code>opposite</code> 强调 <strong>位置</strong> 或 <strong>方向</strong>。<code>sit opposite him</code> (坐在他对面)。</li></ul><hr><p>希望这份更详细的讲义能让你彻底明白这些介词的用法！</p>]]></content>
    
    
    <summary type="html">英语介词第五讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第七讲</title>
    <link href="https://yjyrichard.github.io/posts/386c52.html"/>
    <id>https://yjyrichard.github.io/posts/386c52.html</id>
    <published>2025-08-25T11:59:05.870Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第七讲</h1><h3 id="beyond-blow-before-behind-after">beyond blow before behind after</h3><p>我们来系统地学习和梳理这五个以<code>be-</code>开头的介词：<code>beyond</code>, <code>below</code>, <code>before</code>, <code>behind</code>，以及与它们相关的<code>after</code>。</p><hr><h3 id="词义深度解析">词义深度解析</h3><p>首先，我们抓住一个核心概念：<br><strong>be-</strong>: 这个前缀常常有“使…”或“处于…状态”的含义。当我们用这个思路去理解这组词时，会发现它们的逻辑非常清晰。</p><h4 id="1-beyond">1. <strong>beyond</strong></h4><ul><li><p><strong>词源解析</strong>: <code>be</code> (处于) + <code>yond</code> (更远的那边)。字面意思就是“<strong>处于更远的那边</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>超越，超出（某个范围、限度、时间或地点）</strong>。这个词充满了“突破界限”的感觉。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示空间位置</strong>: 在…的那一边，远于</p><ul><li><em>The village is <strong>beyond</strong> the hills.</em><br>村庄在山的那一边。</li><li><em>Our house is just <strong>beyond</strong> the bridge.</em><br>我们的房子刚过桥就是。</li></ul></li><li><p><strong>表示时间</strong>: 晚于，迟于</p><ul><li><em>We can’t allow the work to continue <strong>beyond</strong> the end of the year.</em><br>我们不能允许这项工作延期到明年。</li><li><em>Few people live <strong>beyond</strong> the age of a hundred.</em><br>很少有人活过一百岁。</li></ul></li><li><p><strong>表示抽象范围（最常用）</strong>: 超出（能力、理解、控制、想象等）</p><ul><li><em>The situation was completely <strong>beyond</strong> her control.</em><br>局势完全超出了她的控制。</li><li><em>His car was damaged <strong>beyond</strong> repair.</em><br>他的车损坏严重，已经无法修复了。（超出了维修的范围）</li><li><em>What he did was <strong>beyond</strong> belief.</em><br>他所做的事简直令人难以置信。（超出了相信的范围）</li><li><em>Physics is completely <strong>beyond</strong> me.</em><br>物理这门学科完全超出了我的理解能力。</li><li><em>This task is <strong>beyond</strong> my capabilities.</em><br>这个任务超出了我的能力范围。</li></ul></li></ol></li></ul><hr><h4 id="2-below">2. <strong>below</strong></h4><ul><li><p><strong>词源解析</strong>: <code>be</code> (处于) + <code>low</code> (低的)。字面意思就是“<strong>处于低的位置</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>在…下方，低于</strong>。它强调的是在一个垂直平面或等级上的相对位置较低，不一定是正下方（<code>under</code>更强调在正下方）。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示空间位置</strong>: 在…下方</p><ul><li><em>His name is <strong>below</strong> the title.</em><br>他的名字在标题下面。</li><li><em>From the top of the mountain, we could see the clouds <strong>below</strong> us.</em><br>从山顶上，我们可以看到脚下的云层。</li></ul></li><li><p><strong>表示等级、数量、标准</strong>: 低于</p><ul><li><em>The temperature remained <strong>below</strong> freezing all day.</em><br>气温一整天都保持在零度以下。</li><li><em>Her performance was <strong>below</strong> average.</em><br>她的表现低于平均水平。</li><li><em>Children <strong>below</strong> the age of five are not allowed.</em><br>五岁以下的儿童不得入内。</li></ul></li><li><p><strong>表示职位、地位</strong>: 在…之下，级别低于</p><ul><li><em>She has three people working <strong>below</strong> her.</em><br>她有三名下属。</li><li><em>In the army, a captain is <strong>below</strong> a major.</em><br>在军队中，上尉的军衔低于少校。</li></ul></li></ol></li></ul><hr><h4 id="3-before">3. <strong>before</strong></h4><ul><li><p><strong>词源解析</strong>: <code>be</code> (处于) + <code>fore</code> (前面)。字面意思就是“<strong>处于前面的位置</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>在…前面</strong>。这个“前面”可以是时间上的、空间上的，也可以是顺序上的。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示时间</strong>: 在…之前</p><ul><li><em>Please wash your hands <strong>before</strong> meals.</em><br>请在饭前洗手。</li><li><em>I had never seen a panda <strong>before</strong> I went to China.</em><br>在我去中国之前，我从未见过熊猫。</li><li><em>She left the day <strong>before</strong> yesterday.</em><br>她前天离开的。</li></ul></li><li><p><strong>表示空间位置</strong>: 在…前面</p><ul><li><em>The bus stop is just <strong>before</strong> the school.</em><br>公交站就在学校前面一点。</li><li><em>He stood up <strong>before</strong> us and sang an English song.</em><br>他站在我们面前，唱了一首英文歌。</li></ul></li><li><p><strong>表示顺序</strong>: 在…之前</p><ul><li><em>The letter D comes <strong>before</strong> H in the alphabet.</em><br>在字母表中，字母D在H的前面。</li></ul></li><li><p><strong>常用短语</strong>:</p><ul><li><strong>before long</strong>: 不久之后</li><li><strong>before one’s eyes</strong>: 当着…的面，亲眼</li></ul></li></ol></li></ul><hr><h4 id="4-behind">4. <strong>behind</strong></h4><ul><li><p><strong>词源解析</strong>: <code>be</code> (处于) + <code>hind</code> (后面，与<code>hide</code>-藏有关)。字面意思就是“<strong>处于后面的/隐藏的位置</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>在…后面</strong>。这既可以是具体的物理位置，也可以是抽象的落后或支持。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示空间位置</strong>: 在…后面</p><ul><li><em>The little boy is hiding <strong>behind</strong> the door.</em><br>那个小男孩正躲在门后。</li><li><em>Look <strong>behind</strong> you! There’s a beautiful rainbow.</em><br>看你身后！有一道美丽的彩虹。</li></ul></li><li><p><strong>表示时间</strong>: 晚于，落后于</p><ul><li><em>He is <strong>behind</strong> schedule with his project.</em><br>他的项目进度落后了。</li><li><em>My watch is five minutes <strong>behind</strong>.</em><br>我的手表慢了五分钟。</li></ul></li><li><p><strong>表示支持</strong>: 在背后支持</p><ul><li><em>Whatever you decide, we are all <strong>behind</strong> you.</em><br>无论你做什么决定，我们都支持你。</li><li><em>He is the man <strong>behind</strong> this successful project.</em><br>他是这个成功项目背后的关键人物。</li></ul></li><li><p><strong>表示原因</strong>: 是…背后的原因</p><ul><li><em>What is the real reason <strong>behind</strong> his decision?</em><br>他这个决定背后的真正原因是什么？</li></ul></li></ol></li></ul><hr><h4 id="5-after">5. <strong>after</strong></h4><ul><li><p><strong>词源解析</strong>: <code>after</code>虽然不完全遵循<code>be-</code>结构，但它在时空关系上与<code>before</code>和<code>behind</code>形成对比，所以放在一起学习。它的词源意为“更后面”。</p></li><li><p><strong>核心含义</strong>: <strong>在…之后</strong>。主要用于时间，也可以表示跟随、追逐或模仿。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示时间</strong>: 在…之后</p><ul><li><em>Let’s go for a walk <strong>after</strong> dinner.</em><br>我们晚饭后去散步吧。</li><li><em>He arrived the day <strong>after</strong> tomorrow.</em><br>他后天到达。</li></ul></li><li><p><strong>表示顺序或位置</strong>: 在…后面</p><ul><li><em>Please shut the door <strong>after</strong> you.</em><br>进来后请随手关门。</li><li><em>In the list, my name comes <strong>after</strong> yours.</em><br>名单上我的名字在你后面。</li></ul></li><li><p><strong>表示追逐、跟随</strong>:</p><ul><li><em>The police are running <strong>after</strong> the thief.</em><br>警察正在追赶小偷。</li><li><em>The dog ran <strong>after</strong> the ball.</em><br>狗追着球跑。</li></ul></li><li><p><strong>表示模仿或以…命名</strong>:</p><ul><li><em>This is a painting <strong>after</strong> Van Gogh.</em><br>这是一幅模仿梵高风格的画。</li><li><em>She was named Grace <strong>after</strong> her grandmother.</em><br>她以她祖母的名字命名为格蕾丝。</li></ul></li></ol></li></ul><p>因为从字面上看，“look”（看）和“after”（在…之后）确实很难直接组合成“照顾”的意思。</p><p>要理解它，我们需要跳出字面意思，从一个更生动的画面去想象。我们可以从以下几个角度来“盘活”这个短语：</p><h3 id="角度一：用目光“追随”在后面-The-“Following-Gaze”-Analogy">角度一：用目光“追随”在后面 (The “Following Gaze” Analogy)</h3><p>这是最核心、最形象的理解方式。</p><p>想象一下，一个妈妈带着一个刚会走路的小孩在公园里玩。小孩在前面摇摇晃晃地跑，妈妈会怎么做？</p><ul><li>她不会只<strong>看一眼</strong> (<code>look at</code>) 孩子。</li><li>她会持续地、不间断地用目光<strong>跟在</strong>孩子的<strong>后面</strong> (<code>look after</code>)，确保他不会摔倒，不会跑到危险的地方去。</li></ul><p>在这个场景里，“look after”的画面感就出来了：<strong>你的目光始终追随着那个你需要负责的人或物，你是在用眼神“护送”着他/她/它。</strong> 这种持续关注、确保其安全的状态，不就是“照顾”的核心吗？</p><p>所以，<code>look after</code> ≠ 看 + 后面，而是 <strong>目光追随在后 → 持续关注 → 负责、照看、照顾</strong>。</p><hr><h3 id="角度二：与相关短语对比，凸显含义">角度二：与相关短语对比，凸显含义</h3><p>对比一下其他由 <code>look</code> 组成的短语，你就能更清楚地看到 <code>look after</code> 的独特性：</p><ul><li><p><strong>look at</strong>: <strong>看</strong> (一个瞬间的、直接的动作)</p><ul><li><em>Look at the blackboard.</em> (看黑板)</li><li>这只是一个简单的“视线投向”的动作。</li></ul></li><li><p><strong>look for</strong>: <strong>寻找</strong> (带着目的去看，为了找到)</p><ul><li><em>I’m looking for my keys.</em> (我正在找我的钥匙)</li><li>这个动作有一个明确的目标：找到东西。</li></ul></li><li><p><strong>look after</strong>: <strong>照顾</strong> (持续的、负责任的关注)</p><ul><li><em>Please look after my dog while I’m away.</em> (我不在的时候，请帮我照顾我的狗)</li><li>这不是让你“看”狗一下，也不是让你“找”狗，而是让你对它负责，喂它、陪它，确保它一切都好。这是一种<strong>延续性的责任</strong>。</li></ul></li></ul><p>通过对比，你会发现 <code>after</code> 这个词给 <code>look</code> 增加了一种“<strong>延续性</strong>”和“<strong>跟随性</strong>”的意味，从而引申出了“照顾”的含义。</p><hr><h3 id="角度三：引申到“负责处理”">角度三：引申到“负责处理”</h3><p>这个“照顾”的含义还可以进一步引申。除了照顾人或动物，你也可以“照顾”一件事情，意思就是“负责处理”。</p><ul><li><p><em>Don’t worry about the arrangements for the meeting. I’ll <strong>look after</strong> it.</em><br>别担心会议的安排，我来<strong>处理</strong>。<br>（这里的意思是：我会像照顾一个孩子一样，负责到底，确保这件事的方方面面都妥当。）</p></li><li><p><em>It’s important to <strong>look after</strong> your own health.</em><br>照顾好你自己的健康很重要。<br>（你需要持续关注你的身体状况，对它负责。）</p></li></ul><h3 id="总结">总结</h3><p>所以，下次你看到 <code>look after</code> 时，不要再把它拆成“看”和“后面”。</p><p><strong>请在脑海里浮现这个画面：一个负责任的人，他的目光始终温柔地、警觉地跟在他需要保护的人或物的身后，随时准备提供帮助。</strong></p><p>这个画面，就是 <code>look after</code> 的精髓——<strong>用持续的关注来履行一份责任</strong>，也就是“照顾”。</p><hr><h3 id="巩固练习-Consolidation-Exercises">巩固练习 (Consolidation Exercises)</h3><p>请用 <code>beyond</code>, <code>below</code>, <code>before</code>, <code>behind</code>, <code>after</code> 填空。</p><ol><li>The beauty of the sunset was _________ description.</li><li>Don’t forget to turn off the lights _________ you leave the room.</li><li>No matter what happens, I’ll always be right _________ you, supporting you.</li><li>The temperature in winter often drops _________ zero degrees Celsius here.</li><li>The cat jumped onto the table and started chasing the mouse _________ a few seconds.</li><li>The mystery of the universe is far _________ human understanding.</li><li>He knelt _________ the queen to receive his knighthood.</li><li>We are falling _________ schedule; we need to work faster.</li><li>A sergeant’s rank is _________ a lieutenant’s in the army.</li><li>He takes _________ his father; they both have the same smile.</li></ol><hr><h3 id="答案与解析-Answers-and-Explanations">答案与解析 (Answers and Explanations)</h3><ol><li><strong>beyond</strong>. 句意：日落的美丽无法用言语形容。“Beyond description”是固定搭配，意为“难以形容”，表示超出了描述的范围。</li><li><strong>before</strong>. 句意：离开房间之前，别忘了关灯。这里表示时间上的“在…之前”。</li><li><strong>behind</strong>. 句意：无论发生什么，我都会在你身后支持你。这里的<code>behind</code>是引申义，表示“支持”。</li><li><strong>below</strong>. 句意：这里的冬天，气温经常降到零摄氏度以下。<code>below zero</code>是固定用法，表示“零下”。</li><li><strong>after</strong>. 句意：几秒钟后，猫跳上桌子开始追老鼠。这里表示时间上的“在…之后”。</li><li><strong>beyond</strong>. 句意：宇宙的奥秘远远超出了人类的理解。这里的<code>beyond</code>表示“超出…范围”。</li><li><strong>before</strong>. 句意：他跪在女王面前接受爵位。这里的<code>before</code>表示空间上的“在…面前”。</li><li><strong>behind</strong>. 句意：我们的进度落后了，需要加快工作。<code>fall behind schedule</code>是固定搭配，意为“进度落后”。</li><li><strong>below</strong>. 句意：在军队中，中士的军衔低于中尉。<code>below</code>用于表示等级、地位的“低于”。</li><li><strong>after</strong>. 句意：他长得像他父亲，他们都有一样的笑容。<code>take after</code>是固定短语，意为“（外貌、性格等）与（长辈）相像”。</li></ol>]]></content>
    
    
    <summary type="html">英语介词第七讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第六讲</title>
    <link href="https://yjyrichard.github.io/posts/d2381bcd.html"/>
    <id>https://yjyrichard.github.io/posts/d2381bcd.html</id>
    <published>2025-08-25T11:59:05.840Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第六讲</h1><h3 id="up-down-over-under"><code>up</code>, <code>down</code>, <code>over</code>, <code>under</code></h3><hr><h3 id="第一关：能量满满的-up"><strong>第一关：能量满满的 <code>up</code></strong></h3><p><code>up</code> 这个词，你一看到它，脑海里第一个蹦出来的画面是什么？没错，就是一个向上的箭头 <strong>↑</strong>！它的所有意思，都和这个“向上”的感觉有关。</p><h4 id="核心灵魂：向上、起来"><strong>核心灵魂：向上、起来</strong></h4><p>这是 <code>up</code> 最基本的意思，表示物理空间上的移动。</p><ul><li><code>Stand up!</code> (站起来！)</li><li><code>The balloon is going up.</code> (气球正在向上飞。)</li><li><code>Look up at the sky.</code> (抬头看天空。)</li></ul><h4 id="魔法变身1：从“向上”到“完成、彻底”"><strong>魔法变身1：从“向上”到“完成、彻底”</strong></h4><p>想象一个杯子，你往里面倒水，水面不断 <code>up</code> (上升)，直到倒满，这件事就 <strong>完成</strong> 了。所以 <code>up</code> 经常用来表示“做完、用光、吃光”，有一种“彻底干完”的感觉。</p><ul><li><code>Eat up your vegetables.</code> (把你的蔬菜 <strong>吃光</strong>。)<ul><li><em>为什么用 up？</em> -&gt; 表示吃到一点不剩，彻底完成“吃”这个动作。</li></ul></li><li><code>Drink up your milk.</code> (把牛奶 <strong>喝完</strong>。)</li><li><code>Clean up your room.</code> (把你的房间 <strong>彻底打扫干净</strong>。)</li><li><code>The time is up.</code> (时间到了。)<ul><li><em>为什么用 up？</em> -&gt; 分配给你的时间已经完全用“光”了。</li></ul></li></ul><h4 id="魔法变身2：从“向上”到“出现、发生、状态变好”"><strong>魔法变身2：从“向上”到“出现、发生、状态变好”</strong></h4><p>一个东西从看不见到看得见，是不是像从地平线“升起来”一样？一个人的情绪从低落到开心，能量是不是在“向上走”？</p><ul><li><code>show up</code> (露面；出现)<ul><li><code>He didn't show up for the party.</code> (他没在派对上 <strong>露面</strong>。)</li><li><em>为什么用 up？</em> -&gt; 像太阳升起一样，突然“冒出来”让大家看到。</li></ul></li><li><code>cheer up</code> (振作起来)<ul><li><code>Cheer up! Everything will be fine.</code> ( <strong>打起精神来</strong>！一切都会好起来的。)</li><li><em>为什么用 up？</em> -&gt; 让你的情绪和精神状态 <code>up</code> (向上走)。</li></ul></li><li><code>What's up?</code> (怎么了？/ 你好吗？)<ul><li><em>为什么用 up？</em> -&gt; 问“最近有什么新鲜事 <strong>发生(up)</strong> 吗？”</li></ul></li></ul><h4 id="魔法变身3：从“向上”到“地位高、由你决定”"><strong>魔法变身3：从“向上”到“地位高、由你决定”</strong></h4><p>在古代，地位高的人是不是都坐在“上面”？所以 <code>up</code> 也可以引申为决定权。</p><ul><li><code>It's up to you.</code> (你来决定。)<ul><li><em>为什么用 up？</em> -&gt; 决定权这个“球”被抛到了你的“上方”，由你来掌控。</li></ul></li></ul><p><strong>小结一下 <code>up</code>：</strong> 记住核心是 <strong>“向上” ↑</strong>，然后它能变身为 <strong>“完成”、“出现/变好”</strong> 和 <strong>“决定权”</strong>。</p><hr><h3 id="第二关：冷静沉稳的-down"><strong>第二关：冷静沉稳的 <code>down</code></strong></h3><p><code>down</code> 就是 <code>up</code> 的反义词。它的核心灵魂就是一个向下的箭头 <strong>↓</strong>。所有意思都围绕着“向下”展开。</p><h4 id="核心灵魂：向下、下坠"><strong>核心灵魂：向下、下坠</strong></h4><p>这是 <code>down</code> 最基本的意思，表示物理上的向下移动。</p><ul><li><code>Sit down, please.</code> (请坐下。)</li><li><code>The leaves are falling down.</code> (树叶正在飘落下来。)</li><li><code>He lay down on the bed.</code> (他躺在了床上。)</li></ul><h4 id="魔法变身1：从“向下”到“能量降低、变弱、变小”"><strong>魔法变身1：从“向下”到“能量降低、变弱、变小”</strong></h4><p>和 <code>up</code> 相反，<code>down</code> 代表着能量、速度、音量的减弱。</p><ul><li><code>slow down</code> (减速)<ul><li><code>Please slow down. You're driving too fast.</code> (请 <strong>慢下来</strong>。你开得太快了。)</li><li><em>为什么用 down？</em> -&gt; 让速度的指针“向下走”。</li></ul></li><li><code>calm down</code> (冷静下来)<ul><li><code>Calm down and tell me what happened.</code> ( <strong>冷静下来</strong>，告诉我发生了什么。)</li><li><em>为什么用 down？</em> -&gt; 让你激动的情绪（高能量）“降下来”。</li></ul></li><li><code>turn down the music</code> (把音乐调小声)<ul><li><em>为什么用 down？</em> -&gt; 把音量旋钮“向下转”。</li></ul></li></ul><h4 id="魔法变身2：从“向下”到“停止、关闭、倒下”"><strong>魔法变身2：从“向下”到“停止、关闭、倒下”</strong></h4><p>当能量降到最低点，机器会怎么样？会停止运转。公司会怎么样？会倒闭。</p><ul><li><code>shut down</code> (关机；关闭)<ul><li><code>Don't forget to shut down the computer.</code> (别忘了 <strong>关掉</strong> 电脑。)</li><li><em>为什么用 down？</em> -&gt; 彻底停止运行，能量降为零。</li></ul></li><li><code>break down</code> (发生故障；崩溃)<ul><li><code>My car broke down on the way to work.</code> (我的车在上班路上 <strong>抛锚了</strong>。)</li><li><em>为什么用 down？</em> -&gt; 车子坏了，完全“倒下”不动了。</li></ul></li><li><code>The old factory closed down last year.</code> (那家老工厂去年 <strong>倒闭了</strong>。)</li></ul><p><strong>小结一下 <code>down</code>：</strong> 记住核心是 <strong>“向下” ↓</strong>，然后它能变身为 <strong>“能量降低”</strong> 和 <strong>“停止运转”</strong>。</p><hr><h3 id="第三关：跨越一切的-over"><strong>第三关：跨越一切的 <code>over</code></strong></h3><p><code>over</code> 的核心画面感，是在一个东西的“上方”，并且经常带有一种“跨越”或“覆盖”的动态感。想象一座桥（bridge）<code>over</code> a river。</p><h4 id="核心灵魂：在…上方、覆盖"><strong>核心灵魂：在…上方、覆盖</strong></h4><ul><li><code>The cloth is over the table.</code> (那块布 <strong>盖在</strong> 桌子上。)<ul><li><em>为什么用 over？</em> -&gt; 强调的是“覆盖”在整个表面上。</li></ul></li><li><code>The plane is flying over the city.</code> (飞机正飞越城市的 <strong>上空</strong>。)</li></ul><h4 id="魔法变身1：从“跨越”到“克服、结束”"><strong>魔法变身1：从“跨越”到“克服、结束”</strong></h4><p>想象你面前有一道障碍，你 <code>jump over</code> (跳过) 它，是不是就意味着你 <strong>克服</strong> 了它？当你跑 <code>over</code> (越过) 终点线，比赛是不是就 <strong>结束</strong> 了？</p><ul><li><code>get over</code> (克服；恢复)<ul><li><code>He finally got over his illness.</code> (他终于从病中 <strong>恢复</strong> 了过来。)</li><li><em>为什么用 over？</em> -&gt; 像是“跨过”了生病这个难关。</li></ul></li><li><code>The game is over.</code> (游戏 <strong>结束</strong> 了。)</li><li><code>think over</code> (仔细考虑)<ul><li><em>为什么用 over？</em> -&gt; 把一个问题从头到尾、方方面面都“跨越”一遍，想个透彻。</li></ul></li></ul><h4 id="魔法变身2：从“上方”到“超过”"><strong>魔法变身2：从“上方”到“超过”</strong></h4><p>一个东西的位置比另一个高，那它的数量、程度是不是也可能比另一个“高”？</p><ul><li><code>Over 1,000 students are on the playground.</code> ( <strong>超过</strong> 1000名学生在操场上。)</li><li><code>He is over 40 years old.</code> (他 <strong>超过</strong> 40岁了。)</li></ul><p><strong>小结一下 <code>over</code>：</strong> 记住核心是 <strong>“上方跨越/覆盖”</strong>，然后它能变身为 <strong>“克服/结束”</strong> 和 <strong>“数量超过”</strong>。</p><hr><h3 id="第四关：深藏不露的-under"><strong>第四关：深藏不露的 <code>under</code></strong></h3><p><code>under</code> 是 <code>over</code> 的反义词。它的核心画面感，是在一个东西的“正下方”。</p><h4 id="核心灵魂：在…正下方"><strong>核心灵魂：在…正下方</strong></h4><ul><li><code>The cat is sleeping under the table.</code> (猫在桌子 <strong>下面</strong> 睡觉。)</li><li><code>He put the key under the mat.</code> (他把钥匙放在了门垫 <strong>下面</strong>。)</li></ul><h4 id="魔法变身：从“在下方”到“在…影响-控制-状态下”"><strong>魔法变身：从“在下方”到“在…影响/控制/状态下”</strong></h4><p>想象一下，你在一个大领导的“手下”工作，是不是就处于他的管理 <strong>之下</strong>？一个项目在建设中，是不是就处于“建设”这个状态 <strong>之下</strong>？</p><ul><li><code>under control</code> (在控制之下)<ul><li><code>The fire is now under control.</code> (火势现在得到了 <strong>控制</strong>。)</li><li><em>为什么用 under？</em> -&gt; 火被消防员的力量“压在下面”。</li></ul></li><li><code>under construction</code> (在建设中)<ul><li><code>The new library is under construction.</code> (新图书馆正 <strong>在建设中</strong>。)</li><li><em>为什么用 under？</em> -&gt; 处于“建设”这个大过程的笼罩之下。</li></ul></li><li><code>under pressure</code> (在压力之下)<ul><li><code>She works well under pressure.</code> (她在 <strong>压力下</strong> 工作得很好。)</li></ul></li><li><code>under the law</code> (依照法律)<ul><li><em>为什么用 under？</em> -&gt; 我们的所有行为都在法律的管辖“之下”。</li></ul></li><li><strong>表示数量少于：</strong><ul><li><code>All the books are under 10 yuan.</code> (所有的书都 <strong>低于</strong> 10元。)</li></ul></li></ul><p><strong>小结一下 <code>under</code>：</strong> 记住核心是 <strong>“在正下方”</strong>，然后它能变身为 <strong>“在某种状态或控制下”</strong> 和 <strong>“数量少于”</strong>。</p><hr><h3 id="总结时刻"><strong>总结时刻</strong></h3><table><thead><tr><th style="text-align:left">介词</th><th style="text-align:left">核心图像</th><th style="text-align:left">魔法变身含义</th></tr></thead><tbody><tr><td style="text-align:left"><strong>up</strong></td><td style="text-align:left"><strong>↑ 向上</strong></td><td style="text-align:left">1. <strong>完成/用光</strong> (eat up) <br> 2. <strong>出现/变好</strong> (show up, cheer up) <br> 3. <strong>决定权</strong> (up to you)</td></tr><tr><td style="text-align:left"><strong>down</strong></td><td style="text-align:left"><strong>↓ 向下</strong></td><td style="text-align:left">1. <strong>能量降低</strong> (calm down) <br> 2. <strong>停止/关闭</strong> (shut down)</td></tr><tr><td style="text-align:left"><strong>over</strong></td><td style="text-align:left"><strong>↷ 跨越/覆盖</strong></td><td style="text-align:left">1. <strong>克服/结束</strong> (get over, game is over) <br> 2. <strong>超过</strong> (over 1000)</td></tr><tr><td style="text-align:left"><strong>under</strong></td><td style="text-align:left"><strong>⤓ 在…正下方</strong></td><td style="text-align:left">1. <strong>在…状态/控制下</strong> (under control) <br> 2. <strong>少于</strong> (under 10)</td></tr></tbody></table><p>同学们，英语学习就像搭积木。今天我们把 <code>up</code>, <code>down</code>, <code>over</code>, <code>under</code> 这四块最基础的积木研究透了。以后再遇到包含它们的短语，试着用它们的“核心灵魂”去感受一下，你会发现，很多意思一下子就猜到了！</p><p>多观察，多体会，你就是下一个介词小高手！</p>]]></content>
    
    
    <summary type="html">英语介词第六讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第三讲</title>
    <link href="https://yjyrichard.github.io/posts/6f858c36.html"/>
    <id>https://yjyrichard.github.io/posts/6f858c36.html</id>
    <published>2025-08-25T11:59:05.789Z</published>
    <updated>2025-08-25T12:00:49.214Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第三讲</h1><h3 id="逐个击破-on-off-in-out-at！"><strong>逐个击破 on, off, in, out, at！</strong></h3><p>同学们好！</p><p>还在为记不住介词用法而头疼吗？看到 <code>on</code>, <code>in</code>, <code>at</code> 就开始头晕？别担心！今天我们换一种思路，不靠死记硬背，而是去理解每个介词最核心的“灵魂”，让你像玩游戏通关一样，轻松掌握它们的用法！</p><p><strong>学习秘诀：</strong> 抓住核心思想，进行图像化联想！</p><hr><h3 id="第一关：ON-万物皆可“接触”"><strong>第一关：ON - 万物皆可“接触”</strong></h3><h4 id="⭐-核心思想：表面接触-Surface-Contact"><strong>⭐ 核心思想：表面接触 (Surface Contact)</strong></h4><p>想象一下，任何东西只要和另一个东西的<strong>表面挨着、贴着、接触着</strong>，我们就可以用 <code>on</code>！</p><h4 id="🧠-思维导图：从“接触”出发"><strong>🧠 思维导图：从“接触”出发</strong></h4><ol><li><strong>在…上（最常见的接触）</strong><ul><li><code>a book on the desk</code> (书在课桌上) -&gt; 书的底面<strong>接触</strong>了课桌的表面。</li><li><code>a photo on the wall</code> (墙上的一张照片) -&gt; 照片的背面<strong>接触</strong>了墙的表面。</li></ul></li><li><strong>接通 / 运行中（电路接触了）</strong><ul><li><code>turn on the light</code> (开灯) -&gt; 按下开关，电路<strong>接触</strong>并连通了。</li><li><code>The movie is on.</code> (电影正在上映) -&gt; 电影正在“播放”这个状态上<strong>接触</strong>着，表示“进行中”。</li></ul></li><li><strong>持续不断（动作接触着时间线）</strong><ul><li><code>go on</code> (继续) -&gt; 让动作<strong>接触</strong>着时间线，不要断开。</li><li><code>keep on doing sth.</code> (坚持做某事)</li></ul></li><li><strong>支撑 / 依赖（一种抽象的接触）</strong>  count on<ul><li><code>depend on sb.</code> (依靠某人) -&gt; 你的生活<strong>接触</strong>并依赖于他人的支撑。</li><li><code>feet on the scale</code> (脚踩在体重秤上) -&gt; 脚<strong>接触</strong>秤面，形成了支撑和压力。</li></ul></li><li><strong>特定日期（时间点接触日历）</strong><ul><li><code>on Sunday</code> (在周日) -&gt; 想象一下日历，你的计划正好<strong>贴在</strong>“周日”那一格上。</li><li><code>on July 1st</code> (在7月1日)</li></ul></li></ol><h4 id="💡-独家技巧：on-a-bus-vs-in-a-car"><strong>💡 独家技巧：<code>on</code> a bus vs. <code>in</code> a car</strong></h4><ul><li><strong>用 <code>on</code></strong>：对于那些你可以在里面<strong>站起来行走</strong>的大型交通工具，比如公交车、火车、飞机、轮船。想象你<strong>站在</strong>它们的甲板或地板上，脚与表面<strong>接触</strong>。<ul><li><code>on the bus</code>, <code>on the train</code>, <code>on the plane</code></li></ul></li><li><strong>用 <code>in</code></strong>：对于那些你只能<strong>坐进去</strong>的，空间较小的交通工具，比如小汽车、出租车。你感觉自己是被“包裹”<strong>在里面</strong>的。<ul><li><code>in the car</code>, <code>in a taxi</code></li></ul></li></ul><hr><h3 id="第二关：OFF-“接触”的反义词“脱离”"><strong>第二关：OFF - “接触”的反义词“脱离”</strong></h3><h4 id="⭐-核心思想：脱离-Separation-Detachment"><strong>⭐ 核心思想：脱离 (Separation / Detachment)</strong></h4><p><code>off</code> 就是 <code>on</code> 的反义词！只要是从一个表面、一个状态、一个位置<strong>分开、离开、断开</strong>，就用 <code>off</code>！</p><h4 id="🧠-思维导图：从“脱离”出发"><strong>🧠 思维导图：从“脱离”出发</strong></h4><ol><li><p><strong>离开表面（物理脱离）</strong></p><ul><li><code>take off your coat</code> (脱下你的外套) -&gt; 外套<strong>脱离</strong>你的身体表面。</li><li><code>fall off the bike</code> (从自行车上摔下来) -&gt; 你<strong>脱离</strong>了自行车。</li></ul></li><li><p><strong>断开 / 关闭（连接脱离）</strong></p><ul><li><code>turn off the light</code> (关灯) -&gt; 电路连接<strong>脱离</strong>了。</li><li><code>cut off the power</code> (切断电源) -&gt; 电源被<strong>切断脱离</strong>。</li></ul></li><li><p><strong>不工作 / 休息（从工作状态脱离）</strong></p><ul><li><code>He is off today.</code> (他今天休息。) -&gt; 他<strong>脱离</strong>了工作的状态。</li><li><code>call off the meeting</code> (取消会议) -&gt; 让会议从日程表上<strong>脱离</strong>。</li></ul></li><li><p><strong>去除 / 折扣（从整体中脱离）</strong></p><ul><li><code>20% off</code> (打八折) -&gt; 从原价中<strong>去除/脱离</strong>20%的部分。</li><li><code>clean off the dirt</code> (清除污垢) -&gt; 让污垢<strong>脱离</strong>物体表面。</li></ul></li><li><p><strong>出发 / 逃跑（从原地点脱离）</strong></p><ul><li><code>set off</code> (出发) -&gt; <strong>脱离</strong>你的出发点。</li><li><code>run off</code> (逃跑) -&gt; 快速<strong>脱离</strong>某个地方。</li></ul></li></ol><hr><h3 id="第三关：IN-在一个“空间”里"><strong>第三关：IN - 在一个“空间”里</strong></h3><h4 id="⭐-核心思想：在…里-Inside-a-Boundary"><strong>⭐ 核心思想：在…里 (Inside a Boundary)</strong></h4><p><code>in</code> 强调的是在一个<strong>立体空间</strong>或者一个<strong>范围</strong>的<strong>内部</strong>。这个“空间”可以是真实的，也可以是虚拟的。</p><h4 id="🧠-思维导图：从“在…里”出发"><strong>🧠 思维导图：从“在…里”出发</strong></h4><ol><li><p><strong>在真实空间里</strong></p><ul><li><code>in the box</code> (在盒子里) -&gt; 被盒子的四壁包围。</li><li><code>in the room</code> (在房间里)</li><li><code>arrive in Beijing</code> (到达北京) -&gt; 北京是一个很大的地理范围，你到达了它的<strong>内部</strong>。</li></ul></li><li><p><strong>在虚拟/抽象空间里</strong></p><ul><li><code>in danger</code> (处于危险之中) -&gt; 你被“危险”这种状态<strong>包围</strong>着。</li><li><code>fall in love</code> (坠入爱河) -&gt; 你进入了“爱”的这种情感<strong>范围</strong>里。</li><li><code>in the future</code> (在未来) -&gt; 在“未来”这段长长的时间<strong>范围</strong>里。</li></ul></li><li><p><strong>表示方式/语言（在…的方式里）</strong></p><ul><li><code>in English</code> (用英语) -&gt; 在“英语”这个语言体系<strong>里</strong>进行交流。</li><li><code>in cash</code> (用现金) -&gt; 在“现金”这种支付方式<strong>里</strong>完成交易。</li></ul></li><li><p><strong>表示一段时间后（在未来的时间段里）</strong></p><ul><li><code>in three years</code> (三年后) -&gt; 从现在开始，在未来三年的时间<strong>范围</strong>结束时。</li><li><code>in a short while</code> (一会儿以后)</li></ul></li></ol><hr><h3 id="第四关：OUT-从“空间”里出来"><strong>第四关：OUT - 从“空间”里出来</strong></h3><h4 id="⭐-核心思想：在…外-出来-Outside-Emerging"><strong>⭐ 核心思想：在…外 / 出来 (Outside / Emerging)</strong></h4><p><code>out</code> 正好是 <code>in</code> 的反义词。它表示从一个封闭的空间或范围<strong>向外移动</strong>，或者表示一种<strong>出现、显露、耗尽</strong>的状态。</p><h4 id="🧠-思维导图：从“在…外”出发"><strong>🧠 思维导图：从“在…外”出发</strong></h4><ol><li><p><strong>出去 / 出现（从里到外）</strong></p><ul><li><code>get out</code> (出去) -&gt; 从一个空间里<strong>出来</strong>。</li><li><code>find out the truth</code> (找出真相) -&gt; 让真相从隐藏的状态<strong>显露出来</strong>。</li><li><code>speak out</code> (大声说出来) -&gt; 让你的想法从脑子里<strong>出来</strong>。</li></ul></li><li><p><strong>在…范围之外（超出限制）</strong></p><ul><li><code>out of control</code> (失控) -&gt; 超<strong>出</strong>了控制的<strong>范围</strong>。</li><li><code>out of date</code> (过时的) -&gt; 超<strong>出</strong>了现在的日期/时代。</li><li><code>out of danger</code> (脱离危险) -&gt; 走<strong>出</strong>了危险的<strong>范围</strong>。</li></ul></li><li><p><strong>结束 / 耗尽（里面的东西没了）</strong></p><ul><li><code>put out the fire</code> (灭火) -&gt; 让火的生命力<strong>耗尽</strong>，从有到<strong>无</strong>。</li><li><code>run out of money</code> (钱用完了) -&gt; 钱包里的钱都跑<strong>出去</strong>了，<strong>耗尽</strong>了。</li><li><code>Mamba out.</code> (曼巴出局了/退场了) -&gt; 离开了赛场这个“局”。</li></ul></li></ol><hr><h3 id="第五关：AT-瞄准一个“点”"><strong>第五关：AT - 瞄准一个“点”</strong></h3><h4 id="⭐-核心思想：针对某点-Targeting-a-specific-point"><strong>⭐ 核心思想：针对某点 (Targeting a specific point)</strong></h4><p><code>at</code> 是最精确的介词！它不像 <code>in</code> (在一个大范围里) 或 <code>on</code> (在一个表面上)，<code>at</code> 强调的是一个<strong>非常具体、精确的点</strong>。这个“点”可以是时间点、地点、目标或状态。</p><h4 id="🧠-思维导图：从“针对某点”出发"><strong>🧠 思维导图：从“针对某点”出发</strong></h4><ol><li><p><strong>在某个精确地点</strong></p><ul><li><code>at the bus stop</code> (在公交车站) -&gt; 公交站是一个<strong>精确的小地点</strong>。</li><li><code>at the door</code> (在门口)</li><li><code>at home</code> / <code>at school</code> -&gt; 把家/学校看作一个进行活动的功能<strong>点</strong>。</li></ul></li><li><p><strong>在某个精确时间点</strong></p><ul><li><code>at 9:00</code> (在9点整) -&gt; 时间轴上一个非常精确的<strong>点</strong>。</li><li><code>at noon</code> (在中午)</li><li><code>at the end of the day</code> (在一天结束时) -&gt; “结束”这个<strong>时间点</strong>。</li></ul></li><li><p><strong>针对某个目标（动作的指向点）</strong></p><ul><li><code>look at me</code> (看着我) -&gt; 你的目光<strong>瞄准</strong>我这个<strong>点</strong>。</li><li><code>shoot at sb.</code> (向某人射击) -&gt; 子弹<strong>瞄准</strong>某人这个<strong>目标点</strong>。</li><li><code>shout at sb.</code> (对某人吼叫) -&gt; 带有攻击性，把吼叫当作武器<strong>瞄准</strong>某人。</li></ul></li><li><p><strong>在某个数值/状态点上</strong></p><ul><li><code>at the age of five</code> (在5岁时) -&gt; 人生时间线上的一个<strong>点</strong>。</li><li><code>at a speed of 100 km/h</code> (以每小时100公里的速度) -&gt; 速度计上的一个<strong>精确读数点</strong>。</li><li><code>at work</code> (在工作) -&gt; 处在“工作”这个状态<strong>点</strong>上。</li></ul></li></ol><hr><h3 id="总结与挑战"><strong>总结与挑战</strong></h3><p>记住，学习介词的关键是理解它们的<strong>核心画面感</strong>：</p><ul><li><strong>ON</strong> -&gt; 接触在一个<strong>面</strong>上</li><li><strong>OFF</strong> -&gt; 从一个<strong>面</strong>上脱离</li><li><strong>IN</strong> -&gt; 在一个<strong>立体空间/范围</strong>里</li><li><strong>OUT</strong> -&gt; 从一个<strong>空间/范围</strong>里出来</li><li><strong>AT</strong> -&gt; 瞄准一个<strong>精确的点</strong></li></ul><h4 id="✍️-实战演练：小试牛刀！"><strong>✍️ 实战演练：小试牛刀！</strong></h4><p>请用 <code>on</code>, <code>off</code>, <code>in</code>, <code>out</code>, <code>at</code> 填空。</p><ol><li>Please don’t put your feet ______ the table.</li><li>The train will arrive ______ 10:30 AM.</li><li>My birthday is ______ October.</li><li>It’s cold. You should turn ______ the heater.</li><li>We ran ______ of milk, so I need to go to the store.</li><li>He is angry and shouting ______ his brother.</li><li>I live ______ a small apartment ______ Shanghai.</li><li>Could you please turn ______ the music? It’s too loud.</li></ol><p>（答案在最后哦！）</p><p>希望这份讲义能帮助你和这些介词成为好朋友！加油！</p><hr><p><strong>答案：</strong></p><ol><li>on (脚接触桌面)</li><li>at (精确时间点)</li><li>in (月份是一个时间范围)</li><li>on (接通电路)</li><li>out (牛奶从有到无，耗尽了)</li><li>at (吼叫的目标点是弟弟)</li><li>in, in (公寓和上海都是一个空间/范围)</li><li>off (断开音乐)</li></ol><p>当然！承接上面的风格，我们来一场精彩的“进阶挑战赛”！</p><hr><h3 id="介词大作战：进阶挑战赛！"><strong>介词大作战：进阶挑战赛！</strong></h3><p>非常好！你已经成功闯过了五大基础关卡。现在，让我们把难度稍微提升一点，看看你是否能灵活运用这些介词的“核心灵魂”来解决更复杂的场景！准备好了吗？Let’s go!</p><h4 id="✍️-进阶挑战：思维大考验！"><strong>✍️ 进阶挑战：思维大考验！</strong></h4><p>请用 <code>on</code>, <code>off</code>, <code>in</code>, <code>out</code>, <code>at</code> 填空。</p><ol><li>The party starts ______ 8 PM sharp, so don’t be late!</li><li>I think I left my keys ______ the car. I can’t find them in my pocket.</li><li>She is an expert ______ the field of artificial intelligence.</li><li>The sign on the lawn says, “Please keep ______ the grass.”</li><li>It turns ______ that the quietest person in the room had the best idea.</li><li>Are you angry? Why are you looking ______ me like that?</li><li>We always exchange gifts ______ Christmas Day.</li><li>I was so tired after work that I fell asleep ______ the bus on my way home.</li><li>He took a day ______ from work to go to the doctor.</li><li>The store is having a big sale! Everything is 50% ______!</li></ol><hr><h4 id="答案与灵魂解析"><strong>答案与灵魂解析</strong></h4><p>准备好核对答案了吗？记住，重点不是对错，而是理解为什么！</p><ol><li><p><strong>at</strong></p><ul><li><strong>灵魂解析：</strong> <code>8 PM sharp</code> (8点整) 是时间轴上一个极其<strong>精确的点</strong>，所以用 <code>at</code> 来“瞄准”它。</li></ul></li><li><p><strong>in</strong></p><ul><li><strong>灵魂解析：</strong> <code>the car</code> (小汽车) 是一个你被包裹<strong>在里面</strong>的<strong>封闭空间</strong>，所以用 <code>in</code>。</li></ul></li><li><p><strong>in</strong></p><ul><li><strong>灵魂解析：</strong> <code>the field of artificial intelligence</code> (人工智能领域) 是一个广阔、抽象的知识<strong>范围</strong>或<strong>空间</strong>，她是在这个“领域里”的专家。</li></ul></li><li><p><strong>off</strong></p><ul><li><strong>灵魂解析：</strong> <code>keep off</code> 的意思是保持<strong>脱离</strong>状态。这个标志要求你的脚不要与草坪的表面<strong>接触</strong>，所以是 <code>on</code> 的反义词 <code>off</code>。</li></ul></li><li><p><strong>out</strong></p><ul><li><strong>灵魂解析：</strong> <code>turns out</code> 的意思是“结果是…”、“原来是…”。这表示真相或结果从隐藏的状态中<strong>显露出来</strong>，符合 <code>out</code> 从里到外的核心思想。</li></ul></li><li><p><strong>at</strong></p><ul><li><strong>灵魂解析：</strong> <code>look at</code> 表示目光的<strong>指向</strong>和<strong>目标</strong>。你的目光像一支箭，<strong>瞄准</strong>了我这个<strong>点</strong>。</li></ul></li><li><p><strong>on</strong></p><ul><li><strong>灵魂解析：</strong> <code>Christmas Day</code> (圣诞节当天) 是日历上一个<strong>特定的日子</strong>，我们的活动正好“贴”在了那一天的<strong>表面</strong>上。</li></ul></li><li><p><strong>on</strong></p><ul><li><strong>灵魂解析：</strong> <code>the bus</code> (公交车) 是一个你可以在里面站立行走的大型交通工具。想象你的脚<strong>接触</strong>在公交车的地板<strong>表面</strong>上。</li></ul></li><li><p><strong>off</strong></p><ul><li><strong>灵魂解析：</strong> <code>take a day off</code> (休一天假) 意味着你从工作的状态或日程表上<strong>脱离</strong>开来，所以用 <code>off</code>。</li></ul></li><li><p><strong>off</strong></p><ul><li><strong>灵魂解析：</strong> <code>50% off</code> (打五折) 表示从原价中<strong>去除/脱离</strong>50%的部分。</li></ul></li></ol><p>做得怎么样？有没有感觉对这些介词的“灵魂”理解更深了？继续保持这种图像化联想的习惯，你会发现介词真的没那么可怕！</p>]]></content>
    
    
    <summary type="html">英语介词第三讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第四讲</title>
    <link href="https://yjyrichard.github.io/posts/d8a89553.html"/>
    <id>https://yjyrichard.github.io/posts/d8a89553.html</id>
    <published>2025-08-25T11:59:05.759Z</published>
    <updated>2025-08-25T12:00:49.214Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第四讲</h1><h3 id="介词-from-to-for-of-with">**介词 from, to, for, of, with **</h3><p>同学们好！</p><p>介词是英语中非常重要的小词，它们虽然短小，但却能表达丰富的意思。很多同学觉得介词难记，其实是因为没有抓住它们的核心思想。今天，我们就通过一些里的方法，来理解五个最常用的介词，你会发现，只要掌握了每个词的“核心”，所有用法就都想通了！</p><hr><h3 id="1-from-核心思想：起点-分离"><strong>1. from - 核心思想：起点 / 分离</strong></h3><p><code>from</code> 这个词，你只要记住它的核心意思是 <strong>“起点”</strong>，就像从 A 点出发一样。所有的用法都和这个“起点”有关。</p><p><strong>用法一：表示“起点” (从…)</strong><br>这是 <code>from</code> 最基本的意思，可以指具体的地点，也可以是抽象的时间或来源。</p><ul><li><strong>具体的起点</strong><ul><li><code>from Beijing to Shanghai</code> (从北京到上海)</li><li><code>I am from Hangzhou.</code> (我来自杭州)</li></ul></li><li><strong>抽象的起点</strong><ul><li><code>from 8:00 to 10:00</code> (从8点到10点)</li><li><code>learn from sb.</code> (从某人那里学到) - 知识的起点是某人</li><li><code>hear from sb.</code> (收到某人的来信) - 信的起点是某人</li></ul></li><li><strong>表示“原因”或“原材料”</strong><ul><li><code>die from...</code> (死于…) - 疾病是死亡的起点</li><li><code>be made from...</code> (由…制造) - 看不出原材料的样子，强调来源   vs    be made of</li><li><code>result from...</code> (由…造成) - 某个原因是结果的起点</li></ul></li></ul><p><strong>用法二：表示“分离” (离开…)</strong><br>从“起点”出发，自然就有一种“离开、分离”的感觉。</p><ul><li><code>keep away from...</code> (远离…)</li><li><code>be different from...</code> (和…不同) - 思想或状态上分离开</li><li><code>prevent/stop sb. from doing sth.</code> (阻止某人做某事) - 让他离开“做这件事”的状态</li></ul><p><strong>小结：</strong> 记住 <code>from</code> 就是 <strong>“从一个点出来”</strong>，无论是地点、时间、原因还是状态。</p><hr><h3 id="2-to-核心思想：方向-目标"><strong>2. to - 核心思想：方向 / 目标</strong></h3><p><code>to</code> 和 <code>from</code> 正好相反，它的核心意思是 <strong>“方向性”</strong>，表示从 A 到 B 的那个 <strong>“去向”</strong> 和 <strong>“目标”</strong>。</p><p><strong>用法一：表示“方向和目的地” (到…)</strong><br>这是 <code>to</code> 最直观的用法，强调一个动作的方向。</p><ul><li><code>go to school</code> (去学校)</li><li><code>from A to B</code> (从A到B)</li><li><code>give sth. to sb.</code> (把某物给某人) - 物品移动的方向是“某人”</li><li><code>send sth. to sb.</code> (把某物寄给某人)</li></ul><p><strong>用法二：表示“关联” (对于…)</strong><br>从“方向”引申出来，可以表示两个事物之间的关联，一个指向另一个。</p><ul><li><code>the key to the door</code> (门的钥匙) - 钥匙指向门</li><li><code>the answer to the question</code> (问题的答案) - 答案指向问题</li><li><code>belong to...</code> (属于…) - 归属关系，指向主人</li></ul><p><strong>用法三：表示“目标”(不定式 to do)</strong><br>这是 <code>to</code> 在语法中的一个重要用法，<code>to</code> 后面跟动词原形，表示一个要去做的 <strong>“目标”</strong> 或 <strong>“目的”</strong>。</p><ul><li><code>I want to eat it.</code> (我想吃掉它) - “吃”是我的目标</li><li><code>We need to do sth.</code> (我们需要做某事) - “做某事”是我们的目标</li><li><code>To see is to believe.</code> (眼见为实)</li></ul><p><strong>小结：</strong> 记住 <code>to</code> 就是一个 <strong>“箭头 →”</strong>，永远指向一个方向、目的地或目标。</p><hr><h3 id="3-for-核心思想：为了-目的"><strong>3. for - 核心思想：为了 / 目的</strong></h3><p><code>for</code> 的核心意思是 <strong>“为了”</strong>，表达一个动作的 <strong>“目的”</strong> 或 <strong>“原因”</strong>。</p><p><strong>用法一：表示“为了谁” (受益人)</strong><br>这个动作是为谁而做的。</p><ul><li><code>I will buy a pen for you.</code> (我为你买支笔) - 你是受益者</li><li><code>a book for babys</code> (给宝宝们的书) - 书的目标读者是宝宝</li><li><code>This letter is for you.</code> (这封信是给你的)</li></ul><p><strong>小贴士：<code>for</code> 和 <code>to</code> 的区别</strong></p><ul><li><code>buy sth. for sb.</code> (为某人买) - 强调“为了谁”这个目的。</li><li><code>give sth. to sb.</code> (把…给某人) - 强调“给”这个动作的方向。</li></ul><p><strong>用法二：表示“目的或用途” (为了什么)</strong></p><ul><li><code>The train is for Chengdu.</code> (这趟火车是开往成都的) - 目的地是成都</li><li><code>leave for...</code> (动身去…)</li><li><code>look for...</code> (寻找…) - 为了找到它</li><li><code>wait for...</code> (等待…)</li></ul><p><strong>用法三：表示“原因”</strong></p><ul><li><code>be known for...</code> (因…而闻名)</li><li><code>Thank you for your help.</code> (为你的帮助而感谢)</li></ul><p><strong>小结：</strong> 记住 <code>for</code> 就是 <strong>“为了一个目标”</strong>，这个目标可以是一个人，也可以是一件事。</p><hr><h3 id="4-of-核心思想：所属关系"><strong>4. of - 核心思想：所属关系</strong></h3><p><code>of</code> 最核心的意思就是 <strong>“…的”</strong>，表示一种 <strong>“所属关系”</strong>。A of B 的结构，核心词是 A，B 用来修饰 A。A of B 翻译为B的A</p><p><strong>用法一：表示“所属” (…的)</strong><br>这是 <code>of</code> 最常见的用法。</p><ul><li><code>the door of the room</code> (房间的门)</li><li><code>the name of the game</code> (游戏的名字)</li></ul><p><strong>用法二：表示“相关”</strong><br>表示动作涉及的对象，可以理解为“关于…的”。</p><ul><li><code>take care of sb.</code> (照顾某人) - 你的“照顾”是属于这个人的</li><li><code>remind sb. of sth.</code> (提醒某人某事)</li><li><code>be made of...</code> (由…制作) - 看得出原材料，强调“材料是…的”</li></ul><p><strong>用法三：表示“整体中的一部分” (量词)</strong><br>表示数量时，<code>of</code> 后面的名词是整体。</p><ul><li><code>a lot of money</code> (大量的钱)</li><li><code>a cup of tea</code> (一杯茶) - 茶是整体，杯是部分</li><li><code>each of us</code> (我们中的每一个)</li></ul><p><strong>小结：</strong> 记住 <code>of</code> 就表示 <strong>“…的”</strong>，用来连接两个有归属或相关联系的名词。</p><hr><h3 id="5-with-核心思想：伴随"><strong>5. with - 核心思想：伴随</strong></h3><p><code>with</code> 的核心意思特别好记，就是 <strong>“伴随”</strong>，表示“和…在一起”或“带着…”。</p><p><strong>用法一：表示“和…一起” (伴随)</strong><br>表示人或物一起行动。</p><ul><li><code>play with sb.</code> (和某人一起玩)</li><li><code>go home with my friend</code> (和我的朋友一起回家)</li><li><code>talk with sb.</code> (和某人聊天)</li><li><code>agree with sb.</code> (同意某人) - 观点和他在一起</li></ul><p><strong>用法二：表示“拥有”或“带有”</strong><br>可以理解为某个特征“伴随”在某人或某物身上。</p><ul><li><code>the boy with big eyes</code> (有双大眼睛的男孩) - 大眼睛伴随着男孩</li><li><code>a room with a nice view</code> (一个有好风景的房间)</li></ul><p><strong>用法三：表示“使用工具” (用)</strong><br>做某个动作时，伴随的工具是什么。</p><ul><li><code>write with a pen</code> (用钢笔写字)</li><li><code>beat it with my hand</code> (用手打它)</li><li><code>be covered with snow</code> (被雪覆盖着) - 伴随着雪</li></ul><p><strong>小结：</strong> 记住 <code>with</code> 就是 <strong>“手拉手”</strong>，表示人、物、工具或特征伴随在一起。</p><hr><p><strong>最后总结一下核心思想：</strong></p><ul><li><strong>from</strong>：起点，从…出来</li><li><strong>to</strong>：方向，到一个箭头 →</li><li><strong>for</strong>：目的，为了…</li><li><strong>of</strong>：所属，…的</li><li><strong>with</strong>：伴随，和…一起</li></ul><p>希望这份讲义能帮助你更好地理解和使用这些介词！多读多练，你一定可以掌握它们！</p>]]></content>
    
    
    <summary type="html">英语介词第四讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第二讲</title>
    <link href="https://yjyrichard.github.io/posts/229b2f64.html"/>
    <id>https://yjyrichard.github.io/posts/229b2f64.html</id>
    <published>2025-08-25T11:59:05.703Z</published>
    <updated>2025-08-25T12:00:49.214Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第二讲</h1><h3 id="告别死记硬背！这样学介词才高效！"><strong>告别死记硬背！这样学介词才高效！</strong></h3><p>嗨，同学！</p><p>是不是觉得介词特别头疼？一个 <code>on</code> 一会儿是“在……上”，一会儿是“打开”，一会儿又是“继续”，到底想怎样？！</p><p>别急！今天我们就来解锁介词的终极密码。秘诀就是：<strong>抓住每个介词的“核心含义”！</strong></p><p>想象一下，每个介词都像一棵大树。它有一个最根本的<strong>树干（核心含义）</strong>，然后从这个树干上长出了很多<strong>树枝（不同的用法）</strong>。只要你抓住了树干，理解那些树枝就容易多啦！</p><p>我们的学习方法就是：<strong>从“看得见”的具象意思，到“想得到”的抽象意思。</strong></p><p>准备好了吗？我们开始吧！</p><hr><h4 id="1-on-核心：接触"><strong>1. on - 核心：接触</strong></h4><p>想象一下，任何东西<strong>相互挨着、碰着</strong>，就是 <code>on</code> 的核心感觉。</p><ul><li><p><strong>具象（看得见）：</strong></p><ul><li><em>The book is <strong>on</strong> the desk.</em> (书在桌子上)<ul><li>【理解】书的底面和桌子的上表面<strong>接触</strong>了。</li></ul></li><li><em>My dog is <strong>on</strong> the box.</em> (我的狗在箱子上)<ul><li>【理解】狗狗和箱子表面<strong>接触</strong>了。</li></ul></li></ul></li><li><p><strong>抽象（想得到）：</strong></p><ul><li><em>Turn <strong>on</strong> the light.</em> (开灯)<ul><li>【引申】打开开关，让电路<strong>接触</strong>上了，所以灯亮了。</li></ul></li><li><em>Keep <strong>on</strong> reading.</em> / <em>Please go <strong>on</strong>.</em> (继续读 / 请继续)<ul><li>【引申】让你的行动和“阅读”这件事一直保持<strong>接触</strong>，不要断开，也就是“继续”。</li></ul></li></ul></li></ul><h4 id="2-off-核心：脱离、断开-和-on-正好相反"><strong>2. off - 核心：脱离、断开</strong> (和 on 正好相反)</h4><p><code>off</code> 的感觉就是<strong>分开、离开、不接触</strong>了。</p><ul><li><p><strong>具象（看得见）：</strong></p><ul><li><em>Take <strong>off</strong> your shoes.</em> (脱掉你的鞋)<ul><li>【理解】让鞋子和你的脚<strong>脱离</strong>开。</li></ul></li><li><em>The apple fell <strong>off</strong> the tree.</em> (苹果从树上掉下来了)<ul><li>【理解】苹果和树枝<strong>脱离</strong>了。</li></ul></li></ul></li><li><p><strong>抽象（想得到）：</strong></p><ul><li><em>Turn <strong>off</strong> the light.</em> (关灯)<ul><li>【引申】切断开关，让电路<strong>断开</strong>了。</li></ul></li><li><em>He is <strong>off</strong> today.</em> (他今天休息/请假了)<ul><li>【引申】他从正常的工作状态中<strong>脱离</strong>出来了。</li></ul></li><li><em>This shirt is 20% <strong>off</strong>.</em> (这件衬衫打八折)<ul><li>【引申】从原价里<strong>拿掉/脱离</strong>20%的价钱。</li></ul></li></ul></li></ul><h4 id="3-at-核心：一个点-目标感"><strong>3. at - 核心：一个点 (目标感)</strong></h4><p><code>at</code> 就像我们用手指着一个<strong>精确的点</strong>，可以是空间上的点，时间上的点，或者一个目标点。</p><ul><li><p><strong>具象（看得见）：</strong></p><ul><li><em>I am waiting <strong>at</strong> the bus stop.</em> (我在公交站等车)<ul><li>【理解】公交站是一个精确的<strong>地点</strong>。</li></ul></li><li><em>She is looking <strong>at</strong> me.</em> (她在看着我)<ul><li>【理解】她的目光聚焦在我这个<strong>点</strong>上。</li></ul></li></ul></li><li><p><strong>抽象（想得到）：</strong></p><ul><li><em>The movie starts <strong>at</strong> 8 PM.</em> (电影晚上8点开始)<ul><li>【引申】8点是时间线上的一个精确<strong>时间点</strong>。</li></ul></li><li><em>He shouted <strong>at</strong> me.</em> (他冲我大喊)<ul><li>【引申】我成了他喊叫的<strong>目标点</strong>。</li></ul></li><li><em>He is good <strong>at</strong> English.</em> (他擅长英语)<ul><li>【引申】在英语这个<strong>点</strong>（领域）上，他做得很好。</li></ul></li></ul></li></ul><h4 id="4-in-核心：在…内部-范围感"><strong>4. in - 核心：在…内部 (范围感)</strong></h4><p><code>in</code> 强调在一个<strong>空间、范围或状态的里面</strong>。像被包围起来的感觉。</p><ul><li><p><strong>具象（看得见）：</strong></p><ul><li><em>My dog is <strong>in</strong> the box.</em> (我的狗在箱子里)<ul><li>【理解】在一个三维<strong>空间内部</strong>。</li></ul></li><li><em>I live <strong>in</strong> Beijing.</em> (我住在北京)<ul><li>【理解】在北京这个城市<strong>范围内部</strong>。</li></ul></li></ul></li><li><p><strong>抽象（想得到）：</strong></p><ul><li><em>My birthday is <strong>in</strong> May.</em> (我的生日在五月)<ul><li>【引申】在五月这个时间<strong>范围内部</strong>。</li></ul></li><li><em>He is <strong>in</strong> danger.</em> (他身处危险之中)<ul><li>【引申】他在“危险”这个<strong>状态内部</strong>。</li></ul></li><li><em>I am interested <strong>in</strong> music.</em> (我对音乐感兴趣)<ul><li>【引申】我的兴趣沉浸在音乐这个<strong>领域内部</strong>。</li></ul></li></ul></li></ul><h4 id="5-to-核心：方向和终点-去向"><strong>5. to - 核心：方向和终点 (去向)</strong></h4><p><code>to</code> 就像一个箭头，明确地<strong>指向一个方向或目的地</strong>。</p><ul><li><p><strong>具象（看得见）：</strong></p><ul><li><em>I walk <strong>to</strong> school every day.</em> (我每天走着去学校)<ul><li>【理解】方向是学校，终点也是学校。</li></ul></li></ul></li><li><p><strong>抽象（想得到）：</strong></p><ul><li><em>Give it <strong>to</strong> me.</em> (把它给我)<ul><li>【引申】这个东西移动的<strong>终点</strong>是我。</li></ul></li><li><em>She is good <strong>to</strong> you.</em> (她对你很好)<ul><li>【引申】她的“好”这个行为，是<strong>朝向</strong>你的。</li></ul></li><li><em>From Monday <strong>to</strong> Friday.</em> (从周一到周五)<ul><li>【引申】时间范围的<strong>终点</strong>是周五。</li></ul></li></ul></li></ul><h4 id="6-from-核心：起点-来源-和-to-相对"><strong>6. from - 核心：起点 (来源)</strong> (和 to 相对)</h4><p><code>from</code> 也是一个箭头，但它表示<strong>从哪里出发，来源是哪里</strong>。</p><ul><li><p><strong>具象（看得见）：</strong></p><ul><li><em>He is <strong>from</strong> Russia.</em> (他来自俄罗斯)<ul><li>【理解】他的<strong>来源地</strong>是俄罗斯。</li></ul></li></ul></li><li><p><strong>抽象（想得到）：</strong></p><ul><li><em>I work <strong>from</strong> 9 a.m.</em> (我从早上9点开始工作)<ul><li>【引申】9点是工作的<strong>时间起点</strong>。</li></ul></li><li><em>I received a letter <strong>from</strong> my friend.</em> (我收到了朋友的来信)<ul><li>【引申】信件的<strong>来源</strong>是我的朋友。</li></ul></li></ul></li></ul><h4 id="7-for-核心：为了-目标-原因"><strong>7. for - 核心：为了 (目标/原因)</strong></h4><p><code>for</code> 强调一个<strong>目的、目标或原因</strong>，可以翻译成“为了”、“给”。</p><ul><li><em>This gift is <strong>for</strong> you.</em> (这个礼物是给你的)<ul><li>【理解】你的<strong>目标</strong>是这个礼物。</li></ul></li><li><em>I bought it <strong>for</strong> my mom.</em> (我为我妈妈买了它)<ul><li>【理解】购买的<strong>目的</strong>是为了妈妈。</li></ul></li><li><em>Thanks <strong>for</strong> your help.</em> (谢谢你的帮助)<ul><li>【理解】感谢的<strong>原因</strong>是你的帮助。</li></ul></li><li><em>We are leaving <strong>for</strong> Shanghai.</em> (我们即将出发去上海)<ul><li>【理解】我们的<strong>目的地</strong>是上海。</li></ul></li></ul><h4 id="8-of-核心：属于-从属关系"><strong>8. of - 核心：属于 (从属关系)</strong></h4><p><code>of</code> 最核心的意思就是**“…的”<strong>，表示一部分与整体、所有者与物品之间的</strong>从属关系**。</p><ul><li><em>the leg <strong>of</strong> the table</em> (桌子的一条腿)<ul><li>【理解】腿<strong>属于</strong>桌子。</li></ul></li><li><em>a friend <strong>of</strong> mine</em> (我的一个朋友)<ul><li>【理解】这个朋友<strong>属于</strong>“我的朋友们”这个圈子。</li></ul></li><li><em>It was kind <strong>of</strong> you to help me.</em> (你真好，帮助了我)<ul><li>【理解】“善良”这个品质是<strong>属于</strong>你的。</li></ul></li></ul><h4 id="9-with-核心：伴随-在一起"><strong>9. with - 核心：伴随 (在一起)</strong></h4><p><code>with</code> 的感觉就是**“和…一起”**，可以是人、物或状态。</p><ul><li><em>I will go <strong>with</strong> you.</em> (我会和你一起去)<ul><li>【理解】人与人<strong>伴随</strong>。</li></ul></li><li><em>Write <strong>with</strong> a pen.</em> (用钢笔写字)<ul><li>【理解】写字这个动作有钢笔<strong>伴随</strong>，也就是“用”笔。</li></ul></li><li><em>a girl <strong>with</strong> big eyes</em> (一个大眼睛的女孩)<ul><li>【理解】“大眼睛”这个特征<strong>伴随</strong>着这个女孩。</li></ul></li></ul><h3 id="揭秘-about：不止是“关于”那么简单！"><strong>揭秘 about：不止是“关于”那么简单！</strong></h3><p>同学们好！我们来单独聊聊 <code>about</code> 这个词。你可能最熟悉它的意思是“关于”，但它其实还有“大约”、“到处”等意思，是不是有点晕？</p><p>别怕，<code>about</code> 也有一个核心含义，抓住它，一切都迎刃而解！</p><h4 id="about-核心：围绕着-around"><strong>about - 核心：围绕着 (around)</strong></h4><p>你可以把 <code>about</code> 想象成<strong>一个中心点和它周围的一圈东西</strong>。所有的意思都是从这个“围绕感”引申出来的。</p><p><em>(可以想象成太阳和围绕它转的行星)</em></p><hr><p><strong>1. 引申义：“关于” (主题)</strong></p><p>这是最常见的用法，也是最经典的“围绕”引申。</p><ul><li><em>This is a book <strong>about</strong> China.</em> (这是一本关于中国的书。)<ul><li>【理解】想象“中国”是中心点，这本书里所有的内容，比如历史、文化、美食，都<strong>围绕着</strong>“中国”这个主题来写。</li></ul></li><li><em>Let’s talk <strong>about</strong> the movie.</em> (我们来聊聊这部电影吧。)<ul><li>【理解】我们的谈话将<strong>围绕着</strong>“电影”这个中心话题展开。</li></ul></li></ul><p><strong>2. 引申义：“大约” (近似)</strong></p><p>数字也可以有“中心点”！</p><ul><li><em>It’s <strong>about</strong> 9 o’clock.</em> (现在大约9点。)<ul><li>【理解】准确的时间就在9点这个时间点的<strong>周围</strong>，可能是8:58，也可能是9:02，总之就在附近。</li></ul></li><li><em>There are <strong>about</strong> 30 people here.</em> (这里大约有30人。)<ul><li>【理解】实际人数在30这个数字的<strong>周围</strong>徘徊。</li></ul></li></ul><p><strong>3. 引申义：“到处，四处” (空间)</strong></p><p>这是 <code>about</code> 最接近它兄弟 <code>around</code> 的一个意思。</p><ul><li><em>The kids are running <strong>about</strong> in the park.</em> (孩子们在公园里到处跑。)<ul><li>【理解】他们的活动范围<strong>围绕着</strong>公园这个大区域，没有固定的方向，四处乱窜。</li></ul></li><li><em>He looked <strong>about</strong> the room.</em> (他环顾了一下房间。)<ul><li>【理解】他的目光在房间里<strong>绕了一圈</strong>，到处看了看。</li></ul></li></ul><p><strong>4. 固定搭配：“即将” (be about to)</strong></p><p>这是一个非常常用的词组，也可以用“围绕”的感觉来理解。</p><ul><li><em>Hurry up! The bus is <strong>about to</strong> leave.</em> (快点！公交车马上就要开了。)<ul><li>【理解】我们已经无限接近“开车”这个时间点了，就在这个时间点的<strong>周围</strong>，一触即发。表示“即将、正要”。</li></ul></li></ul><hr><p><strong>小结一下：</strong></p><p>下次看到 <code>about</code>，脑海里先浮现出“<strong>围绕着</strong>”这个画面。</p><ul><li>围绕一个<strong>话题</strong>说事，就是“<strong>关于</strong>”。</li><li>围绕一个<strong>数字</strong>上下浮动，就是“<strong>大约</strong>”。</li><li>围绕一个<strong>空间</strong>四处活动，就是“<strong>到处</strong>”。</li><li>围绕一个<strong>时间点</strong>即将发生，就是“<strong>即将</strong>”。</li></ul><p>这样一来，是不是感觉 <code>about</code> 的所有意思都被你串起来了？</p><hr><h4 id="小结"><strong>小结</strong></h4><p>同学们，下次再遇到一个“脸熟但意生”的介词时，别急着去翻字典查它有多少种中文意思。</p><p>试着问自己：</p><ol><li><strong>它的核心含义是什么？</strong> (on-接触, at-点, in-内部…)</li><li><strong>这句话里，它是看得见的具体用法，还是想得到的抽象用法？</strong></li><li><strong>我能从核心含义把它推导出来吗？</strong></li></ol><p>多这样练习，你就会发现，介词的学习不再是死记硬背，而是一个有趣的逻辑推理游戏！加油！</p>]]></content>
    
    
    <summary type="html">英语介词第二讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第一讲</title>
    <link href="https://yjyrichard.github.io/posts/128dc3bc.html"/>
    <id>https://yjyrichard.github.io/posts/128dc3bc.html</id>
    <published>2025-08-25T11:59:05.570Z</published>
    <updated>2025-08-25T12:00:06.204Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第一讲</h1><h3 id="介词到底是干啥的？——-你的语法小帮手！"><strong>介词到底是干啥的？—— 你的语法小帮手！</strong></h3><p>嗨，同学们！今天我们来认识一个英语语法里非常重要的小伙伴——<strong>介词 (Preposition)</strong>。</p><p>你可能会觉得它很小，不起眼，但没有它，很多句子都会变得“奇奇怪怪”，甚至完全看不懂。不信你看：</p><blockquote><p>I walk ___ the mountains ___ my friends ___ summer.</p></blockquote><p>这句话是不是缺了点什么？感觉信息都断开了。现在我们把一些小词填进去：</p><blockquote><p>I walk <strong>in</strong> the mountains <strong>with</strong> my friends <strong>in</strong> summer.<br>(夏天，我和朋友们在山里散步。)</p></blockquote><p>哇，意思一下子就完整清晰了！这些像 <strong>in, with</strong> 一样的小词，就是我们今天的主角——介词。</p><h4 id="一、-介词的核心工作：当“红娘”，介绍关系！"><strong>一、 介词的核心工作：当“红娘”，介绍关系！</strong></h4><p>你可以把介词想象成一个“关系介绍人”或者“胶水”。它的主要工作就是：</p><p><strong>把一个名词（或代词等）“介绍”给前面的另一个词，说明它们之间是什么关系。</strong></p><p>这个关系可以是关于 <strong>时间、地点、方式</strong> 等等。</p><ul><li><strong>study in the morning</strong> (在早上学习)<ul><li>介词 <code>in</code> 把 <code>the morning</code> (名词) 介绍给了 <code>study</code> (动词)，说明了学习的【<strong>时间</strong>】。</li></ul></li><li><strong>the boy in the room</strong> (在房间里的男孩)<ul><li>介词 <code>in</code> 把 <code>the room</code> (名词) 介绍给了 <code>the boy</code> (名词)，说明了男孩的【<strong>地点</strong>】。</li></ul></li><li><strong>a gift for you</strong> (一份给你的礼物)<ul><li>介词 <code>for</code> 把 <code>you</code> (代词) 介绍给了 <code>a gift</code> (名词)，说明了礼物的【<strong>对象/目的</strong>】。</li></ul></li></ul><p>看，介词就像一个桥梁，把词语们紧密地连接在了一起！</p><h4 id="二、-介词的三大“朋友圈”"><strong>二、 介词的三大“朋友圈”</strong></h4><p>介词非常喜欢交朋友，它最常和这三类词一起玩耍：<strong>动词、名词、形容词</strong>。</p><h5 id="朋友圈1：动词-Verb-介词-名词"><strong>朋友圈1：动词 (Verb) + 介词 + 名词</strong></h5><p>这是最常见的一种组合。介词在这里，是用来<strong>补充说明“动作”的细节</strong>。</p><p>同一个动词，搭配不同的介词，意思会大不相同哦！</p><p>想象一下你家门口有座房子(the house)，你要“走”(walk)：</p><ul><li><strong>walk into the house</strong> (走进房子里) -&gt; <code>into</code> 表示进入内部</li><li><strong>walk towards the house</strong> (朝着房子走去) -&gt; <code>towards</code> 表示方向，不一定进去</li><li><strong>walk from the house</strong> (从房子里走出来) -&gt; <code>from</code> 表示起点</li><li><strong>walk around the house</strong> (绕着房子走) -&gt; <code>around</code> 表示环绕</li><li><strong>walk past the house</strong> (走过房子) -&gt; <code>past</code> 表示经过</li></ul><p><strong>更多例子：</strong></p><ul><li>Please <strong>look at</strong> the blackboard. (请看黑板。)</li><li>I <strong>listen to</strong> music every day. (我每天听音乐。)</li><li>He <strong>put</strong> the book <strong>on</strong> the desk. (他把书放在桌子上。)</li></ul><h5 id="朋友圈2：名词-Noun-介词-名词"><strong>朋友圈2：名词 (Noun) + 介词 + 名词</strong></h5><p>当介词夹在两个名词中间时，它用来<strong>说明这两个名词之间的关系</strong>。</p><p>比如，我们都想听听关于北京(Beijing)的故事(stories)：</p><ul><li><strong>stories of Beijing</strong> (北京的故事) -&gt; <code>of</code> 表示“……的”，内容就是北京本身。</li><li><strong>stories from Beijing</strong> (来自北京的故事) -&gt; <code>from</code> 表示来源，故事是从北京传来的。</li><li><strong>stories about Beijing</strong> (关于北京的故事) -&gt; <code>about</code> 表示主题，故事是围绕北京展开的。</li></ul><p><strong>更多例子：</strong></p><ul><li>This is <strong>the key to</strong> the door. (这是这扇门的钥匙。)</li><li>I want <strong>a cup of</strong> tea. (我想要一杯茶。)</li><li>The <strong>book on</strong> the table is mine. (桌上的那本书是我的。)</li></ul><h5 id="朋友圈3：形容词-Adjective-介词-名词"><strong>朋友圈3：形容词 (Adjective) + 介词 + 名词</strong></h5><p>有时候，一个形容词意思不够完整，需要介词来帮忙，<strong>连接它所描述的对象</strong>。</p><p>比如，我们都说 <code>good</code> (好)，但是怎么个好法呢？</p><ul><li>He is <strong>good at</strong> learning. (他擅长学习。) -&gt; <code>good at</code> 表示“擅长于……”</li><li>It is <strong>good for</strong> learning. (这对学习有好处。) -&gt; <code>good for</code> 表示“对……有益”</li><li>She is <strong>good to</strong> you. (她对你很好。) -&gt; <code>good to</code> 表示“对……友好”</li></ul><p><strong>更多例子：</strong></p><ul><li>I’m <strong>afraid of</strong> spiders. (我害怕蜘蛛。)</li><li>She is <strong>interested in</strong> history. (她对历史感兴趣。)</li><li>My hometown is <strong>famous for</strong> its food. (我的家乡因美食而闻名。)</li></ul><h4 id="三、-如何掌握介词？两大秘诀！"><strong>三、 如何掌握介词？两大秘诀！</strong></h4><p>看到这里，你是不是觉得介词既重要又有点复杂？别担心，掌握它有两个秘诀：</p><p><strong>1. 理解核心含义</strong><br>很多介词都有一个基本的空间或时间意义。比如：</p><ul><li><code>in</code>：在……内部 (in the box, in May)</li><li><code>on</code>：在……表面 (on the table, on Monday)</li><li><code>under</code>：在……下方 (under the bed)<br>先理解这些基本意思，再慢慢体会它们的引申用法。</li></ul><p><strong>2. 记住“好朋友组合”（习惯搭配）</strong><br>有些介词和特定动词、名词、形容词是“铁哥们”，总是打包出现，我们称之为“固定搭配”。比如 <code>listen to</code>, <code>good at</code>, <code>be interested in</code>。<br>对于这些组合，最好的办法就是——<strong>把它们当作一个词组来记！</strong> 多读、多背、多用，自然就熟悉啦。</p><h4 id="总结一下"><strong>总结一下</strong></h4><p><strong>介词的本质，就是“介绍”一个名词给前面的词（动、名、形），来表示它们之间的关系。</strong></p><p>它就像句子里的“万能胶水”，让语言变得精确、生动、有逻辑。</p><p>现在，再回头看看这个句子，你是不是彻底明白了每个小词的作用？</p><blockquote><p>I walk <strong>in</strong> (地点) the mountains <strong>with</strong> (方式/陪伴) my friends <strong>in</strong> (时间) summer.</p></blockquote>]]></content>
    
    
    <summary type="html">英语介词第一讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第八讲</title>
    <link href="https://yjyrichard.github.io/posts/f7534411.html"/>
    <id>https://yjyrichard.github.io/posts/f7534411.html</id>
    <published>2025-08-25T11:59:05.456Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第八讲</h1><h3 id="between-among-across-along-through"><code>between</code>, <code>among</code>, <code>across</code>, <code>along</code>, <code>through</code></h3><p>我们来学习第六组介词：<code>between</code>, <code>among</code>, <code>across</code>, <code>along</code>, <code>through</code>。这组词主要描述物体之间的<strong>位置关系</strong>和<strong>动态移动</strong>，理解它们的核心画面感非常重要。</p><hr><h3 id="词义深度解析">词义深度解析</h3><h4 id="1-between">1. <strong>between</strong></h4><ul><li><p><strong>词源解析</strong>: <code>be</code> (处于) + <code>tween</code> (源自古英语 <code>twain</code>，意为“二”)。字面意思就是“<strong>处于二者之中</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>在两者之间</strong>。它强调的是明确、独立的个体之间的关系。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示空间、时间、范围</strong>: 在两个明确的点之间。</p><ul><li><em>The baby is sleeping <strong>between</strong> his parents.</em><br>宝宝睡在他父母的中间。</li><li><em>The shop is open <strong>between</strong> 9 a.m. and 5 p.m.</em><br>这家商店的营业时间是上午9点到下午5点。</li><li><em>She weighs <strong>between</strong> 55 and 60 kilograms.</em><br>她的体重在55到60公斤之间。</li></ul></li><li><p><strong>表示关系、联系、选择</strong>:</p><ul><li><em>This is a secret <strong>between</strong> you and me.</em><br>这是你我之间的秘密。</li><li><em>You have to choose <strong>between</strong> going to college and finding a job.</em><br>你必须在读大学和找工作之间做出选择。</li></ul></li><li><p><strong>特殊用法（三者或以上）</strong>: 当这三个或以上的个体是<strong>各自独立、关系明确</strong>时，也可以用 <code>between</code>。</p><ul><li><em>The treaty was signed <strong>between</strong> the three countries.</em><br>该条约是在这三个国家之间签订的。（强调每个国家之间的双边关系）</li><li><em>There are regular flights <strong>between</strong> London, Paris, and New York.</em><br>在伦敦、巴黎和纽约之间有固定航班。（强调任意两点间的航线）</li></ul></li></ol></li></ul><hr><h4 id="2-among">2. <strong>among</strong></h4><ul><li><p><strong>词源解析</strong>: <code>among</code> 来自古英语，意为“在一群人中”。可以谐音记忆为“茫”，想象“<strong>在茫茫人海中</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>在三者或三者以上的人或物之中</strong>。它强调的是被一个群体所<strong>包围</strong>，个体身份不那么突出。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示位置</strong>: 在…（群体）中间</p><ul><li><em>I saw a familiar face <strong>among</strong> the crowd.</em><br>我在人群中看到了一个熟悉的面孔。</li><li><em>The small cottage is hidden <strong>among</strong> the trees.</em><br>那座小木屋隐藏在树林中。</li></ul></li><li><p><strong>表示分配</strong>: 在…（群体）中分配</p><ul><li><em>He divided the cake <strong>among</strong> the kids.</em><br>他把蛋糕分给了孩子们。</li></ul></li><li><p><strong>表示“其中之一”或“作为…的一员”</strong>:</p><ul><li><em>He is <strong>among</strong> the greatest writers of his generation.</em><br>他是他那一代人中最伟大的作家之一。</li><li><em>Don’t worry, you are <strong>among</strong> friends now.</em><br>别担心，你现在和朋友们在一起（你是我们中的一员）。</li></ul></li></ol></li></ul><hr><h4 id="3-across">3. <strong>across</strong></h4><ul><li><p><strong>词源解析</strong>: <code>a</code> + <code>cross</code> (十字)。想象画一个十字，有一条线<strong>横穿</strong>另一条线。</p></li><li><p><strong>核心含义</strong>: <strong>横过，穿过（一个平面或表面）</strong>；在…的对面。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示动态的“横穿”</strong>: 从一侧到另一侧（在表面上移动）。</p><ul><li><em>Be careful when you walk <strong>across</strong> the road.</em><br>过马路时要小心。</li><li><em>He swam <strong>across</strong> the river.</em><br>他游过了河。</li></ul></li><li><p><strong>表示静态的“在对面”</strong>:</p><ul><li><em>The library is just <strong>across</strong> the road from the post office.</em><br>图书馆就在邮局的对面。</li></ul></li><li><p><strong>表示“遍及”</strong>: 覆盖整个区域。</p><ul><li><em>His fame has spread <strong>across</strong> the whole country.</em><br>他的名声传遍了全国。</li></ul></li><li><p><strong>表示身体动作</strong>:</p><ul><li><em>She folded her arms <strong>across</strong> her chest.</em><br>她双臂交叉抱在胸前。</li></ul></li></ol></li></ul><hr><h4 id="4-along">4. <strong>along</strong></h4><ul><li><p><strong>词源解析</strong>: <code>a</code> + <code>long</code> (长的)。可以想象“<strong>沿着一条长长的东西</strong>”。</p></li><li><p><strong>核心含义</strong>: <strong>沿着…，顺着…</strong>。它强调的是与某个线条（如道路、河流、海岸线）平行的移动或排列。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示移动方向</strong>: 沿着…走</p><ul><li><em>We had a romantic walk <strong>along</strong> the beach at sunset.</em><br>我们在日落时分沿着海滩浪漫地散步。</li><li><em>Go <strong>along</strong> this road and you’ll find the station.</em><br>沿着这条路走，你就能找到车站。</li></ul></li><li><p><strong>表示位置</strong>: 沿着…分布</p><ul><li><em>There are beautiful trees planted <strong>along</strong> the river.</em><br>沿河种着美丽的树。</li></ul></li><li><p><strong>常用短语</strong>:</p><ul><li><strong>along with</strong>: 和…一起（= together with）<ul><li><em>You can take him <strong>along with</strong> you.</em> 你可以把他一起带上。</li></ul></li><li><strong>come along</strong>: 过来；进展<ul><li><em>Come <strong>along</strong>, we’re late!</em> 快点，我们迟到了！</li></ul></li></ul></li></ol></li></ul><hr><h4 id="5-through">5. <strong>through</strong></h4><ul><li><p><strong>词源解析</strong>: 核心是“穿透”。想象一个隧道，从一端<strong>进入</strong>，从另一端<strong>出来</strong>。</p></li><li><p><strong>核心含义</strong>: <strong>穿过（一个三维空间或物体）；贯穿（时间）；通过（某种方式）</strong>。</p></li><li><p><strong>详细用法与例句</strong>:</p><ol><li><p><strong>表示空间上的“穿过”</strong>: 从内部穿过一个立体空间。</p><ul><li><em>The train went <strong>through</strong> a long tunnel.</em><br>火车穿过了一条长长的隧道。</li><li><em>We walked <strong>through</strong> the dense forest.</em><br>我们徒步穿过了茂密的森林。</li></ul></li><li><p><strong>表示时间的“贯穿始终”</strong>: 从头到尾</p><ul><li><em>It rained all <strong>through</strong> June and July.</em><br>整个六月和七月都在下雨。</li><li><em>He worked <strong>through</strong> the night to finish the report.</em><br>他通宵工作以完成报告。</li></ul></li><li><p><strong>表示方式、媒介、原因</strong>: 通过…</p><ul><li><em>We sold the bike <strong>through</strong> the internet.</em><br>我们通过互联网卖掉了自行车。</li><li><em>I got this job <strong>through</strong> a friend.</em><br>我通过一个朋友得到了这份工作。</li></ul></li><li><p><strong>表示完成或经历</strong>:</p><ul><li><em>Are you <strong>through</strong> with that book yet?</em><br>那本书你看完了吗？</li><li><em>She has been <strong>through</strong> a lot this year.</em><br>她今年经历了很多。</li></ul></li></ol></li></ul><hr><h3 id="巩固练习-Consolidation-Exercises">巩固练习 (Consolidation Exercises)</h3><p>请用 <code>between</code>, <code>among</code>, <code>across</code>, <code>along</code>, <code>through</code> 填空。</p><ol><li>The children were happy to find a secret path _________ the tall trees in the forest.</li><li>I love to ride my bike _________ the quiet country lanes on weekends.</li><li>The negotiations _________ the two companies finally reached an agreement.</li><li>She could see her reflection in the shop window as she walked _________ the street.</li><li>He managed to get the job _________ his excellent interview performance.</li><li>There is a beautiful old bridge _________ the river.</li><li>She is considered one of the best singers _________ her contemporaries.</li><li>We drove _________ the city center without stopping.</li><li>This secret must remain strictly _________ the three of us.</li><li>The teacher distributed the sweets _________ all the students in the class.</li></ol><hr><h3 id="答案与解析-Answers-and-Explanations">答案与解析 (Answers and Explanations)</h3><ol><li><strong>through</strong>. 句意：孩子们很高兴在森林的高树中找到一条秘密小径。树林是三维空间，从中间穿过，所以用 <code>through</code>。</li><li><strong>along</strong>. 句意：我喜欢在周末沿着宁静的乡间小路骑自行车。<code>along the lanes</code> 指的是沿着小路这条线移动。</li><li><strong>between</strong>. 句意：两家公司之间的谈判最终达成了一项协议。<code>two companies</code> 是两个明确的个体，所以用 <code>between</code>。</li><li><strong>along/across</strong>. 都可以，但含义略有不同。<code>along the street</code> (沿着街道走) 更侧重于与街道平行的移动。<code>across the street</code> (穿过街道) 侧重于从一侧到另一侧。根据语境“看到橱窗里的倒影”，<code>along</code> 更为贴切。</li><li><strong>through</strong>. 句意：他凭借出色的面试表现成功得到了这份工作。这里 <code>through</code> 表示“通过…方式或手段”。</li><li><strong>across</strong>. 句意：河上有一座美丽的古桥。桥是“横跨”在河上的，连接两岸，用 <code>across</code>。</li><li><strong>among</strong>. 句意：她被认为是同时代人中最好的歌手之一。<code>contemporaries</code> (同时代人) 是一个群体，她是其中一员，用 <code>among</code>。</li><li><strong>through</strong>. 句意：我们开车径直穿过了市中心。市中心是一个区域（可以看作三维空间），从中间穿过，用 <code>through</code>。</li><li><strong>between</strong>. 句意：这个秘密必须严格地在我们三个人之间保守。虽然是三个人，但强调的是三者之间各自独立明确的关系，这是 <code>between</code> 的一个特殊用法。用 <code>among</code> 也可以，但 <code>between</code> 更强调这种小团体内部的保密性。</li><li><strong>among</strong>. 句意：老师把糖果分给了班上所有的学生。<code>all the students</code> 是一个群体，在他们中间分配，用 <code>among</code>。</li></ol>]]></content>
    
    
    <summary type="html">英语介词第八讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>英语介词第九讲</title>
    <link href="https://yjyrichard.github.io/posts/8d9e654e.html"/>
    <id>https://yjyrichard.github.io/posts/8d9e654e.html</id>
    <published>2025-08-25T11:59:05.440Z</published>
    <updated>2025-08-25T12:02:26.668Z</updated>
    
    <content type="html"><![CDATA[<h1>介词第九讲</h1><h3 id="during-since-until-past-as-like-despite">during ,since ,until,past ,as,like,despite</h3><p>大家好！</p><p>介词 (Preposition) 是英语中连接名词、代名词或短语到句子其他部分的小词，它们虽然短小，却是表达精确意思的关键。这份讲义将带领大家深入学习几个非常实用但又容易混淆的介词，帮助你更自信地使用它们。</p><hr><h3 id="第一部分：表示“时间”的介词"><strong>第一部分：表示“时间”的介词</strong></h3><h4 id="1-during-在…期间"><strong>1. during (在…期间)</strong></h4><ul><li><p><strong>核心含义</strong>：表示某事发生在<strong>某个特定的时间段之内</strong>。它强调的是“过程”，但不一定占满整个过程。</p></li><li><p><strong>用法</strong>：<code>during + 表示一段时间的名词</code> (如 the night, the exam, the meeting)</p></li><li><p><strong>例句解析</strong>：</p><ul><li><code>They work **during the night** and sleep by day.</code><ul><li>他们在<strong>夜晚这段时间内</strong>工作，在白天睡觉。</li></ul></li><li><code>You're not allowed to talk **during the exam**.</code><ul><li>在<strong>考试的整个过程期间</strong>，你是不允许聊天的。</li></ul></li><li><code>I woke up several times **during the night**.</code><ul><li>在<strong>夜里这段时间</strong>，我醒了好几次。（不是一直醒着，而是在这个时间段内发生了几次）</li></ul></li></ul></li></ul><h4 id="2-since-自从…-vs-until-直到…为止"><strong>2. since (自从…) vs. until (直到…为止)</strong></h4><p>这是一对在时间概念上相对的词，都涉及一段时间，但方向相反。</p><ul><li><p><strong>since (自从…)</strong></p><ul><li><strong>核心含义</strong>：表示动作或状态从<strong>过去某个时间点开始，并一直持续到现在</strong>。它是一个“起点”。</li><li><strong>用法</strong>：常与现在完成时 (have/has + Vpp) 一起使用。</li><li><strong>例句解析</strong>：<ul><li><code>I have never seen you **since last month**.</code><ul><li><strong>自从上个月</strong>这个时间点开始，一直到现在，我都没见过你。</li></ul></li><li><code>Tom has been in Hangzhou **since 2018**.</code><ul><li><strong>自从2018年</strong>开始，汤姆就一直在杭州了（这个状态持续至今）。</li></ul></li></ul></li></ul></li><li><p><strong>until / till (直到…为止)</strong></p><ul><li><strong>核心含义</strong>：表示一个动作或状态<strong>持续到某个时间点为止，然后发生变化</strong>。它是一个“终点”。</li><li><strong>用法</strong>：<code>till</code> 与 <code>until</code> 意思一样，但 <code>until</code> 更正式。特别注意 <code>not...until</code> 的结构，意为“直到…才…”。</li><li><strong>例句解析</strong>：<ul><li><code>Jerry ate a lot of cheese **until Tom came back**.</code><ul><li>杰瑞吃奶酪的动作一直持续，<strong>终点是“汤姆回来”</strong>。汤姆回来后，他可能就不吃了。</li></ul></li><li><code>They didn't sleep **until their mother turned off the light**.</code><ul><li>他们“不睡觉”的状态一直持续，<strong>直到妈妈关灯才结束</strong>。换句话说，他们<strong>直到妈妈关灯后才开始睡觉</strong>。</li></ul></li></ul></li></ul></li></ul><h4 id="3-past-超过，晚于"><strong>3. past (超过，晚于)</strong></h4><ul><li><strong>核心含义</strong>：表示在时间、空间或程度上“经过、超过、晚于”某个点。它的同根词是 <code>pass</code> (经过)。</li><li><strong>用法</strong>：<ol><li><strong>表示时间（钟点）</strong>：意为“…点过…分”。<ul><li><code>half **past** 10</code> → 10点<strong>过</strong>了半小时 → 10:30</li><li><code>20 **past** 9</code> → 9点<strong>过</strong>了20分钟 → 9:20</li></ul></li><li><strong>表示一段时期</strong>：常用于 <code>in the past ... years/days</code> 结构中，意为“在过去的…”。<ul><li><code>The temperature worldwide has risen **in the past 100 years**.</code><ul><li>在<strong>过去的100年里</strong>，全球气温已经升高了。</li></ul></li></ul></li><li><strong>表示程度</strong>：意为“超出了…的阶段”，表示不再关心或受影响。<ul><li><code>Do what you want, I'm **past caring**.</code><ul><li>你想干嘛就干嘛吧，我已经<strong>过了会在意的那个阶段了</strong>（我巳经不在乎了）。</li></ul></li></ul></li></ol></li></ul><hr><h3 id="第二部分：表示“比较”与“身份”的介词"><strong>第二部分：表示“比较”与“身份”的介词</strong></h3><h4 id="4-as-如同；作为"><strong>4. as (如同；作为)</strong></h4><p><code>as</code> 的用法非常丰富，主要分为两大类：</p><ul><li><p><strong>用法一：表示比较（和…一样；如同）</strong></p><ul><li><strong>核心含“像…一样”的意味，用于比较两者在某方面是相同的。</strong></li><li><strong>常见结构</strong>：<ul><li><code>as ... as ...</code>：像…一样…</li><li><code>as soon as</code>：一…就… (像…一样快)</li><li><code>as long as</code>：只要 (像…一样长的时间)</li><li><code>such as</code>：例如</li></ul></li><li><strong>例句解析</strong>：<ul><li><code>She is **as tall as** her mother.</code><ul><li>她和她妈妈<strong>一样高</strong>。</li></ul></li><li><code>Her skin is **as soft as** a baby's.</code><ul><li>她的皮肤<strong>像</strong>婴儿的皮肤<strong>一样</strong>柔软。</li></ul></li></ul></li></ul></li><li><p><strong>用法二：表示身份或功能（作为；以…的身份）</strong></p><ul><li><strong>核心含义</strong>：指某人或某物所<strong>扮演的角色、具备的身份或发挥的功能</strong>。这是一个客观事实。</li><li><strong>常见结构</strong>：<ul><li><code>as a father/teacher</code>：作为一个父亲/老师</li><li><code>as a result</code>：结果是</li><li><code>be famous as ...</code>：作为…而闻名</li></ul></li><li><strong>例句解析</strong>：<ul><li><code>**As a father**, he must protect his family.</code><ul><li><strong>以父亲这个身份</strong>，他必须保护他的家人。（他就是父亲）</li></ul></li><li><code>She works **as a waitress**.</code><ul><li>她的工作<strong>是服务员</strong>。（她的职业身份是服务员）</li></ul></li><li><code>Michael Tyson was famous **as a boxer**.</code><ul><li>泰森<strong>作为一名拳击手</strong>而闻名。（他的闻名身份是拳击手）</li></ul></li></ul></li></ul></li></ul><h4 id="5-like-像，貌似"><strong>5. like (像，貌似)</strong></h4><ul><li><strong>核心含义</strong>：表示两者<strong>外表、行为或特征上的“相似”</strong>，但它们本质上不是同一样事物。强调的是“看起来像”。</li><li><strong>用法</strong>：<code>like + 名词/代名词</code></li><li><strong>例句解析</strong>：<ul><li><code>He looks **like** his father.</code><ul><li>他看<strong>上去像</strong>他爸爸。（只是长得像，他不是他爸爸）</li></ul></li></ul></li></ul><h4 id="⭐-核心区分：Like-vs-As-重点！"><strong>⭐ 核心区分：Like vs. As (重点！)</strong></h4><p>这是最容易混淆的一点，请看下面的例子：</p><ul><li><p><code>He teaches us **like** a teacher.</code></p><ul><li>他教我们的时候<strong>像一位老师一样</strong>。（说明他的教学方式、态度很专业，但他<strong>可能不是</strong>一名真正的老师，也许是个学长或朋友。）</li><li><code>like</code> 在这里表示<strong>方式上的相似</strong>。</li></ul></li><li><p><code>He teaches us **as** a teacher.</code></p><ul><li>他<strong>作为一名老师</strong>教我们。（说明他的<strong>真实身份就是</strong>老师，这是他的职业。）</li><li><code>as</code> 在这里表示<strong>身份和职能</strong>。</li></ul></li></ul><hr><h3 id="第三部分：表示“转折”关系的介词"><strong>第三部分：表示“转折”关系的介词</strong></h3><h4 id="6-despite-尽管，虽然"><strong>6. despite (尽管，虽然)</strong></h4><ul><li><strong>核心含义</strong>：引出一个<strong>预期之外</strong>或<strong>与主句情况相反</strong>的条件。意思是“虽然有这件事，但另一件事仍然发生了”。</li><li><strong>用法</strong>：<code>despite + 名词 / 动名词 (-ing)</code>。它和 <code>in spite of</code> 意思完全相同。</li><li><strong>注意</strong>：<code>despite</code> 后面不能直接跟一个完整的句子（主语+动词）。</li><li><strong>例句解析</strong>：<ul><li><code>I still enjoyed the week **despite the bad weather**.</code><ul><li><strong>尽管天气不好</strong>（这是一个负面条件），我这一周仍然过得很愉快（这是一个正面的结果）。</li></ul></li><li><code>**Despite saying sorry** to her friends, most of them still don't want to forgive her.</code><ul><li><strong>尽管她说了对不起</strong>，但她的朋友们大部分还是不想原谅她。</li></ul></li><li><code>He laughed **despite himself**.</code><ul><li>这是一个固定用法，意为“情不自禁地”。<strong>尽管他自己可能想控制住（不笑）</strong>，但他还是笑了。</li></ul></li></ul></li></ul><hr><p><strong>总结</strong></p><p>希望这份讲义能帮助你更好地理解和运用这些介词。学习语言的最好方法就是不断地在阅读和口语中观察和练习。祝你学习进步！</p><hr><h3 id="介词用法专项练习题"><strong>介词用法专项练习题</strong></h3><p><strong>请从 A, B, C, D 四个选项中选择最合适的一个填入空白处。</strong></p><ol><li><p>Please don’t use your phone ______ the concert. It’s distracting to the performers.<br>A. since<br>B. during<br>C. until<br>D. past</p></li><li><p>______ the difficulty of the task, he managed to complete it ahead of schedule.<br>A. Despite<br>B. As<br>C. Like<br>D. Until</p></li><li><p>She has been working ______ a manager at this company for five years.<br>A. like<br>B. past<br>C. as<br>D. since</p></li><li><p>My little sister sometimes acts ______ a grown-up, telling everyone what to do.<br>A. as<br>B. like<br>C. since<br>D. during</p></li><li><p>I haven’t heard from him ______ he moved to Canada last year.<br>A. until<br>B. during<br>C. despite<br>D. since</p></li><li><p>The children were not allowed to watch TV ______ they finished their homework.<br>A. past<br>B. until<br>C. since<br>D. like</p></li><li><p>It’s already half ______ ten; we are going to be late for the meeting!<br>A. since<br>B. despite<br>C. past<br>D. as</p></li><li><p>He is famous ______ an actor, but his true passion is painting.<br>A. like<br>B. as<br>C. past<br>D. during</p></li><li><p>______ having a headache, I still went to work to finish the important report.<br>A. Since<br>B. Despite<br>C. Until<br>D. As</p></li><li><p>Don’t try to argue with him. He is ______ the point of listening to anyone’s advice.<br>A. during<br>B. like<br>C. past<br>D. as</p></li></ol><hr><h3 id="答案与解析"><strong>答案与解析</strong></h3><ol><li><p><strong>B. during</strong></p><ul><li><strong>解析</strong>：这里表示“在音乐会期间”，<code>during</code> 用于指在某个特定的时间段之内。</li></ul></li><li><p><strong>A. Despite</strong></p><ul><li><strong>解析</strong>：这句话的意思是“尽管任务很难，他还是设法提前完成了”。<code>Despite</code> 用于引出与主句相反的条件，表示转折关系，后接名词（the difficulty）。</li></ul></li><li><p><strong>C. as</strong></p><ul><li><strong>解析</strong>：这里表示她的“身份”或“职位”是经理。<code>as</code> 用来指代某人或某物的真实身份或功能。</li></ul></li><li><p><strong>B. like</strong></p><ul><li><strong>解析</strong>：这里的意思是我的妹妹有时行为举止“像”一个大人，但她并不是真正的大人。<code>like</code> 用于表示两者在行为或外表上的“相似”。</li></ul></li><li><p><strong>D. since</strong></p><ul><li><strong>解析</strong>：句中使用的是现在完成时（haven’t heard），表示一个从过去持续到现在的状态。“他去年搬去加拿大”是这个状态的起点，所以用 <code>since</code>，表示“自从”。</li></ul></li><li><p><strong>B. until</strong></p><ul><li><strong>解析</strong>：这是一个典型的 <code>not...until</code> 结构，意为“直到…才…”。整句话的意思是“直到他们完成作业，他们才被允许看电视”。</li></ul></li><li><p><strong>C. past</strong></p><ul><li><strong>解析</strong>：<code>half past ten</code> 是表示时间“十点半”的固定用法，意为“十点过去了半小时”。</li></ul></li><li><p><strong>B. as</strong></p><ul><li><strong>解析</strong>：<code>be famous as...</code> 表示“作为…而闻名”，强调的是他闻名的“身份”是演员。他就是一个演员。</li></ul></li><li><p><strong>B. Despite</strong></p><ul><li><strong>解析</strong>：“头痛”和“仍然去工作”是转折关系。<code>Despite</code> 后面可以跟动名词（having a headache），表示“尽管”。</li></ul></li><li><p><strong>C. past</strong></p><ul><li><strong>解析</strong>：<code>be past the point of doing something</code> 是一个固定搭配，表示“已经过了会做某事的阶段了”，引申为“不再…”。这里的意思是他已经过了会听取任何人建议的阶段了。</li></ul></li></ol>]]></content>
    
    
    <summary type="html">英语介词第九讲</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL</title>
    <link href="https://yjyrichard.github.io/posts/cb97b83b.html"/>
    <id>https://yjyrichard.github.io/posts/cb97b83b.html</id>
    <published>2025-08-20T00:30:25.908Z</published>
    <updated>2025-08-25T11:28:04.444Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一：PostgreSQL介绍">一：PostgreSQL介绍</h3><p>PostgreSQL是一个功能强大的<strong>开源</strong>的关系型数据库。底层基于C实现。</p><p>PostgreSQL的开源协议和Linux内核版本的开源协议是一样的。BSD协议，这个协议基本和MIT开源协议一样，说人话，就是你可以对PostgreSQL进行一些封装，然后商业化并进行收费。</p><p>PostgreSQL的名字咋来的。之前叫Ingres,后面为了解决一些ingres中的一些问题，作为后面的ingres，就起名叫postgre。</p><p>PostgreSQL版本迭代的速度比较快，现在最新的正式的发布版本，已经到了15.RELEASE。</p><p>PGSQL的版本选择一般有两种：</p><ul><li>如果为了稳定的运行，推荐使用12.x版本。</li><li>如果想体验新特性，推荐使用14.x版本。</li></ul><p>PGSQL允许跨版本升级，而且没有什么大问题。</p><p>PGSQL社区特别活跃，基本是三个月一发版。意味着很多常见的BUG都可以得到及时的修复。</p><p>PGSQL其实在国外使用的比较多，国内暂时还是以MySQL为主。</p><p>但是国内很多国产数据库都是基于PGSQL做的二次封装：比如华为GaussDB,还有腾讯的Tbase等等。甚至很多公司原来的Oracle，直接平转到PGSQL。同时国内的很多云产品都支持PGSQL了。</p><p>PGSQL因为开源，有很多做数据迁移的工具，可以让你快速的MySQL,SQLServer,Oracle直接平转到PGSQL内部，比如pgloader这样的数据迁移工具。</p><p>PGSQL的官方地址：<a href="https://www.postgresql.org/">PostgreSQL: The world’s most advanced open source database</a></p><p>PGSQL的中文社区：<a href="http://www.postgres.cn/v2/document">文档目录/Document Index: 世界上功能最强大的开源数据库…</a></p><h3 id="二：PostgreSQL和MySQL的区别">二：PostgreSQL和MySQL的区别</h3><p>技术没有好坏之分，只是看一下是否符合你的业务，能否解决你的业务需求。其次也要查看社区的活跃度以及更新的频次。比如：MQ,Rabbit,Rocket,Kafka,Pular…</p><p>MySQL不支持的几点内容：</p><ul><li>MySQL不支持序列概念，Squence。</li><li>MySQL的数据类型不够丰富。</li><li>使用MySQL时，网上比较好用的插件比较少。</li><li>MySQL的性能优化监控工具不是很多，定位问题的成本比较高。</li><li>MySQL的主从复制没有一个官方的同步策略，同步问题难以解决。</li><li>MySQL虽然开源，但是不够彻底，GPL开源策略（如果你使用mysql做点东西你也得开源）</li></ul><p>PostgreSQL相对MySQL上述问题的特点：</p><ul><li>PostgreSQL的数据类型嘎嘎丰富。</li><li>PostgreSQL是有序列的概念的。</li><li>PostgreSQL的插件特别丰富。</li><li>PostgreSQL支持主从复制的同步操作，可以实现数据的0丢失。</li><li>PostgreSQL的MVCC实现和MySQL不太一样。PostgreSQL一行数据会存储多个版本。最多可以存储40亿个事务版本。</li></ul><h3 id="三：PostgreSQL的安装">三：PostgreSQL的安装</h3><p>咱们只在Linux中安装，不推荐在Windows下安装。</p><p>Linux的版本尽量使用7.xb版本，最好是7.6或者7.8版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y https://download.postgresql.org/pub/repos/yum/reporpms/EL-7-x86_64/pgdg-redhat-repo-latest.noarch.rpm</span><br><span class="line"><span class="built_in">sudo</span> yum install -y postgresql14-server</span><br><span class="line"><span class="built_in">sudo</span> /usr/pgsql-14/bin/postgresql-14-setup initdb</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> postgresql-14</span><br><span class="line"><span class="built_in">sudo</span> systemctl start postgresql-14</span><br></pre></td></tr></table></figure><p>如果出错，可能是那些问题：</p><ul><li>安装Linux的时候，一定要选择最小安装</li><li>你的Linux不能连接外网</li><li>Linux中5432端口，可能被占用了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl status postgresql-14</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zeedzgfcteisfxy4e6vZ ~]# systemctl status postgresql-14</span><br><span class="line">● postgresql-14.service - PostgreSQL 14 database server</span><br><span class="line">   Loaded: loaded (/usr/lib/systemd/system/postgresql-14.service; enabled; vendor preset: disabled)</span><br><span class="line">   Active: active (running) since Mon 2025-08-18 20:26:00 CST; 3min 18s ago</span><br><span class="line">     Docs: https://www.postgresql.org/docs/14/static/</span><br><span class="line"> Main PID: 1470 (postmaster)</span><br><span class="line">   CGroup: /system.slice/postgresql-14.service</span><br><span class="line">           ├─1470 /usr/pgsql-14/bin/postmaster -D /var/lib/pgsql/14/data/</span><br><span class="line">           ├─1473 postgres: logger</span><br><span class="line">           ├─1475 postgres: checkpointer</span><br><span class="line">           ├─1476 postgres: background writer</span><br><span class="line">           ├─1477 postgres: walwriter</span><br><span class="line">           ├─1478 postgres: autovacuum launcher</span><br><span class="line">           ├─1479 postgres: stats collector</span><br><span class="line">           └─1480 postgres: logical replication launcher</span><br><span class="line"></span><br><span class="line">Aug 18 20:26:00 iZ2zeedzgfcteisfxy4e6vZ systemd[1]: Starting PostgreSQL 14 database server...</span><br><span class="line">Aug 18 20:26:00 iZ2zeedzgfcteisfxy4e6vZ postmaster[1470]: 2025-08-18 20:26:00.485 CST [1470] LOG:  redirecting <span class="built_in">log</span> output...ocess</span><br><span class="line">Aug 18 20:26:00 iZ2zeedzgfcteisfxy4e6vZ postmaster[1470]: 2025-08-18 20:26:00.485 CST [1470] HINT:  Future <span class="built_in">log</span> output wil...log<span class="string">&quot;.</span></span><br><span class="line"><span class="string">Aug 18 20:26:00 iZ2zeedzgfcteisfxy4e6vZ systemd[1]: Started PostgreSQL 14 database server.</span></span><br><span class="line"><span class="string">Hint: Some lines were ellipsized, use -l to show in full.</span></span><br><span class="line"><span class="string">[root@iZ2zeedzgfcteisfxy4e6vZ ~]#</span></span><br></pre></td></tr></table></figure><p>PostgreSQL 不推荐使用root管理，在安装成功postgreSQL后，他默认会给你创建一个用户：postgres</p><p>玩PGSQL前，先切换到postgres</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure><p>切换到postgres用户后，直接输入psql即可进入到postgreSQL提供的的客户端</p><p>查看有那些库，如果是新安装的，有三个库</p><p><code>\l</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ2zeedzgfcteisfxy4e6vZ ~]# su postgres</span><br><span class="line">bash-4.2$ <span class="built_in">who</span> am i</span><br><span class="line">root     pts/0        2025-08-18 20:17 (120.235.181.139)</span><br><span class="line">bash-4.2$ psql</span><br><span class="line">could not change directory to <span class="string">&quot;/root&quot;</span>: Permission denied</span><br><span class="line">psql (14.19)</span><br><span class="line">Type <span class="string">&quot;help&quot;</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line">postgres=# \l</span><br><span class="line">                                  List of databases</span><br><span class="line">   Name    |  Owner   | Encoding |   Collate   |    Ctype    |   Access privileges</span><br><span class="line">-----------+----------+----------+-------------+-------------+-----------------------</span><br><span class="line"> postgres  | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 |</span><br><span class="line"> template0 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">           |          |          |             |             | postgres=CTc/postgres</span><br><span class="line"> template1 | postgres | UTF8     | en_US.UTF-8 | en_US.UTF-8 | =c/postgres          +</span><br><span class="line">           |          |          |             |             | postgres=CTc/postgres</span><br><span class="line">(3 rows)</span><br><span class="line"></span><br><span class="line">postgres=#</span><br></pre></td></tr></table></figure><h3 id="四：PostgreSQL的配置">四：PostgreSQL的配置</h3><p>要搞两个配置信息，一个关于postgreSQL的远程连接配置以及postgreSQL的日志配置。</p><p>PostgreSQL的主要配置放在数据目录下的，postgresql.conf以及pg_hba.conf配置文件</p><p><code>\q</code> 退出</p><p>这些配置文件都放在了</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/var/</span>lib<span class="regexp">/pgsql/</span><span class="number">14</span>/data</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">bash-4.2$ <span class="built_in">ls</span> -l</span><br><span class="line">total 136</span><br><span class="line">drwx------ 5 postgres postgres  4096 Aug 18 20:25 base</span><br><span class="line">-rw------- 1 postgres postgres    30 Aug 18 20:26 current_logfiles</span><br><span class="line">drwx------ 2 postgres postgres  4096 Aug 18 20:37 global</span><br><span class="line">drwx------ 2 postgres postgres  4096 Aug 18 20:26 <span class="built_in">log</span></span><br><span class="line">drwx------ 2 postgres postgres  4096 Aug 18 20:25 pg_commit_ts</span><br><span class="line">drwx------ 2 postgres postgres  4096 Aug 18 20:25 pg_dynshmem</span><br><span class="line">-rw------- 1 postgres postgres  4577 Aug 18 20:25 pg_hba.conf</span><br><span class="line">-rw------- 1 postgres postgres  1636 Aug 18 20:25 pg_ident.conf</span><br><span class="line">drwx------ 4 postgres postgres  4096 Aug 18 20:31 pg_logical</span><br><span class="line">drwx------ 4 postgres postgres  4096 Aug 18 20:25 pg_multixact</span><br><span class="line">drwx------ 2 postgres postgres  4096 Aug 18 20:25 pg_notify</span><br></pre></td></tr></table></figure><p>上图可以看到，postgreSQL的核心文件，都属于postgres用户，操作的时候，尽可能的别用root用户，容易玩出坑，尽可能先切换到postgres用户去玩。</p><p>PostgreSQL默认情况下不支持远程连接的，这个跟MySQL几乎一样</p><ul><li>MySQL给mysql.user追加用户，一般是采用grant的命令去玩。</li><li>PostgreSQL要基于配置文件修改，才能指定用户是否可以远程连接。</li></ul><p>直接去修改pg_hba.conf 配置文件</p><p>用户以及对应数据库和连接方式的编写模板</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"># databases they can access.  Records take <span class="keyword">one</span> <span class="keyword">of</span> these forms:</span><br><span class="line">#</span><br><span class="line"># <span class="keyword">local</span>         DATABASE  <span class="keyword">USER</span>  <span class="keyword">METHOD</span>  [OPTIONS]</span><br><span class="line"># host          DATABASE  <span class="keyword">USER</span>  ADDRESS  <span class="keyword">METHOD</span>  [OPTIONS]</span><br><span class="line"># hostssl       DATABASE  <span class="keyword">USER</span>  ADDRESS  <span class="keyword">METHOD</span>  [OPTIONS]</span><br><span class="line"># hostnossl     DATABASE  <span class="keyword">USER</span>  ADDRESS  <span class="keyword">METHOD</span>  [OPTIONS]</span><br><span class="line"># hostgssenc    DATABASE  <span class="keyword">USER</span>  ADDRESS  <span class="keyword">METHOD</span>  [OPTIONS]</span><br><span class="line"># hostnogssenc  DATABASE  <span class="keyword">USER</span>  ADDRESS  <span class="keyword">METHOD</span>  [OPTIONS]</span><br></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一块</span></span><br><span class="line"><span class="attribute">local</span>代表本地连接，host代表可以指定连接的ADDRESS</span><br><span class="line"><span class="comment"># 第二块</span></span><br><span class="line"><span class="attribute">database</span> 编写数据库名，如果写<span class="literal">all</span>,代表所有库都可以连接</span><br><span class="line"><span class="comment"># 第三块</span></span><br><span class="line"><span class="attribute">user</span>编写连接的用户，可以写<span class="literal">all</span>，代表所有用户</span><br><span class="line"><span class="comment"># 第四块</span></span><br><span class="line"><span class="attribute">address</span> 代表那些IP地址可以连接</span><br><span class="line"><span class="comment"># 第五块</span></span><br><span class="line"><span class="attribute">method</span>加密方式，这块不用过多关注，直接md5</span><br><span class="line"><span class="comment"># 修改：允许任意地址的所有用户连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">host</span>    <span class="literal">all</span>             <span class="literal">all</span>             <span class="number">0.0.0.0</span>/<span class="number">0</span>               md5</span><br><span class="line"><span class="comment"># 我配置的是set nu 86行</span></span><br></pre></td></tr></table></figure><p>为了实现远程连接，除了用户级别的这种配置，还要针对服务级别修改一个配置</p><p>服务级别的配置在postgresql.conf</p><p>：set nu 看见需要大概在60行左右</p><p>发现默认情况下PGSQL只允许localhost连接，直接配置*即可解决问题。</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">60 listen_addresses = &#x27;*&#x27;         <span class="comment"># what IP address(es) to listen on;</span></span><br><span class="line">    <span class="number"> 61 </span>                                        <span class="comment"># comma-separated list of addresses;</span></span><br><span class="line">    <span class="number"> 62 </span>                                        <span class="comment"># defaults to &#x27;localhost&#x27;; use &#x27;*&#x27; for all</span></span><br><span class="line">    <span class="number"> 63 </span>                                        <span class="comment"># (change requires restart)</span></span><br><span class="line">    <span class="number"> 64 </span><span class="comment">#port = 5432                            # (change requires restart)</span></span><br><span class="line">    <span class="number"> 65 </span>max_connections =<span class="number"> 100 </span>                  <span class="comment"># (change requires restart)</span></span><br><span class="line">    <span class="number"> 66 </span><span class="comment">#superuser_reserved_connections = 3     # (change requires restart)</span></span><br><span class="line">    <span class="number"> 67 </span><span class="comment">#unix_socket_directories = &#x27;/run/postgresql, /tmp&#x27;      # comma-separated list of directories</span></span><br><span class="line">    <span class="number"> 68 </span>                                        <span class="comment"># (change requires restart)</span></span><br><span class="line">    <span class="number"> 69 </span><span class="comment">#unix_socket_group = &#x27;&#x27;                 # (change requires restart)</span></span><br><span class="line">    <span class="number"> 70 </span><span class="comment">#unix_socket_permissions = 0777         # begin with 0 to use octal notat</span></span><br></pre></td></tr></table></figure><p>记得为了生效，一定要重启</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># postgres 密码不管 直接切换roor</span></span><br><span class="line"><span class="attribute">sudo</span> systemctl restart postgresql-<span class="number">14</span></span><br></pre></td></tr></table></figure><p>配置数据库的日志</p><p>修改配置大概428行这样样子</p><p>postgreSQL默认情况下</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 代表日志是开启的</span></span><br><span class="line"><span class="attr">logging_collector</span> = <span class="literal">on</span></span><br><span class="line"><span class="comment"># 日志存放的路径，默认放到当前目录下的log里</span></span><br><span class="line"><span class="attr">log_directory</span> = <span class="string">&#x27;log&#x27;</span></span><br><span class="line"><span class="comment"># 日志的文件名，默认是postgresql为前缀，星期作为后缀</span></span><br><span class="line"><span class="attr">log_filename</span> = <span class="string">&#x27;postgresql-%a.log&#x27;</span></span><br><span class="line"><span class="comment"># 默认一周过后，日志文件会被覆盖</span></span><br><span class="line"><span class="attr">log_truncate_on_rotation</span> = <span class="literal">on</span></span><br><span class="line"><span class="comment"># 一天一个日志文件</span></span><br><span class="line"><span class="attr">log_rotation_age</span> = <span class="number">1</span>d</span><br><span class="line"><span class="comment"># 一个日志文件 没有大小限制</span></span><br><span class="line"><span class="attr">log_rotation_size</span> = <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五：PostgreSQL的基操">五：PostgreSQL的基操</h3><p>只在psql命令行（客户端）下，执行了一次<code>\l</code> ，查看了所有的库信息</p><p>可以直接基于psql查看一些信息，也可以基于psql进入到命令行后再做操作</p><p>psql --help</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可以直接进入命令行的原因，是psql默认情况下，就是以postgres用户去连接本地的pgsql，所以可以直接进入下面的图是默认的连接方式</span><br></pre></td></tr></table></figure><p>后面都基于psql的命令行（客户端）去进行操作</p><h4 id="5-1-构建用户">5.1 构建用户</h4><p>命令绝对不要去背，需要使用去找帮助文档\help</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 区别就是<span class="keyword">create</span> <span class="keyword">user</span>默认有连接权限，<span class="keyword">create</span> role没有，不过可以基于选项去设置</span><br><span class="line">CREARE <span class="keyword">USER</span> 名称 [ [<span class="keyword">WITH</span>] 选项 [...] ]</span><br><span class="line">CREARE role 名称 [ [<span class="keyword">WITH</span>] 选项 [...] ]</span><br></pre></td></tr></table></figure><p>构建一个超级管理员用户</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">user</span> root <span class="keyword">with</span> SUPERUSER PASSWORD <span class="string">&#x27;root&#x27;</span>;</span><br></pre></td></tr></table></figure><p>成功：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">postgres=# <span class="keyword">create</span> <span class="keyword">user</span> root <span class="keyword">with</span> <span class="keyword">SUPERUSER</span> <span class="keyword">PASSWORD</span> <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">ROLE</span></span><br></pre></td></tr></table></figure><p><code>\help</code>  即可查看到数据库级别的一些命令</p><p><code>\?</code>  可以查看到服务级别的一些命令</p><p>退出psql命令行 <code>\q</code></p><p>编写psql命令尝试去用root用户登录</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">psql</span> -h <span class="number">182.92.135.91</span> -p <span class="number">5432</span> -U root -W -d postgres</span><br></pre></td></tr></table></figure><p>但是没有对应的数据库所以报错</p><p>光有用户不给登录 比如要有数据库</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> root;</span><br></pre></td></tr></table></figure><p>可以再不退出psql的情况下切换用户 \c root</p><p>也可以退出psql，重新基于psql命令去切换用户以及数据库</p><p>查看当前的全部用户信息</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\du</span><br></pre></td></tr></table></figure><h4 id="5-2-权限操作">5.2 权限操作</h4><p>权限操作前，要先掌握以下PGSQL的逻辑结构</p><p>PostgreSQL 的逻辑架构可以按“<strong>从大到小、层层嵌套</strong>”来理解。下面用一句话概括后再拆开讲：</p><blockquote><p>“一个 PostgreSQL <strong>Server</strong> 里只有一个 <strong>Cluster</strong>；Cluster 里可以有很多 <strong>Database</strong>；每个 Database 里可以有很多 <strong>Schema</strong>；Schema 里再存放真正的 <strong>对象</strong>（表、视图、索引、函数、触发器、序列 …）。”</p></blockquote><hr><ol><li>Server（服务器实例）<br>指正在运行的 postmaster 进程 + 共享内存 + 后台进程。<br>一个操作系统上可以同时跑多个 Server，只要它们监听不同的端口、数据目录分开即可。</li><li>Cluster（实例 / 数据目录）<br>• 每个 Server 对应 <strong>一个</strong> Cluster（由 <code>initdb</code> 创建）。<br>• 物理上就是 <code>$PGDATA</code> 目录；逻辑上是“一组共享系统目录 (<code>pg_catalog</code>) 的数据库集合”。<br>• Cluster 内的所有数据库共享：<br>– 同一个配置文件 (<code>postgresql.conf</code>)<br>– 同一个 WAL 流<br>– 同一个用户/角色体系 (<code>pg_authid</code>)<br>– 同一个表空间列表 (<code>pg_tablespace</code>)</li><li>Database（数据库）<br>• Cluster 下面可以创建多个独立的数据库 (<code>CREATE DATABASE</code>)。<br>• 每个数据库彼此隔离：<br>– 独立的系统表副本 (<code>pg_class</code>, <code>pg_attribute</code>, …)<br>– 独立的 <code>search_path</code>、<code>public</code> schema 等。<br>• 注意：跨数据库不能直接访问表，要用 <strong>dblink / FDW</strong> 或逻辑复制。</li><li>Schema（模式）<br>• 每个数据库里可以建多个 schema（<code>CREATE SCHEMA</code>）。<br>• 用于“逻辑分组”和“权限隔离”。<br>• 默认有 <code>public</code>；<code>search_path</code> 决定对象查找顺序。</li><li>对象（Objects）<br>位于 schema 之下，包括：<br>• 表、视图、物化视图、外部表<br>• 索引（B-tree、GIN、GIST …）<br>• 序列、复合类型、域<br>• 函数、存储过程、触发器、事件触发器<br>• 行级安全策略、规则、约束、注释 …</li><li>Tablespace（表空间）<br>• 与上面“垂直层级”不同，它是 <strong>横向的存储映射</strong>。<br>• 逻辑上属于 Cluster；物理上是任意的目录路径。<br>• 创建对象时可通过 <code>TABLESPACE xxx</code> 把表/索引放到指定目录，实现“冷热数据分离”。</li></ol><hr><p>一张脑图式速记：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">┌────────────────────────────────────────────────────────┐</span><br><span class="line">│                   <span class="keyword">Server</span> (postmaster)                  │</span><br><span class="line">│  <span class="comment">----------------------------------------------------  │</span></span><br><span class="line">│  <span class="keyword">Cluster</span> ($PGDATA)                                     │</span><br><span class="line">│  ├─ <span class="keyword">Database</span> A                                         │</span><br><span class="line">│  │   ├─ <span class="keyword">Schema</span> s1 ── 表/视图/索引/函数/触发器          │</span><br><span class="line">│  │   └─ <span class="keyword">Schema</span> s2 ── …                                 │</span><br><span class="line">│  ├─ <span class="keyword">Database</span> B                                         │</span><br><span class="line">│  │   └─ <span class="built_in">public</span> ── …                                    │</span><br><span class="line">│  └─ shared objects: roles, tablespaces, …             │</span><br><span class="line">└────────────────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>这样看，就能快速定位：<br>“我连接的是哪个 Server → 哪个 Cluster → 哪个 Database → 哪个 Schema → 哪个对象”。</p><blockquote><p>server,cluster,tablespace 级别 这个级别一般是基于pg_hba.conf去配置</p><p>database级别：通过命令级别操作，grant</p><p>namespace，schema级别：玩的不多,不去了解</p><p>对象级别：通过grant命令去设置</p></blockquote><p><strong>小任务</strong></p><p>构建一个用户（你自己的名字）</p><p>比如构建一个数据库，在这个数据库下构建一个schema（数据库默认有一个public的schema）</p><p>再这个schema下构建一个表</p><p>给用户赋予select，update,insert权限赋值给用户</p><ol><li>以超级用户（如 <code>postgres</code>）登录</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h 182.92.135.91 -U postgres -W</span><br></pre></td></tr></table></figure><ol><li>在 psql 里依次执行</li></ol><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1) 建用户</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> yjy <span class="keyword">WITH</span> PASSWORD <span class="string">&#x27;yjy123&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2) 建数据库，并把 owner 设成 yjy</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE yjy_db OWNER yjy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3) 切到新建的数据库</span></span><br><span class="line">\c yjy_db</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4) 建一个业务 schema（除了 public 之外）</span></span><br><span class="line"><span class="keyword">CREATE</span> SCHEMA yjy_schema <span class="keyword">AUTHORIZATION</span> yjy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5) 在该 schema 下建一张示例表</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> yjy_schema.demo (</span><br><span class="line">    id   serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    info text</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6) 把 yjy_schema.demo 的常用权限一次性赋给 yjy</span></span><br><span class="line"><span class="comment">--    也可以写 GRANT SELECT, INSERT, UPDATE ... 但更简单的写法：</span></span><br><span class="line"><span class="keyword">GRANT</span> USAGE <span class="keyword">ON</span> SCHEMA yjy_schema <span class="keyword">TO</span> yjy;</span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> <span class="keyword">ALL</span> TABLES <span class="keyword">IN</span> SCHEMA yjy_schema <span class="keyword">TO</span> yjy;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可选：让 yjy 今后自己新建的表也自动带这些权限</span></span><br><span class="line"><span class="keyword">ALTER</span> <span class="keyword">DEFAULT</span> PRIVILEGES <span class="keyword">IN</span> SCHEMA yjy_schema</span><br><span class="line">    <span class="keyword">GRANT</span> <span class="keyword">SELECT</span>, <span class="keyword">INSERT</span>, <span class="keyword">UPDATE</span> <span class="keyword">ON</span> TABLES <span class="keyword">TO</span> yjy;</span><br></pre></td></tr></table></figure><ol><li>验证</li></ol><p>退出超级用户会话，用新建用户登录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql -h 182.92.135.91 -U yjy -d yjy_db -W</span><br></pre></td></tr></table></figure><p>在 <code>yjy_db=&gt;</code> 提示符下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 应该能成功</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> yjy_schema.demo(info) <span class="keyword">VALUES</span> (<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> yjy_schema.demo;</span><br><span class="line"><span class="keyword">UPDATE</span> yjy_schema.demo <span class="keyword">SET</span> info<span class="operator">=</span><span class="string">&#x27;hi&#x27;</span> <span class="keyword">WHERE</span> id<span class="operator">=</span><span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>到此，任务完成。</p><h3 id="六：图形化界面安装">六：图形化界面安装</h3><p>我使用navicat了</p><p>直接在public下建表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> hello (</span><br><span class="line">    id   serial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">    msg  text</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> hello(msg) <span class="keyword">VALUES</span> (<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> hello;</span><br></pre></td></tr></table></figure><h3 id="七、数据类型">七、数据类型</h3><p>PGSQL支持的类型特别丰富，大度哟书的类型MySQL都有对应的关系</p><table><thead><tr><th>名称</th><th>说明</th><th>对比MySQL</th></tr></thead><tbody><tr><td>布尔类型</td><td>boolean，标准的布尔类型</td><td>MySQL中虽然没有对应的boolean，但是有替换的类型，数值的tinyint类型和PGSQL的boolean都是占一个字节。</td></tr><tr><td>整型</td><td>smallint(2字节），integer(4字节)，bigint(8字节)</td><td>跟MySQL没啥区别</td></tr><tr><td>浮点型</td><td>decimal,numeric (和decimal一样，精准浮点型)，real(float),double precision(double) money(货币类型)</td><td>和MySQL基本也没有啥区别，MySQL支持float,double,decimal.MySQL没有这个货币类型。</td></tr><tr><td>字符串类型</td><td>varchar(n)(character varying),  char(n) (character),text</td><td>和MySQL基本没区别。PGSQL存储的varchar类型，可以存储一个G，MySQL好像存储64kb</td></tr><tr><td>日期类型</td><td>data(年月日),time(时分秒),timestamp(年月日时分秒)</td><td>和MySQL基本一致。mysql有个datetime</td></tr><tr><td>二进制类型</td><td>bytea-存储二进制类型</td><td>MySQL也支持，MySQL是blog</td></tr><tr><td>位置类型</td><td>bit（n）-定长位图，bit varying(n)</td><td>存储0或者1.MySQL也有但是用的不多。</td></tr><tr><td>枚举类型</td><td>enum,跟java的enum一样</td><td>MySQL也一样</td></tr><tr><td>集合类型</td><td>点直线线段。。。。</td><td>MySQL没有但是一般也用不到</td></tr><tr><td>数组类型</td><td>在类型后面，追加[] 代表存储数组</td><td>MySQL没有</td></tr><tr><td>JSON类型</td><td>json(存储JSON数据的文本)，JSONB（存储JSON二进制）【JSONB 是 PostgreSQL 的<strong>高性能 JSON</strong> 类型，除非你有特殊理由要保留原始文本，否则<strong>默认选 JSONB</strong>】</td><td>MySQL8.x也支持</td></tr><tr><td>ip类型</td><td>cidr(存储ip地址)</td><td>MySQL不支持</td></tr><tr><td>。。。</td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><h3 id="八、PostgreSQL基本操作">八、PostgreSQL基本操作</h3><h4 id="8-1-单引号和双引号">8.1 单引号和双引号</h4><p>在PGSQL中，与SQL语句时，单引号用来标识实际的值。双引号用来标识一个关键字，比如表名，字段名。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 单引号写具体的值，双引号类似MySQL的``标记，用来填充关键字</span></span><br><span class="line"><span class="comment">-- 下面的葡萄牙会报错，因为葡萄牙不是关键字</span></span><br><span class="line"><span class="keyword">select</span> <span class="number">1.14</span> <span class="string">&#x27;卡特尔&#x27;</span>,&quot;卡塔尔&quot;;</span><br></pre></td></tr></table></figure><h4 id="8-2-数据类型转换">8.2 数据类型转换</h4><p>第一种方式：只需要在值的面前，添加上具体的数据类型即可</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 将字符串转成位图类型</span></span><br><span class="line"><span class="keyword">select</span> bit <span class="string">&#x27;010010010100101&#x27;</span>;</span><br></pre></td></tr></table></figure><p>第二种方式：也可以在具体值的后面，添加上：：类型，来指定</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 数据类型</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;2011-11-11&#x27;</span>::<span class="type">date</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;0101010101010&#x27;</span>::bit(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;13&#x27;</span>::<span class="type">int</span>;</span><br></pre></td></tr></table></figure><p>第三种方式：使用CAST函数</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 类型转换的完整写法</span></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CAST</span>(<span class="type">varchar</span> <span class="string">&#x27;100&#x27;</span> <span class="keyword">as</span> <span class="type">int</span>);</span><br></pre></td></tr></table></figure><h4 id="8-3-布尔类型">8.3 布尔类型</h4><p>可以存储三个值：true,false,null</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 布尔类型的约束没有那么强 true,false 大小写随意 他会给你转；同时yes,on他也认识</span></span><br><span class="line"><span class="keyword">select</span> <span class="literal">true</span>,<span class="literal">false</span>,<span class="string">&#x27;yes&#x27;</span>::<span class="type">boolean</span>,<span class="type">boolean</span> <span class="string">&#x27;no&#x27;</span>,<span class="literal">True</span>,<span class="literal">False</span>,<span class="keyword">Null</span>::<span class="type">boolean</span>;</span><br></pre></td></tr></table></figure><h4 id="8-4-数值类型">8.4 数值类型</h4><h5 id="8-4-1-整型">8.4.1 整型</h5><p>整型比较简单，主要就是三个：</p><ul><li>smallint,int2: 2字节</li><li>integer,int ,int4：4字节</li><li>bigint,int8 : 8字节</li></ul><p>正常没啥事就integer,如果要存主键，比如雪花算法，那就bigint,空间要节约，根据情况smallint</p><h4 id="8-4-2-浮点型">8.4.2 浮点型</h4><p>浮点类型就2个（其实是一个）</p><ul><li>decimal(n,m)：本质就是numeric,PGSQLh会帮你转换</li><li>numeric(n.m): PGSQL本质的浮点类型</li></ul><p>针对浮点类型的数据，就使用numeric</p><h4 id="8-4-3-序列">8.4.3 序列</h4><p>MySQL中的主键自增，是基于auto_increment 去实现，MySQL里没有序列的对象。</p><p>PGSQL和Oracle十分相似，支持序列：sequence</p><p>PGSQL可没有auto_increment.</p><p>序列的正常构建方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> sequence yjy.table_id_seq;</span><br><span class="line"><span class="comment">-- 查询下一个值</span></span><br><span class="line"><span class="keyword">select</span> nextval(<span class="string">&#x27;yjy.table_id_seq&#x27;</span>);</span><br><span class="line"><span class="comment">-- 查询当前值</span></span><br><span class="line"><span class="keyword">select</span> currval(<span class="string">&#x27;yjy.table_id_seq&#x27;</span>)</span><br></pre></td></tr></table></figure><p>默认情况下，sequence的起始值都是0，每次nextval递增1，最大值9223372036854775807</p><p>告诉缓存，插入的数据比较多，可以指定告诉缓存，一次性计算出20个后续的值，nextval时就可以不去计算，直接去高速缓存拿值，效率会有一点点提升。</p><p>序列大多数的应用，是作表的主键自增效果。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表自增</span></span><br><span class="line"><span class="keyword">create table</span> yjy.xxx(</span><br><span class="line">id int8 <span class="keyword">default</span> nextval(<span class="string">&#x27;yjy.table_id_seq&#x27;</span>),</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert into</span> yjy.xxx (name) <span class="keyword">values</span> (<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> yjy.xxx;</span><br></pre></td></tr></table></figure><p>这一种写法没有问题 但是比较麻烦</p><p>PGSQL提供了序列的数据结构，可以在声明表结果时，直接指定序列的类型即可。</p><ul><li>smallserial</li><li>serial</li><li>bigserial</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 表自增</span></span><br><span class="line"><span class="keyword">create table</span> yjy.yyy(</span><br><span class="line">id bigserial,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">16</span>)</span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert into</span> yjy.yyy (name) <span class="keyword">value</span> (<span class="string">&#x27;yyy&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在drop表之后，序列不会删除，但是序列会变为不可用的状态。</p><p>因为序列在使用serial去构建时，会绑定在指定表的指定列上。</p><h4 id="8-5-字符串类型">8.5 字符串类型</h4><p>字符串类型用的时最多的一种，在PGSQL里，主要支持三种：</p><ul><li>character(就是MySQL的char类型)，定长字符串。（最大可用存储1G）</li><li>character varying(varchar)</li><li>text</li></ul><p>操作没什么说的，但是字符串的常见函数特别多</p><p>字符串的拼接一定要使用||来拼接</p><h4 id="8-6-日期类型">8.6 日期类型</h4><p>在PGSQL中，核心的时间类型，就三个。</p><ul><li>timestamp (时间戳，覆盖 年月日时分秒)</li><li>data(年月日)</li><li>time（时分秒）</li></ul><p>在PGSQL中，声明时间的方式。</p><p>之需要使用字符串的正常编写yyyy-MM-dd HH:mm:ss 就可以转换为时间类型</p><p>直接在字符串位置使用之前讲道德数据类型转换就可以了。</p><p>当前系统时间：</p><ul><li><p>可以使用now作为当前系统时间（没有时区的概念）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">TIMESTAMP</span> <span class="string">&#x27;now&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 直接查询now 没有时区的概念</span></span><br><span class="line"><span class="keyword">select</span> <span class="type">time</span> <span class="keyword">with</span> tinme zone <span class="string">&#x27;now&#x27;</span> <span class="keyword">at</span> <span class="type">time</span> zone <span class="string">&#x27;08:00:00&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="built_in">CURRENT_TIMESTAMP</span>;</span><br></pre></td></tr></table></figure></li><li><p>也可以使用current_timestamp的方式获取（推荐，默认东八区）</p></li></ul><p>日期类型的运算</p><ul><li>正常对date类型做 + - 运算，默认单位就是天</li></ul><p>也可以用interval的方式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="type">timestamp</span> <span class="string">&#x27;2011-11-11 12:12:12&#x27;</span> <span class="operator">+</span> <span class="type">interval</span> <span class="string">&#x27;1day&#x27;</span> <span class="operator">+</span> <span class="type">interval</span> <span class="string">&#x27;1minute&#x27;</span> <span class="operator">+</span> <span class="type">interval</span> <span class="string">&#x27;1month&#x27;</span>; </span><br></pre></td></tr></table></figure><h4 id="8-7-枚举类型">8.7 枚举类型</h4><p>枚举类型MySQL也支持，只是没什么用。</p><p>可以声明枚举类型作为表中的字段类型，这样可以无形的给表追加规范</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 声明一个星期的枚举</span></span><br><span class="line"><span class="keyword">create</span> type week <span class="keyword">as</span> enum (<span class="string">&#x27;Mon&#x27;</span>,<span class="string">&#x27;Tues&#x27;</span>,<span class="string">&#x27;Sun&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> test(</span><br><span class="line">id bigserial,</span><br><span class="line">weekday week</span><br><span class="line"></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert into</span> test (weekday) <span class="keyword">values</span> (<span class="string">&#x27;Mon&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="8-8-IP类型">8.8 IP类型</h4><p>PGSQL支持IP类型的存储，支持IPv4,IPv6这种，甚至Mac内的类型也支持</p><p>这种IP类，可以在存储IP时，帮助做校验,也支持范围查找</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="string">&#x27;192.168.101.200&#x27;</span>::cidr;</span><br></pre></td></tr></table></figure><h4 id="8-9-JSON-JSONB类型">8.9 JSON&amp;JSONB类型</h4><p>JSON在MySQL8.x也做了支持，但是MySQK支持的不好，因为JSON类型做查询时，基本无法给JSON字段做索引。</p><p>PGSQL支持JSON类型以及JSONB类型</p><p>JSON和JSONB的使用基本没有区别</p><p>撇去JSON类型，本质上JSON格式就一个字符串，比如MySQL5.7不支持JSON的情况下，使用text也可以，但是字符串类型无法校验JSON的格式，其次单独的字符串没有办法只获取JSON中某个key对应的value.</p><p>JSON和JSONB的区别：</p><ul><li>JSON类型无法构建索引，JSONB类型可以创建索引</li><li>JSON类型的数据中多余的空格会被存储下来，JSONB会自动取消多余的空格。</li><li>JSON类型甚至可以存储重复的key,以最后一个为准，JSONB不会保留多余的重复key.</li><li>JSON会保留存储时key的顺序，JSONB不会保存原有顺序。</li></ul><p>JSON中key对应的value数据类型</p><table><thead><tr><th>JSON</th><th>PGSQL</th></tr></thead><tbody><tr><td>String</td><td>text</td></tr><tr><td>number</td><td>numeric</td></tr><tr><td>boolean</td><td>boolean</td></tr><tr><td>null</td><td>(none)</td></tr><tr><td>操作JSON</td><td></td></tr></tbody></table><ul><li>上述的四种JSON存储的类型</li><li>JSON数组</li><li>JSON对象</li><li>构建表存储JSON</li></ul><h4 id="8-10-复合类型">8.10 复合类型</h4><p>复合类型就好像Java中的一个对象，Java中有一个User,User和表做了一个映射，User中有个人信息对象。可以基于复合类型对映射上个人信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> Info info;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 构建复合类型 映射上Info</span></span><br><span class="line"><span class="keyword">create</span> type info_type <span class="keyword">as</span> (name <span class="type">varchar</span>(<span class="number">32</span>),age <span class="type">int</span>);</span><br><span class="line"><span class="comment">-- 构建表 映射user</span></span><br><span class="line"><span class="keyword">create table</span> <span class="keyword">user</span>(</span><br><span class="line">    id serial;</span><br><span class="line">    info info_type;</span><br><span class="line">)</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>));</span><br><span class="line"><span class="keyword">insert into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;Lucy&#x27;</span>,<span class="number">223</span>));</span><br><span class="line"><span class="keyword">insert into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>));</span><br><span class="line"><span class="keyword">insert into</span> tb_user (info) <span class="keyword">values</span> ((<span class="string">&#x27;张三&#x27;</span>,<span class="number">23</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_user;</span><br></pre></td></tr></table></figure><h4 id="8-11-数组类型">8.11 数组类型</h4><p>数组还是要依赖其他类型，比如在设置住址，住址可能有多个住址，看采用数组类型去修饰字符串。</p><p>PGSQL中，指定数组的方式就是[]，可以指定一维数组，也支持二维甚至更多维数组。</p><p>构建数组的方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create table</span> test(</span><br><span class="line">id serial,</span><br><span class="line">col1 <span class="type">int</span>[],</span><br><span class="line">col2 <span class="type">int</span>[<span class="number">2</span>],</span><br><span class="line">col3 <span class="type">int</span>[][]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 构建表指定数组长度后，并不是说数组内容只有2的长度，可以插入更多数据</span></span><br><span class="line"><span class="comment">-- 甚至在你插入数据，如果将二维数组的结构扔到一维数组上，也可以存储。</span></span><br><span class="line"><span class="keyword">select</span> <span class="string">&#x27;&#123;how,are,you&#125;&#x27;</span>::<span class="type">VARCHAR</span>[];</span><br></pre></td></tr></table></figure><p>数据类型 - 数组（比较方式）</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 包含</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[<span class="number">1</span>,<span class="number">2</span>] @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="number">1</span>]</span><br><span class="line"><span class="comment">-- 被包含</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[<span class="number">1</span>,<span class="number">2</span>] <span class="operator">&lt;</span>@ <span class="keyword">array</span>[<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"><span class="comment">-- 是否有相同元素</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">array</span>[<span class="number">2</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">45</span>,<span class="number">1</span>] <span class="operator">&amp;&amp;</span> <span class="keyword">array</span>[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><h3 id="九-表">九:表</h3><p>表的构建语句，基本都会。</p><p>核心在于构建表时，要指定上一些约束。</p><h4 id="9-1-约束">9.1 约束</h4><h5 id="9-1-1-主键">9.1.1 主键</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> test(</span><br><span class="line">id bigserial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="9-1-2-非空">9.1.2 非空</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> test(</span><br><span class="line">id bigserial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="9-1-3-唯一">9.1.3 唯一</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> test(</span><br><span class="line">id bigserial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not NULL</span>,</span><br><span class="line">id_card <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">UNIQUE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="9-1-4-检查">9.1.4 检查</h5><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 检查约束</span></span><br><span class="line"><span class="comment">-- 价格的表 price,discount_price</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> test;</span><br><span class="line"><span class="keyword">create table</span> test(</span><br><span class="line">id bigserial <span class="keyword">primary KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">32</span>) <span class="keyword">not null</span>,</span><br><span class="line">price <span class="type">numeric</span> <span class="keyword">check</span>(price <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line">discount_price <span class="type">numeric</span> <span class="keyword">check</span>(discount_price <span class="operator">&gt;</span> <span class="number">0</span>),</span><br><span class="line"><span class="keyword">check</span>(price <span class="operator">&gt;=</span> discount_price)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="9-1-5-外键（了解）">9.1.5 外键（了解）</h5><h5 id="9-1-6-默认值">9.1.6 默认值</h5><p>一般公司内，要求表中除了主键和业务字段之外，必须要有5个字段</p><p>created，create_id, updated, updated_id, is_delete</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">created <span class="type">timestamp</span> <span class="keyword">default</span> <span class="built_in">current_timestamp</span>;</span><br></pre></td></tr></table></figure><h4 id="9-2-触发器">9.2 触发器</h4><p>触发器trigger,是由事件触发的一种存储过程</p><p>当对表进行insert,update,delete,truncate操作时，会触发表的Trigger(看触发器的创建时指定的事件)</p><p>构建两张表，学生信息表，学生分数表。</p><p>在删除学生信息的同时，自动删除学生的分数。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create table</span> student(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">name <span class="type">varchar</span>(<span class="number">32</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">create table</span> score(</span><br><span class="line">id <span class="type">int</span>,</span><br><span class="line">student_id <span class="type">int</span>,</span><br><span class="line">math_score <span class="type">numeric</span>,</span><br><span class="line">english_score <span class="type">numeric</span>,</span><br><span class="line">chinese_score <span class="type">numeric</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> student (id,name) <span class="keyword">values</span> (<span class="number">1</span>,<span class="string">&#x27;张三&#x27;</span>);</span><br><span class="line"><span class="keyword">insert into</span> student (id,name) <span class="keyword">values</span> (<span class="number">2</span>,<span class="string">&#x27;lisi1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> </span><br><span class="line">score</span><br><span class="line">(id,student_id,math_score,english_score,chinese_score) </span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">1</span>,<span class="number">66</span>,<span class="number">66</span>,<span class="number">66</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">insert into</span> </span><br><span class="line">score</span><br><span class="line">(id,student_id,math_score,english_score,chinese_score) </span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">2</span>,<span class="number">2</span>,<span class="number">77</span>,<span class="number">77</span>,<span class="number">77</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>为了完成级联删除，需要编写pl/sql</p><p>先查看一下PGSQL支持plsql,查看PGSQL的plsql语法</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建一个名为 test() 的无参函数，返回一个整数</span></span><br><span class="line"><span class="comment">-- $$ 可以理解为时一种特殊的单引号</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">FUNCTION</span> test()</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="type">int</span>                       <span class="comment">-- 正确关键字是 RETURNS（有 &#x27;s&#x27;）</span></span><br><span class="line"><span class="keyword">AS</span> $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">    money <span class="type">int</span> :<span class="operator">=</span> <span class="number">10</span>;             <span class="comment">-- 声明局部变量并初始化为 10</span></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">    <span class="keyword">RETURN</span> money;                <span class="comment">-- 将变量 money 作为结果返回</span></span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>在简单了解了一下plpgsql的语法后，编写一个触发器函数。</p><p>触发器函数允许使用一些特殊变量</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 构建一个删除学生分数的触发器函数</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">FUNCTION</span> trigger_function_delete_student_score() <span class="keyword">returns</span> <span class="keyword">trigger</span> <span class="keyword">as</span> $$</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> score <span class="keyword">where</span> student_id <span class="operator">=</span> OLD.id;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">old</span>;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><p>开始构建触发器，在学生信息表删除时，执行前面声明的触发器函数</p> <figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">trigger</span> trigger_student </span><br><span class="line">after <span class="keyword">delete</span> <span class="keyword">on</span> student </span><br><span class="line"><span class="keyword">for</span> <span class="keyword">each</span> <span class="type">row</span> </span><br><span class="line"><span class="keyword">execute</span> <span class="keyword">function</span> trigger_function_delete_student_score();</span><br></pre></td></tr></table></figure><h4 id="9-3-表空间">9.3 表空间</h4><p>在存储数据时，数据肯定要落到磁盘上，基于构建的tablespace,指定数据存放在磁盘上的物理地址。</p><p>如果没有字节设计tablespace，PGSQL会自动指定一个位置作为默认的存储点。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 查询表存储的物理地址</span></span><br><span class="line"><span class="keyword">select</span> pg_relation_filepath(<span class="string">&#x27;student&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这个位置是在$PG_DATA后的存放地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$PG_DATA <span class="operator">=</span><span class="operator">=</span> <span class="operator">/</span>var<span class="operator">/</span>lib<span class="operator">/</span>pgsql<span class="operator">/</span><span class="number">14</span><span class="operator">/</span>data<span class="operator">/</span></span><br></pre></td></tr></table></figure><p>410000 起始就是存储数据的物理文件</p><p>构建表空间，指定数据存放位置</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 构建表空间，构建表空间需要用户权限是超级管理员，起始需要指定的目录已经存在</span></span><br><span class="line"><span class="keyword">create</span> tablespace tp_test location <span class="string">&#x27;/var/lib/pgsql/14/data/tp_data&#x27;</span>;</span><br></pre></td></tr></table></figure><p>构建数据库，以及表，指定到这个表空间中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> database db_test tablespace tp_test;</span><br></pre></td></tr></table></figure><p>其实指定表空间的存储位置后，PGSQL会在$PG_DATA目录下存储一份，同时在咱们构建tablespace时，指定的路径下也存储一份。</p><p>进一步发现，其实在PGSQL目录下，存储的是一个link,链接文件，类似一个快捷方式</p><h4 id="9-4-视图">9.4 视图</h4><p>跟MySQL没什么区别，把一些复杂的操作封装起来，还可以隐藏一些敏感数据。</p><p>视图对于用户来说，就是一张真实的表，可以直接基于视图查询一张或者多张表的信息。</p><p>视图对于开发来说，就是一条SQL语句。</p><p>在PGSQL中，简单（单表）的视图时允许写操作的</p><p>但是强烈不推荐对视图进行写操作,虽然PGSQL默认允许（简单的视图）</p><p>写入的时候，其实修改的是表本身</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vw_Socre <span class="keyword">as</span> </span><br><span class="line">(<span class="keyword">select</span> id,math_score <span class="keyword">from</span> score);</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> vw_score;</span><br><span class="line"><span class="keyword">update</span> vw_score <span class="keyword">set</span> math_score <span class="operator">=</span> <span class="number">99</span> <span class="keyword">where</span> id <span class="operator">=</span><span class="number">2</span>;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 复杂视图(两张表关联) 默认不允许修改</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">view</span> vw_student_score <span class="keyword">as</span> </span><br><span class="line">(<span class="keyword">select</span> stu.name,score.math_score <span class="keyword">from</span> student stu,score score <span class="keyword">where</span> stu.id <span class="operator">=</span> score.student_id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="9-5-索引">9.5 索引</h4><h5 id="9-5-1-索引的基本概念">9.5.1 索引的基本概念</h5><p>先了解概念和使用</p><p>索引是数据库中快速查询数据的方法.</p><p>索引能提升查询效率的同时，也会带来一些问题</p><ul><li>增加了存储空间</li><li>写操作时，花费的事件比较多</li></ul><p>索引可以提升效率，甚至还可以给字段做一些约束</p><h5 id="9-5-2-索引的分类">9.5.2 索引的分类</h5><p>BTree索引：最常用的索引。</p><p>Hash索引：跟Mysql类似，做等值判断</p><p>GIN索引：针对字段的多个值的类型，比如数组类型</p><h5 id="9-5-3-创建索引看效果">9.5.3 创建索引看效果</h5><p>准备大量数据，测试索引效果</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 测试索引效果</span></span><br><span class="line"><span class="keyword">create table</span> tb_index(</span><br><span class="line">id bigserial <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">name <span class="type">VARCHAR</span>(<span class="number">36</span>),  <span class="comment">-- 修正为足够容纳 UUID</span></span><br><span class="line">phone <span class="type">VARCHAR</span>(<span class="number">64</span>)[]</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加30w条数据测试效果（300w太慢，建议先测试30w）</span></span><br><span class="line">DO $$</span><br><span class="line"><span class="keyword">DECLARE</span></span><br><span class="line">i <span class="type">int</span> :<span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">WHILE i <span class="operator">&lt;</span> <span class="number">300000</span> LOOP</span><br><span class="line">i :<span class="operator">=</span> i <span class="operator">+</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">INSERT INTO</span> tb_index(name, phone)</span><br><span class="line"><span class="keyword">VALUES</span> (</span><br><span class="line">md5(random()::text <span class="operator">||</span> clock_timestamp()::text)::uuid,</span><br><span class="line"><span class="keyword">array</span>[random()::<span class="type">varchar</span>(<span class="number">64</span>)]</span><br><span class="line">);</span><br><span class="line"><span class="keyword">END</span> LOOP;</span><br><span class="line"><span class="keyword">END</span>;</span><br><span class="line">$$ <span class="keyword">LANGUAGE</span> plpgsql;</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> id <span class="operator">=</span> <span class="number">22222</span>;</span><br><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;c6278y29178192192&#x27;</span>;</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> name <span class="operator">=</span> <span class="string">&#x27;c6278y29178192192&#x27;</span>;</span><br><span class="line"><span class="comment">-- Seq Scan 代表全表扫描</span></span><br></pre></td></tr></table></figure><p>这个时候我们创建一个索引</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- name 字段构建索引（默认是b-tree）</span></span><br><span class="line"><span class="keyword">create</span> index index_tb_index_name <span class="keyword">on</span> tb_index(name);</span><br><span class="line"><span class="comment">-- Index Scan (使用索引)</span></span><br></pre></td></tr></table></figure><p>包含查询</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> phone @<span class="operator">&gt;</span> arrary[<span class="string">&#x27;12121212121&#x27;</span>::<span class="type">varchar</span>(<span class="number">63</span>)];</span><br><span class="line">explain <span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_index <span class="keyword">where</span> phone @<span class="operator">&gt;</span> <span class="keyword">array</span>[<span class="string">&#x27;12121212121&#x27;</span>::<span class="type">varchar</span>(<span class="number">64</span>)];</span><br><span class="line"><span class="comment">-- Seq Scan 全表扫描</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给phone字符串数组类型字段构建一个GIN索引</span></span><br><span class="line"><span class="keyword">create</span> index index_tb_index_phone_gin <span class="keyword">on</span> tb_index <span class="keyword">using</span> gin(phone);</span><br><span class="line"><span class="comment">-- Bitmap Index 位图扫描 </span></span><br></pre></td></tr></table></figure><h4 id="9-6-物化视图">9.6 物化视图</h4><p>前面说过普通视图，本质就是一个SQL语句，普通的视图并不会本地磁盘存储任何物理。</p><p>每次查询视图都是执行这个SQL。效率有点低</p><p>物化视图从名字上就可以看出来，必然是要持久化一份数据的。使用套路和视图基本一致。这样一来查询物化视图，就想打关于查询一张单独的表，相比之前的普通视图，物化视图就不需要每次都查询复杂SQL，每次查询的都是真实的物理存储地址中的一份数据（表）。</p><p>物化视图因为会持久化到本地，完全脱离原来的表结构。</p><p>而且物化视图是可以单独设置索引等信息来提升物化视图的查询效率。</p><p>但是有好处也有坏处，更新时间不太好把握。如果更新频频繁，对数据库压力也不小。如果更新不频繁，会造成数据存在延迟问题，实时性就不好了。</p><p>如果要更新物化视图，可以采用触发器的形式，当原表中的数据被写后，可以通过触发器执行同步物化视图的操作，或者就基于定时任务去完成数据同步。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 创建物化视图</span></span><br><span class="line"><span class="keyword">CREATE</span> MATERIALIZED <span class="keyword">VIEW</span> mv_test <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> id, name, price <span class="keyword">FROM</span> test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 查询物化视图</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mv_test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 原表插入新数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> test <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">&#x27;月饼&#x27;</span>, <span class="number">5.1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 此时物化视图不会自动更新</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mv_test; <span class="comment">-- 看不到“月饼”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 手动刷新</span></span><br><span class="line">REFRESH MATERIALIZED <span class="keyword">VIEW</span> mv_test;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 现在可以看到“月饼”了</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> mv_test;</span><br></pre></td></tr></table></figure><blockquote><p><strong>物化视图不会自动同步原表数据，必须手动 <code>REFRESH MATERIALIZED VIEW</code>。</strong></p></blockquote><p>如果你需要<strong>实时同步</strong>，应该用<strong>普通视图（VIEW）**或**触发器+表</strong>的方案，而不是物化视图。</p><p>全量更新和增量更新</p><h3 id="十、事务">十、事务</h3><p>什么是ACID</p><p>在日常操作中，对于一组相关操作，通常要求要么都成功，要么都失败。在关系型数据库中，称这一组操作为事务。为了保证整体事务的安全性，有ACID这一说：</p><ul><li>原子性A：事务是一个最小的执行单元，一次事务中的操作要么都成功，要么都失败</li><li>一致性C：在事务完成时，所有数据必须保持在一致的状态。（事务完成后，最终结果和预期结果一致）</li><li>隔离性：一次事务操作，要么时其他事务操作前的状态，要么其他事务操作后的状态，不存在中间状态。</li><li>持久性：事务提交后，数据会落到本地磁盘，修改是永久性的。</li></ul><p>PostgreSQL中，在事务的并发问题里，也是基于MVCC，多版本并发控制区维护数据的一致性。相比于传统的锁操作，MVCC最大的优点可以让读写互相不冲突。</p><p>当然PostgreSQL也支持表锁和行锁，可以解决写写的冲突。</p><p>PostgreSQL相比于其他数据，有一个比较大的优化，DDL也可以包含在一个事务中。比如集群中的操作，一个事务可以保证多个节点都构建出一个表，才算成功。</p><p><strong>事务的基本使用</strong></p><p>首先基于前面的各种操作，应该以及自动体会到了，PostgreSQL是自动提交事务。跟MySQL一样的。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\<span class="keyword">set</span> AUTOCOMMIT off</span><br></pre></td></tr></table></figure><p>三个命令：</p><ul><li>begin</li><li>commit</li><li>rollback</li></ul><h5 id="10-3-保存点（了解）">10.3 保存点（了解）</h5><p>比如项目中有一个大事务操作，不好控制，超时有影响，回滚会造成一切重来，成本太高。</p><p>我针对大事务，拆分成几个部分。第一部分完成后，构建一个保存点。如果后面操作失败了，需要回滚，不需要全盘回滚，回滚到之前的保存点，继续重试。</p><p>有人会发现，破坏了整体事务的原子性。</p><p>但是，只要操作合理，可以在保存点做充实，只要重试不成功，依然可以回滚；</p><h3 id="十一、并发问题">十一、并发问题</h3><h5 id="11-1-事务的隔离级别">11.1 事务的隔离级别</h5><p>在不考虑隔离性的前提下，事务的并发可能会出现的问题：</p><ul><li>脏读：读到了其他食物未提交的数据（必须避免这种情况）</li><li>不可重复读：同一事务中，多次查询同一数据，结果不一致，因为其他事务修改造成的。（一些业务中这种不可重复读不是问题）</li><li>幻读：同一事务中，多次查询同一数据，因为其他事务对数据进行了增删，导致出现了一些问题（一些业务中这种幻读不是问题）</li></ul><p>针对这些并发问题，关系型数据库有一些事务的隔离级别，一般用4种。</p><ul><li>READ UNCOMMITTED：读未提交（啥用没有，并且PGSQL没有，提供了只是为了完整性）</li><li>READ COMMITTED：读已提交，可以解决脏读（PGSQL默认隔离级别）</li><li>REPEATABLE READ：可重复读，可以解决脏读和不可重复读（MySQL默认是这个隔离级别，PGSQL也提供了，但是设置为可重复读，效果还是串行化）</li><li>SERIALIZABLE：串行化，啥都能解决（锁，效率慢）</li></ul><p>PGSQL在老版本种，只有两个隔离级别，读已提交和串行化。在PGSQL中不存在脏读问题。</p><h5 id="11-2-MVCC">11.2 MVCC</h5><p>首先要搞清楚，为啥要有MVCC。</p><p>如果一个数据库，频繁的进行读写操作，为了保证安全，采用锁的机制。但是如果采用锁机制，如果一些事务在写数据，另外一个事务就无法读数据，会造成读写之间相互阻塞。大多的数据库都会采用一个机制多版本并发控制MVCC来解决这个问题。</p><p>比如你要查询一行数据，但是这行数据正在被修改，事务还没提交，如果此时对这行数据加锁，会导致其他的读操作阻塞，需要等待，如果采用PostgreSQL,他的内部会针对这一行保存多个版本，如果数正在被写入，让读操作区查询之前的版本，就不会阻塞。等写操作的事务提交了，读操作才能查看到最新的数据。这机制可以确保<strong>读写操作</strong>没有冲突，这就是MVCC的主要特点。</p><p><strong>写写操作，和MVCC没关系，哪个就是加锁！</strong></p><p>在操作之前，先了解一下PGSQL中，每张表都会自带两个字段</p><ul><li>xmin:给当前事务分配的数据版本。如果有其他事务做了写操作，并且提交事务了，就给xmin分配新的版本。</li><li>xmax：当前事务没有存在新版本，xmax就是0.如果有其他事务做了写操作，未提交事务，将写操作的版本放到xmax中</li></ul><p>把 PostgreSQL 的每一行数据想像成一张「小纸条」，纸条上除了记录真正的字段值（id、name …）外，还偷偷写了两个隐藏字段：</p><ul><li><strong>xmin</strong>：这行诞生的「出生证号」（创建它的事务号）</li><li><strong>xmax</strong>：这行注销的「死亡证号」（删除它的事务号，0 表示还没死）</li></ul><p>借助这两个号码，加上当前自己事务所拿到的「快照号」（snapshot），就能判断：</p><ol><li><strong>我能不能看到这一行？</strong></li><li><strong>这一行对别人来说是不是已经死了？</strong></li></ol><p>用纸条的故事串一遍图片里的 6 个瞬间</p><table><thead><tr><th style="text-align:left">时刻</th><th style="text-align:left">事务号</th><th style="text-align:left">纸条内容（id=1）</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">1</td><td style="text-align:left">Tx 100 刚开启</td><td style="text-align:left"><code>xmin=100, xmax=0, name='张三'</code></td><td style="text-align:left">张三这张纸条是事务 100 刚生成的，目前没人删除。</td></tr><tr><td style="text-align:left">2</td><td style="text-align:left">Tx 100 再次看</td><td style="text-align:left">同上</td><td style="text-align:left">事务 100 用<strong>自己的快照</strong>看：xmin=100 ≤ 100 且 xmax=0，<strong>可见</strong>。</td></tr><tr><td style="text-align:left">3</td><td style="text-align:left">Tx 101 修改</td><td style="text-align:left">把 name 改成 “李四”，并<strong>生成新版本</strong></td><td style="text-align:left">旧纸条：xmin=100, xmax=101（被 101 删除）</td></tr><tr><td style="text-align:left">4</td><td style="text-align:left">Tx 100 第三次看</td><td style="text-align:left">旧纸条：xmin=100, xmax=101</td><td style="text-align:left">100 的快照只认 ≤100 的出生证和未死亡的行。</td></tr><tr><td style="text-align:left">5</td><td style="text-align:left">Tx 101 提交</td><td style="text-align:left">删除与新增都<strong>正式生效</strong></td><td style="text-align:left">数据库里现在只有新纸条有效。</td></tr><tr><td style="text-align:left">6</td><td style="text-align:left">Tx 100 结束后再看</td><td style="text-align:left">新纸条：xmin=101, xmax=0</td><td style="text-align:left">此时 Tx 100 已经结束，拿的是新的快照。发现 xmin=101 大于旧快照号 100，<strong>看不到</strong>这条新生命，于是只能看到已提交的新版本，name 变成 “李四”。</td></tr></tbody></table><p>一句话总结</p><ul><li><strong>xmin ≤ 快照号 且 xmax = 0</strong> → 这行对我来说<strong>活着并且可见</strong>。</li><li><strong>xmax ≤ 快照号</strong> → 这行对我来说<strong>已经被删除</strong>。</li><li><strong>xmin &gt; 快照号</strong> → 这行在我出生之后才被创建，<strong>现在我还看不到</strong>。</li></ul><p>借助这一对隐藏字段，PostgreSQL 实现了 <strong>MVCC（多版本并发控制）</strong>：读写互不阻塞，每个事务看到的都是「属于自己的那一刻的世界」。</p><p>PostgreSQL中也提供了页锁，咨询所，但是这个不需要要关注，这个是为了锁的完整性。</p><h5 id="12-1-表锁">12.1 表锁</h5><p>表锁显而易见，就是锁住整一张表。表锁也分很多种模式。</p><p>表锁的模式很多，其中最核心的两个：</p><ul><li>ACCESS SHARE ： 共享锁（读锁），读读操作不阻塞，但是不允许写操作并行</li><li>ACCESS EXCLUSIVE：互斥锁（写锁），无论什么操作进来都阻塞</li></ul><p>详细查看官网</p><p>ACCESS SHARE 让“大家一起读”；ACCESS EXCLUSIVE 让“谁也别动”。通过 <code>LOCK TABLE</code> 手动获取或在执行 SQL 时隐式获取，再用 <code>pg_locks</code> 一目了然地观察锁冲突即可。</p><h5 id="12-2-行锁">12.2 行锁</h5><p>PostgreSQL的行锁和MySQL的基本一模一样的，基于select for update就可以指定行锁。</p><p>MySQL中有一个概念，for update时，如果select 的查询没有命中所以可能会锁表。</p><p>PostgreSQL有个特点，一般情况，在select的查询没有命中索引时，他不一定会锁表，然后会实现行锁。</p><p>PostgreSQL 行锁就两种：</p><ol><li><code>FOR UPDATE</code></li><li><code>FOR SHARE</code></li></ol><p>使用示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 先开启事务</span></span><br><span class="line"><span class="keyword">BEGIN</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 基于 FOR UPDATE 锁住 id = 3 的行</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> test <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span> <span class="keyword">FOR</span> <span class="keyword">UPDATE</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 更新该行</span></span><br><span class="line"><span class="keyword">UPDATE</span> test <span class="keyword">SET</span> name <span class="operator">=</span> <span class="string">&#x27;vi&#x27;</span> <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 提交事务，锁释放</span></span><br><span class="line"><span class="keyword">COMMIT</span>;</span><br></pre></td></tr></table></figure><p>其他会话若要锁同一行，会被阻塞。</p><h3 id="十三、备份-恢复">十三、备份&amp;恢复</h3><p>防止数据丢失的第一道防线就是备份。数据丢失有的是硬件损坏，还有人为的误删之类的，也有BUG的原因导致误删数据。</p><p>正常备份和恢复，如果公司有DBA，一般咱们不用参与，BUT,学的java，啥都得会点</p><p>在PostgreSQL中，有三种备份方式：</p><p><strong>SQL备份（逻辑备份）</strong>：其实就是利用数据库自带的类型dump的命令，或者时你用图形化界面执行导入导出时，底层就是基于这个dump命令实现的。备份出来一份sql文件，谁需要就复制给谁。</p><p>优点：简单，方便操作，有手就行，还挺可靠。</p><p>缺点：数据量如果比较大，这种方式巨慢。</p><p><strong>文件下同备份</strong>（物理备份）：其实就是找到当前数据优酷，数据文件在磁盘存储的位置，将数据文件直接复制一份或者多份，存储在不同的物理机上，即使物理机爆炸一个，还有其他物理机。</p><p>优点：相比逻辑备份，恢复的速度快。</p><p>缺点：在备份数据时，可能数据还在写入，一定程度上会丢失数据。在恢复数据时，也需要注意数据库的版本和环境必须保持高度的一致。如果是线上正在运行的数据库，这种复制的方式无法在生成环境实现。</p><p>如果说要做数据的迁移，这种方式还不错滴。</p><p><strong>归档备份：（也属于物理备份）</strong></p><p>先了解几个概念，在PostgreSQL有多个子进程来辅助一些操作</p><ul><li>BgWrite 进程：BgWrite是将内存中的数据写到磁盘中的一个辅助进程。当向数据库中执行写操作后，数据不会马上持久化到磁盘里。这个主要是为了提升性能。BgWriter会周期性的将内存中的数据写入到磁盘。但是这个周期时间，长了也不行，慢了也不行。<ul><li>如果快了，IO操作频繁，效率慢。</li><li>如果慢了，有查询操作需要内存中的数据时，需要BgWriter现把数据从内存写道磁盘中，再提供查询操作作为返回结果，会导致查询操作效率变低。</li><li>考虑一个问题：事务提交了 数据没有落磁盘，这时，服务器宕机了怎么办？</li></ul></li><li>WalWriter进程：WAL就是write ahead log的缩写，说人话就是预写日志（redo log）.其实数据还在内存中时，其实已经写入了WAL日志一份。这样依赖，即使BgWriter进程没写入到磁盘中时，数据也不好存在丢失的问题。<ul><li>WAL能单独做备份么？单独</li></ul></li></ul><p>待完成…</p><h3 id="十四、数据迁移、集群">十四、数据迁移、集群</h3><p>待完成…</p><h2 id="SpringBoot-postgresql-mybatis">SpringBoot+postgresql+mybatis</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>application.yml</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">context-path:</span> <span class="string">/PostgreSQL</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line">  </span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:postgresql://192.168.11.12:5432/1912</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">postgres</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">org.postgresql.Driver</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.yangjiayu.bean</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> UserMapper mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/select&quot;)</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">select</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mapper.getUser();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/insert&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mapper.insertUser(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/update&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mapper.updateUser(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/delete&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="keyword">return</span> mapper.deleteUser(name);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Mapper:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUser</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">insertUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">updateUser</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">deleteUser</span><span class="params">(String name)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.yangjiayu.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getUser&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">select * from user_test</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">insert into</span><br><span class="line">user_test(name,age) values(#&#123;name&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">update user_test set</span><br><span class="line">age=#&#123;age&#125; where name = #&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;String&quot;</span>&gt;</span></span><br><span class="line">delete from user_test</span><br><span class="line">where name=#&#123;name&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="SpringBoot-postgresql-mybatisplus">SpringBoot+postgresql+mybatisplus</h2><p>我们创建一个 product 表，包含ID、名称、价格、库存和创建时间等字段。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 连接到你的数据库，然后执行以下 DDL 语句</span></span><br><span class="line"><span class="keyword">CREATE TABLE</span> product (</span><br><span class="line">    id <span class="type">BIGINT</span> <span class="keyword">PRIMARY KEY</span> GENERATED ALWAYS <span class="keyword">AS</span> <span class="keyword">IDENTITY</span>, <span class="comment">-- 使用 BIGINT 和 IDENTITY 实现自增主键，这是 PostgreSQL 推荐的方式</span></span><br><span class="line">    name <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    price <span class="type">DECIMAL</span>(<span class="number">10</span>, <span class="number">2</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">    stock <span class="type">INT</span> <span class="keyword">NOT NULL</span> <span class="keyword">DEFAULT</span> <span class="number">0</span>,</span><br><span class="line">    create_time <span class="type">TIMESTAMP</span> <span class="keyword">WITHOUT</span> <span class="type">TIME</span> ZONE <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="comment">-- 创建时间，默认为当前时间</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 添加一些注释，方便理解</span></span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">TABLE</span> product <span class="keyword">IS</span> <span class="string">&#x27;商品表&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> product.id <span class="keyword">IS</span> <span class="string">&#x27;主键ID (自增)&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> product.name <span class="keyword">IS</span> <span class="string">&#x27;商品名称&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> product.price <span class="keyword">IS</span> <span class="string">&#x27;商品价格&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> product.stock <span class="keyword">IS</span> <span class="string">&#x27;库存数量&#x27;</span>;</span><br><span class="line">COMMENT <span class="keyword">ON</span> <span class="keyword">COLUMN</span> product.create_time <span class="keyword">IS</span> <span class="string">&#x27;创建时间&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 为了测试，可以插入一些初始数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> product (name, price, stock) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;高性能笔记本电脑&#x27;</span>, <span class="number">7999.00</span>, <span class="number">50</span>),</span><br><span class="line">(<span class="string">&#x27;机械键盘&#x27;</span>, <span class="number">499.50</span>, <span class="number">200</span>),</span><br><span class="line">(<span class="string">&#x27;4K显示器&#x27;</span>, <span class="number">2599.00</span>, <span class="number">100</span>),</span><br><span class="line">(<span class="string">&#x27;无线鼠标&#x27;</span>, <span class="number">199.00</span>, <span class="number">300</span>),</span><br><span class="line">(<span class="string">&#x27;降噪耳机&#x27;</span>, <span class="number">1299.00</span>, <span class="number">80</span>);</span><br></pre></td></tr></table></figure><p>你可以通过 <a href="https://www.google.com/url?sa=E&amp;q=https%3A%2F%2Fstart.spring.io%2F">Spring Initializr</a> 快速创建一个项目。</p><p><strong>选择以下依赖：</strong></p><ul><li>Spring Web</li><li>MyBatis-Plus</li><li>PostgreSQL Driver</li><li>Lombok (强烈推荐，可以简化代码)</li></ul><p><strong>Maven 的 pom.xml 文件核心依赖如下：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Web Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MyBatis-Plus Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span> <span class="comment">&lt;!-- 建议使用较新稳定版 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- PostgreSQL JDBC Driver --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.postgresql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>postgresql<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Lombok for code simplification --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Test Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 src/main/resources/ 目录下创建或修改 application.yml 文件，配置数据库连接和 MyBatis-Plus。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">server:</span><br><span class="line">  port: <span class="number">8080</span></span><br><span class="line"></span><br><span class="line">spring:</span><br><span class="line">  datasource:</span><br><span class="line">    url: jdbc:postgresql:<span class="comment">//localhost:5432/your_database_name # 替换为你的数据库地址和名称</span></span><br><span class="line">    username: your_username # 替换为你的数据库用户名</span><br><span class="line">    password: your_password # 替换为你的数据库密码</span><br><span class="line">    driver-class-name: org.postgresql.Driver</span><br><span class="line"></span><br><span class="line">mybatis-plus:</span><br><span class="line">  # 如果你的 Mapper XML 文件放在特定位置，可以指定。对于纯注解和MP自带方法，此项可不配</span><br><span class="line">  mapper-locations: classpath:/mapper<span class="comment">/*.xml</span></span><br><span class="line"><span class="comment">  # 配置驼峰命名转换</span></span><br><span class="line"><span class="comment">  configuration:</span></span><br><span class="line"><span class="comment">    map-underscore-to-camel-case: true</span></span><br><span class="line"><span class="comment">  global-config:</span></span><br><span class="line"><span class="comment">    db-config:</span></span><br><span class="line"><span class="comment">      # 配置主键策略为数据库自增</span></span><br><span class="line"><span class="comment">      id-type: auto</span></span><br></pre></td></tr></table></figure><h4 id="Entity-实体类">. Entity (实体类)</h4><p>创建 com.example.demo.entity.Product 类。</p><ul><li>@TableName(“product”): 将类与数据库中的 product 表对应。</li><li>@TableId(type = IdType.AUTO): 声明 id 是主键，并且类型是数据库自增。</li><li>@Data: Lombok 注解，自动生成 Getter, Setter, toString() 等方法。</li><li>@TableField(“create_time”): 将 createTime 属性映射到 create_time 数据库列（如果开启了驼峰转换，此注解可省略）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.IdType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableId;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.TableName;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;product&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Product</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 数据库是 create_time，这里是 createTime，MP 会自动做驼峰转换</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 com.example.demo.mapper.ProductMapper 接口。</p><ul><li><strong>核心：</strong> 只需要继承 BaseMapper<Product>。</li><li>继承后，ProductMapper 就自动拥有了大量的 CRUD 方法，如 insert, selectById, updateById, deleteById, selectList, selectPage 等。你无需再写任何 XML 或 SQL！</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.mapper.BaseMapper;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.Product;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span> <span class="comment">// 或者在主启动类上使用 @MapperScan</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ProductMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Product&gt; &#123;</span><br><span class="line">    <span class="comment">// 无需编写任何方法，即可拥有强大的CRUD功能！</span></span><br><span class="line">    <span class="comment">// 如果有复杂的多表查询，可以在这里自定义方法，并使用 XML 或注解编写 SQL。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在你的 Spring Boot 主启动类上，添加 @MapperScan 注解来扫描 Mapper 接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.mybatis.spring.annotation.MapperScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@MapperScan(&quot;com.example.demo.mapper&quot;)</span> <span class="comment">// 扫描 Mapper 接口所在的包</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoApplication</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(DemoApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 com.example.demo.controller.ProductController 类，提供 API 接口。</p><p>这里我们将重点展示 <strong>分页和排序</strong> 的实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.core.metadata.IPage;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.pagination.Page;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.entity.Product;</span><br><span class="line"><span class="keyword">import</span> com.example.demo.mapper.ProductMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/products&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 新增商品</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">createProduct</span><span class="params">(<span class="meta">@RequestBody</span> Product product)</span> &#123;</span><br><span class="line">        productMapper.insert(product);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 根据ID查询商品</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">getProductById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> productMapper.selectById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 查询所有商品</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Product&gt; <span class="title function_">getAllProducts</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> productMapper.selectList(<span class="literal">null</span>); <span class="comment">// 传入 null 表示无条件查询</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 更新商品</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Product <span class="title function_">updateProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@RequestBody</span> Product product)</span> &#123;</span><br><span class="line">        product.setId(id); <span class="comment">// 确保ID正确</span></span><br><span class="line">        productMapper.updateById(product);</span><br><span class="line">        <span class="keyword">return</span> product;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 5. 根据ID删除商品</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteProduct</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> productMapper.deleteById(id);</span><br><span class="line">        <span class="keyword">return</span> result &gt; <span class="number">0</span> ? <span class="string">&quot;删除成功&quot;</span> : <span class="string">&quot;删除失败，商品不存在&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 6. 【重点】分页和排序查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;Product&gt; <span class="title function_">getProductPage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> <span class="type">long</span> current, // 当前页码，默认为<span class="number">1</span></span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> <span class="type">long</span> size,   // 每页数量，默认为<span class="number">10</span></span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String sortField, // 排序字段，如 <span class="string">&quot;price&quot;</span>, <span class="string">&quot;stock&quot;</span></span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false, defaultValue = &quot;true&quot;)</span> <span class="type">boolean</span> isAsc // 是否升序，默认为是</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="comment">// 1. 创建分页对象</span></span><br><span class="line">        Page&lt;Product&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 创建查询条件构造器</span></span><br><span class="line">        QueryWrapper&lt;Product&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 处理排序</span></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasText(sortField)) &#123;</span><br><span class="line">            <span class="comment">// isAsc 为 true 则升序，false 则降序</span></span><br><span class="line">            queryWrapper.orderBy(<span class="literal">true</span>, isAsc, sortField);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 默认按创建时间降序</span></span><br><span class="line">            queryWrapper.orderByDesc(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 执行分页查询</span></span><br><span class="line">        <span class="comment">// selectPage 方法会自动完成分页逻辑和 COUNT 查询</span></span><br><span class="line">        <span class="keyword">return</span> productMapper.selectPage(page, queryWrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong> 要使 MyBatis-Plus 的分页功能生效，你需要配置一个分页插件。在 Spring Boot 中，这通常是自动配置的，但如果遇到问题，可以手动添加一个配置类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.DbType;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor;</span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        <span class="comment">// 添加分页插件，并指定数据库类型为 PostgreSQL</span></span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.POSTGRE_SQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在你可以启动 Spring Boot 应用程序了。启动后，使用 Postman 或 curl 等工具测试你的 API。</p><p><strong>1. 新增商品</strong><br>POST <a href="http://localhost:8080/products">http://localhost:8080/products</a><br>Body (JSON):</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;智能手表&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="number">899.00</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span> <span class="number">150</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>2. 分页查询（不带排序，默认按创建时间降序）</strong><br>GET <a href="http://localhost:8080/products/page?current=1&amp;size=3">http://localhost:8080/products/page?current=1&amp;size=3</a><br>你会得到第一页的3条数据。</p><p><strong>3. 分页并按价格升序排序</strong><br>GET <a href="http://localhost:8080/products/page?current=1&amp;size=3&amp;sortField=price&amp;isAsc=true">http://localhost:8080/products/page?current=1&amp;size=3&amp;sortField=price&amp;isAsc=true</a><br>返回的结果将是价格最低的3个商品。</p><p><strong>4. 分页并按库存降序排序</strong><br>GET <a href="http://localhost:8080/products/page?current=1&amp;size=3&amp;sortField=stock&amp;isAsc=false">http://localhost:8080/products/page?current=1&amp;size=3&amp;sortField=stock&amp;isAsc=false</a><br>返回的结果将是库存最高的3个商品。</p><p><strong>5. 查询 ID 为 2 的商品</strong><br>GET <a href="http://localhost:8080/products/2">http://localhost:8080/products/2</a></p><p><strong>6. 删除 ID 为 1 的商品</strong><br>DELETE <a href="http://localhost:8080/products/1">http://localhost:8080/products/1</a></p><h3 id="总结">总结</h3><p>对比你之前提供的 XML 方式，你会发现 MyBatis-Plus 的巨大优势：</p><ul><li></li><li><strong>代码极简</strong>：Mapper 接口继承 BaseMapper 后，无需编写任何 SQL 就能完成单表的 CRUD。</li><li><strong>功能强大</strong>：内置了分页、逻辑删除、乐观锁等高级功能，只需简单配置即可使用。</li><li><strong>条件构造器 (QueryWrapper)</strong>：可以非常灵活、安全地构建复杂的查询条件，避免了手动拼接 SQL 的风险和繁琐。</li><li><strong>无缝集成</strong>：与 Spring Boot 完美集成，配置简单，开箱即用。</li></ul><p>这个 Demo 完整地展示了如何使用 Spring Boot 和 MyBatis-Plus 操作 PostgreSQL 数据库，并实现了核心的分页和排序功能，希望能帮助你快速上手</p><p>\</p>]]></content>
    
    
    <summary type="html">PostgreSQL</summary>
    
    
    
    <category term="PostgreSQL" scheme="https://yjyrichard.github.io/categories/PostgreSQL/"/>
    
    
    <category term="PostgreSQL" scheme="https://yjyrichard.github.io/tags/PostgreSQL/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://yjyrichard.github.io/posts/0.html"/>
    <id>https://yjyrichard.github.io/posts/0.html</id>
    <published>2025-08-07T10:42:27.353Z</published>
    <updated>2025-08-11T22:35:35.811Z</updated>
    
    <content type="html"><![CDATA[<h1>Dynamic-Programming</h1><p>前言</p><blockquote><p>The quote “Those who forget history are condemned to repeat it” is attributed to the American philosopher George Santayana and it can be accurately quoted as “Those who cannot remember the past are condemned to repeat it” as stated in his work, The Life of Reason: Reason in Common Sense.</p></blockquote><blockquote><p>“那些忘记历史的人注定重蹈覆辙”这句话出自美国哲学家乔治·桑塔亚那之手，准确地说，这句话可以被引用为他在《理性的生活:常识中的理性》一书中所说的“那些不记得过去的人注定重蹈覆辙”。  “Those who cannot remember the past are condemned to repeat it”  这句话忘记是在哪里看到的了,但是我觉得用在动态规划这个章节,真的很合适!</p></blockquote><h4 id="引入">引入</h4><blockquote><p>我们可以先来看一个简单的例子,我们之前用递归的方法来求解斐波那契的第n项</p></blockquote><h4 id="1-Fibonacci">1) Fibonacci</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fibonacci</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> fibonacci(n-<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> fibonacci(n-<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> x+y;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./Dynamic-Programming.assets/image-20250807184526767.png" alt="image-20250807184526767"></p><p>重复计算了非常多的数据.</p><p>后来我们想要用记忆法来优化:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;h3&gt;使用 Memoization(记忆法, 也称备忘录) 改进&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 第 n 项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 第 n 项的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] cache = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(cache, -<span class="number">1</span>); <span class="comment">// [-1,-1,-1,-1,-1,-1]</span></span><br><span class="line">        cache[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        cache[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// [0,1,-1,-1,-1,-1]</span></span><br><span class="line">        <span class="keyword">return</span> f(n, cache);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// f(3) =&gt; 5</span></span><br><span class="line">    <span class="comment">// f(4) =&gt; 9</span></span><br><span class="line">    <span class="comment">// f(5) =&gt; 15</span></span><br><span class="line">    <span class="comment">//         2*f(n+1) - 1</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">f</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span>[] cache)</span> &#123;</span><br><span class="line">        <span class="comment">/*if (n == 0) &#123;</span></span><br><span class="line"><span class="comment">            return 0;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        if (n == 1) &#123;</span></span><br><span class="line"><span class="comment">            return 1;</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        <span class="keyword">if</span> (cache[n] != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> cache[n];</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> f(n - <span class="number">1</span>, cache);</span><br><span class="line">        <span class="type">int</span> <span class="variable">y</span> <span class="operator">=</span> f(n - <span class="number">2</span>, cache);</span><br><span class="line">        cache[n] = x + y; <span class="comment">// // [0,1,?,-1,-1,-1] 存入数组</span></span><br><span class="line">        <span class="keyword">return</span> cache[n];</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>动态规划也是对递归过程进行改进,只是它是从另外一种方向进行改进,避免重复计算</p><p><img src="./Dynamic-Programming.assets/image-20250807184758795.png" alt="image-20250807184758795"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 求斐波那契数列的第n项（动态规划）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Fibonacci</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(fibonacci2(<span class="number">13</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        要点1：</span></span><br><span class="line"><span class="comment">            从已知子问题的解，推导出当前问题的解</span></span><br><span class="line"><span class="comment">            推导过程可以表达为一个数学公式</span></span><br><span class="line"><span class="comment">        要点2：</span></span><br><span class="line"><span class="comment">            用一维或二维数组来保存之前的计算结果（可以进一步优化）</span></span><br><span class="line"><span class="comment">        Dynamic-Programming - 由 Bellman 提出</span></span><br><span class="line"><span class="comment">        动态     编程</span></span><br><span class="line"><span class="comment">            Programming - 在这里指用数学方法来根据子问题求解当前问题（通俗理解就是找到递推公式）</span></span><br><span class="line"><span class="comment">            Dynamic     - 指缓存上一步结果，根据上一步结果计算当前结果（多阶段进行）</span></span><br><span class="line"><span class="comment">        合在一起：</span></span><br><span class="line"><span class="comment">            找出递归公式，将当前问题分解成子问题，分阶段进行求解。</span></span><br><span class="line"><span class="comment">            求解过程中缓存子问题的解，避免重复计算。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci2</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> b + a;</span><br><span class="line">            a = b;</span><br><span class="line">            b = c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">fibonacci</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] dp = <span class="keyword">new</span> <span class="title class_">int</span>[n + <span class="number">1</span>]; <span class="comment">// 用来缓存结果</span></span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">0</span>) &#123;</span><br><span class="line">            dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">1</span>) &#123;</span><br><span class="line">            dp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">2</span>; i &lt;= n ; i++) &#123;</span><br><span class="line">            dp[i] = dp[i - <span class="number">1</span>] + dp[i - <span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-最短路径-Bellman-Ford">2) [最短路径] - Bellman-Ford</h4><p><img src="./Dynamic-Programming.assets/image-20250808065626366.png" alt="image-20250808065626366"></p><p>假设要求v1–&gt;v4的最短距离是多少?</p><p><img src="./Dynamic-Programming.assets/image-20250808065654429.png" alt="image-20250808065654429"></p><blockquote><p>分析:</p><p>/*<br>f(v) 用来表示从起点出发，到达 v 这个顶点的最短距离<br>初始时<br>f(v) = 0   当 v==起点 时<br>f(v) = ∞   当 v!=起点 时</p><pre><code>        之后        新           旧     所有from        f(to) = min(f(to), f(from) + from.weight)        from 从哪来        to   到哪去        f(v4) = min( ∞, f(v3) + 11 ) = 20        f(v4) = min( 20, f(v2) + 15 ) = 20        v1  v2  v3  v4  v5  v6        0   ∞   ∞   ∞   ∞   ∞        0   7   9   ∞   ∞   14  第一轮        0   7   9   20  23  11  第二轮        0   7   9   20  20  11  第三轮        0   7   9   20  20  11  第四轮        0   7   9   20  20  11  第五轮 */</code></pre></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;Dynamic-Programming&lt;/h1&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;The quote “Those who forget history are condemned to repeat it” is attributed to the </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>回溯Backtracking Algorithm</title>
    <link href="https://yjyrichard.github.io/posts/f31f0cc3.html"/>
    <id>https://yjyrichard.github.io/posts/f31f0cc3.html</id>
    <published>2025-08-06T13:10:35.517Z</published>
    <updated>2025-08-11T22:35:35.821Z</updated>
    
    <content type="html"><![CDATA[<h1>回溯Backtracking Algorithm</h1><h4 id="1-入门例子">1) 入门例子</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 回溯</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 程序在运行过程中分成了多个阶段</span></span><br><span class="line"><span class="comment"> * 通过某些手段,将数据恢复到之前某一阶段,这就称之为回溯</span></span><br><span class="line"><span class="comment"> * 手段包括</span></span><br><span class="line"><span class="comment"> *      方法栈</span></span><br><span class="line"><span class="comment"> *      自定义栈</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Backtracking</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        rec(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rec</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">3</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(n);</span><br><span class="line">        rec(n+<span class="number">1</span>);</span><br><span class="line">        System.out.println(n);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是集合又有什么样的效果呢?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果用的是可变的集合或者数组必须手动的恢复集合状态</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Backtracking</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        rec(<span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;());</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rec</span><span class="params">(<span class="type">int</span> n, LinkedList&lt;String&gt; list)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (n == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;before:&quot;</span> + list);</span><br><span class="line">        list.push(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">        rec(n + <span class="number">1</span>, list);</span><br><span class="line">        list.pop();</span><br><span class="line">        System.out.println(<span class="string">&quot;after:&quot;</span> + list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">rec</span><span class="params">(<span class="number">1</span>, [])</span></span></span><br><span class="line">├── before: <span class="selector-attr">[]</span></span><br><span class="line">├── push <span class="string">&quot;a&quot;</span> → <span class="built_in">rec</span>(<span class="number">2</span>, <span class="selector-attr">[<span class="string">&quot;a&quot;</span>]</span>)</span><br><span class="line">│   ├── before: <span class="selector-attr">[a]</span></span><br><span class="line">│   ├── push <span class="string">&quot;a&quot;</span> → <span class="built_in">rec</span>(<span class="number">3</span>, <span class="selector-attr">[a, a]</span>)</span><br><span class="line">│   │   └── n == <span class="number">3</span> → return</span><br><span class="line">│   ├── pop → <span class="selector-attr">[a]</span></span><br><span class="line">│   └── after: <span class="selector-attr">[a]</span></span><br><span class="line">├── pop → <span class="selector-attr">[]</span></span><br><span class="line">└── after: <span class="selector-attr">[]</span></span><br></pre></td></tr></table></figure><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">before:<span class="comment">[]</span></span><br><span class="line">before:<span class="comment">[a]</span></span><br><span class="line">after:<span class="comment">[a]</span></span><br><span class="line">after:<span class="comment">[]</span></span><br></pre></td></tr></table></figure><p>这段代码虽然简单，但<strong>完整地展示了回溯的三步</strong>：</p><blockquote><p><strong>选择 → 递归 → 撤销</strong>，最终输出是：</p></blockquote><h4 id="2-全排列-Leetcode-46">2) 全排列-<a href="https://leetcode.cn/">Leetcode</a> 46</h4><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[1,3,2]</span>,<span class="comment">[2,1,3]</span>,<span class="comment">[2,3,1]</span>,<span class="comment">[3,1,2]</span>,<span class="comment">[3,2,1]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">0</span>,<span class="number">1</span>]</span><br><span class="line">输出：<span class="string">[[0,1],[1,0]]</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = [<span class="number">1</span>]</span><br><span class="line">输出：<span class="string">[[1]]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code> 中的所有整数 <strong>互不相同</strong></li></ul><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[]</span></span><br><span class="line">├── <span class="number">1</span></span><br><span class="line">│   ├── <span class="number">1</span>,<span class="number">2</span></span><br><span class="line">│   │   └── <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line">│   └── <span class="number">1</span>,<span class="number">3</span></span><br><span class="line">│       └── <span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span></span><br><span class="line">├── <span class="number">2</span></span><br><span class="line">│   ├── <span class="number">2</span>,<span class="number">1</span></span><br><span class="line">│   │   └── <span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span></span><br><span class="line">│   └── <span class="number">2</span>,<span class="number">3</span></span><br><span class="line">│       └── <span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span></span><br><span class="line">└── <span class="number">3</span></span><br><span class="line">    ├── <span class="number">3</span>,<span class="number">1</span></span><br><span class="line">    │   └── <span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span></span><br><span class="line">    └── <span class="number">3</span>,<span class="number">2</span></span><br><span class="line">        └── <span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermuteLeetcode46</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permute</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span>[] visited = <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length];</span><br><span class="line">        LinkedList&lt;Integer&gt; stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; r = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        rec(nums, visited, stack, r);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">rec</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">boolean</span>[] visited, LinkedList&lt;Integer&gt; stack, List&lt;List&lt;Integer&gt;&gt; r)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.size() == nums.length) &#123;</span><br><span class="line">            r.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(visited[i])&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(nums[i]);</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            rec(nums, visited, stack, r);</span><br><span class="line">            stack.pop();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; permute = permute(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; s : permute) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-全排列II-Leetcode-47">3) 全排列II-Leetcode 47</h4><p><a href="https://leetcode.cn/problems/permutations-ii/description/">47. 全排列 II - 力扣（LeetCode）</a></p><p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,1,2]</span></span><br><span class="line">输出：</span><br><span class="line"><span class="comment">[<span class="comment">[1,1,2]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[1,2,1]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[2,1,1]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：nums = <span class="comment">[1,2,3]</span></span><br><span class="line">输出：<span class="comment">[<span class="comment">[1,2,3]</span>,<span class="comment">[1,3,2]</span>,<span class="comment">[2,1,3]</span>,<span class="comment">[2,3,1]</span>,<span class="comment">[3,1,2]</span>,<span class="comment">[3,2,1]</span>]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 8</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li></ul><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">        []</span><br><span class="line">       / <span class="string">\</span></span><br><span class="line">      <span class="number">1</span>   <span class="number">3</span></span><br><span class="line">   /    <span class="string">\</span>   <span class="string">\</span></span><br><span class="line">  <span class="number">11</span><span class="string">&#x27;    13  31</span></span><br><span class="line"><span class="string"> / \     |    \</span></span><br><span class="line"><span class="string">11&#x27;</span><span class="number">3</span>   <span class="number">131</span><span class="string">&#x27;   311&#x27;</span></span><br></pre></td></tr></table></figure><blockquote><ol><li><strong>根节点</strong>：<code>[]</code> 表示空排列，即还没有选择任何数字。</li><li><strong>第一层</strong>：从根节点开始，我们有两个选择：<code>1</code> 和 <code>3</code>。这是因为数组中有两个不同的数字。</li><li><strong>第二层</strong>：<ul><li>选择 <code>1</code> 后，我们再次面临选择：<code>1'</code>（表示另一个 <code>1</code>）和 <code>3</code>。</li><li>选择 <code>3</code> 后，我们只有选择 <code>1</code> 和 <code>1'</code>。</li></ul></li><li><strong>第三层</strong>：<ul><li>从 <code>1</code> 和 <code>1'</code>，我们可以得到排列 <code>11'3</code> 和 <code>131'</code>。</li><li>从 <code>3</code> 和 <code>1</code>，我们可以得到排列 <code>31</code> 和 <code>311'</code>。</li></ul></li><li><strong>叶节点</strong>：这些叶节点表示完整的排列，如 <code>11'3</code>，<code>131'</code>，<code>31</code>，<code>311'</code>。</li></ol><h3 id="避免重复排列：">避免重复排列：</h3><ul><li>在选择下一个数字时，我们使用了一个技巧来避免重复。例如，当我们已经选择了 <code>1</code>，我们不会再次选择 <code>1</code>，直到我们已经选择了 <code>3</code>。这样可以确保每个排列都是唯一的。</li><li>在代码实现中，这通常通过在递归调用前检查当前数字是否已经被选择来实现。</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PermuteLeetcode47</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">permuteUnique</span><span class="params">(<span class="type">int</span>[] nums)</span> &#123;</span><br><span class="line">        Arrays.sort(nums);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(nums, <span class="keyword">new</span> <span class="title class_">boolean</span>[nums.length], <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span>[] nums, <span class="type">boolean</span>[] visited, LinkedList&lt;Integer&gt; stack, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (stack.size() == nums.length) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; nums[i] == nums[i - <span class="number">1</span>] &amp;&amp; !visited[i-<span class="number">1</span>]) &#123; <span class="comment">// 找出重复数字</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!visited[i]) &#123;</span><br><span class="line">                stack.push(nums[i]);</span><br><span class="line">                visited[i] = <span class="literal">true</span>;</span><br><span class="line">                dfs(nums, visited, stack, result);</span><br><span class="line">                visited[i] = <span class="literal">false</span>;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] nums = &#123;<span class="number">1</span>, <span class="number">1</span>, <span class="number">3</span>&#125;;        </span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; permute = permuteUnique(nums);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : permute) &#123;</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>排好序，这样重复的数字会相邻</p><p>定好规则：必须 1 固定之后才能固定 1’，即 1 的 visited = true 才能继续处理 1’</p><p>在遍历时，遇到了 nums[i] == nums[i - 1]（即 1 和 1‘ 这种情况），进一步检查 i-1 位置的数字有没有 visited，没有，则不处理（剪枝）<br>也可以看我CSDN博客</p><p>原文链接：<a href="https://blog.csdn.net/2301_79602614/article/details/138347128">https://blog.csdn.net/2301_79602614/article/details/138347128</a></p><h4 id="4-组合-Leetcode-77">4) 组合-Leetcode 77</h4><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 4, k = 2</span><br><span class="line">输出：</span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment">  <span class="comment">[2,4]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[3,4]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[2,3]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[1,2]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[1,3]</span>,</span></span><br><span class="line"><span class="comment">  <span class="comment">[1,4]</span>,</span></span><br><span class="line"><span class="comment">]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span>, k = <span class="number">1</span></span><br><span class="line">输出：<span class="string">[[1]]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 20</code></li><li><code>1 &lt;= k &lt;= n</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt;result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt;stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(<span class="number">1</span>,n,k,stack,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> n,<span class="type">int</span> k,LinkedList&lt;Integer&gt;stack,List&lt;List&lt;Integer&gt;&gt;result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()==k)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;i&lt;=n;i++)&#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">            dfs(i+<span class="number">1</span>,n,k,stack,result);</span><br><span class="line">            stack.pop();</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>dfs(i+1,n,k,stack,result); 如果改为：dfs(1,n,k,stack,result);</p><p>改为：dfs(i,n,k,stack,result); 情况都不同 可以自行体悟一下</p><p>减枝</p><p>如果缺的数字大于备用数字 那么就要剪枝剪掉</p><p>k- stack.length 还差几个能凑满</p><p>n - i +1 还剩下几个备用数字  if(k-stack.length &gt;n-i+1) continue;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt;result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt;stack = <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(<span class="number">1</span>,n,k,stack,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> n,<span class="type">int</span> k,LinkedList&lt;Integer&gt;stack,List&lt;List&lt;Integer&gt;&gt;result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(stack.size()==k)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;i&lt;=n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(k - stack.size() &gt; n-i+<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">            dfs(i+<span class="number">1</span>,n,k,stack,result);</span><br><span class="line">            stack.pop();</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CombinationLeetcode77</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start, LinkedList&lt;Integer&gt; stack, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        count++;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            System.out.println(stack);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//      if (k &gt; n - start + 1) &#123; return; &#125;</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="comment">//            System.out.printf(&quot;k-1=%d n=%d i=%d %n&quot;, k - 1, n, i);</span></span><br><span class="line">            <span class="keyword">if</span> (k &gt; n - i + <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(i);</span><br><span class="line">            dfs(n, k - <span class="number">1</span>, i + <span class="number">1</span>, stack, result);</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = combinationSum(<span class="number">5</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">//        for (List&lt;Integer&gt; list : lists) &#123;</span></span><br><span class="line"><span class="comment">//            System.out.println(list);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>k 代表剩余要组合的个数</p><p>n - i + 1 代表剩余可用数字</p><p>剪枝条件是：剩余可用数字要大于剩余组合数</p><p>为啥放在外面不行？即这行代码：if (k &gt; n - start + 1) { return; }</p><p>因为它只考虑了 start 一种情况，而实际在循环内要处理的是 start，start+1 … n 这多种情况</p><p>似乎 ArrayList 作为 stack 性能高一些，见下面代码，但是这道题在 leetcode 上执行时间不稳定，相同代码都会有较大时间差异（15ms vs 9ms）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combine</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k)</span> &#123;        </span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>(k == <span class="number">0</span> || n &lt; k) <span class="keyword">return</span> result;</span><br><span class="line">        dfs(n, k, <span class="number">1</span>, <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> n, <span class="type">int</span> k, <span class="type">int</span> start, ArrayList&lt;Integer&gt; stack, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt;= n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (k-<span class="number">1</span> &gt; n - i) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.add(i);</span><br><span class="line">            dfs(n, k - <span class="number">1</span>, i + <span class="number">1</span>, stack, result);</span><br><span class="line">            stack.remove(stack.size()-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-组合总和-Leetcode-39">5) 组合总和-Leetcode 39</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt;result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        LinkedList&lt;Integer&gt; stack= <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        dfs(<span class="number">0</span>,candidates,target,stack,result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span>[] candidates,<span class="type">int</span> target,LinkedList&lt;Integer&gt;stack,List&lt;List&lt;Integer&gt;&gt;result)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(target&lt;<span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;i&lt;candidates.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> candidates[i];</span><br><span class="line">            stack.push(candidate);</span><br><span class="line">            dfs(i,candidates,target-candidate,stack,result);</span><br><span class="line">            stack.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与之前的零钱兑换问题其实是一样的，只是</p><ul><li>本题求的是：所有组合的具体信息</li><li>零钱兑换问题求的是：所有组合中数字最少的、所有组合个数… [动态规划]</li></ul><h4 id="6-组合总和-II-Leetcode-40">6) 组合总和 II-Leetcode 40</h4><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p>**注意：**解集不能包含重复的组合。</p><p><strong>示例 1:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = <span class="comment">[10,1,2,7,6,1,5]</span>, target = 8,</span><br><span class="line">输出:</span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment"><span class="comment">[1,1,6]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[1,2,5]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[1,7]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[2,6]</span></span></span><br><span class="line"><span class="comment">]</span></span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入: candidates = <span class="comment">[2,5,2,1,2]</span>, target = 5,</span><br><span class="line">输出:</span><br><span class="line"><span class="comment">[</span></span><br><span class="line"><span class="comment"><span class="comment">[1,2,2]</span>,</span></span><br><span class="line"><span class="comment"><span class="comment">[5]</span></span></span><br><span class="line"><span class="comment">]</span></span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>1 &lt;= candidates.length &lt;= 100</code></li><li><code>1 &lt;= candidates[i] &lt;= 50</code></li><li><code>1 &lt;= target &lt;= 30</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CombinationLeetcode40</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum2</span><span class="params">(<span class="type">int</span>[] candidates, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">        Arrays.sort(candidates);</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(target, <span class="number">0</span>, candidates, <span class="keyword">new</span> <span class="title class_">boolean</span>[candidates.length], <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;(), result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> target, <span class="type">int</span> start, <span class="type">int</span>[] candidates, <span class="type">boolean</span>[] visited, LinkedList&lt;Integer&gt; stack, List&lt;List&lt;Integer&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="number">0</span>) &#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start; i &lt; candidates.length; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">candidate</span> <span class="operator">=</span> candidates[i];</span><br><span class="line">            <span class="keyword">if</span> (target &lt; candidate) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; candidate == candidates[i - <span class="number">1</span>] &amp;&amp; !visited[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            visited[i] = <span class="literal">true</span>;</span><br><span class="line">            stack.push(candidate);</span><br><span class="line">            dfs(target - candidate, i + <span class="number">1</span>, candidates, visited, stack, result);</span><br><span class="line">            stack.pop();</span><br><span class="line">            visited[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[] candidates = &#123;<span class="number">10</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">5</span>&#125;;        </span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt; lists = combinationSum2(candidates, <span class="number">8</span>);</span><br><span class="line">        <span class="keyword">for</span> (List&lt;Integer&gt; list : lists) &#123;</span><br><span class="line">            System.out.println(list);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="7-组合总和-III-Leetcode-216">7) 组合总和 III-Leetcode 216</h4><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><p>返回 <em>所有可能的有效组合的列表</em> 。该列表不能包含相同的组合两次，组合可以以任何顺序返回。</p><p><strong>示例 1:</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">输入: k = <span class="number">3</span>, n = <span class="number">7</span></span><br><span class="line">输出: <span class="string">[[1,2,4]]</span></span><br><span class="line">解释:</span><br><span class="line"><span class="number">1</span> + <span class="number">2</span> + <span class="number">4</span> = <span class="number">7</span></span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: k = 3, n = 9</span><br><span class="line">输出: [[1,2,6], [1,3,5], [2,3,4]]</span><br><span class="line">解释:</span><br><span class="line">1 +<span class="number"> 2 </span>+<span class="number"> 6 </span>= 9</span><br><span class="line">1 +<span class="number"> 3 </span>+<span class="number"> 5 </span>= 9</span><br><span class="line">2 +<span class="number"> 3 </span>+<span class="number"> 4 </span>= 9</span><br><span class="line">没有其他符合的组合了。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">输入: k = 4, n = 1</span></span><br><span class="line"><span class="section">输出: []</span></span><br><span class="line"><span class="section">解释: 不存在有效的组合。</span></span><br><span class="line">在[1,9]范围内使用4个不同的数字，我们可以得到的最小和是1+2+3+4 = 10，因为10 &gt; 1，没有有效的组合。</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li><code>2 &lt;= k &lt;= 9</code></li><li><code>1 &lt;= n &lt;= 60</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> List&lt;List&lt;Integer&gt;&gt; <span class="title function_">combinationSum3</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> target )</span> &#123;</span><br><span class="line">        List&lt;List&lt;Integer&gt;&gt;result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        dfs(<span class="number">1</span>,target,k,<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(),result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//static int count = 0;</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> start,<span class="type">int</span> target,<span class="type">int</span> k,ArrayList&lt;Integer&gt;stack,List&lt;List&lt;Integer&gt;&gt;result)</span>&#123;</span><br><span class="line">       <span class="comment">// count++;</span></span><br><span class="line">        <span class="keyword">if</span>(target==<span class="number">0</span>&amp;&amp;stack.size()==k)&#123;</span><br><span class="line">            result.add(<span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(stack));</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> start;i&lt;=<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="comment">// 还差几个数字       剩余可用数字</span></span><br><span class="line">          <span class="comment">//  if(k-stack.size() &gt; 9-i+1)&#123;</span></span><br><span class="line">            <span class="comment">//    continue;</span></span><br><span class="line">            <span class="comment">//&#125; 这个减枝效率较低 设置一个count变量即可查看</span></span><br><span class="line">            <span class="keyword">if</span>(target&lt;i)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(stack.size()==k)&#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.addLast(i);</span><br><span class="line">            dfs(i+<span class="number">1</span>,target-i,k,stack,result);</span><br><span class="line">            stack.removeLast();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="8-N-皇后Leetcode-51">8) N 皇后Leetcode 51</h4><p>Eight queens 高斯认为有76种方案。实际上解有92种。</p><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2020/11/13/queens.jpg" alt="img"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">4</span></span><br><span class="line">输出：[[<span class="string">&quot;.Q..&quot;</span>,<span class="string">&quot;...Q&quot;</span>,<span class="string">&quot;Q...&quot;</span>,<span class="string">&quot;..Q.&quot;</span>],[<span class="string">&quot;..Q.&quot;</span>,<span class="string">&quot;Q...&quot;</span>,<span class="string">&quot;...Q&quot;</span>,<span class="string">&quot;.Q..&quot;</span>]]</span><br><span class="line">解释：如上图所示，<span class="number">4</span> 皇后问题存在两个不同的解法。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = <span class="number">1</span></span><br><span class="line">输出：<span class="string">[[&quot;Q&quot;]]</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= n &lt;= 9</code></li></ul><p>左斜线处理i+j</p><p>右斜线i-j  = n-1-（i-j）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NQueenLeetcode51</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[][] table = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];<span class="comment">//&#x27;.&#x27; &#x27;Q&#x27;</span></span><br><span class="line">        <span class="type">boolean</span>[] va = <span class="keyword">new</span> <span class="title class_">boolean</span>[n];<span class="comment">//列冲突</span></span><br><span class="line">        <span class="type">boolean</span>[] vb = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];<span class="comment">//左斜线冲突</span></span><br><span class="line">        <span class="type">boolean</span>[] vc = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">2</span> * n - <span class="number">1</span>];<span class="comment">//右斜线冲突</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Arrays.fill(table[i], <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, n, table, result, va, vb, vc);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">char</span>[][] table, List&lt;List&lt;String&gt;&gt; result, <span class="type">boolean</span>[] va, <span class="type">boolean</span>[] vb, <span class="type">boolean</span>[] vc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span>[] chars : table) &#123;</span><br><span class="line">                list.add(String.valueOf(chars));</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (va[j] || vb[i + j] || vc[n - <span class="number">1</span>-(i-j)]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            va[j] = <span class="literal">true</span>;</span><br><span class="line">            vb[i + j] = <span class="literal">true</span>;</span><br><span class="line">            vc[n-<span class="number">1</span>-(i-j)] = <span class="literal">true</span>;</span><br><span class="line">            table[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            dfs(i + <span class="number">1</span>, n, table, result, va, vb, vc);</span><br><span class="line">            table[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            va[j] = <span class="literal">false</span>;</span><br><span class="line">            vb[i + j] = <span class="literal">false</span>;</span><br><span class="line">            vc[i - j + n - <span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; table : solveNQueens(<span class="number">4</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String row : table) &#123;</span><br><span class="line">                System.out.println(row);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------- &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NQueenLeetcode51</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> List&lt;List&lt;String&gt;&gt; <span class="title function_">solveNQueens</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">        List&lt;List&lt;String&gt;&gt; result = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="type">char</span>[][] table = <span class="keyword">new</span> <span class="title class_">char</span>[n][n];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            Arrays.fill(table[i], <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, n, table, result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> n, <span class="type">char</span>[][] table, List&lt;List&lt;String&gt;&gt; result)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == n) &#123;</span><br><span class="line">            ArrayList&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">char</span>[] chars : table) &#123;</span><br><span class="line">                list.add(String.valueOf(chars));</span><br><span class="line">            &#125;</span><br><span class="line">            result.add(list);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (notValid(table, i, j)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            table[i][j] = <span class="string">&#x27;Q&#x27;</span>;</span><br><span class="line">            dfs(i + <span class="number">1</span>, n, table, result);</span><br><span class="line">            table[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        .   .   .   .</span></span><br><span class="line"><span class="comment">        .   .   .   .</span></span><br><span class="line"><span class="comment">        .   ?   .   .</span></span><br><span class="line"><span class="comment">        .   .   .   .</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">notValid</span><span class="params">(<span class="type">char</span>[][] table, <span class="type">int</span> row, <span class="type">int</span> col)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> table.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i][col] == <span class="string">&#x27;Q&#x27;</span>) &#123; <span class="comment">// 上</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col - <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &gt;= <span class="number">0</span>; i--, j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> row - <span class="number">1</span>, j = col + <span class="number">1</span>; i &gt;= <span class="number">0</span> &amp;&amp; j &lt; n; i--, j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (table[i][j] == <span class="string">&#x27;Q&#x27;</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (List&lt;String&gt; table : solveNQueens(<span class="number">8</span>)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String row : table) &#123;</span><br><span class="line">                System.out.println(row);</span><br><span class="line">            &#125;</span><br><span class="line">            count++;</span><br><span class="line">            System.out.println(<span class="string">&quot;--------------------- &quot;</span> + count);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="9-解数独-Leetcode37">9) 解数独-Leetcode37</h4><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 <strong>遵循如下规则</strong>：</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 <code>'.'</code> 表示。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode-cn.com/aliyun-lc-upload/uploads/2021/04/12/250px-sudoku-by-l2g-20050714svg.png" alt="img"></p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：board = [[<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;3&quot;</span>],[<span class="string">&quot;4&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;1&quot;</span>],[<span class="string">&quot;7&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;5&quot;</span>],[<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;.&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;9&quot;</span>]]</span><br><span class="line">输出：[[<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;2&quot;</span>],[<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;8&quot;</span>],[<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;7&quot;</span>],[<span class="string">&quot;8&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;3&quot;</span>],[<span class="string">&quot;4&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;1&quot;</span>],[<span class="string">&quot;7&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;6&quot;</span>],[<span class="string">&quot;9&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;4&quot;</span>],[<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;9&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;3&quot;</span>,<span class="string">&quot;5&quot;</span>],[<span class="string">&quot;3&quot;</span>,<span class="string">&quot;4&quot;</span>,<span class="string">&quot;5&quot;</span>,<span class="string">&quot;2&quot;</span>,<span class="string">&quot;8&quot;</span>,<span class="string">&quot;6&quot;</span>,<span class="string">&quot;1&quot;</span>,<span class="string">&quot;7&quot;</span>,<span class="string">&quot;9&quot;</span>]]</span><br><span class="line">解释：输入的数独如上图所示，唯一有效的解决方案如下所示：</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>board.length == 9</code></li><li><code>board[i].length == 9</code></li><li><code>board[i][j]</code> 是一位数字或者 <code>'.'</code></li><li>题目数据 <strong>保证</strong> 输入数独仅有一个解</li></ul><p>判断在那个九宫格 ==&gt; i/3*3+j/3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] board)</span> &#123;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       1.不断遍历每个未填的空格</span></span><br><span class="line"><span class="comment">           逐一尝试1~9 若行,列,九宫格内没有冲突,则填入</span></span><br><span class="line"><span class="comment">       2.一旦1~9 都尝试失败,回溯到上一次状态,换数字填入</span></span><br><span class="line"><span class="comment">       3.关键还是要记录冲突状态</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 行冲突状态</span></span><br><span class="line">       <span class="type">boolean</span>[][] ca =<span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">       <span class="comment">// ca[i] = &#123;false,false,true,true,true,true...&#125;</span></span><br><span class="line">       <span class="comment">// 列冲突状态</span></span><br><span class="line">       <span class="type">boolean</span>[][] cb = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">       <span class="comment">// cb[j] = &#123;false,true,true....&#125;</span></span><br><span class="line">       <span class="comment">// 九宫格冲突状态</span></span><br><span class="line">       <span class="comment">//i/3*3+j/3 = ..在几号九宫格</span></span><br><span class="line">       <span class="type">boolean</span>[][] cc = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">9</span>][<span class="number">9</span>];</span><br><span class="line">       <span class="comment">//cc[i/3*3+j/3] = &#123;...&#125;</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span><span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">9</span>;j++)&#123;</span><br><span class="line">               <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> table[i][j];</span><br><span class="line">               <span class="keyword">if</span>(ch!=<span class="string">&#x27;.&#x27;</span>)&#123;<span class="comment">//初始化冲突状态</span></span><br><span class="line">                   ca[i][ch-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;     <span class="comment">//&#x27;5&#x27;- &#x27;1&#x27; --&gt; 4</span></span><br><span class="line">                   cb[j][ch-<span class="string">&#x27;1&#x27;</span>]=<span class="literal">true</span>;</span><br><span class="line">                   cc[i/<span class="number">3</span>*<span class="number">3</span>+j/<span class="number">3</span>][ch-<span class="string">&#x27;1&#x27;</span>] =<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       dfs(<span class="number">0</span>,<span class="number">0</span>,table,ca,cb,cc);</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> j,<span class="type">char</span>[][] table,<span class="type">boolean</span>[][] ca,<span class="type">boolean</span>[][] cb,<span class="type">boolean</span>[][] cc)</span>&#123;</span><br><span class="line">       <span class="keyword">while</span>(table[i][j]!=<span class="string">&#x27;.&#x27;</span>)&#123; <span class="comment">//查找下一个空格</span></span><br><span class="line">           <span class="keyword">if</span>(++j&gt;=<span class="number">9</span>)&#123;</span><br><span class="line">               j=<span class="number">0</span>;</span><br><span class="line">               i++;<span class="comment">//到下一行</span></span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">if</span>(i&gt;=<span class="number">9</span>)&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">//找到解了</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">//填空</span></span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">1</span>;x&lt;=<span class="number">9</span>;x++)&#123;</span><br><span class="line">           <span class="comment">//检查冲突</span></span><br><span class="line">           <span class="keyword">if</span>(ca[i][x-<span class="number">1</span>]||cb[j][x-<span class="number">1</span>]||cc[i/<span class="number">3</span>*<span class="number">3</span>+j/<span class="number">3</span>][x-<span class="number">1</span>])&#123;</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           table[i][j] =(<span class="type">char</span>)x+<span class="string">&#x27;0&#x27;</span>;   <span class="comment">//1 -&gt; &#x27;1&#x27;</span></span><br><span class="line">           <span class="comment">//ca[0][0] = true;  第0行不能存储&#x27;1&#x27;</span></span><br><span class="line">           <span class="comment">//cb[2][0] = true;  第2列不能存储&#x27;1&#x27;</span></span><br><span class="line">           <span class="comment">//cc[0][0] = true;  第0个九宫格不能存储&#x27;1&#x27;</span></span><br><span class="line">           ca[i][x-<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">           cb[j][x-<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">           cc[i/<span class="number">3</span>*<span class="number">3</span>+j/<span class="number">3</span>][x-<span class="number">1</span>]=<span class="literal">true</span>;</span><br><span class="line">           <span class="keyword">if</span>(dfs(i,j,table,ca,cb,cc))&#123;</span><br><span class="line">               <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           table[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">           ca[i][x-<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">           cb[j][x-<span class="number">1</span>] = <span class="literal">false</span>;</span><br><span class="line">           cc[i/<span class="number">3</span>*<span class="number">3</span>+j/<span class="number">3</span>][x-<span class="number">1</span>]=<span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SudokuLeetcode37</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] table)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">        <span class="type">boolean</span>[][] va = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];<span class="comment">//行冲突</span></span><br><span class="line">        <span class="type">boolean</span>[][] vb = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];<span class="comment">//列冲突</span></span><br><span class="line">        <span class="type">boolean</span>[][][] vc = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">3</span>][<span class="number">3</span>][n];<span class="comment">//九宫格冲突</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> table[i][j] - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>;</span><br><span class="line">                    va[i][x] = <span class="literal">true</span>;</span><br><span class="line">                    vb[j][x] = <span class="literal">true</span>;</span><br><span class="line">                    vc[i / <span class="number">3</span>][j / <span class="number">3</span>][x] = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(table, va, vb, vc, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">char</span>[][] table, <span class="type">boolean</span>[][] va, <span class="type">boolean</span>[][] vb, <span class="type">boolean</span>[][][] vc, <span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (table[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (++j &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">                j = <span class="number">0</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">9</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> table.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt; n; d++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (va[i][d] || vb[j][d] || vc[i / <span class="number">3</span>][j / <span class="number">3</span>][d]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> (<span class="type">char</span>) (d + <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">            table[i][j] = ch;</span><br><span class="line">            va[i][d] = <span class="literal">true</span>;</span><br><span class="line">            vb[j][d] = <span class="literal">true</span>;</span><br><span class="line">            vc[i / <span class="number">3</span>][j / <span class="number">3</span>][d] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">dfs</span> <span class="operator">=</span> dfs(table, va, vb, vc, i, j);</span><br><span class="line">            <span class="keyword">if</span> (dfs) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            table[i][j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            va[i][d] = <span class="literal">false</span>;</span><br><span class="line">            vb[j][d] = <span class="literal">false</span>;</span><br><span class="line">            vc[i / <span class="number">3</span>][j / <span class="number">3</span>][d] = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] table = &#123;</span><br><span class="line">                &#123;<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        solveSudoku(table);</span><br><span class="line"> </span><br><span class="line">        print(table);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span>[][] solved = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;4&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span>[][] table)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] chars : table) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.deepEquals(table, solved));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SudokuLeetcode37</span> &#123;</span><br><span class="line">    <span class="keyword">record</span> <span class="title class_">Pair</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solveSudoku</span><span class="params">(<span class="type">char</span>[][] table)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">        <span class="type">boolean</span>[][] va = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">        <span class="type">boolean</span>[][] vb = <span class="keyword">new</span> <span class="title class_">boolean</span>[n][n];</span><br><span class="line">        <span class="type">boolean</span>[][][] vc = <span class="keyword">new</span> <span class="title class_">boolean</span>[<span class="number">3</span>][<span class="number">3</span>][n];</span><br><span class="line">        List&lt;Pair&gt; blanks = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (table[i][j] != <span class="string">&#x27;.&#x27;</span>) &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">x</span> <span class="operator">=</span> table[i][j] - <span class="string">&#x27;0&#x27;</span> - <span class="number">1</span>;</span><br><span class="line">                    va[i][x] = <span class="literal">true</span>;</span><br><span class="line">                    vb[j][x] = <span class="literal">true</span>;</span><br><span class="line">                    vc[i / <span class="number">3</span>][j / <span class="number">3</span>][x] = <span class="literal">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    blanks.add(<span class="keyword">new</span> <span class="title class_">Pair</span>(i, j));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(<span class="number">0</span>, blanks, table, va, vb, vc);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> p, List&lt;Pair&gt; blanks, <span class="type">char</span>[][] table, <span class="type">boolean</span>[][] va, <span class="type">boolean</span>[][] vb, <span class="type">boolean</span>[][][] vc)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (p == blanks.size()) &#123;</span><br><span class="line">            print(table);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> table.length;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">d</span> <span class="operator">=</span> <span class="number">0</span>; d &lt; n; d++) &#123;</span><br><span class="line">            <span class="type">Pair</span> <span class="variable">pair</span> <span class="operator">=</span> blanks.get(p);</span><br><span class="line">            <span class="keyword">if</span> (va[pair.i][d] || vb[pair.j][d] || vc[pair.i / <span class="number">3</span>][pair.j / <span class="number">3</span>][d]) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> (<span class="type">char</span>) (d + <span class="string">&#x27;0&#x27;</span> + <span class="number">1</span>);</span><br><span class="line">            table[pair.i][pair.j] = ch;</span><br><span class="line">            va[pair.i][d] = <span class="literal">true</span>;</span><br><span class="line">            vb[pair.j][d] = <span class="literal">true</span>;</span><br><span class="line">            vc[pair.i / <span class="number">3</span>][pair.j / <span class="number">3</span>][d] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">dfs</span> <span class="operator">=</span> dfs(p + <span class="number">1</span>, blanks, table, va, vb, vc);</span><br><span class="line">            <span class="keyword">if</span> (dfs) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            table[pair.i][pair.j] = <span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">            va[pair.i][d] = <span class="literal">false</span>;</span><br><span class="line">            vb[pair.j][d] = <span class="literal">false</span>;</span><br><span class="line">            vc[pair.i / <span class="number">3</span>][pair.j / <span class="number">3</span>][d] = <span class="literal">false</span>;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">char</span>[][] table = &#123;</span><br><span class="line">                &#123;<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;,</span><br><span class="line">                &#123;<span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line"> </span><br><span class="line">        solveSudoku(table);</span><br><span class="line"> </span><br><span class="line">        print(table);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="type">char</span>[][] solved = &#123;</span><br><span class="line">            &#123;<span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;7&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;1&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;6&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;4&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;9&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;5&#x27;</span>&#125;,</span><br><span class="line">            &#123;<span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;4&#x27;</span>, <span class="string">&#x27;5&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27;9&#x27;</span>&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span>[][] table)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">char</span>[] chars : table) &#123;</span><br><span class="line">            System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(chars));</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.deepEquals(table, solved));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="10-黄金矿工-Leetcode1219">10) 黄金矿工-Leetcode1219</h4><p><a href="https://leetcode.cn/problems/path-with-maximum-gold/description/">1219. 黄金矿工 - 力扣（LeetCode）</a></p><p>你要开发一座金矿，地质勘测学家已经探明了这座金矿中的资源分布，并用大小为 <code>m * n</code> 的网格 <code>grid</code> 进行了标注。每个单元格中的整数就表示这一单元格中的黄金数量；如果该单元格是空的，那么就是 <code>0</code>。</p><p>为了使收益最大化，矿工需要按以下规则来开采黄金：</p><ul><li>每当矿工进入一个单元，就会收集该单元格中的所有黄金。</li><li>矿工每次可以从当前位置向上下左右四个方向走。</li><li>每个单元格只能被开采（进入）一次。</li><li><strong>不得开采</strong>（进入）黄金数目为 <code>0</code> 的单元格。</li><li>矿工可以从网格中 <strong>任意一个</strong> 有黄金的单元格出发或者是停止。</li></ul><p><strong>示例 1：</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="string">[[0,6,0],[5,8,7],[0,9,0]]</span></span><br><span class="line">输出：<span class="number">24</span></span><br><span class="line">解释：</span><br><span class="line"><span class="string">[[0,6,0],</span></span><br><span class="line"><span class="string"> [5,8,7],</span></span><br><span class="line"><span class="string"> [0,9,0]]</span></span><br><span class="line">一种收集最多黄金的路线是：<span class="number">9</span> -&gt; <span class="number">8</span> -&gt; <span class="number">7</span>。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：grid = <span class="comment">[<span class="comment">[1,0,7]</span>,<span class="comment">[2,0,6]</span>,<span class="comment">[3,4,5]</span>,<span class="comment">[0,3,0]</span>,<span class="comment">[9,0,20]</span>]</span></span><br><span class="line">输出：28</span><br><span class="line">解释：</span><br><span class="line"><span class="comment">[<span class="comment">[1,0,7]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[2,0,6]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[3,4,5]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[0,3,0]</span>,</span></span><br><span class="line"><span class="comment"> <span class="comment">[9,0,20]</span>]</span></span><br><span class="line">一种收集最多黄金的路线是：1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 -&gt; 6 -&gt; 7。</span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= grid.length, grid[i].length &lt;= 15</code></li><li><code>0 &lt;= grid[i][j] &lt;= 100</code></li><li>最多 <strong>25</strong> 个单元格中有黄金。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span>[][] g;</span><br><span class="line">    <span class="type">boolean</span>[][] vis;</span><br><span class="line">    <span class="type">int</span> m,n;</span><br><span class="line">    <span class="type">int</span>[][] dirs = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;-<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">0</span>,-<span class="number">1</span>&#125;&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getMaximumGold</span><span class="params">(<span class="type">int</span>[][] grid)</span> &#123;</span><br><span class="line">        g = grid;</span><br><span class="line">        m = g.length;n = g[<span class="number">0</span>].length;</span><br><span class="line">        vis= <span class="keyword">new</span> <span class="title class_">boolean</span>[m][n];</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(g[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    vis[i][j] = <span class="literal">true</span>;</span><br><span class="line">                    ans = Math.max(ans,dfs(i,j));</span><br><span class="line">                    vis[i][j] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> g[x][y];</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span>[] d:dirs)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">nx</span> <span class="operator">=</span> x+d[<span class="number">0</span>],ny = y+d[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(nx&lt;<span class="number">0</span>||nx&gt;=m||ny&lt;<span class="number">0</span>||ny&gt;=n)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(g[nx][ny]==<span class="number">0</span>)<span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(vis[nx][ny]) <span class="keyword">continue</span>;</span><br><span class="line">            vis[nx][ny] = <span class="literal">true</span>;</span><br><span class="line">            ans = Math.max(ans,g[x][y] + dfs(nx,ny));</span><br><span class="line">            vis[nx][ny] =<span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LeetCode-543">LeetCode 543</h4><p>给你一棵二叉树的根节点，返回该树的 <strong>直径</strong> 。</p><p>二叉树的 <strong>直径</strong> 是指树中任意两个节点之间最长路径的 <strong>长度</strong> 。这条路径可能经过也可能不经过根节点 <code>root</code> 。</p><p>两节点之间路径的 <strong>长度</strong> 由它们之间边数表示。</p><p><strong>示例 1：</strong></p><p><img src="https://assets.leetcode.com/uploads/2021/03/06/diamtree.jpg" alt="img"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：root = [<span class="number">1,2,3,4</span>,<span class="number">5</span>]</span><br><span class="line">输出：<span class="number">3</span></span><br><span class="line">解释：<span class="number">3</span> ，取路径 [<span class="number">4,2,1,3</span>] 或 [<span class="number">5,2,1,3</span>] 的长度。</span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">输入：root </span>=<span class="string"> [1,2]</span></span><br><span class="line"><span class="string">输出：1</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li>树中节点数目在范围 <code>[1, 104]</code> 内</li><li><code>-100 &lt;= Node.val &lt;= 100</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">diameterOfBinaryTree</span><span class="params">(TreeNode root)</span> &#123;</span><br><span class="line">        dfs(root);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> <span class="title function_">dfs</span><span class="params">(TreeNode u)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u==<span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">l</span> <span class="operator">=</span> dfs(u.left),r=dfs(u.right);</span><br><span class="line">        ans = Math.max(ans,l+r);</span><br><span class="line"><span class="comment">//返回最大深度</span></span><br><span class="line">        <span class="keyword">return</span> Math.max(l,r)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LeetCode433">LeetCode433</h4><p>基因序列可以表示为一条由 8 个字符组成的字符串，其中每个字符都是 <code>'A'</code>、<code>'C'</code>、<code>'G'</code> 和 <code>'T'</code> 之一。</p><p>假设我们需要调查从基因序列 <code>start</code> 变为 <code>end</code> 所发生的基因变化。一次基因变化就意味着这个基因序列中的一个字符发生了变化。</p><ul><li>例如，<code>&quot;AACCGGTT&quot; --&gt; &quot;AACCGGTA&quot;</code> 就是一次基因变化。</li></ul><p>另有一个基因库 <code>bank</code> 记录了所有有效的基因变化，只有基因库中的基因才是有效的基因序列。（变化后的基因必须位于基因库 <code>bank</code> 中）</p><p>给你两个基因序列 <code>start</code> 和 <code>end</code> ，以及一个基因库 <code>bank</code> ，请你找出并返回能够使 <code>start</code> 变化为 <code>end</code> 所需的最少变化次数。如果无法完成此基因变化，返回 <code>-1</code> 。</p><p>注意：起始基因序列 <code>start</code> 默认是有效的，但是它并不一定会出现在基因库中。</p><p><strong>示例 1：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：start = &quot;AACCGGTT&quot;, end = &quot;AACCGGTA&quot;, bank = [&quot;AACCGGTA&quot;]</span><br><span class="line">输出：<span class="number">1</span></span><br></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：start = &quot;AACCGGTT&quot;, end = &quot;AAACGGTA&quot;, bank = [&quot;AACCGGTA&quot;,&quot;AACCGCTA&quot;,&quot;AAACGGTA&quot;]</span><br><span class="line">输出：<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：start = &quot;AAAAACCC&quot;, end = &quot;AACCCCCC&quot;, bank = [&quot;AAAACCCC&quot;,&quot;AAACCCCC&quot;,&quot;AACCCCCC&quot;]</span><br><span class="line">输出：<span class="number">3</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>start.length == 8</code></li><li><code>end.length == 8</code></li><li><code>0 &lt;= bank.length &lt;= 10</code></li><li><code>bank[i].length == 8</code></li><li><code>start</code>、<code>end</code> 和 <code>bank[i]</code> 仅由字符 <code>['A', 'C', 'G', 'T']</code> 组成</li></ul><blockquote><p>这道题目是一个典型的<strong>最短路径问题</strong>，但是它在基因序列的背景下进行。题目要求我们找到从基因序列 <code>start</code> 变化到 <code>end</code> 的最少变化次数。这里的“变化”指的是基因序列中的一个字符发生了变化。题目中还提供了一个基因库 <code>bank</code>，只有基因库中的基因序列才是有效的，即变化后的基因序列必须出现在基因库中。</p><h3 id="题目详解">题目详解</h3><ol><li><strong>基因序列</strong>：由8个字符组成，每个字符可以是 ‘A’、‘C’、‘G’ 或 ‘T’。</li><li><strong>基因变化</strong>：指的是基因序列中的一个字符发生了变化，例如 “AACCGGTT” 变为 “AACCGGTA”。</li><li><strong>基因库 <code>bank</code></strong>：记录了所有有效的基因变化，只有出现在 <code>bank</code> 中的基因序列才是有效的。</li><li><strong>目标</strong>：找到从 <code>start</code> 变化到 <code>end</code> 所需的最少变化次数。如果无法完成变化，返回 -1。</li><li><strong>输入</strong>：<ul><li><code>start</code>：起始基因序列。</li><li><code>end</code>：目标基因序列。</li><li><code>bank</code>：有效的基因序列列表。</li></ul></li><li><strong>输出</strong>：最少变化次数，如果无法完成变化，则返回 -1。</li></ol><h3 id="示例解释">示例解释</h3><ul><li><strong>示例 1</strong>：从 “AACCGGTT” 到 “AACCGGTA” 只需要一次变化，因为 “AACCGGTA” 在基因库中。</li><li><strong>示例 2</strong>：从 “AACCGGTT” 到 “AAACGGTA” 需要两次变化，可能的路径是 “AACCGGTT” → “AACCGCTA” → “AAACGGTA”，这两个中间基因序列都在基因库中。</li><li><strong>示例 3</strong>：从 “AAAAACCC” 到 “AACCCCCC” 需要三次变化，可能的路径是 “AAAAACCC” → “AAAACCCC” → “AAACCCCC” → “AACCCCCC”，这三个中间基因序列都在基因库中。</li></ul><h3 id="解题思路">解题思路</h3><p>题目中提供的代码使用了<strong>回溯法</strong>来解决这个问题。以下是代码的逻辑解释：</p><ol><li><strong>初始化</strong>：<code>ans</code> 用于存储最少变化次数，初始值为 <code>Integer.MAX_VALUE</code>。</li><li><strong>递归函数 <code>backtrack</code></strong>：<ul><li>参数 <code>start</code>：当前基因序列。</li><li>参数 <code>end</code>：目标基因序列。</li><li>参数 <code>bank</code>：基因库。</li><li>参数 <code>used</code>：一个布尔数组，用于标记基因库中的哪些基因序列已经被使用过。</li><li>参数 <code>t</code>：当前的变化次数。</li></ul></li><li><strong>递归终止条件</strong>：<ul><li>如果当前变化次数 <code>t</code> 已经大于等于 <code>ans</code>，则直接返回，因为不可能找到更短的路径。</li><li>如果当前基因序列 <code>start</code> 等于目标基因序列 <code>end</code>，则更新 <code>ans</code> 为当前的最小变化次数。</li></ul></li><li><strong>递归搜索</strong>：<ul><li>遍历基因库 <code>bank</code>，对于每个基因序列，检查它是否与当前基因序列 <code>start</code> 只有一个字符不同（即变化次数为1）。</li><li>如果找到这样的基因序列，标记为已使用，递归调用 <code>backtrack</code> 函数，尝试找到从这个基因序列变化到 <code>end</code> 的最少变化次数。</li><li>递归完成后，取消标记（回溯），以便其他路径可以使用这个基因序列。</li></ul></li><li><strong>返回结果</strong>：<ul><li>如果 <code>ans</code> 仍然是 <code>Integer.MAX_VALUE</code>，说明无法从 <code>start</code> 变化到 <code>end</code>，返回 -1。</li><li>否则，返回 <code>ans</code>。</li></ul></li></ol></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="comment">// 定义一个全局变量ans来存储从start到end的最少变化次数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ans</span> <span class="operator">=</span> Integer.MAX_VALUE;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 主函数，接收起始基因序列start，目标基因序列end和基因库bank作为参数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">minMutation</span><span class="params">(String start, String end, String[] bank)</span> &#123;</span><br><span class="line">        <span class="comment">// 调用回溯函数，从start开始寻找到end的最少变化次数</span></span><br><span class="line">        backtrack(start, end, bank, <span class="keyword">new</span> <span class="title class_">boolean</span>[bank.length], <span class="number">0</span>);</span><br><span class="line">        <span class="comment">// 如果ans仍然是初始值，说明没有找到从start到end的路径，返回-1</span></span><br><span class="line">        <span class="comment">// 否则返回找到的最少变化次数</span></span><br><span class="line">        <span class="keyword">return</span> ans == Integer.MAX_VALUE ? -<span class="number">1</span> : ans;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 回溯函数，用于递归地寻找从start到end的最少变化次数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">backtrack</span><span class="params">(String start, String end, String[] bank, <span class="type">boolean</span>[] used, <span class="type">int</span> t)</span> &#123;</span><br><span class="line">        <span class="comment">// 如果当前的步数t已经大于等于已知的最少步数ans，则直接返回，避免重复计算</span></span><br><span class="line">        <span class="keyword">if</span> (t &gt;= ans) <span class="keyword">return</span>;</span><br><span class="line">        <span class="comment">// 如果当前的基因序列start已经等于目标基因序列end，更新ans为当前步数t</span></span><br><span class="line">        <span class="keyword">if</span> (start.equals(end)) &#123;</span><br><span class="line">            ans = Math.min(ans, t);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 遍历基因库bank中的每一个基因序列</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>, diff = <span class="number">0</span>; i &lt; bank.length; i++, diff = <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 如果当前基因序列已经被使用过，则跳过</span></span><br><span class="line">                <span class="keyword">if</span> (used[i]) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="comment">// 计算当前基因序列与start的差异，如果差异为1，则表示可以通过一次变化从start变为当前基因序列</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; start.length(); j++) </span><br><span class="line">                    diff += start.charAt(j) != bank[i].charAt(j) ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">                <span class="comment">// 如果差异为1，表示可以通过一次变化从start变为当前基因序列</span></span><br><span class="line">                <span class="keyword">if</span> (diff == <span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="comment">// 标记当前基因序列为已使用</span></span><br><span class="line">                    used[i] = <span class="literal">true</span>;</span><br><span class="line">                    <span class="comment">// 递归调用回溯函数，尝试从当前基因序列变化到end</span></span><br><span class="line">                    backtrack(bank[i], end, bank, used, t + <span class="number">1</span>);</span><br><span class="line">                    <span class="comment">// 回溯，取消当前基因序列的已使用标记，以便其他路径可以使用</span></span><br><span class="line">                    used[i] = <span class="literal">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码解释</p><ol><li><strong><code>diff</code> 的作用</strong>：<ul><li><code>diff</code> 用于计算当前基因序列 <code>start</code> 和基因库中的某个基因序列 <code>bank[i]</code> 之间的差异。</li><li>具体来说，<code>diff</code> 计算的是两个序列中对应位置上不同字符的个数。</li><li>如果 <code>diff</code> 等于 1，表示两个序列之间只有一个字符不同，即可以通过一次变化从 <code>start</code> 变为 <code>bank[i]</code>。</li></ul></li><li><strong><code>bank</code> 的使用</strong>：<ul><li><code>bank</code> 是一个数组，包含了所有有效的基因序列。</li><li>在回溯过程中，我们遍历 <code>bank</code> 中的每个基因序列，检查它是否可以作为从 <code>start</code> 到 <code>end</code> 的一个中间步骤。</li><li>只有当 <code>bank[i]</code> 与 <code>start</code> 的差异为 1 时，<code>bank[i]</code> 才会被考虑作为下一步。</li></ul></li></ol><p>举例说明</p><p>假设我们有以下输入：</p><ul><li><code>start = &quot;AACCGGTT&quot;</code></li><li><code>end = &quot;AAACGGTA&quot;</code></li><li><code>bank = [&quot;AACCGGTA&quot;, &quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;]</code></li></ul><h4 id="步骤-1：初始化">步骤 1：初始化</h4><ul><li><code>ans = Integer.MAX_VALUE</code>（初始的最少变化次数设为最大整数值）</li></ul><h4 id="步骤-2：第一次调用-backtrack">步骤 2：第一次调用 <code>backtrack</code></h4><ul><li><code>backtrack(&quot;AACCGGTT&quot;, &quot;AAACGGTA&quot;, bank, new boolean[bank.length], 0)</code></li></ul><h4 id="步骤-3：遍历-bank">步骤 3：遍历 <code>bank</code></h4><ul><li>计算 <code>start</code> 和每个 <code>bank[i]</code> 的差异 <code>diff</code>：<ul><li><code>diff(&quot;AACCGGTT&quot;, &quot;AACCGGTA&quot;) = 2</code>（两个字符不同）</li><li><code>diff(&quot;AACCGGTT&quot;, &quot;AACCGCTA&quot;) = 1</code>（一个字符不同）</li><li><code>diff(&quot;AACCGGTT&quot;, &quot;AAACGGTA&quot;) = 2</code>（两个字符不同）</li></ul></li><li>只有 <code>&quot;AACCGCTA&quot;</code> 的 <code>diff</code> 为 1，因此我们选择它作为下一步。</li></ul><h4 id="步骤-4：递归调用-backtrack">步骤 4：递归调用 <code>backtrack</code></h4><ul><li><code>used[1] = true</code>（标记 “AACCGCTA” 为已使用）</li><li><code>backtrack(&quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;, bank, used, 1)</code></li></ul><h4 id="步骤-5：再次遍历-bank">步骤 5：再次遍历 <code>bank</code></h4><ul><li>计算 <code>&quot;AACCGCTA&quot;</code> 和每个 <code>bank[i]</code> 的差异 <code>diff</code>：<ul><li><code>diff(&quot;AACCGCTA&quot;, &quot;AACCGGTA&quot;) = 2</code></li><li><code>diff(&quot;AACCGCTA&quot;, &quot;AAACGGTA&quot;) = 1</code></li></ul></li><li>只有 <code>&quot;AAACGGTA&quot;</code> 的 <code>diff</code> 为 1，因此我们选择它作为下一步。</li></ul><h4 id="步骤-6：再次递归调用-backtrack">步骤 6：再次递归调用 <code>backtrack</code></h4><ul><li><code>used[2] = true</code>（标记 “AAACGGTA” 为已使用）</li><li><code>backtrack(&quot;AAACGGTA&quot;, &quot;AAACGGTA&quot;, bank, used, 2)</code></li></ul><h4 id="步骤-7：达到目标">步骤 7：达到目标</h4><ul><li><code>start.equals(end)</code> 为 <code>true</code>，更新 <code>ans = 2</code></li></ul><h4 id="步骤-8：回溯">步骤 8：回溯</h4><ul><li>取消标记 <code>used[2] = false</code>，<code>used[1] = false</code></li><li>返回到上一级递归</li></ul><p>最终，我们找到了从 <code>&quot;AACCGGTT&quot;</code> 到 <code>&quot;AAACGGTA&quot;</code> 的最少变化次数为 2。</p><p>总结</p><p>通过这个例子，我们可以看到 <code>diff</code> 是如何计算两个序列之间的差异，并且 <code>bank</code> 是如何被用来找到有效的中间步骤。代码通过递归和回溯，尝试所有可能的路径，直到找到最短的路径或确定不存在这样的路径。</p>]]></content>
    
    
    <summary type="html">回溯</summary>
    
    
    
    <category term="算法与数据结构" scheme="https://yjyrichard.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法与数据结构" scheme="https://yjyrichard.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Jenkins</title>
    <link href="https://yjyrichard.github.io/posts/9a7f448e.html"/>
    <id>https://yjyrichard.github.io/posts/9a7f448e.html</id>
    <published>2025-07-31T12:10:09.844Z</published>
    <updated>2025-08-01T02:51:31.820Z</updated>
    
    <content type="html"><![CDATA[<h1>Jenkins</h1><p>Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。</p><p>官方网站</p><p><a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p><h2 id="GitLab安装使用">GitLab安装使用</h2><p>官方网站：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><p>安装所需最小配置</p><p>内存至少4G</p><p><a href="https://docs.gitlab.cn/jh/install/requirements.html">https://docs.gitlab.cn/jh/install/requirements.html</a></p><h3 id="在ssh下安装">在ssh下安装</h3><p>官方安装文档：<a href="https://gitlab.cn/install/?version=ce">https://gitlab.cn/install/?version=ce</a></p><h4 id="1-安装依赖">1 安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y curl policycoreutils-python openssh-server perl</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"><span class="built_in">sudo</span> systemctl start sshd</span><br></pre></td></tr></table></figure><h4 id="2-配置镜像">2 配置镜像</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="regexp">//</span>packages.gitlab.cn<span class="regexp">/repository/</span>raw<span class="regexp">/scripts/</span>setup.sh | <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure><h4 id="3-开始安装">3 开始安装</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo EXTERNAL_URL<span class="operator">=</span><span class="string">&quot;http://192.168.44.103&quot;</span> yum install -y gitlab-jh</span><br></pre></td></tr></table></figure><p>除非您在安装过程中指定了自定义密码，否则将随机生成一个密码并存储在 <code>/etc/gitlab/initial_root_password</code> 文件中(出于安全原因，24 小时后，此文件会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码）。使用此密码和用户名 <code>root</code> 登录。</p><h4 id="gitlab常用命令">gitlab常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start                  <span class="comment"># 启动所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl stop                   <span class="comment"># 停止所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl restart                <span class="comment"># 重启所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl status                 <span class="comment"># 查看服务状态；</span></span><br><span class="line">gitlab-ctl reconfigure            <span class="comment"># 启动服务；</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb         <span class="comment"># 修改默认的配置文件；</span></span><br><span class="line">gitlab-ctl <span class="built_in">tail</span>                   <span class="comment"># 查看日志；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在docker下安装">在docker下安装</h3><p><a href="https://docs.gitlab.cn/jh/install/docker.html">https://docs.gitlab.cn/jh/install/docker.html</a></p><p>安装所需最小配置</p><ul><li>内存至少4G</li><li>系统内核至少在3.10以上 <code>uname -r</code> 命令可查看系统内核版本</li></ul><h4 id="安装docker">安装docker</h4><ol><li>更新yum源</li></ol><p>​<code>yum update</code></p><ol start="2"><li>安装依赖</li></ol><p>​<code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p><ol start="3"><li>添加镜像</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>国外镜像</span><br><span class="line">yum-config-manager --add-repo https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br><span class="line"><span class="regexp">//</span>阿里镜像</span><br><span class="line">https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/g</span>pg</span><br><span class="line">yum-config-manager --add-repo http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="4"><li>查看源中可使用版本</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br></pre></td></tr></table></figure><ol start="5"><li>安装指定版本</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> docker</span><br></pre></td></tr></table></figure><ol start="6"><li>配置开机启动项</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> docker</span><br><span class="line">systemctl <span class="keyword">enable</span> docker</span><br><span class="line">docker <span class="keyword">version</span></span><br></pre></td></tr></table></figure><h4 id="使用容器安装gitlab">使用容器安装gitlab</h4><p>1.添加容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --hostname 192.168.44.103 \</span><br><span class="line">  --publish 443:443 --publish 80:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume $GITLAB_HOME/config:/etc/gitlab:Z \</span><br><span class="line">  --volume $GITLAB_HOME/logs:/var/log/gitlab:Z \</span><br><span class="line">  --volume $GITLAB_HOME/data:/var/opt/gitlab:Z \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  registry.gitlab.cn/omnibus/gitlab-jh:latest</span><br></pre></td></tr></table></figure><p>2.启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start gitlab</span><br></pre></td></tr></table></figure><p>3.查看已存在的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>4.进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  gitlab /bin/bash</span><br></pre></td></tr></table></figure><h4 id="访问">访问</h4><p><a href="http://192.168.44.101">http://192.168.44.101</a></p><p>当首次运行出现502错误的时候排查两个原因</p><ol><li>虚拟机内存至少需要4g</li><li>稍微再等等刷新一下可能就好了</li></ol><h4 id="管理员账号登录">管理员账号登录</h4><p>用户名：root</p><p>密码存在下面文件中，登录后需要改密码不然24小时之后会失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure><h2 id="Jenkins安装">Jenkins安装</h2><p>官方文档介绍非常详细</p><p><a href="https://www.jenkins.io">https://www.jenkins.io</a></p><p>安装需求</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">机器要求：</span><br><span class="line"></span><br><span class="line"><span class="number">256</span> MB 内存，建议大于 <span class="number">512</span> MB</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> GB 的硬盘空间（用于 <span class="keyword">Jenkins </span>和 Docker 镜像）</span><br><span class="line"></span><br><span class="line">需要安装以下软件：</span><br><span class="line"></span><br><span class="line"><span class="keyword">Java </span><span class="number">8</span> ( <span class="keyword">JRE </span>或者 <span class="keyword">JDK </span>都可以)</span><br><span class="line"></span><br><span class="line">Docker （导航到网站顶部的Get Docker链接以访问适合您平台的Docker下载）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装JDK">安装JDK</h3><p>1 检索可用包</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="built_in">search</span> java|<span class="keyword">grep</span> jdk</span><br></pre></td></tr></table></figure><p>2 安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> install java-<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>-openjdk</span><br></pre></td></tr></table></figure><p>首次启动war包会在<code>/root/.jenkins</code>生成配置文件</p><p>待完全启动成功后 访问服务器8080端口完成配置</p><p>初始化后的密码：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Jenkins initial setup is required. An admin user has been created <span class="keyword">and</span> <span class="keyword">a</span> password generated.</span><br><span class="line">Please use <span class="keyword">the</span> following password <span class="built_in">to</span> proceed <span class="built_in">to</span> installation:</span><br><span class="line"></span><br><span class="line"><span class="number">4e67</span>bbe261da476abdc63c5b51311646</span><br><span class="line"></span><br><span class="line">This may also be found <span class="keyword">at</span>: /root/.jenkins/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>密码文件使用后会自动删除</p><h3 id="Maven安装">Maven安装</h3><p>官网</p><p><a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p>下载后复制到Jenkins所在服务器解压缩即可</p><h2 id="Jenkins-Git-Maven-自动化部署配置">Jenkins + Git + Maven 自动化部署配置</h2><h4 id="1-Git配置">1 Git配置</h4><p><img src="images/image-20220726213303821.png" alt="image-20220726213303821"></p><p><img src="images/image-20220726213505879.png" alt="image-20220726213505879"></p><h4 id="2-Maven配置">2 Maven配置</h4><p><img src="images/image-20220726214239888.png" alt="image-20220726214239888"></p><h4 id="3-Pom-xml配置">3 Pom.xml配置</h4><p><img src="images/image-20220726214200732.png" alt="image-20220726214200732"></p><h3 id="git安装">git安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y git</span><br></pre></td></tr></table></figure><h4 id="javahome配置-可选">javahome配置(可选)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line">jdk</span><br><span class="line">/etc/alternatives/jre_openjdk</span><br><span class="line"><span class="built_in">source</span> /etc/profile 立即生效</span><br></pre></td></tr></table></figure><h4 id="报错找不到jdk？">报错找不到jdk？</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认yum安装<span class="keyword">java的时候会显示安装的是openjdk1.8 </span>实则实际上只安装了<span class="keyword">jre</span></span><br><span class="line"><span class="keyword"></span>yum <span class="keyword">install </span>-y <span class="keyword">java-devel</span></span><br></pre></td></tr></table></figure><h4 id="Maven阿里云镜像">Maven阿里云镜像</h4><p>修改<code>/usr/local/maven/conf/settings.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It&#x27;s normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>$&#123;user.home&#125;/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).</span></span><br><span class="line"><span class="comment">     | </span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are </span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--This sends everything else to /public --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">          profile below over to a different nexus group --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">          profile below over to a different nexus group --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots1<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/repositories/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>development<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--this profile will allow snapshots to be searched when activated--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://public-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://public-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>development<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- activeProfiles</span></span><br><span class="line"><span class="comment">   | List of profiles that are active for all builds.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;activeProfiles&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">  &lt;/activeProfiles&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="publish-over-ssh-配置">publish over ssh 配置</h3><p>1 安装插件</p><p>在Configure System菜单里 往下来</p><p>2 添加一台目标服务器</p><p><img src="images/image-20220726223917263.png" alt="image-20220726223917263"></p><p><img src="images/image-20220726223937722.png" alt="image-20220726223937722"></p><p>3 修改配置</p><p><img src="images/image-20220727165700419.png" alt="image-20220727165700419"></p><h4 id="超时机制">超时机制</h4><p>输出命令时一定要注意不要让窗口卡主，不然Jenkins会认为认为一直没完成</p><h4 id="shell的日志输出">shell的日志输出</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java <span class="punctuation">-</span>jar /root/xxoo/demo*.jar &gt;mylog.<span class="built_in">log</span> <span class="number">2</span>&gt;<span class="meta">&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><h4 id="数据流重定向">数据流重定向</h4><p>数据流重定向就是将某个命令执行后应该要出现在屏幕上的数据传输到其他地方</p><p>标准输入（stdin）：代码为0，使用&lt;或&lt;&lt;;<br>标准输出（stdout）：代码为1，使用&gt;或&gt;&gt;;<br>标准错误输出（stderr）：代码为2，使用2&gt;或2&gt;&gt;</p><p>&gt; 覆盖写<br>&gt;&gt; 追加写</p><h3 id="运行前清理">运行前清理</h3><p>配置杀死之前运行的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除历史数据</span></span><br><span class="line">rm -rf xxoo</span><br><span class="line"></span><br><span class="line">appname=$1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取传入的参数</span></span><br><span class="line">echo &quot;arg:$1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取正在运行的jar包pid</span></span><br><span class="line">pid=`ps -ef | grep $1 | grep &#x27;java -jar&#x27; | awk &#x27;&#123;printf $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">echo $pid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果pid为空，提示一下，否则，执行<span class="built_in">kill</span>命令</span></span><br><span class="line">if [ -z $pid ];</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用-z 做空值判断</span></span><br><span class="line">        then</span><br><span class="line">                echo &quot;$appname not started&quot;</span><br><span class="line"></span><br><span class="line">        else</span><br><span class="line">               kill -9 $pid</span><br><span class="line">                echo &quot;$appname stoping....&quot;</span><br><span class="line"></span><br><span class="line">check=`ps -ef | grep -w $pid | grep java`</span><br><span class="line">if [ -z $check ];</span><br><span class="line"></span><br><span class="line">        then</span><br><span class="line">                echo &quot;$appname pid:$pid is stop&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;$appname stop failed&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="几种构建方式">几种构建方式</h3><ul><li>快照依赖构建/Build whenever a SNAPSHOT dependency is built<ul><li>当依赖的快照被构建时执行本job</li></ul></li><li>触发远程构建 (例如,使用脚本)<ul><li>远程调用本job的restapi时执行本job</li></ul></li><li>job依赖构建/Build after other projects are built<ul><li>当依赖的job被构建时执行本job</li></ul></li><li>定时构建/Build periodically<ul><li>使用cron表达式定时构建本job</li></ul></li><li>向GitHub提交代码时触发Jenkins自动构建/GitHub hook trigger for GITScm polling<ul><li>Github-WebHook出发时构建本job</li></ul></li><li>定期检查代码变更/Poll SCM<ul><li>使用cron表达式定时检查代码变更，变更后构建本job</li></ul></li></ul><h4 id="触发远程构建-gitlab上改动自动构建">触发远程构建/gitlab上改动自动构建</h4><p>代码改动自动可以使用gitlab的webhook回调钩子调起Jenkins的启动任务接口</p><p>在构建触发器中配置接口和token</p><p><img src="images/image-20220728170250273.png" alt="image-20220728170250273"></p><h4 id="定时构建">定时构建</h4><h5 id="Jenkins-cron表达式">Jenkins cron表达式</h5><p>标准cron</p><p><a href="https://crontab.guru">https://crontab.guru</a></p><p>Jenkins cron不是标准的cron表达式</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">第一个 * 表示每个小时的第几分钟，取值0~59</span><br><span class="line"></span><br><span class="line">H * * * *</span><br><span class="line">H：每小时执行一次</span><br><span class="line"></span><br><span class="line">第二颗 * 表示小时，取值0~23</span><br><span class="line"></span><br><span class="line">*<span class="number"> 15 </span>* * * 表示每天下午3点</span><br><span class="line">*<span class="number"> 1 </span>* * *  表示每天凌晨1点</span><br><span class="line"></span><br><span class="line">第三颗 * 表示一个月的第几天，取值1~31</span><br><span class="line">*<span class="number"> 1 </span>5 * *  表示每月5日凌晨1点</span><br><span class="line"></span><br><span class="line">第四颗 * 表示第几月，取值1~12</span><br><span class="line">*<span class="number"> 15 </span>5<span class="number"> 1 </span>*  表示每年几月执行</span><br><span class="line"></span><br><span class="line">第五颗 * 表示一周中的第几天，取值0~7，其中0和7代表的都是周日</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>“/”</strong></p><p>表示每隔多长时间，比如 */10 * * * * 表示 每隔10分钟</p><p><strong>“H”</strong></p><p>hash散列值，以job名取值，获取到以job名为入参的唯一值，相同名称值也相同，这个偏移量会和实际时间相加，获得一个真实的运行时间</p><p>意义在于：不同的项目在不同的时间运行，即使配置的值是一样的，比如 都是<code>15 * * * * </code> ，表示每个小时的第15分钟开始执行任务，那么会造成同一时间内在Jenkins中启动很多job，换成<code>H/15 * * * *</code>,那么在首次启动任务时，会有随机值参与进来，有的会在17分钟启动 有的会在19分钟启动，随后的启动时间也是这个值。这样就能错开相同cron值的任务执行了。</p><p>H的值也可以设置范围</p><p><code>H * * * *</code>表示一小时内的任意时间</p><p><code>*/10 * * * *</code>每10分钟</p><p><code>H/10 * * * *</code>每10分钟,可能是7,17,27，起始时间hash，步长不变</p><p><code>45 3 * * 1-6 </code> 每个周一至周六，凌晨3点45 执行1次</p><p><code>45 3-5 * * 1-6 </code> 每个周一至周六，凌晨3点45 ，凌晨4点45，凌晨5点45 各执行1次</p><p><code>H(40-48) 3-5 * * 1-6 </code> 在40~48之间取值 其他同上</p><p><code>45 3-5/2 * * 1-6 </code> 每个周一至周六，凌晨3点45 ，凌晨5点45 各执行1次</p><p><code>45 0-6/2 * * 1-6 * * 1-6</code> 0点开始，每间隔2小时执行一次 0:45、2:45、4:45</p><h4 id="源码变更构建">源码变更构建</h4><p>使用Poll SCM 方式与Build periodically一样</p><p>会主动定期检查代码托管服务器上是否有变化，一旦发生变化执行job构建</p><h3 id="测试报告邮件通知">测试报告邮件通知</h3><p>使用163免费邮箱发送邮件时注意密码填认证码，也就是发送手机短信后给的那个，不要用登录邮箱的密码</p><p>类似下面。。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">KDWJUWDQBWMOYGDC</span></span><br></pre></td></tr></table></figure><h3 id="自动化部署到docker容器中">自动化部署到docker容器中</h3><p><img src="./Jenkins.assets/image-20250512203940547.png" alt="image-20250512203940547"></p><p><img src="./Jenkins.assets/image-20250512203642721.png" alt="image-20250512203642721"></p><h4 id="docker外挂目录">docker外挂目录</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">8080</span>:<span class="number">8080</span> --name demo-out -v /root/jarfile/demo-<span class="number">1</span>-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar:/app.jar openjdk:<span class="number">11</span> java -jar app.jar</span><br></pre></td></tr></table></figure><h4 id="打包到容器内">打包到容器内</h4><ol><li>准备一台测试服务器 docker环境</li><li>准备支持jdk的镜像</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /usr/src/myapp</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/myapp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> javac Main.java</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;Main&quot;</span>]</span></span><br></pre></td></tr></table></figure><ol><li>把jar包打包到容器内</li></ol><p>dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jarfile/demo*.jar /root/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/root/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>打包镜像</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo .</span><br></pre></td></tr></table></figure><p>配置国内镜像</p><p>修改<code>/etc/docker/daemon.json</code>文件，没有的话创建一个</p><p>写入</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.aliyuncs.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">system</span>ctl daemon-reload</span><br><span class="line"><span class="params">system</span>ctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Jenkins集群-并发构建">Jenkins集群/并发构建</h2><p>集群化构建可以有效提升构建效率，尤其是团队项目比较多或是子项目比较多的时候，可以并发在多台机器上执行构建。</p><h2 id="流水线-pipeline">流水线 pipeline</h2><p>流水线既能作为任务的本身，也能作为Jenkinsfile</p><p>使用流水线可以让我们的任务从ui手动操作，转换为代码化，像docker的dockerfile一样，从shell命令到配置文件，更适合大型项目，可以让团队其他开发者同时参与进来，同时也可以编辑开发Jenkinswebui不能完成的更复杂的构建逻辑，作为开发者可读性也更好。</p><h3 id="完整语法">完整语法</h3><p>5个必备的组成部分</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pipeline：整条流水线</span><br><span class="line"><span class="built_in">agent</span>：指定执行器</span><br><span class="line">stages：所有阶段</span><br><span class="line">stage：某一阶段，可有多个</span><br><span class="line">steps：阶段内的每一步，可执行命令</span><br></pre></td></tr></table></figure><h3 id="测试脚本">测试脚本</h3><h4 id="基础框架">基础框架</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    <span class="built_in">agent</span> any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;拉取代码完成&#x27;</span></span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;执行构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;执行构建完成&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    post &#123;</span><br><span class="line">        </span><br><span class="line">        always &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;完成&quot;</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        failure &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;失败&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阶段视图-Stage-View">阶段视图 Stage View</h4><h4 id="blue-ocean可视化界面">blue ocean可视化界面</h4><p>全新的流水线控制ui，可重复执行某阶段代码</p><p>插件中心搜索blue ocean安装即可</p><h4 id="post">post</h4><p>流水线完成后可执行的任务</p><ul><li>always 无论流水线或者阶段的完成状态。</li><li>changed 只有当流水线或者阶段完成状态与之前不同时。</li><li>failure 只有当流水线或者阶段状态为&quot;failure&quot;运行。</li><li>success 只有当流水线或者阶段状态为&quot;success&quot;运行。</li><li>unstable 只有当流水线或者阶段状态为&quot;unstable&quot;运行。例如：测试失败。</li><li>aborted 只有当流水线或者阶段状态为&quot;aborted &quot;运行。例如：手动取消。</li></ul><h4 id="agent">agent</h4><p>可以指定执行节点</p><p>label 指定运行job的节点标签</p><p>any 不指定，由Jenkins分配</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">&quot;jenkins-02&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">          </span><br><span class="line">                sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    sleep 10</span></span><br><span class="line"><span class="string">                            </span></span><br><span class="line"><span class="string">                   &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                echo <span class="string">&#x27;拉取代码完成&#x27;</span></span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;执行构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;执行构建完成&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    post &#123;</span><br><span class="line">        </span><br><span class="line">        always &#123;</span><br><span class="line">            </span><br><span class="line">            echo <span class="string">&quot;完成&quot;</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        failure &#123;</span><br><span class="line">            </span><br><span class="line">            echo <span class="string">&quot;失败&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pipeline中执行自动化构建">pipeline中执行自动化构建</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    tools &#123;</span><br><span class="line">        </span><br><span class="line">        maven <span class="string">&quot;maven3&quot;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;拉取代码&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                git branch: <span class="string">&#x27;main&#x27;</span>, credentialsId: <span class="string">&#x27;gitlab&#x27;</span>, url: <span class="string">&#x27;http://192.168.44.103/root/java-project.git&#x27;</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;拉取成功&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;执行构建&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//    sh &quot;mvn --version&quot;</span></span><br><span class="line">                sh <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">                cd demo-1</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                mvn clean package</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;构建完成&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;clean test server&quot;</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            steps&#123;</span><br><span class="line">                </span><br><span class="line"><span class="title function_ invoke__">sshPublisher</span>(<span class="attr">publishers</span>: [<span class="title function_ invoke__">sshPublisherDesc</span>(<span class="attr">configName</span>: <span class="string">&#x27;testserver&#x27;</span>, <span class="attr">transfers</span>: [<span class="title function_ invoke__">sshTransfer</span>(<span class="attr">cleanRemote</span>: <span class="literal">false</span>, <span class="attr">excludes</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execCommand</span>: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;rm -rf *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker stop demo</span></span><br><span class="line"><span class="string">docker rm demo</span></span><br><span class="line"><span class="string">docker rmi demo</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span>, <span class="attr">execTimeout</span>: <span class="number">120000</span>, <span class="attr">flatten</span>: <span class="literal">false</span>, <span class="attr">makeEmptyDirs</span>: <span class="literal">false</span>, <span class="attr">noDefaultExcludes</span>: <span class="literal">false</span>, <span class="attr">patternSeparator</span>: <span class="string">&#x27;[, ]+&#x27;</span>, <span class="attr">remoteDirectory</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">remoteDirectorySDF</span>: <span class="literal">false</span>, <span class="attr">removePrefix</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">sourceFiles</span>: <span class="string">&#x27;/root&#x27;</span>)], <span class="attr">usePromotionTimestamp</span>: <span class="literal">false</span>, <span class="attr">useWorkspaceInPromotion</span>: <span class="literal">false</span>, <span class="attr">verbose</span>: <span class="literal">false</span>)])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;发送jar包到测试服务器&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="title function_ invoke__">sshPublisher</span>(<span class="attr">publishers</span>: [<span class="title function_ invoke__">sshPublisherDesc</span>(<span class="attr">configName</span>: <span class="string">&#x27;testserver&#x27;</span>, <span class="attr">transfers</span>: [<span class="title function_ invoke__">sshTransfer</span>(<span class="attr">cleanRemote</span>: <span class="literal">false</span>, <span class="attr">excludes</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execCommand</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execTimeout</span>: <span class="number">120000</span>, <span class="attr">flatten</span>: <span class="literal">false</span>, <span class="attr">makeEmptyDirs</span>: <span class="literal">false</span>, <span class="attr">noDefaultExcludes</span>: <span class="literal">false</span>, <span class="attr">patternSeparator</span>: <span class="string">&#x27;[, ]+&#x27;</span>, <span class="attr">remoteDirectory</span>: <span class="string">&#x27;/jarfile&#x27;</span>, <span class="attr">remoteDirectorySDF</span>: <span class="literal">false</span>, <span class="attr">removePrefix</span>: <span class="string">&#x27;demo-1/target&#x27;</span>, <span class="attr">sourceFiles</span>: <span class="string">&#x27;**/demo*.jar&#x27;</span>), <span class="title function_ invoke__">sshTransfer</span>(<span class="attr">cleanRemote</span>: <span class="literal">false</span>, <span class="attr">excludes</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execCommand</span>: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;docker build -t demo .</span></span><br><span class="line"><span class="string">docker run -d -p 8080:8080 --name demo demo&#x27;</span><span class="string">&#x27;&#x27;</span>, <span class="attr">execTimeout</span>: <span class="number">120000</span>, <span class="attr">flatten</span>: <span class="literal">false</span>, <span class="attr">makeEmptyDirs</span>: <span class="literal">false</span>, <span class="attr">noDefaultExcludes</span>: <span class="literal">false</span>, <span class="attr">patternSeparator</span>: <span class="string">&#x27;[, ]+&#x27;</span>, <span class="attr">remoteDirectory</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">remoteDirectorySDF</span>: <span class="literal">false</span>, <span class="attr">removePrefix</span>: <span class="string">&#x27;demo-1/docker&#x27;</span>, <span class="attr">sourceFiles</span>: <span class="string">&#x27;demo-1/docker/dockerfile&#x27;</span>)], <span class="attr">usePromotionTimestamp</span>: <span class="literal">false</span>, <span class="attr">useWorkspaceInPromotion</span>: <span class="literal">false</span>, <span class="attr">verbose</span>: <span class="literal">false</span>)])</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;jar send over!&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="声明式流水线">声明式流水线</h4><p>好处</p><ul><li>更像是在Jenkins web ui中的操作</li><li>可读性比较高</li><li>可以使用blue ocean自动生成</li><li>支持语法检查</li></ul><p>坏处</p><ul><li>代码逻辑能力比脚本式弱，不能完成特别复杂的任务</li></ul><h4 id="脚本式流水线">脚本式流水线</h4><p>好处</p><ul><li>更少的代码和弱规范要求</li><li>更灵活的自定义代码操作</li><li>不受约束，可以构建特别复杂的工作流和流水线</li></ul><p>坏处</p><ul><li>读写对编程要求比较高</li><li>比声明式流水线代码更复杂</li></ul>]]></content>
    
    
    <summary type="html">Jenkins</summary>
    
    
    
    <category term="Jenkins" scheme="https://yjyrichard.github.io/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://yjyrichard.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs</title>
    <link href="https://yjyrichard.github.io/posts/33b4e017.html"/>
    <id>https://yjyrichard.github.io/posts/33b4e017.html</id>
    <published>2025-07-31T12:05:25.346Z</published>
    <updated>2025-08-01T02:51:31.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么学习Node-js">为什么学习Node.js?</h2><p>加入你有一个网页，你有没有办法让别人都访问这个网页？</p><p>这个就是Node.js的作用了，至于它是如何让每一个人都访问到的，后面会详细展开</p><p>前端开发三大框架</p><p>Vue React Angular</p><p><img src="./nodejs(1).assets/image-20250609200213029.png" alt="image-20250609200213029"></p><p>这三个项目开发的时候都离不开Node.js,是一个必学项。</p><p>所以总结来说:</p><blockquote><p>1.可以让其他人访问我们编写的网页</p><p>2.为后续的框架学习打基础</p></blockquote><h2 id="Node-js是什么？">Node.js是什么？</h2><p>有人说：Node.js 是一门编程语言，也有人说Node.js是新版本的JavaScript? 那我们来看看官方是如何描述Node.js的：Node.js® 是一个免费、开源、跨平台的 JavaScript 运行时环境, 它让开发人员能够创建服务器 Web 应用、命令行工具和脚本。</p><p>通俗来讲：Node.js 就是<code>一款应用程序</code>，是<code>一款软件</code>，它可以运行JavaScript</p><h2 id="Node-js-的作用">Node.js 的作用</h2><p>1.开发服务器应用</p><p>2.开发工具类应用</p><p>3.开发桌面端应用</p><p>我们下面来展开说一下：</p><h3 id="1-开发服务器应用">1.开发服务器应用</h3><p><img src="./nodejs(1).assets/image-20250609200702080.png" alt="image-20250609200702080"></p><p>Node.js 就可以是在B站服务器里面的软件。<br>我们前面说我们学习Node.js可以让别人访问到我们的网页，我们知道网页是由HTML,CSS,JavaScript 三件套组成的。那如果我们想让别人访问我们就必须使用服务器，但是服务器只有硬件，那么还得需要软件，Node.js就可以运行在服务器端，这样就可以让别人来访问我们的网站了。</p><h3 id="2-开发工具类应用">2.开发工具类应用</h3><p><img src="./nodejs(1).assets/image-20250609201015180.png" alt="image-20250609201015180"></p><h3 id="3-开发桌面端应用">3.开发桌面端应用</h3><p><img src="./nodejs(1).assets/image-20250609201050195.png" alt="image-20250609201050195"></p><p>这三个应用都是使用electron，而electron是基于node.js开发出来的。以后可以去学习electron就可以进行开发了</p><h2 id="Node-js-下载和安装">Node.js 下载和安装</h2><p>官网：<a href="https://nodejs.org/zh-cn">Node.js — 在任何地方运行 JavaScript</a></p><p>怎么验证安装成功了吗？</p><p>使用cmd:然后输入node -v</p><p><strong>认识命令行工具</strong></p><p>你有没有办法不使用鼠标来打开QQ？</p><p>我们可以使用键盘上下左右，然后按回车</p><p>还没有办法呢？</p><p>我们可以使用一些快速启动工具，比如uTools</p><p>我们还可以使用cmd  (win+R)</p><p><strong>命令的结构</strong></p><p>思考题：</p><p>如何使用命令行工具打开谷歌浏览器并访问百度首页？</p><p>win+R 输入cmd，在控制台中输入chrome <a href="http://www.baidu.com">http://www.baidu.com</a> 然后输入回车即可</p><p>chrome 是命令 ，网址后面是参数  如果后面再加http://bilibli.com 就会打开两个网页</p><p><strong>常用命令</strong></p><p>命令行如何查看【D：/Program Files 】里的内容？</p><p>我们可以cd（change directory） 到 cd /d D：/Program Files 然后输出dir</p><p>切换盘符直接 D： 即可</p><h2 id="Node-js-初体验">Node.js 初体验</h2><p>dir /s 是查看文件夹下所有的文件，ctrl+C可以停止</p><p>如果我们在hello.js中写下这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Node.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们在控制台中操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">D</span>:\<span class="title class_">Note</span>\code\nodejs&gt;node hello.<span class="property">js</span></span><br><span class="line">hello <span class="title class_">Node</span>.<span class="property">js</span></span><br></pre></td></tr></table></figure><h2 id="Node-js注意点">Node.js注意点</h2><p>Node.js中不能使用BOM和DOM的API</p><p><img src="./nodejs(1).assets/image-20250609202927856.png" alt="image-20250609202927856"></p><p><img src="./nodejs(1).assets/image-20250609202936856.png" alt="image-20250609202936856"></p><p>1.Node.js中不能使用BOM和DOM的API，可以使用console和定时器API</p><p>2.Node.js中的顶级对象为global,也可以使用globalThis 访问顶级对象</p><h2 id="Buffer">Buffer</h2><p>Buffer 中文译为【缓冲区】，是一个类似于Array的对象，用于表示固定长度的字节序列</p><p>换句话说，Buffer就是一段固定长度的内存空间，用于处理二进制数据</p><p><img src="./nodejs(1).assets/image-20250609203343347.png" alt="image-20250609203343347"></p><p><strong>特点</strong></p><p>1.Buffer 大小固定且无法调整</p><p>2.Buffer 性能较好，可以直接对计算机内存进行操作</p><p>3.每个元素的大小为 1 字节（byte）</p><p><img src="./nodejs(1).assets/image-20250609203455768.png" alt="image-20250609203455768"></p><p><strong>使用</strong></p><p>创建 Buffer Node.js 中创建 Buffer 的方式主要如下几种：</p><p>1.Buffer.alloc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.alloc</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Note\code\nodejs&gt; node .\创建buffer.js</span><br><span class="line">&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span><br></pre></td></tr></table></figure><p>2.Buffer.allocUnsafe</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.allocUnsafe </span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>); <span class="comment">//所创建的有可能会有旧数据 但是速度比alloc快</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);</span><br></pre></td></tr></table></figure><p>3.Buffer.from</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.from 通过字符串创建buffer</span></span><br><span class="line"><span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3);</span><br><span class="line"><span class="comment">//通过数组创建 Buffer</span></span><br><span class="line"><span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>]);</span><br></pre></td></tr></table></figure><p>**Buffer与字符串的转化 **</p><p>我们可以借助 toString 方法将 Buffer 转为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_4.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Note\code\nodejs&gt; node .\操作buffer.js</span><br><span class="line">iloveyou</span><br></pre></td></tr></table></figure><p>【这也可以是一种表白的方式】</p><blockquote><p>toString 默认是按照 utf-8 编码方式进行转换的。</p></blockquote><p>**Buffer 的读写 **</p><p>Buffer 可以直接通过 [] 的方式对数据进行处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">buf_3[<span class="number">1</span>] = <span class="number">97</span>;</span><br><span class="line"><span class="comment">//查看字符串结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3.<span class="title function_">toString</span>(<span class="number">2</span>));<span class="comment">//查看2进制</span></span><br><span class="line"><span class="comment">//溢出</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">361</span>;<span class="comment">//舍弃高位数字 因为最大只能255 0001 0110 1001 =&gt; 0110 1001</span></span><br><span class="line"><span class="comment">//中文</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;你好&quot;</span>) <span class="comment">//结果是6个字节而不是2个字节 </span></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ol><li><p>如果修改的数值超过 255 ，则超过 8 位数据会被舍弃</p></li><li><p>一个 utf-8 的字符 一般 占 3 个字节</p></li></ol></blockquote><h2 id="计算机基本组成">计算机基本组成</h2><p>CPU 内存 硬盘</p><p>内存：读写速度较快，断电丢失数据</p><p>硬盘：读写速度较慢，断电不丢失数据</p><p>主板：集成电路板</p><p>显卡：负责处理视频信号，当有信息需要呈现时，需要在屏幕中呈现就会将信息传递给显卡，显卡处理好后再传递给显示器。</p><p>机箱</p><p>外设</p><h2 id="程序运行的基本流程">程序运行的基本流程</h2><p>操作系统</p><p>windows, linux MacOS</p><p>操作系统也是一种应用程序，用来管理和调度硬件资源</p><p><img src="./nodejs(1).assets/image-20250609205140863.png" alt="image-20250609205140863"></p><p>英雄联盟是如何运行的？</p><p><img src="./nodejs(1).assets/image-20250609205248548.png" alt="image-20250609205248548"></p><p>小结：</p><p>程序一般保存再在硬盘中，软件安装的过程就是将程序写入硬盘的过程。</p><p>程序在运行时会加载进入内存，然后由CPU读取并执行程序</p><h2 id="进程和线程">进程和线程</h2><p><strong>进程</strong>：运行的程序</p><p>进程是程序的一次执行过程</p><p>可以通过任务管理器进行查看</p><p><strong>线程</strong>：</p><p>线程是一个进程中执行的一个执行流</p><p>一个线程是属于某个进程的</p><p>可以通过pslist -dmx [PID]</p><p><strong>线程和进程的关系</strong></p><p>比如说有一家蜜雪冰城的奶茶店</p><p>当开店的时候就好比是进程开始运行，有很多的员工，这里的员工就是线程</p><h2 id="fs模块">fs模块</h2><p>fs : file System</p><p>这个跟硬盘相关，fs模块可以实现与硬盘的交互。例如文件的创建，删除，重命名，移动，还有文件内容的写入，读取，以及文件夹的相关操作</p><p>fs 全称为 file system ，称之为 文件系统 ，是 Node.js 中的 内置模块 ，可以对计算机中的磁盘进行操 作。</p><p>本章节会介绍如下几个操作：</p><blockquote><p>文件写入</p><p>文件读取</p><p>文件移动与重命名</p><p>文件删除</p><p>文件夹操作</p><p>查看资源状态</p></blockquote><p>一、文件写入</p><p>文件写入就是将 数据 保存到 文件 中，我们可以使用如下几个方法来实现该效果</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>writeFile</td><td>异步写入</td></tr><tr><td>writeFileSync</td><td>同步写入</td></tr><tr><td>appendFile / appendFileSync</td><td>追加写入</td></tr><tr><td>createWriteStream</td><td>流式写入</td></tr></tbody></table><h3 id="1-1-writeFile异步写入">1 - 1. writeFile异步写入</h3><p><strong>语法</strong>: <code>fs.writeFile(file, data[, options], callback)</code></p><p><strong>参数说明</strong>:</p><ul><li><code>file</code>：文件名</li><li><code>data</code>：待写入的数据</li><li><code>options</code>（可选）：选项设置</li><li><code>callback</code>：写入回调</li></ul><p><strong>返回值</strong>: <code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> * 新建一个文件，座右铭.txt 写入内容，三人行，则必有我师焉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;三人行，则必有我师焉&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>明明右键就可以新建，为什么我们要用代码？</p><p>举个例子：</p><p>比如我们有一个网站，我们希望记录用户每次访问我们网站的时间，并且记录在一个文件中。难道安排一个人吗？</p><p>vscode 也是借助了fs这个模块</p><h2 id="fs异步与同步">fs异步与同步</h2><p>小明和小红去打篮球，小红突然说要去测试，那这个时候如果我等他一起去那就是同步，但是如果我先去它后来那就是异步。</p><h3 id="1-2-writeFileSync-同步写入">1 - 2. writeFileSync 同步写入</h3><p><strong>语法</strong>：<code>fs.writeFileSync(file, data[, options])</code></p><p><strong>参数说明</strong>：参数与 <code>fs.writeFile</code> 大体一致，只是没有 <code>callback</code> 参数。</p><p><strong>返回值</strong>：<code>undefined</code></p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="string">&#x27;三人行，必有我师焉。&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> filePath = <span class="string">&#x27;./座右铭.txt&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(filePath, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Node.js 磁盘操作模式说明</strong>：</p><p>Node.js 中的磁盘操作是由其他线程完成的，结果的处理有两种模式：</p><ul><li><strong>同步处理</strong>：JavaScript 主线程会等待其他线程的执行结果，然后再继续执行主线程的代码，效率较低。</li><li><strong>异步处理</strong>：JavaScript 主线程不会等待其他线程的执行结果，直接执行后续的主线程代码，效率较好。</li></ul><h3 id="1-3-appendFile-appendFileSync-追加写入">1 - 3. appendFile / appendFileSync 追加写入</h3><p><code>appendFile</code> 的作用是在文件尾部追加内容，它的语法和 <code>writeFile</code> 完全相同。</p><p><strong>语法</strong>：</p><ul><li><code>fs.appendFile(file, data[, options], callback)</code></li><li><code>fs.appendFileSync(file, data[, options])</code></li></ul><p><strong>返回值</strong>：二者都为 <code>undefined</code></p><p><strong>实例代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// appendFile 示例</span></span><br><span class="line"><span class="keyword">const</span> appendData = <span class="string">&#x27;追加的数据内容&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> appendFilePath = <span class="string">&#x27;existing_file.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">appendFile</span>(appendFilePath, appendData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;追加文件错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件追加成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// appendFileSync 示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> appendFileSyncData = <span class="string">&#x27;这是用同步方式追加的数据&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> appendFileSyncPath = <span class="string">&#x27;another_existing_file.txt&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">appendFileSync</span>(appendFileSyncPath, appendFileSyncData);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步追加文件错误:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-createWriteStream-流式写入">1 - 4. createWriteStream 流式写入</h3><p><strong>语法</strong>：<code>fs.createWriteStream(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>（可选）：选项配置</li></ul><p><strong>返回值</strong>：<code>Object</code></p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./观书有感.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;半亩方塘一鉴开\r\n&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;天光云影共徘徊\r\n&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;问渠那得清如许\r\n&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;为有源头活水来\r\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><p><strong>特点说明</strong>：</p><ul><li><strong>资源消耗</strong>：程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数。</li><li><strong>适用场景</strong>：流式写入方式适用于大文件写入或者频繁写入的场景，<code>writeFile</code>适合于写入频率较低的场景。</li></ul><h3 id="1-5-写入文件的场景">1 - 5. 写入文件的场景</h3><p>文件写入在计算机中是一个非常常见的操作，下面的场景都用到了文件写入：</p><ul><li>下载文件</li><li>安装软件</li><li>保存程序日志，如 Git</li><li>编辑器保存文件</li><li>视频录制</li></ul><p>当需要<strong>持久化保存数据</strong>的时候，应该想到<strong>文件写入</strong> 。</p><h3 id="二、文件读取">二、文件读取</h3><p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>readFile</td><td>异步读</td></tr><tr><td>readFileSync</td><td>同步读</td></tr><tr><td>createReadStream</td><td>流式读</td></tr></tbody></table><h3 id="2-1-readFile-异步读取">2 - 1. <code>readFile</code> 异步读取</h3><p><strong>语法</strong>：<code>fs.readFile(path[, options], callback)</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：回调函数，第一个参数为错误对象 <code>err</code>（若读取无错误则为 <code>null</code>），第二个参数为读取到的数据 <code>data</code></li></ul><p><strong>返回值</strong>：<code>undefined</code></p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 若未指定 encoding（如未指定 &#x27;utf -8&#x27;），data 是 Buffer 类型</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 此时 data 是字符串类型</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li>第一种 <code>readFile</code> 调用方式，如果不指定编码（<code>'utf -8'</code>），<code>data</code> 是 <code>Buffer</code>（缓冲区）类型，它是一个类似数组的对象，用于表示二进制数据。</li><li>第二种 <code>readFile</code> 调用方式，指定了编码 <code>'utf -8'</code>，<code>data</code> 会被自动转换为字符串类型，方便直接处理文本内容。</li></ul><h3 id="2-2-readFileSync-同步读取">2 - 2. <code>readFileSync</code> 同步读取</h3><p><strong>语法</strong>：<code>fs.readFileSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>：选项配置（可选）</li></ul><p><strong>返回值</strong>：读取到的数据（是 <code>Buffer</code> 类型或者根据指定编码转换后的字符串类型）</p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data1 = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);  <span class="comment">// 未指定 encoding，是 Buffer 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data2 = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;utf -8&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2);  <span class="comment">// 指定了 &#x27;utf -8&#x27;，是字符串类型</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>readFileSync</code> 是同步读取文件，即 JavaScript 主线程会等待文件读取完成后才继续执行后续代码。</li><li>它的返回值直接是读取到的数据，不像 <code>readFile</code> 通过回调函数获取数据。</li></ul><h3 id="2-3-createReadStream-流式读取">2 - 3. <code>createReadStream</code> 流式读取</h3><p><strong>语法</strong>：<code>fs.createReadStream(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>：选项配置（可选）</li></ul><p><strong>返回值</strong>：<code>ReadStream</code> 对象</p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./较大的文本文件.txt&#x27;</span>, <span class="string">&#x27;utf -8&#x27;</span>);  <span class="comment">// 假设是一个较大的文本文件</span></span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;  <span class="comment">// &#x27;data&#x27; 事件，当有数据可读时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取到数据块：&#x27;</span>, chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;  <span class="comment">// &#x27;end&#x27; 事件，当读取到文件末尾时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取结束&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="comment">// &#x27;error&#x27; 事件，当读取发生错误时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取错误：&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li>流式读取适合读取大文件，它不会一次性将整个文件读入内存，而是分块读取（<code>chunk</code> 表示读取到的数据块）。</li><li>通过监听 <code>ReadStream</code> 对象的 <code>'data'</code>、<code>'end'</code>、<code>'error'</code> 等事件来处理读取过程中的不同情况。</li></ul><h3 id="2-4读取文件应用场景">2 - 4读取文件应用场景</h3><ul><li>电脑开机</li><li>程序运行</li><li>编辑器打开文件</li><li>查看图片</li><li>播放视频</li><li>播放音乐</li><li>Git查看日志</li><li>上传文件</li><li>查看聊天记录</li></ul><p>复制文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：复制【座右铭.txt】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">&#x27;process&#x27;</span>)</span><br><span class="line"><span class="comment">//方式一readFile</span></span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line"><span class="comment">// let data = fs.readFileSync(&#x27;座右铭.txt&#x27;);</span></span><br><span class="line"><span class="comment">// //写入文件</span></span><br><span class="line"><span class="comment">// fs.writeFileSync(&#x27;座右铭1.txt&#x27;, data);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="title function_">memoryUsage</span>());<span class="comment">//rss</span></span><br><span class="line"><span class="comment">//方式二readStream</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;座右铭.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;座右铭2.txt&#x27;</span>);</span><br><span class="line">rs.<span class="title function_">pipe</span>(ws);<span class="comment">//这个pipe管道 这个用的不是特别多知道什么意思即可</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制完成&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="title function_">memoryUsage</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三、文件移动与重命名">三、文件移动与重命名</h3><p>在 Node.js 中，我们可以使用 <code>rename</code> 或 <code>renameSync</code> 来移动或重命名 文件或文件夹。</p><p>语法：</p><ul><li><code>fs.rename(oldPath, newPath, callback)</code></li><li><code>fs.renameSync(oldPath, newPath)</code></li></ul><p>参数说明：</p><ul><li><code>oldPath</code>：文件当前的路径</li><li><code>newPath</code>：文件新的路径</li><li><code>callback</code>：操作后的回调</li></ul><h3 id="代码示例：">代码示例：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;../观书有感.txt&#x27;</span>, <span class="string">&#x27;../论语/观书有感.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动完成&#x27;</span>)</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;../座右铭.txt&#x27;</span>, <span class="string">&#x27;../论语/我的座右铭.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、文件删除">四、文件删除</h3><p>在 Node.js 中，我们可以使用 <code>unlink</code> 或 <code>unlinkSync</code> 来删除文件</p><p><strong>语法</strong>：</p><ul><li><code>fs.unlink(path, callback)</code></li><li><code>fs.unlinkSync(path)</code></li><li>也可以使用rm rmSync</li></ul><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>callback</code>：操作后的回调</li></ul><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步删除文件示例</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">&#x27;./要删除的文件.txt&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">unlink</span>(filePath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件删除错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件删除成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步删除文件示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> syncFilePath = <span class="string">&#x27;./另一个要删除的文件.txt&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">unlinkSync</span>(syncFilePath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步删除文件错误:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、文件夹操作">五、文件夹操作</h3><p>借助 Node.js 的能力，我们可以对文件夹进行创建、读取、删除等操作</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir / mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir / readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir / rmdirSync</td><td>删除文件夹</td></tr></tbody></table><h3 id="5-1-mkdir-创建文件夹">5 - 1 mkdir 创建文件夹</h3><p>在 Node.js 中，我们可以使用 <code>mkdir</code> 或 <code>mkdirSync</code> 来创建文件夹</p><p><strong>语法</strong>：</p><ul><li><code>fs.mkdir(path[, options], callback)</code></li><li><code>fs.mkdirSync(path[, options])</code></li></ul><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><p><strong>示例代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步创建文件夹</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> folderPath = <span class="string">&#x27;./new_folder&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">mkdir</span>(folderPath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建文件夹错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件夹创建成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步创建文件夹</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> syncFolderPath = <span class="string">&#x27;./another_new_folder&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(syncFolderPath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步创建文件夹错误:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归创建</span></span><br><span class="line"><span class="keyword">const</span> folderPath = <span class="string">&#x27;./a/b/c&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">mkdir</span>(folderPath, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建文件夹错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件夹创建成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3读取文件夹 read dir</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./资源&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2-4删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./html&#x27;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-2-readdir-读取文件夹">5 - 2 <code>readdir</code> 读取文件夹</h3><p>在 Node.js 中，我们可以使用 <code>readdir</code> 或 <code>readdirSync</code> 来读取文件夹</p><h4 id="语法">语法:</h4><ul><li><code>fs.readdir(path[, options], callback)</code></li><li><code>fs.readdirSync(path[, options])</code></li></ul><h4 id="参数说明">参数说明:</h4><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><h4 id="示例代码">示例代码:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;../论语/&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;../论语/&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h3 id="5-3-rndir-删除文件夹">5 - 3 rndir 删除文件夹</h3><p>在 Node.js 中，我们可以使用 <code>rndir</code> 或 <code>rndirSync</code> 来删除文件夹</p><h4 id="语法-2">语法:</h4><ul><li><code>fs.rmdir(path[, options], callback)</code></li><li><code>fs.rmdirSync(path[, options])</code></li></ul><h4 id="参数说明-2">参数说明:</h4><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><h4 id="示例代码-2">示例代码:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./page&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//异步递归删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./1&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归删除&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步递归删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(<span class="string">&#x27;./x&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="注意">注意:</h4><ul><li><code>rmdir</code> 和 <code>rmdirSync</code> 只能删除空文件夹，如果要删除非空文件夹，需要先删除文件夹内的所有文件和子文件夹。</li><li>在实际应用中，为了确保安全，建议在删除文件夹之前先确认其内容是否为预期，避免误删重要数据。</li></ul><h3 id="六、查看资源状态">六、查看资源状态</h3><p>在 Node.js 中，我们可以使用 <code>stat</code> 或 <code>statSync</code> 来查看资源的详细信息</p><h4 id="语法：">语法：</h4><ul><li><code>fs.stat(path[, options], callback)</code></li><li><code>fs.statSync(path[, options])</code></li></ul><h4 id="参数说明：">参数说明：</h4><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><h4 id="示例代码：">示例代码：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步获取状态</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步获取状态</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./data.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="说明：">说明：</h4><p><code>stat</code> 方法返回的 <code>data</code> 对象包含了文件或文件夹的各种信息，例如：</p><ul><li><code>data.isFile()</code>：判断是否为文件</li><li><code>data.isDirectory()</code>：判断是否为目录（文件夹）</li><li><code>data.size</code>：文件大小（字节数）</li><li><code>data.birthtime</code>：创建时间</li><li><code>data.mtime</code>：最后修改时间等。</li></ul><p>通过这些信息可以更深入地了解文件或文件夹的属性和状态，以便进行相应的处理操作。</p><h4 id="结果值对象结构：">结果值对象结构：</h4><ul><li>size：文件体积</li><li>birthtime：创建时间</li><li>mtime：最后修改时间</li><li>isFile：检测是否为文件</li><li>isDirectory：检测是否为文件夹</li><li>…</li></ul><h3 id="七、相对路径问题">七、相对路径问题</h3><p><code>fs</code> 模块对资源进行操作时，路径的写法有两种：</p><ul><li>相对路径<ul><li><code>./座右铭.txt</code> ：当前目录下的座右铭.txt</li><li><code>座右铭.txt</code> ：等同于上面的写法</li><li><code>../座右铭.txt</code> ：当前目录的上一级目录中的座右铭.txt</li></ul></li><li>绝对路径<ul><li><code>D:/Program Files</code> ：windows 系统下的绝对路径</li><li><code>/usr/bin</code> ：Linux 系统下的绝对路径</li></ul></li></ul><p>相对路径中所谓的 <strong>当前目录</strong> ，指的是 <strong>命令行的工作目录</strong> ，而并非是文件的所在目录。所以当命令行的工作目录与文件所在目录不一致时，会出现一些 BUG。</p><h3 id="八、-dirname">八、__dirname</h3><ul><li><code>__dirname</code> 与 <code>require</code> 类似，都是 Node.js 环境中的“全局”变量。</li><li><code>__dirname</code> 保存着当前文件所在目录的绝对路径，可以使用 <code>__dirname</code> 与文件名拼接成绝对路径。</li></ul><h4 id="代码示例：-2">代码示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/data.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>使用 <code>fs</code> 模块的时候，尽量使用 <code>__dirname</code> 将路径转化为绝对路径，这样可以避免相对路径产生的 Bug</li></ul><h3 id="练习：批量重命名">练习：批量重命名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取code文件夹</span></span><br><span class="line"><span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;./code&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line">files.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//拆分文件名</span></span><br><span class="line">  <span class="keyword">let</span> data = item.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> [num, name] = data;</span><br><span class="line">  <span class="comment">//判断</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>(num) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    num = <span class="string">&#x27;0&#x27;</span> + num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建新的文件名</span></span><br><span class="line">  <span class="keyword">let</span> newName = num + <span class="string">&#x27;-&#x27;</span> + name;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newName);</span><br><span class="line">  <span class="comment">//重命名</span></span><br><span class="line">  fs.<span class="title function_">renameSync</span>(<span class="string">`./code/<span class="subst">$&#123;item&#125;</span>`</span>, <span class="string">`./code/<span class="subst">$&#123;newName&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果把02删除了 能不能把03变02，04变03？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 code 文件夹</span></span><br><span class="line"><span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;./code&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照文件名中的序号进行排序（假设文件名格式类似 &quot;01 - something&quot;）</span></span><br><span class="line">files.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> numA = <span class="built_in">parseInt</span>(a.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">const</span> numB = <span class="built_in">parseInt</span>(b.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> numA - numB;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新命名文件</span></span><br><span class="line">files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newNum = index + <span class="number">1</span>; <span class="comment">// 新的序号从 1 开始</span></span><br><span class="line">  <span class="comment">// 补零处理</span></span><br><span class="line">  <span class="keyword">if</span> (newNum &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    newNum = <span class="string">&#x27;0&#x27;</span> + newNum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> data = item.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> [oldNum, name] = data;</span><br><span class="line">  <span class="keyword">let</span> newName = newNum + <span class="string">&#x27;-&#x27;</span> + name;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`重命名：<span class="subst">$&#123;item&#125;</span> -&gt; <span class="subst">$&#123;newName&#125;</span>`</span>);</span><br><span class="line">  fs.<span class="title function_">renameSync</span>(<span class="string">`./code/<span class="subst">$&#123;item&#125;</span>`</span>, <span class="string">`./code/<span class="subst">$&#123;newName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="path-模块">path 模块</h2><p>path 模块提供了 <strong>操作路径</strong> 的功能，我们将介绍如下几个较为常用的几个 API：</p><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 <strong>常用</strong></td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table><h4 id="代码示例：-3">代码示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolve</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>);<span class="comment">//window \ linux /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析路径</span></span><br><span class="line"><span class="keyword">let</span> pathname = <span class="string">&#x27;D:/program file/nodejs/node.exe&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(pathname));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径基础名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(pathname))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径的目录名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(pathname));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径的扩展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(pathname));</span><br></pre></td></tr></table></figure><h2 id="HTTPS协议">HTTPS协议</h2><h3 id="一、概念">一、概念</h3><p>HTTP（hypertext transport protocoI）协议；中文叫超文本传输协议。 是一种基于 TCP/IP 的应用层通信协议。 这个协议详细规定了浏览器和万维网服务器之间互相通信的规则。 协议中主要规定了两个方面的内容：</p><ul><li>客户端：用来向服务器发送数据，可以被称之为请求报文。</li><li>服务端：向客户端返回数据，可以被称之为响应报文。</li></ul><p><strong>报文</strong>：可以简单理解为就是一堆字符串。</p><p>【离婚协议，保密协议 https协议就是浏览器和服务器之间的协议】</p><p>如果我们想看到请求和响应的报文我们要下载一个软件叫fiddler</p><p><img src="./nodejs(1).assets/image-20250609221641878.png" alt="image-20250609221641878"></p><h3 id="二、请求报文的组成">二、请求报文的组成</h3><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求体</li></ul><h3 id="三、HTTP-的请求行">三、HTTP 的请求行</h3><ul><li><p>请求方法（get、post、put、delete等）</p></li><li><p>请求 URL（统一资源定位器）</p><ul><li><p>例如：</p><p><a href="http://www.baidu.com:80/index.html?a=100&amp;b=200#logo">http://www.baidu.com:80/index.html?a=100&amp;b=200#logo</a></p><ul><li>http: 协议（https、ftp、ssh等）</li><li><a href="http://www.baidu.com/">www.baidu.com</a> 域名</li><li>80 端口号</li><li>/index.html 路径</li><li>a=100&amp;b=200 查询字符串</li><li>#logo 哈希（锚点链接）</li></ul></li></ul></li><li><p>HTTP 协议版本号</p></li></ul><p>查询字符串和路径有什么区别？比如我要去买煎饼果子，这个就是路径，我说我煎饼果子要加辣椒要加根肠那就查询字符串</p><p><img src="./nodejs(1).assets/image-20250609222915592.png" alt="image-20250609222915592"></p><h3 id="四、HTTP-请求头">四、HTTP 请求头</h3><p>格式：『头名：头值』 常见的请求头有：</p><table><thead><tr><th>请求头</th><th>解释</th></tr></thead><tbody><tr><td>Host</td><td>主机名</td></tr><tr><td>Connection</td><td>连接的设置 keep - alive（保持连接）；close（关闭连接）</td></tr><tr><td>Cache - Control</td><td>缓存控制 max - age = 0（没有缓存）</td></tr><tr><td>Upgrade - Insecure - Requests</td><td>将网页中的 http 请求转化为 https 请求（很少用）老网站升级</td></tr><tr><td>User - Agent</td><td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端，一般在 PC 端和手机端的区分</td></tr><tr><td>Accept</td><td>设置浏览器接收的数据类型</td></tr><tr><td>Accept - Encoding</td><td>设置接收的压缩方式</td></tr><tr><td>Accept - Language</td><td>设置接收的语言 q = 0.7 为喜好系数，满分为 1</td></tr><tr><td>Cookie</td><td>后面单独讲</td></tr></tbody></table><h3 id="五、HTTP-的请求体">五、HTTP 的请求体</h3><p>请求体内容的格式是非常灵活的， （可以是空）==&gt; GET 请求， （也可以是字符串，还可以是 JSON）===&gt; POST 请求 例如：</p><ul><li>字符串：<code>keywords=手机&amp;price=2000</code></li><li>JSON：<code>&#123;&quot;keywords&quot;:&quot;手机&quot;,&quot;price&quot;:2000&#125;</code></li></ul><h3 id="六、响应报文的组成">六、响应报文的组成</h3><ul><li>响应行</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span> OK</span><br></pre></td></tr></table></figure><ul><li>HTTP/1.1：HTTP 协议版本号</li><li>200：响应状态码 404 Not Found 500 Internal Server Error 还有一些状态码，参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></li><li>OK：响应状态描述</li></ul><blockquote><p>响应状态码和响应字符串关系是一一对应的。</p></blockquote><ul><li>响应头</li></ul><table><thead><tr><th style="text-align:center">响应头</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">Cache - Control</td><td style="text-align:center">缓存控制 （private 私有，只允许客户端缓存数据）</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">链接设置</td></tr><tr><td style="text-align:center">Content - Type</td><td style="text-align:center">设置响应体的数据类型以及字符集（如：text/html;charset=utf - 8 ，表示响应体为 html，字符集 utf - 8）</td></tr><tr><td style="text-align:center">Content - Length</td><td style="text-align:center">响应体的长度，单位为字节</td></tr></tbody></table><ul><li><strong>空行</strong></li><li><strong>响应体</strong> 响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</li></ul><h3 id="七、创建-HTTP-服务">七、创建 HTTP 服务</h3><p>地址 ==》 寻找收件人</p><p><strong>IP</strong> ==》 寻找网络设备</p><p>IP也称为【IP地址】，本身是一个数字标识 例如 192.168.1.3</p><p>IP 用来标识网络中的设备，实现设备间通信</p><p><img src="./nodejs(1).assets/image-20250610001641463.png" alt="image-20250610001641463"></p><p><strong>IP的分类</strong></p><p>32Bit IPV4  已经不够</p><p>如何解决？</p><p>共享IP</p><p>区域共享  家庭共享</p><p>局域网IP（又称之为私网IP）在这个网络里面我们的设备是可以相互通信的，比如手机可以给电脑发一个文件，电脑可以发一个视频给手机，这些都是可以的。但是如果你想跟小伙伴开黑，打视频那这个是做不到的。必须连接互联网，去通信公司办理业务，国内主要有三家电信，联通，移动。师傅会上门帮你的路由器接一根线，然后你的路由器就会得到广域网IP或公网IP，我们说所的共享IP其实是公网IP</p><p><strong>本地回环IP地址</strong></p><p>127.0.0.1 其实就是本机</p><p>127.0.0.1~127.255.255.254</p><p><img src="./nodejs(1).assets/image-20250610083606917.png" alt="image-20250610083606917"></p><p>IP标准分类 ： <a href="https://zhuanlan.zhihu.com/p/193729352">https://zhuanlan.zhihu.com/p/193729352</a></p><p><strong>端口</strong></p><p>端口举例</p><p><img src="./nodejs(1).assets/image-20250610083823911.png" alt="image-20250610083823911"></p><p>应用程序的数字标识</p><p>一台现代计算机有65536 个端口（0~65535）</p><p>一个应用程序可以使用一个或多个端口</p><p>端口的主要作用：实现不同主机应用程序之间的通信</p><p>身份转换~ 到后端啦</p><p>使用 nodejs 创建 HTTP 服务</p><h4 id="7-1-操作步骤">7.1 操作步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建服务对象 create 创建 server 服务</span></span><br><span class="line"><span class="comment">// request 意为请求，是对请求报文的封装对象，通过 request 对象可以获得请求报文的数据</span></span><br><span class="line"><span class="comment">// response 意为响应，是对响应报文的封装对象，通过 response 对象可以设置响应报文</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听端口，启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动，端口 9000 监听中...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="7-2测试">7.2测试</h4><p>浏览器请求对应端口<br><a href="http://127.0.0.1:9000">http://127.0.0.1:9000</a></p><h4 id="7-3注意事项">7.3注意事项</h4><p>1.命令行ctr1+c停止服务<br>2.当服务启动后，更新代码必须重启服务才能生效<br>3.响应内容中文乱码的解决办法</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="symbol">&#x27;content</span>-<span class="keyword">type</span><span class="string">&#x27;,&#x27;</span>text/html;charset=utf-<span class="number">8</span>&#x27;);</span><br></pre></td></tr></table></figure><p>4.端口号被占用</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Error</span><span class="symbol">:listen</span> <span class="variable constant_">EADDRINUSE</span><span class="symbol">:address</span> already <span class="keyword">in</span> use <span class="number">9000</span></span><br></pre></td></tr></table></figure><p>1)关闭当前正在运行监听端口的服务（使用较多）<br>2)修改其他端口号</p><h4 id="HTTP协议默认端口">HTTP协议默认端口</h4><ul><li>HTTP协议默认端口是80。</li><li>HTTPS协议的默认端口是443。</li><li>HTTP服务开发常用端口有3000、8080、8090、9000等。</li></ul><h4 id="端口被占用处理">端口被占用处理</h4><p>如果端口被其他程序占用，可以使用<strong>资源监视器</strong>找到占用端口的程序，然后使用<strong>任务管理器</strong>关闭对应的程序。</p><h3 id="八、浏览器查看HTTP报文">八、浏览器查看HTTP报文</h3><p>f12</p><h3 id="九、获取HTTP请求报文">九、获取HTTP请求报文</h3><p>想要获取请求的数据，需要通过request对象</p><table><thead><tr><th>含义</th><th>语法</th><th>重点掌握</th></tr></thead><tbody><tr><td>请求方法</td><td>request.method</td><td>*</td></tr><tr><td>请求版本</td><td>request.httpVersion</td><td></td></tr><tr><td>请求路径</td><td>request.url</td><td>*</td></tr><tr><td>URL 路径</td><td>require(‘url’).parse(request.url).pathname</td><td>*</td></tr><tr><td>URL 查询字符串</td><td>require(‘url’).parse(request.url, true).query</td><td>*</td></tr><tr><td>请求头</td><td>request.headers</td><td>*</td></tr><tr><td>请求体</td><td>request.on(‘data’, function(chunk){})request.on(‘end’, function(){});</td><td></td></tr></tbody></table><h3 id="注意事项：">注意事项：</h3><ol><li>request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li>request.headers 将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 / 』</li><li>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</li></ol><p><strong>9.1 练习</strong></p><p>按照以下要求搭建 HTTP 服务</p><table><thead><tr><th>请求类型(方法)</th><th>请求地址</th><th>响应体结果</th></tr></thead><tbody><tr><td>get</td><td>/login</td><td>登录页面</td></tr><tr><td>get</td><td>/reg</td><td>注册页面</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">//2、建立服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;url,method&#125; = request; <span class="comment">//对象的解构赋值</span></span><br><span class="line">    <span class="comment">//设置响应头信息</span></span><br><span class="line">    <span class="comment">//解决中文乱码</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(url == <span class="string">&quot;/register&quot;</span> &amp;&amp; method == <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;注册页面&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(url==<span class="string">&quot;/login&quot;</span> &amp;&amp; method == <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;登录页面&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务启动中....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="十、设置-HTTP-响应报文">十、设置 HTTP 响应报文</h3><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td><code>response.statusCode</code></td></tr><tr><td>设置响应状态描述</td><td><code>response.statusMessage</code>（用的非常少）</td></tr><tr><td>设置响应头信息</td><td><code>response.setHeader('头名', '头值')</code></td></tr><tr><td>设置响应体</td><td><code>response.write('xx')``response.end('xxx')</code></td></tr></tbody></table><h3 id="write-和-end-的两种使用情况："><code>write</code> 和 <code>end</code> 的两种使用情况：</h3><h4 id="1-write-和-end-的结合使用（响应体相对分散）">1. <code>write</code> 和 <code>end</code> 的结合使用（响应体相对分散）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">end</span>(); <span class="comment">// 每一个请求，在处理的时候必须要执行 end 方法的</span></span><br></pre></td></tr></table></figure><h4 id="2-单独使用-end-方法（响应体相对集中）">2. 单独使用 <code>end</code> 方法（响应体相对集中）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="10-1-练习">10.1 练习</h3><p>搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有隔行换色效果，且点击单元格能高亮显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;meta charset=&quot;UTF - 8&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;meta http - equiv=&quot;X - UA - Compatible&quot; content=&quot;IE = edge&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name=&quot;viewport&quot; content=&quot;width = device - width, initial - scale = 1.0&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;style&gt;</span></span><br><span class="line"><span class="string">        td&#123;</span></span><br><span class="line"><span class="string">          padding: 20px 40px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        table tr:nth-child(odd)&#123;</span></span><br><span class="line"><span class="string">          background: #819dc0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        table tr:nth-child(even)&#123;</span></span><br><span class="line"><span class="string">          background: #f5de19;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        table, td&#123;</span></span><br><span class="line"><span class="string">          border: 1px solid #000;</span></span><br><span class="line"><span class="string">          border-collapse: collapse;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;table border=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">      &lt;/table&gt;</span></span><br><span class="line"><span class="string">      &lt;script&gt;</span></span><br><span class="line"><span class="string">        //获取所有的 td</span></span><br><span class="line"><span class="string">        let tds = document.querySelectorAll(&#x27;td&#x27;);</span></span><br><span class="line"><span class="string">        //遍历</span></span><br><span class="line"><span class="string">        tds.forEach(item =&gt; &#123;</span></span><br><span class="line"><span class="string">          item.onclick = function () &#123;</span></span><br><span class="line"><span class="string">            this.style.background = &#x27;#222&#x27;;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">      &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="核心代码解释：">核心代码解释：</h3><ul><li>在 HTML 表格标签<code>&lt;table&gt;</code>中，通过<code>nth - child(odd)</code>和<code>nth - child(even)</code>实现了表格的隔行换色效果。</li><li>在<code>&lt;script&gt;</code>标签中，通过<code>document.querySelectorAll('td')</code>获取到了所有的<code>&lt;td&gt;</code>标签元素，并通过遍历遍历为每个<code>td</code>元素添加了<code>onclick</code>事件。</li><li>在<code>onclick</code>事件中，通过<code>this.style.background = '#222'</code>实现了点击单元格时的高亮显示效果。</li></ul><h3 id="HTTP-服务搭建核心逻辑：">HTTP 服务搭建核心逻辑：</h3><ul><li>首先导入<code>http</code>模块。</li><li>然后通过<code>http.createServer</code>创建了一个 HTTP 服务，在这个服务的回调函数中，返回了包含上述 HTML 代码的响应体。</li><li>最后通过<code>server.listen</code>监听了<code>8080</code>端口，并在服务启动时打印了提示信息。</li></ul><p>优化：</p><p>有没有办法解决在这里面写html代码有高亮和提示？</p><p>table.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF - 8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http</span> <span class="attr">-</span> <span class="attr">equiv</span>=<span class="string">&quot;X - UA - Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE = edge&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width = device - width, initial - scale = 1.0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd)&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#819dc0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even)&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#f5de19</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>, <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取所有的 td</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tds = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//遍历</span></span></span><br><span class="line"><span class="language-javascript">        tds.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          item.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;#222&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//读取文件内容</span></span><br><span class="line">  <span class="keyword">let</span> html = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/table.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">end</span>(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="十一、网页资源的基本加载过程">十一、网页资源的基本加载过程</h3><p>网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等。 理解了这个内容对于后续的学习与成长有非常大的帮助</p><p>如果要对上面哪个练习进行进一步的拆分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取请求url的路径</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(pathname === <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> html = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/10_table.html&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(html); <span class="comment">//设置响应体</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname === <span class="string">&#x27;/index.css&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> css = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.css&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(css); <span class="comment">//设置响应体</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname === <span class="string">&#x27;/index.js&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> js = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.js&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(js); <span class="comment">//设置响应体</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十二、静态资源服务">十二、静态资源服务</h3><p><code>静态资源</code>是指 内容长时间不发生改变的资源 ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文 件等</p><p><code>动态资源</code>是指 内容经常更新的资源 ，例如百度首页，网易首页，京东搜索列表页面等</p><h3 id="12-1网站根目录或静态资源目录">**12.1网站根目录或静态资源目录 **</h3><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 静态资源目录 ，也称之为 网站根目录</p><blockquote><p>思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？</p></blockquote><p>以打开文件夹</p><h3 id="12-2-网页中的-URL">12.2 网页中的 URL</h3><p>网页中的 URL 主要分为两大类：相对路径与绝对路径</p><h4 id="12-2-1-绝对路径">12.2.1 绝对路径</h4><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td><code>http://yjy.com/web</code></td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td><code>//yjy.com/web</code></td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td><code>/web</code></td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr></tbody></table><h4 id="12-2-2-相对路径">12.2.2 相对路径</h4><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 <code>计算</code>，得到完整 URL 后，再发送请求，学习阶段用的较多</p><p>例如当前网页 url 为 <code>http://www.yjy.com/course/h5.html</code></p><table><thead><tr><th>形式</th><th>最终的 URL</th></tr></thead><tbody><tr><td><code>.css/app.css</code></td><td><code>http://www.yjy.com/course/css/app.css</code></td></tr><tr><td><code>js/app.js</code></td><td><code>http://www.yjy.com/course/js/app.js</code></td></tr><tr><td><code>../img/logo.png</code></td><td><code>http://www.yjy.com/img/logo.png</code></td></tr><tr><td><code>../../mp4/show.mp4</code></td><td><code>http://www.yjy.com/mp4/show.mp4</code></td></tr></tbody></table><h4 id="12-2-3-网页中使用-URL-的场景小结">12.2.3 网页中使用 URL 的场景小结</h4><p>包括但不限于如下场景：</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 src</li><li>video audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><h4 id="12-3-设置资源类型（mime类型）">12.3 设置资源类型（mime类型）</h4><p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p>mime 类型结构： [type]/[subType]</p><p>例如： text/html  text/css  image/jpeg  image/png  application/json</p><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line"><span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line"><span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line"><span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line"><span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line"><span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line"><span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line"><span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line"><span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个 HTTP 服务，端口为 9000，满足如下需求</span></span><br><span class="line"><span class="comment"> * GET  /index.html        响应  page/index.html 的文件内容</span></span><br><span class="line"><span class="comment"> * GET  /css/app.css       响应  page/css/app.css 的文件内容</span></span><br><span class="line"><span class="comment"> * GET  /images/logo.png   响应  page/images/logo.png 的文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//声明一个变量</span></span><br><span class="line"><span class="keyword">let</span> mimes = &#123;</span><br><span class="line">  <span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">  <span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">  <span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">  <span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line">  <span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line">  <span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(request.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>)&#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">405</span>;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;405 Method Not Allowed&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取请求url的路径</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">  <span class="comment">//声明一个变量</span></span><br><span class="line">  <span class="keyword">let</span> root = __dirname + <span class="string">&#x27;/page&#x27;</span>;</span><br><span class="line">  <span class="comment">// let root = __dirname + &#x27;/../&#x27;;</span></span><br><span class="line">  <span class="comment">//拼接文件路径</span></span><br><span class="line">  <span class="keyword">let</span> filePath = root + pathname;</span><br><span class="line">  <span class="comment">//读取文件 fs 异步 API</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">      <span class="comment">//设置字符集</span></span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">      <span class="comment">//判断错误的代号</span></span><br><span class="line">      <span class="keyword">switch</span>(err.<span class="property">code</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ENOENT&#x27;</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;EPERM&#x27;</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">403</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">500</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;Internal Server Error&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    <span class="keyword">let</span> ext = path.<span class="title function_">extname</span>(filePath).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取对应的类型</span></span><br><span class="line">    <span class="keyword">let</span> type = mimes[ext];</span><br><span class="line">    <span class="keyword">if</span>(type)&#123;</span><br><span class="line">      <span class="comment">//匹配到了                          text/html;charset=utf-8</span></span><br><span class="line">      <span class="keyword">if</span>(ext === <span class="string">&#x27;html&#x27;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type + <span class="string">&#x27;;charset=utf-8&#x27;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//没有匹配到</span></span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应文件内容</span></span><br><span class="line">    response.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于未知的资源类型，可以选择 <code>application/octet-stream</code> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <strong>下载</strong> 效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的方法以及路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123;url, method&#125; = request;</span><br><span class="line">    <span class="comment">// 判断请求方式以及请求路径</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; url === <span class="string">&quot;/index.html&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要响应文件中的内容</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; url === <span class="string">&quot;/css/app.css&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要响应文件中的内容</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/public/css/app.css&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这里缺少设置Content-Type响应头</span></span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/css&#x27;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; url === <span class="string">&quot;/js/app.js&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要响应文件中的内容</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/public/js/app.js&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这里缺少设置Content-Type响应头</span></span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript&#x27;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 404响应</span></span><br><span class="line">        response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;80端口正在启动中....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="改进-HTTP-服务器代码（文件路径封装）">改进 HTTP 服务器代码（文件路径封装）</h4><p><strong>原始问题</strong>：之前的代码每增加一个请求路径就需要进行单独判断，不够灵活和完善。</p><p><strong>改进思路</strong>：将文件路径相关逻辑进行封装，实现通用的文件请求处理。</p><p><strong>改进代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的方法已经路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123; url, method &#125; = request;</span><br><span class="line">    <span class="comment">// 文件夹路径</span></span><br><span class="line">    <span class="keyword">let</span> rootDir = __dirname + <span class="string">&#x27;/public&#x27;</span>;</span><br><span class="line">    <span class="comment">// 拼接文件路径</span></span><br><span class="line">    <span class="keyword">let</span> filePath = rootDir + url;</span><br><span class="line">    <span class="comment">// 读取文件内容</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 如果出现错误，响应 404 状态码</span></span><br><span class="line">            response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">            response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 响应文件内容</span></span><br><span class="line">            response.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;80 端口正在启动中....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="12-4-GET-和-POST-请求场景小结">12.4 GET 和 POST 请求场景小结</h4><h4 id="GET-请求的情况：">GET 请求的情况：</h4><ul><li>在地址栏直接输入 url 访问</li><li>点击 a 链接</li><li>link 标签引入 css</li><li>script 标签引入 js</li><li>img 标签引入图片</li><li>form 标签中的 method 为 get （不区分大小写）</li><li>ajax 中的 get 请求</li></ul><h4 id="POST-请求的情况：">POST 请求的情况：</h4><ul><li>form 标签中的 method 为 post （不区分大小写）</li><li>AJAX 的 post 请求</li></ul><h3 id="十三、GET-和-POST-请求的区别">十三、GET 和 POST 请求的区别</h3><p>GET 和 POST 是 HTTP 协议请求的两种方式。</p><ul><li>作用：GET 主要用来获取数据，POST 主要用来提交数据</li><li>参数位置：GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求 POST 带参数请求是将参数放到请求体中</li><li>安全性：POST 请求相对 GET 安全一些，因为在浏览器中参数会暴露在地址栏</li><li>GET 请求大小有限制，一般为 2K，而 POST 请求则没有大小限制</li></ul><h2 id="Node-js-模块化">Node.js 模块化</h2><h4 id="一、介绍">一、介绍</h4><ol><li><strong>什么是模块化与模块？</strong> 将一个复杂的程序文件依据一定规则 (规范) 拆分成多个文件的过程称之为 <strong>模块化</strong></li></ol><p>其中拆分出的 <strong>每个文件就是一个模块</strong>，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p><ol><li><strong>什么是模块化项目？</strong> 编码时是按照模块一个一个编码的，整个项目就是一个模块化的项目</li><li><strong>模块化好处</strong> 下面是模块化的一些好处：<ul><li>防止命名冲突</li><li>高复用性</li><li>高维护性</li></ul></li></ol><h3 id="二、模块暴露数据">二、模块暴露数据</h3><h4 id="2-1-模块初体验">2.1 模块初体验</h4><p>可以通过下面的操作步骤，快速体验模块化：</p><ol><li><strong>创建 <code>me.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tiemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;贴膜....&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露数据</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = tiemo;</span><br></pre></td></tr></table></figure><ol><li><strong>创建 <code>index.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> tiemo = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">tiemo</span>();</span><br></pre></td></tr></table></figure><h3 id="2-2-暴露数据">2.2 暴露数据</h3><p>模块暴露数据的方式有两种：</p><ol><li><code>module.exports = value</code></li><li><code>exports.name = value</code></li></ol><p>使用时有几点注意：</p><ul><li><code>module.exports</code> 可以暴露 <strong>任意</strong> 数据</li><li>不能使用 <code>exports = value</code> 的形式暴露数据，模块内部 <code>module</code> 与 <code>exports</code> 的隐式关系 <code>exports = module.exports = &#123;&#125;</code>，<code>require</code> 返回的是目标模块中 <code>module.exports</code> 的值</li></ul><p><img src="./nodejs(1).assets/image-20250610110144642.png" alt="image-20250610110144642"></p><h3 id="三、导入（引入）模块">三、导入（引入）模块</h3><p>在模块中使用 <code>require</code> 传入文件路径即可引入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>require</code> 使用的一些注意事项：</p><ol><li>对于自己创建的模块，导入时路径建议写 <code>相对路径</code> ，且不能省略 <code>./</code> 和 <code>../</code></li><li><code>js</code> 和 <code>json</code> 文件导入时可以不用写后缀，<code>c/c++</code> 编写的 <code>node</code> 扩展文件也可以不写后缀，但是一般用不到</li><li>如果导入其他类型的文件，会以 <code>js</code> 文件进行处理</li><li>如果导入的路径是个文件夹，则会 <strong>首先</strong> 检测该文件夹下 <code>package.json</code> 文件中 <code>main</code> 属性对应的文件，</li></ol><p>如果存在则导入，反之如果文件不存在会报错。</p><p>如果 <code>main</code> 属性不存在，或者 <code>package.json</code> 不存在，则会尝试导入文件夹下的 <code>index.js</code> 和 <code>index.json</code>，</p><p>如果还是没找到，就会报错 5. 导入 <code>node.js</code> 内置模块时，直接 <code>require</code> 模块的名字即可，无需加 <code>./</code> 和 <code>../</code></p><h3 id="四、导入模块的基本流程">四、导入模块的基本流程</h3><p>这里我们介绍一下 <code>require</code> 导入 <strong>自定义模块</strong> 的基本流程</p><ol><li>将相对路径转为绝对路径, 定位目标文件</li><li>缓存检测</li><li>读取目标文件代码</li><li>包裹为一个函数并执行 (自执行函数)。通过 <code>arguments.callee.toString()</code> 查看自执行函数</li><li>缓存模块的值</li><li>返回 <code>module.exports</code> 的值</li></ol><p><img src="./nodejs(1).assets/image-20250610110529684.png" alt="image-20250610110529684"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 伪代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>)&#123;</span><br><span class="line">  <span class="comment">//1. 将相对路径转为绝对路径，定位目标文件</span></span><br><span class="line">  <span class="keyword">let</span> absolutePath = path.<span class="title function_">resolve</span>(__dirname, file);</span><br><span class="line">  <span class="comment">//2. 缓存检测</span></span><br><span class="line">  <span class="keyword">if</span>(caches[absolutePath])&#123;</span><br><span class="line">    <span class="keyword">return</span> caches[absolutePath];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3. 读取文件的代码</span></span><br><span class="line">  <span class="keyword">let</span> code = fs.<span class="title function_">readFileSync</span>(absolutePath).<span class="title function_">toString</span>();</span><br><span class="line">  <span class="comment">//4. 包裹为一个函数 然后执行</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable language_">module</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> test = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;yjy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = test;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;)(<span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname)</span><br><span class="line">  <span class="comment">//5. 缓存结果</span></span><br><span class="line">  caches[absolutePath] = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">  <span class="comment">//6. 返回 module.exports 的值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、CommonJS-规范">五、CommonJS 规范</h3><p><code>module.exports</code>、<code>exports</code> 以及 <code>require</code> 这些都是 <strong>CommonJS</strong> 模块化规范中的内容。</p><p>而 Node.js 是实现了 <strong>CommonJS</strong> 模块化规范，二者关系有点像 <code>JavaScript</code> 与 <code>ECMAScript</code>。</p><p>CommonJS 规范规定：</p><ul><li><p>每个文件就是一个模块，拥有独立的作用域。</p></li><li><p>模块内部通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span></span><br></pre></td></tr></table></figure><p>暴露数据。</p><ul><li><code>module.exports</code> 可以暴露任意类型的值（对象、函数、基本数据类型等）。</li><li><code>exports</code> 实际上是 <code>module.exports</code> 的一个引用（<code>exports = module.exports = &#123;&#125;</code>），所以通过 <code>exports.xxx = value</code> 的方式可以为 <code>module.exports</code> 对象添加属性。但不能直接给 <code>exports</code> 赋值（如 <code>exports = value</code>），否则会切断与 <code>module.exports</code> 的联系。</li></ul></li><li><p>模块之间通过 <code>require</code> 函数导入其他模块暴露出来的数据。</p></li></ul><p>在 Node.js 中遵循 CommonJS 规范进行模块化开发，使得代码的组织和复用更加方便、规范。例如：</p><p><strong>模块 A（<code>moduleA.js</code>）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴露一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = add;</span><br></pre></td></tr></table></figure><p><strong>模块 B（<code>moduleB.js</code>）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块 A</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">add</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><p>这样，通过 <code>module.exports</code> 暴露函数，<code>require</code> 导入并使用，实现了模块间的功能复用和代码组织。</p><p>CommonJS 规范在服务器端（如 Node.js 环境）应用广泛，它的同步加载机制（在服务器端，文件读取等操作相对快速且对同步性要求较高）是其特点之一。但在浏览器端，由于同步加载会阻塞页面渲染等问题，后来出现了其他模块化规范（如 AMD、CMD、ES6 模块等）来适应浏览器环境的需求。不过在 Node.js 中，CommonJS 规范依然是核心的模块化方式，并且非常适合服务器端的开发场景，如构建 Web 服务器、处理文件 I/O 等任务时的代码模块化组织。</p><h2 id="包管理工具">包管理工具</h2><p>像极了哆啦A梦的口袋</p><h3 id="一、概念介绍">一、概念介绍</h3><h3 id="1-1-包是什么">1.1 包是什么</h3><p>『包』英文单词是 <code>package</code> ，代表了一组特定功能的源码集合</p><h3 id="1-2-包管理工具">1.2 包管理工具</h3><p>管理『包』的应用软件，可以对「包」进行 <code>下载安装</code> ， <code>更新</code> ， <code>删除</code> ， <code>上传</code> 等操作</p><p>借助包管理工具，可以快速开发项目，提升开发效率</p><p>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 <code>掌握好包管理工具非常重要</code></p><h3 id="1-3-常用的包管理工具">1.3 常用的包管理工具</h3><p>下面列举了前端常用的包管理工具</p><ul><li><code>npm</code></li><li><code>yarn</code></li><li><code>cnpm</code></li></ul><h3 id="二、npm">二、npm</h3><p><code>npm</code> 全称 <code>Node Package Manager</code> ，翻译为中文意思是『Node 的包管理工具』</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm` 是 `node.js` 官方内置的包管理工具，是 `必须要掌握住的工具</span><br></pre></td></tr></table></figure><h4 id="2-1-npm-的安装">2.1 npm 的安装</h4><p>node.js 在安装时会 自动安装 npm ，所以如果你已经安装了 node.js，可以直接使用 npm 可以通过 npm -v 查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p><h3 id="2-2-npm-基本使用">2.2 npm 基本使用</h3><h4 id="2-2-1-初始化">2.2.1 初始化</h4><p>创建一个空目录，然后以此目录作为工作目录 启动命令行工具 ，执行 npm init</p><p>npm init 命令的作用是将文件夹初始化为一个『包』，</p><p>交互式创建 package.json 文件 package.json 是包的配置文件，每个包都必须要有 package.json</p><p>package.json 内容示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01_npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1-npm&quot;</span><span class="punctuation">,</span>       #包的名字</span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>      #包的版本</span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>       #包的描述</span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>      #包的入口文件</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>             #脚本配置</span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>            #作者</span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span>         #开源证书</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="初始化的过程中还有一些注意事项：">初始化的过程中还有一些注意事项：</h3><ol><li>package name( 包名 )不能使用中文、大写，默认值是 文件夹的名称 ，所以文件夹名称也不能使用中文和大写</li><li>version( 版本号 )要求 x.x.x 的形式定义， x 必须是数字，默认值是 1.0.0</li><li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></li><li>package.json 可以手动创建与修改</li><li>使用 npm init -y 或者 npm init --yes 极速创建 package.json</li></ol><h3 id="2-2-2-搜索包">2.2.2 搜索包</h3><p>搜索包的方式有两种：</p><ol><li>命令行：<a href="https://docs.npmjs.com/cli/v9/commands/npm%E2%88%92search">npms/search关键字</a><a href="https://docs.npmjs.com/cli/v9/commands/npm%E2%88%92search">npms/search关键字</a></li><li>网站搜索：网址是 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li></ol><p>经常有同学问，『我怎样才能精准找到我需要的包？』</p><p>这个事儿需要大家在实践中不断的积累，通过看文章，看项目去学习去积累。</p><h3 id="2-2-3-下载安装包">2.2.3 下载安装包</h3><p>我们可以通过 <code>npm install</code> 和 <code>npm i</code> 命令安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">npm install &lt;包名&gt;</span><br><span class="line">npm i &lt;包名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 移除数组当中的重复内容</span></span><br><span class="line">npm install <span class="built_in">uniq</span></span><br><span class="line">npm i <span class="built_in">uniq</span></span><br></pre></td></tr></table></figure><p>运行之后文件夹下会增加两个资源：</p><ul><li><code>node_modules</code> 文件夹：存放下载的包</li><li><code>package-lock.json</code>：包的锁文件，用来锁定包的版本</li></ul><blockquote><p>安装 <code>uniq</code> 之后， <code>uniq</code> 就是当前这个包的一个依赖包，有时会简称为依赖。</p><p>比如我们创建一个包名字为 <code>A</code>，<code>A</code> 中安装了包名字是 <code>B</code>，我们就说 <code>B</code> 是 <code>A</code> 的一个依赖包，也会说 <code>A</code> 依赖 <code>B</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">const</span> uniq = <span class="built_in">require</span>(<span class="string">&#x27;uniq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniq</span>(arr));</span><br></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">D</span>:\Note\code\nodejs\test&gt;npm i uniq</span><br><span class="line"></span><br><span class="line">added <span class="number">1</span> <span class="built_in">package</span> <span class="keyword">in</span> <span class="number">4</span>s</span><br><span class="line"></span><br><span class="line"><span class="name">D</span>:\Note\code\nodejs\test&gt;node index.js</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br></pre></td></tr></table></figure><h3 id="2-2-4-require-导入-npm-包基本流程">2.2.4 <code>require</code> 导入 npm 包基本流程</h3><ol><li>在当前文件夹下 <code>node_modules</code> 中寻找同名的文件夹。</li><li>在上级目录中下的 <code>node_modules</code> 中寻找同名的文件夹，直至找到磁盘根目录。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="comment">// const uniq = require(&#x27;uniq&#x27;);//导入的是node_modules目录下的uniq模块 推荐这个 优势：找不到会往上找 直到找到 /</span></span><br><span class="line"><span class="comment">// const uniq = require(&#x27;./node_modules/uniq&#x27;);  //导入文件夹  逻辑是去这个文件夹当中找package.json当中main属性所对应的文件</span></span><br><span class="line"><span class="comment">// const uniq = require(&#x27;./node_modules/uniq/uniq.js&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniq</span>(arr));</span><br></pre></td></tr></table></figure><h3 id="2-3-生产环境与开发环境">2.3 生产环境与开发环境</h3><p>开发环境是程序员<code>专门用来写代码</code>的环境，一般是指程序员的电脑，开发环境的项目一般<code>只能程序员自己访问</code>。</p><p>生产环境是项目<code>代码正式运行</code>的环境，一般是指正式的服务器电脑，生产环境的项目一般<code>每个客户都可以访问</code>。</p><h3 id="2-4-生产依赖与开发依赖">2.4 生产依赖与开发依赖</h3><p>我们可以在安装时设置选项来区分依赖的类型，目前分为两类：</p><table><thead><tr><th>类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td>生产依赖</td><td>npm i -S uniq / npm i --save uniq</td><td>-S 等效于 --save，-S 是默认选项包信息保存在 package.json 中 dependencies 属性</td></tr><tr><td>开发依赖</td><td>npm i -D less / npm i --save-dev less</td><td>-D 等效于 --save-dev包信息保存在 package.json 中 devDependencies 属性</td></tr></tbody></table><blockquote><p>举个例子方便大家理解，比如说做蛋炒饭需要大米，油，葱，鸡蛋，锅，煤气，铲子等。</p><p>其中锅，煤气，铲子属于开发依赖，只在制作阶段使用。</p><p>而大米，油，葱，鸡蛋属于生产依赖，在制作与最终食用都会用到。</p><p>所以开发依赖是只在开发阶段使用的依赖包，而生产依赖是开发阶段和最终上线运行阶段都用到的依赖包。</p></blockquote><h3 id="2-5-全局安装">2.5 全局安装</h3><p>我们可以执行安装选项 <code>-g</code> 进行全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nodemon </span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">D</span>:\<span class="keyword">Note</span>\code\nodejs\<span class="keyword">test</span>&gt;npm i -<span class="keyword">g</span> nodemon </span><br><span class="line"></span><br><span class="line">added 29 packages <span class="keyword">in</span> 4s</span><br><span class="line"></span><br><span class="line">4 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  <span class="keyword">run</span> `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>全局安装完成之后就可以在命令行的任何位置运行 <code>nodemon</code> 命令。 该命令的作用是 <strong>自动重启</strong> <code>node</code> 应用程序。</p><p><strong>说明</strong>：</p><ul><li>全局安装的命令不受工作目录位置影响。</li><li>可以通过 <code>npm root -g</code> 查看全局安装包的位置。</li><li>不是所有的包都适合全局安装，只有全局类的工具才适合，可以通过 <strong>查看包的官方文档</strong> 来确定安装方式。</li></ul><h3 id="2-5-1-修改-Windows-执行策略">2.5.1 修改 Windows 执行策略</h3><p><img src="./nodejs(1).assets/image-20250610120349606.png" alt="image-20250610120349606"></p><p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p><ol><li>以 管理员身份 打开 powershell 命令行</li></ol><p><img src="./nodejs(1).assets/image-20250610120420231.png" alt="image-20250610120420231"></p><ol start="2"><li>键入命令 set-ExecutionPolicy remoteSigned</li></ol><p><img src="./nodejs(1).assets/image-20250610120442762.png" alt="image-20250610120442762"></p><ol start="3"><li><p>键入 A 然后敲回车 👌 4. 如果不生效，可以尝试重启 vscode</p><p>npm i -g nodemon</p></li></ol><blockquote><p>D:\Note\code\nodejs\test&gt;npm install -g nodemon</p><p>changed 29 packages in 2s</p><p>D:\Note\code\nodejs\test&gt;nodemon index.js<br>‘nodemon’ 不是内部或外部命令，也不是可运行的程序</p></blockquote><p>解决：</p><blockquote><p>遇到的 “nodemon’ 不是内部或外部命令，也不是可运行的程序或批处理文件” 的问题，通常是由于以下几个原因造成的，即使您已经配置了环境变量：</p><ol><li><p><strong>环境变量配置未生效或配置错误：</strong></p><ul><li><p><strong>未重启命令行工具或计算机：</strong> 修改环境变量后，需要重新打开命令行工具（如 CMD 或 PowerShell）才能使新的环境变量生效。有时甚至需要重启计算机。</p></li><li><p>路径错误：</p><p>请确保您在系统环境变量</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Path</span></span><br></pre></td></tr></table></figure><p>中添加的路径是</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span></span><br></pre></td></tr></table></figure><p>全局安装模块的正确路径。您可以通过以下命令查看</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span></span><br></pre></td></tr></table></figure><p>的全局安装路径（prefix）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure><p>假设该命令返回的路径是</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">C</span>:\Users\YourUsername\AppData\Roaming\npm</span><br></pre></td></tr></table></figure><p>(这只是一个例子，您的路径可能不同)，那么您需要确保这个路径（或者这个路径下的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules\<span class="string">.bin</span></span><br></pre></td></tr></table></figure><p>目录，具体取决于您的 Node.js 和 npm 版本及配置）被添加到了系统环境变量</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Path</span></span><br></pre></td></tr></table></figure><p>中。</p></li><li><p><strong>用户变量与系统变量：</strong> 建议将 Node.js 和 npm 相关的路径添加到系统变量的 <code>Path</code> 中，而不是用户变量的 <code>Path</code> 中，以确保所有用户和所有终端都能访问。</p></li><li><p><strong>NODE_PATH 环境变量：</strong> 有些教程可能会提到配置 <code>NODE_PATH</code>，但 <code>NODE_PATH</code> 主要用于 <code>require</code> 模块时的查找路径，对于命令行工具的识别，关键在于 <code>Path</code> 环境变量。</p></li></ul></li><li><p><strong>npm 全局安装路径问题：</strong></p><ul><li><strong>自定义了全局安装路径：</strong> 如果您之前通过 <code>npm config set prefix &quot;新的路径&quot;</code> 命令修改了 npm 的全局安装路径，那么您需要将这个“新的路径”添加到系统环境变量 <code>Path</code> 中。 例如，如果您将全局路径设置为 <code>D:\nodejs\node_global</code>，那么 <code>D:\nodejs\node_global</code> 需要在 <code>Path</code> 环境变量中。</li><li><strong><code>node_modules\.bin</code> 目录：</strong> 全局安装的命令行工具（如 nodemon）的可执行文件通常位于全局安装路径下的 <code>node_modules\.bin</code> 目录。请确保这个 <code>.bin</code> 目录也包含在 <code>Path</code> 环境变量中，或者其父目录已在 <code>Path</code> 中且 npm 能正确处理。</li></ul></li><li><p><strong>安装问题：</strong></p><ul><li><p>nodemon 未成功全局安装：</p><p>虽然提示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">changed</span> <span class="number">29</span> packages</span><br></pre></td></tr></table></figure><p>，但可能存在某些原因导致</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>没有正确安装到预期的全局位置。您可以尝试重新全局安装</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g nodemon</span><br><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure></li><li><p><strong>权限问题：</strong> 在某些情况下，尤其是在 Windows 上，可能需要以管理员权限运行命令行工具来执行全局安装命令 <code>npm install -g nodemon</code>。</p></li></ul></li><li><p><strong>PowerShell 执行策略 (如果使用 PowerShell)：</strong></p><ul><li><p>如果是在 PowerShell 中运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>命令，并且遇到类似“无法加载文件…因为在此系统上禁止运行脚本”的错误，这可能是由于 PowerShell 的执行策略限制。 你可以尝试以管理员身份打开 PowerShell，然后运行以下命令来更改执行策略：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>然后按提示输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Y</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">A</span></span><br></pre></td></tr></table></figure><p>。</p><p>请注意：</p><p>更改执行策略可能会带来安全风险，请了解其含义后再操作。</p></li></ul></li></ol><p><strong>排查步骤建议：</strong></p><ol><li><p><strong>确认 npm 全局路径：</strong><br>打开新的命令行窗口，输入 <code>npm config get prefix</code>，记录下输出的路径。</p></li><li><p>检查环境变量 <code>Path</code>：</p><ul><li>打开“我的电脑”或“此电脑” -&gt; 右键“属性” -&gt; “高级系统设置” -&gt; “环境变量”。</li><li>在“系统变量”下找到名为 <code>Path</code> 的变量，双击编辑。</li><li>确认上一步得到的 <code>npm</code> 全局路径（例如 <code>C:\Users\YourUsername\AppData\Roaming\npm</code> 或者您自定义的全局路径如 <code>D:\nodejs\node_global</code>）是否已经添加到了 <code>Path</code> 变量列表中。 如果没有，请添加它。</li></ul></li><li><p><strong>重启命令行/计算机：</strong> 修改环境变量后，务必关闭所有已打开的命令行窗口，然后重新打开一个新的，或者直接重启计算机。</p></li><li><p>重新尝试运行 <code>nodemon</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nodemon --version</span><br><span class="line">nodemon index.js</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 <code>nodemon</code> 是否在全局路径下：</strong><br>导航到 <code>npm config get prefix</code> 返回的路径，查看该路径下是否有 <code>nodemon</code> 或 <code>nodemon.cmd</code> 文件，以及是否存在 <code>node_modules\.bin</code> 文件夹，里面是否有 <code>nodemon</code> 相关文件。</p></li><li><p>尝试使用 <code>npx</code>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npx</span></span><br></pre></td></tr></table></figure><p>是 npm 5.2+ 自带的工具，可以运行本地或远程 npm 包中的命令，即使没有全局安装。可以临时用它来测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx nodemon index.js</span><br></pre></td></tr></table></figure><p>如果这个命令能成功运行，说明</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>本身是好的，问题更可能出在全局环境配置上。</p></li></ol><p>如果以上步骤都无法解决问题，请提供更多信息，例如：</p><ul><li><code>npm config get prefix</code> 的输出结果。</li><li>您的环境变量 <code>Path</code> 的具体内容截图或文本。</li><li>Node.js 和 npm 的版本 (<code>node -v</code> 和 <code>npm -v</code>)。</li></ul></blockquote><h3 id="2-5-2-环境变量-Path">2.5.2 环境变量 Path</h3><p>Path 是操作系统的一个环境变量，可以设置一些文件夹的路径，在当前工作目录下找不到可执行文件 时，就会在环境变量 Path 的目录中挨个的查找，如果找到则执行，如果没有找到就会报错</p><p><img src="./nodejs(1).assets/image-20250610120647937.png" alt="image-20250610120647937"></p><blockquote><h2 id="补充说明">补充说明</h2><ul><li>如果希望某个程序在任何工作目录下都能正常运行，就应该将该程序的所在目录配置到环境变量 <code>Path</code> 中。</li><li>windows 下查找命令的所在位置<ul><li><code>cmd</code> 命令行 中执行 <code>where nodemon</code>。</li><li><code>powershell</code> 命令行 执行 <code>get-command nodemon</code>。</li></ul></li></ul></blockquote><h3 id="2-6-安装包依赖">2.6 安装包依赖</h3><p>在项目协作中有一个常用的命令就是 <code>npm i</code>，通过该命令可以依据 <code>package.json</code> 和 <code>package-lock.json</code> 的依赖声明安装项目依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><code>node_modules</code> 文件夹大多数情况都不会存入版本库。</p><p>因为node_modules 非常大 我们不用把它上传到git上，只需要有package-lock.json 就可以了</p><h3 id="2-7-安装指定版本的包">2.7 安装指定版本的包</h3><p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令。</p><h3 id="格式">格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &lt;包名@版本号&gt;</span><br></pre></td></tr></table></figure><h3 id="示例">示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery@1.11.2</span><br></pre></td></tr></table></figure><h3 id="2-8-删除依赖">2.8 删除依赖</h3><p>项目中可能需要删除某些不需要的包，可以使用下面的命令：</p><ul><li><strong>局部删除</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall <span class="built_in">uniq</span></span><br><span class="line">npm r <span class="built_in">uniq</span></span><br></pre></td></tr></table></figure><ul><li><strong>全局删除</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm remove -g nodemon</span><br></pre></td></tr></table></figure><h3 id="2-9-配置命令别名">2.9 配置命令别名</h3><p>通过配置命令别名可以更简单的执行命令。</p><ul><li><strong>配置package.json中的 scripts 属性</strong>：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>配置完成之后，可以使用别名执行命令</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>start</code> 别名比较特别，使用时可以省略 <code>run</code> ：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="补充说明：">补充说明：</h4><ul><li><code>npm start</code> 是项目中常用的一个命令，一般用来启动项目。</li><li><code>npm run</code> 有自动向上级目录查找的特性，跟 <code>require</code> 函数也一样。</li><li>对于陌生的项目，我们可以通过查看 <code>scripts</code> 属性来参考项目的一些操作。</li></ul><h3 id="三、cnpm">三、cnpm</h3><h4 id="3-1-介绍">3.1 介绍</h4><p>cnpm 是一个淘宝构建的 <code>npmjs.com</code> 的完整镜像，也称为「淘宝镜像」，网址 <a href="https://npmmirror.com/">https://npmmirror.com/</a></p><p>cnpm 服务器部署在国内阿里云服务器上，可以提高包的下载速度</p><p>官方也提供了一个全局工具包 <code>cnpm</code>，操作命令与 npm 大体相同</p><h4 id="3-2-安装">3.2 安装</h4><p>我们可以通过 npm 来安装 cnpm 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h4 id="3-3-操作命令">3.3 操作命令</h4><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td><code>cnpm init</code> / <code>cnpm init</code></td></tr><tr><td>安装包</td><td><code>cnpm i uniq</code> <code>cnpm i -S uniq</code> <code>cnpm i -D uniq</code> <code>cnpm i -g nodemon</code></td></tr><tr><td>安装项目依赖</td><td><code>cnpm i</code></td></tr><tr><td>删除</td><td><code>cnpm runiq</code></td></tr></tbody></table><h4 id="3-4-npm-配置淘宝镜像">3.4 npm 配置淘宝镜像</h4><p>用 npm 也可以使用淘宝镜像，配置的方式有两种：</p><ul><li>直接配置</li><li>工具配置</li></ul><h4 id="3-4-1-直接配置">3.4.1 直接配置</h4><p>执行如下命令即可完成配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><h4 id="3-4-2-工具配置（示例使用-nrm-工具）">3.4.2 工具配置（示例使用 <code>nrm</code> 工具）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. **安装 nrm**</span><br><span class="line">npm i -g nrm</span><br></pre></td></tr></table></figure><ol><li><strong>修改镜像</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao </span><br></pre></td></tr></table></figure><ol><li><strong>检查是否配置成功（选做）</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list </span><br></pre></td></tr></table></figure><blockquote><p>检查 <code>registry</code> 地址是否为 <code>https://registry.npmmirror.com/</code>，如果 <strong>是</strong> 则表明成功</p></blockquote><h3 id="补充说明-2">补充说明:</h3><ol><li><strong>建议使用第二种方式（nrm 配置）</strong> 进行镜像配置，因为后续修改起来会比较方便</li><li>虽然 <code>cnpm</code> 可以提高速度，但是 <code>npm</code> 也可以通过淘宝镜像进行加速，所以 <code>npm</code> 的使用率还是高于 <code>cnpm</code></li></ol><h3 id="四、yarn">四、yarn</h3><h3 id="4-1-yarn-介绍">4.1 yarn 介绍</h3><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a></p><h3 id="4-2-yarn-特点">4.2 yarn 特点</h3><p>yarn 官方宣称的一些特点</p><ul><li>速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，因此安装速度更快</li><li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li><li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作</li></ul><h3 id="4-3-yarn-安装">4.3 yarn 安装</h3><p>我们可以使用 npm 安装 yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure><h3 id="4-4-yarn-常用命令">4.4 yarn 常用命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td><code>yarn init</code> / <code>yarn init -y</code></td></tr><tr><td>安装包</td><td><code>yarn add uniq</code>（生产依赖）<code>yarn add less --dev</code>（开发依赖）<code>yarn global add nodemon</code>（全局安装）</td></tr><tr><td>删除包</td><td><code>yarn remove uniq</code>（删除项目依赖包）<code>yarn global remove nodemon</code>（全局删除包）</td></tr><tr><td>安装项目依赖</td><td><code>yarn</code></td></tr><tr><td>运行命令别名</td><td><code>yarn &lt;别名&gt;</code>（不需要添加 <code>run</code>）</td></tr></tbody></table><h3 id="4-5-yarn-配置淘宝镜像">4.5 yarn 配置淘宝镜像</h3><p>可以通过如下命令配置淘宝镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><p>可以通过 <code>yarn config list</code> 查看 yarn 的配置项</p><h3 id="4-6-npm-和-yarn-选择">4.6 npm 和 yarn 选择</h3><p>大家可以根据不同的场景进行选择：</p><ol><li><strong>个人项目</strong> 如果是个人项目，哪个工具都可以，可以根据自己的喜好来选择。</li><li><strong>公司项目</strong> 如果是公司项目要根据项目代码来选择，可以通过锁文件判断项目的包管理工具：<ul><li><code>npm</code> 的锁文件为 <code>package-lock.json</code></li><li><code>yarn</code> 的锁文件为 <code>yarn.lock</code></li></ul></li></ol><p><strong>包管理工具不要混用，切记，切记，切记</strong></p><h3 id="五、管理发布包">五、管理发布包</h3><h4 id="5-1-创建与发布">5.1 创建与发布</h4><p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p><ol><li>创建文件夹，并创建文件 <code>index.js</code>，在文件中声明函数，使用 <code>module.exports</code> 暴露。</li><li>npm 初始化工具包，<code>package.json</code> 填写包的信息（包的名字是唯一的）。</li><li>注册账号 <a href="https://www.npmjs.com/signup%E3%80%82">https://www.npmjs.com/signup。</a></li><li>激活账号（一定要激活账号）。</li><li>修改为官方的官方镜像（命令行中运行 <code>nrm use npm</code>）。</li><li>命令行下 <code>npm login</code> 填写相关用户信息。</li><li>命令行下 <code>npm publish</code> 提交包。</li></ol><h4 id="5-2-更新包">5.2 更新包</h4><p>后续可以对自己发布的包进行更新，操作步骤如下：</p><ol><li>更新包中的代码。</li><li>测试代码是否可用。</li><li>修改 <code>package.json</code> 中的版本号。</li><li>发布更新。<code>npm publish</code>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h3 id="六、扩展内容">六、扩展内容</h3><p>在很多语言中都有包管理工具，比如：</p><table><thead><tr><th>语言</th><th>包管理工具</th></tr></thead><tbody><tr><td>PHP</td><td>composer</td></tr><tr><td>Python</td><td>pip</td></tr><tr><td>Java</td><td>maven</td></tr><tr><td>Go</td><td>go mod</td></tr><tr><td>JavaScript</td><td>npm / yarn / cnpm / other</td></tr><tr><td>Ruby</td><td>rubyGems</td></tr></tbody></table><p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是【软件包】</p><table><thead><tr><th>操作系统</th><th>包管理工具</th><th>网址</th></tr></thead><tbody><tr><td>Centos</td><td>yum</td><td><a href="https://packages.debian.org/stable/">https://packages.debian.org/stable/</a></td></tr><tr><td>Ubuntu</td><td>apt</td><td><a href="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></td></tr><tr><td>MacOS</td><td>homebrew</td><td><a href="https://brew.sh/">https://brew.sh/</a></td></tr><tr><td>Windows</td><td>chocolatey</td><td><a href="https://chocolatey.org/">https://chocolatey.org/</a></td></tr></tbody></table><h2 id="nvm">nvm</h2><h3 id="一、介绍-2">一、介绍</h3><p>nvm 全称 <code>Node Version Manager</code>，顾名思义它是用来管理 node 版本的工具，方便切换不同版本的 Node.js</p><h3 id="二、使用">二、使用</h3><p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p><h4 id="2-1-下载安装">2.1 下载安装</h4><p>首先先下载 nvm，下载地址 <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> ，选择 <code>nvm-setup.exe</code> 下载即可</p><h4 id="2-2-常用命令">2.2 常用命令</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>nvm list available</code></td><td>显示所有可以下载的 Node.js 版本</td></tr><tr><td><code>nvm list</code></td><td>显示已安装的版本</td></tr><tr><td><code>nvm install 18.12.1</code></td><td>安装 18.12.1 版本的 Node.js</td></tr><tr><td><code>nvm install latest</code></td><td>安装最新版的 Node.js</td></tr><tr><td><code>nvm uninstall 18.12.1</code></td><td>删除某个版本的 Node.js</td></tr><tr><td><code>nvm use 18.12.1</code></td><td>切换 18.12.1 的 Node.js</td></tr></tbody></table><h2 id="ExpressJS">ExpressJS</h2><h3 id="一、express-介绍">一、express 介绍</h3><p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用（HTTP 服务）</p><h3 id="二、express-使用">二、express 使用</h3><h4 id="2-1-express-下载">2.1 express 下载</h4><p>express 本身是一个 npm 包，所以可以通过 npm 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure><h4 id="2-2-express-初体验">2.2 express 初体验</h4><p>大家可以按照这个步骤进行操作：</p><ol><li>创建 JS 文件，键入如下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello express server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口监听为 3000...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>命令行下执行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">&lt;文件名&gt;</span></span><br><span class="line"><span class="title"># 或者</span></span><br><span class="line"><span class="title">nodemon</span> <span class="tag">&lt;文件名&gt;</span></span><br></pre></td></tr></table></figure><p>访问 <code>http://127.0.0.1:3000/home</code> 可查看结果。</p><h3 id="三、express-路由">三、express 路由</h3><h4 id="3-1-什么是路由">3.1 什么是路由</h4><p>官方定义：路由确定了应用程序如何响应客户端对特定端点的请求。</p><h4 id="3-2-路由的使用">3.2 路由的使用</h4><p>一个路由的组成有<code>请求方法</code>，<code>路径</code>和<code>回调函数</code>组成。</p><p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.&lt;method&gt;(path, callback)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 get 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;网站首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;我才是真正的首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 post 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配所有的请求方法</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;1 秒钟为您找到相关结果约 100,000,000 个&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义 404 路由</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口监听为 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3-获取请求参数">3.3 获取请求参数</h3><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">httpVersion</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. express 独有的获取报文的方式</span></span><br><span class="line">  <span class="comment">//获取查询字符串</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// [相对重要]</span></span><br><span class="line">  <span class="comment">// 获取指定的请求头</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="title function_">get</span>(<span class="string">&#x27;host&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求报文的获取&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;启动成功....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-4-获取路由参数">3.4 获取路由参数</h3><p>路由参数指的是 URL 路径中的参数（数据）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:id.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;商品详情，商品 id 为&#x27;</span> + req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="练习">练习</h3><hr><h3 id="根据路由参数响应歌手的信息">根据路由参数响应歌手的信息</h3><p>路径结构如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/singer/</span><span class="number">1</span>.html</span><br></pre></td></tr></table></figure><p>显示歌手的<code>姓名</code>和<code>图片</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;singers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M0000025NhlN2yWrP4.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jay Chou&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">4558</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;林俊杰&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M000001BLpXF2DyJe2.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JJ Lin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">4286</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;G.E.M. 邓紫棋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M000001fNHEf1SFEFN.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gloria Tang&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">13948</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;薛之谦&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M000002J4UUk29y8BY.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">5062</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="四、express-响应设置">四、express 响应设置</h3><p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/response&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    res.<span class="property">statusMessage</span> = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;响应体&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. express 的响应方法</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>); <span class="comment">//设置响应状态码</span></span><br><span class="line">    res.<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>);<span class="comment">//设置响应头</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;中文响应不乱码&#x27;</span>);<span class="comment">//设置响应体 send 不会乱码 会内置一个请求头</span></span><br><span class="line">    <span class="comment">//连贯操作</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>).<span class="title function_">send</span>(<span class="string">&#x27;你好朋友&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 其他响应</span></span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>);<span class="comment">//重定向</span></span><br><span class="line">    res.<span class="title function_">download</span>(<span class="string">&#x27;/package.json&#x27;</span>);<span class="comment">//下载响应</span></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;&#125;);<span class="comment">//响应 JSON</span></span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/home.html&#x27;</span>) <span class="comment">//响应文件内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五、express中间件">五、express中间件</h3><h2 id="5-1-什么是中间件">5.1 什么是中间件</h2><p>中间件（Middleware）本质是一个回调函数</p><p>中间件函数 可以像路由回调一样访问 请求对象（request），响应对象（response）</p><h2 id="5-2-中间件的作用">5.2 中间件的作用</h2><p>中间件的作用 就是 使用函数封装公共操作，简化代码</p><h2 id="5-3-中间件的类型">5.3 中间件的类型</h2><ul><li>全局中间件</li><li>路由中间件</li></ul><p>好比是我们去做高铁，我们都是先把行李过一次安检，我们就叫它安检门吧，这个安检门就是属于全局中间件，然后进入这个安检门以后会有很多通道我们需要刷卡进入 这就是路由中间件。</p><p>我们必须先检表再上高铁，不然就会产生很多混乱</p><h3 id="5-3-1-定义全局中间件">5.3.1 定义全局中间件</h3><p>每一个请求 到达服务端之后 都会执行全局中间件函数</p><p>声明中间件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> recordMiddleware = <span class="keyword">function</span>(<span class="params">request, response, next</span>)&#123;</span><br><span class="line">    <span class="comment">//实现功能代码</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">    <span class="comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./nodejs(1).assets/image-20250610174956850.png" alt="image-20250610174956850"></p><p>应用中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(recordMiddleware);</span><br></pre></td></tr></table></figure><p>声明时可以直接将匿名函数传递给 <code>use</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第一个中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-3-2-多个全局中间件">5.3.2 多个全局中间件</h2><p><code>express</code> 允许使用 <code>app.use()</code> 定义多个全局中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第一个中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第二个中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-3-3-定义路由中间件">5.3.3 定义路由中间件</h2><p>如果只需要对某一些路由进行功能封装，则就需要路由中间件</p><p>调用格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>, <span class="string">&#x27;中间件函数&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>, <span class="string">&#x27;中间件函数1&#x27;</span>, <span class="string">&#x27;中间件函数2&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-4-静态资源中间件">5.4 静态资源中间件</h3><p><code>express</code> 内置处理静态资源的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>)); </span><br><span class="line"><span class="comment">//如果访问的内容经常变化，还是需要设置路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由，</span></span><br><span class="line"><span class="comment">//则谁书写在前，优先执行谁</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口启动....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="注意事项">注意事项:</h4><ol><li><code>index.html</code> 文件为默认打开的资源</li><li>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</li><li>路由响应动态资源，静态资源中间件响应静态资源</li></ol><h3 id="5-5-获取请求体数据-body-parser">5.5 获取请求体数据 body - parser</h3><p><code>express</code> 可以使用 <code>body - parser</code> 包处理请求体</p><h4 id="第一步：安装">第一步：安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i body - parser</span><br></pre></td></tr></table></figure><h4 id="第二步：导入-body-parser-包">第二步：导入 body - parser 包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body - parser&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="第三步：获取中间件函数">第三步：获取中间件函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 querystring 格式的请求体</span></span><br><span class="line"><span class="keyword">let</span> urlParser = bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">// 处理 JSON 格式的请求体</span></span><br><span class="line"><span class="keyword">let</span> jsonParser = bodyParser.<span class="title function_">json</span>();</span><br></pre></td></tr></table></figure><h4 id="第四步：设置路由中间件，然后使用-request-body-来获取请求体数据">第四步：设置路由中间件，然后使用 <code>request.body</code> 来获取请求体数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, urlParser, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求体数据</span></span><br><span class="line">    <span class="comment">// console.log(request.body);</span></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>.<span class="property">username</span>);</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>.<span class="property">userpass</span>);</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;获取请求体数据&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取到的请求体数据:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Object: null prototype] &#123; username: <span class="string">&#x27;admin&#x27;</span>, userpass: <span class="string">&#x27;123456&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="六、Router">六、Router</h3><h4 id="6-1-什么是-Router">6.1 什么是 Router</h4><p><code>express</code> 中的 <code>Router</code> 是一个完整的中间件和路由系统，可以看做是一个小型的 <code>app</code> 对象。</p><h4 id="6-2-Router-作用">6.2 Router 作用</h4><p>对路由进行模块化，更好的管理路由。</p><h4 id="6-3-Router-使用">6.3 Router 使用</h4><ul><li>创建独立的 <code>JS</code> 文件（<code>homeRouter.js</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">t<span class="comment">//1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建路由器对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 在 router 对象身上添加路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/cart&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;购物车&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 暴露</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><ul><li>主文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//5.引入子路由文件</span></span><br><span class="line"><span class="keyword">const</span> homeRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/homeRouter&#x27;</span>);</span><br><span class="line"><span class="comment">//6.设置和使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(homeRouter);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000 端口启动....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="七、EJS-模板引擎">七、EJS 模板引擎</h3><h2 id="7-1-什么是模板引擎">7.1 什么是模板引擎</h2><p>模板引擎是分离用户界面和业务数据的一种技术。</p><h2 id="7-2-什么是-EJS">7.2 什么是 EJS</h2><p>EJS 是一个高效的 Javascript 的模板引擎。</p><ul><li>官网: <a href="https://ejs.co/">https://ejs.co/</a></li><li>中文站: <a href="https://ejs.bootcss.com/">https://ejs.bootcss.com/</a></li></ul><h2 id="7-3-EJS-初体验">7.3 EJS 初体验</h2><h3 id="下载安装-EJS">下载安装 EJS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ejs --save</span><br></pre></td></tr></table></figure><h3 id="代码示例">代码示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入ejs</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.定义数据</span></span><br><span class="line"><span class="keyword">let</span> person = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王二麻子&#x27;</span>];</span><br><span class="line"><span class="comment">// 3.ejs解析模板返回结构</span></span><br><span class="line"><span class="comment">// &lt;%%&gt; 是ejs解析内容的标记，作用是输出当前表达式的执行结构</span></span><br><span class="line"><span class="keyword">let</span> html = ejs.<span class="title function_">render</span>(<span class="string">&#x27;&lt;%= person.join(&quot;, &quot;) %&gt;&#x27;</span>, &#123;<span class="attr">person</span>:person&#125;);</span><br><span class="line"><span class="comment">// 4.输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p>命令行下运行</p><h3 id="7-4-EJS常用语法">7.4 EJS常用语法</h3><h4 id="执行JS代码">执行JS代码</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;% code %&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输出转义的数据到模板上">输出转义的数据到模板上</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= code %&gt;</span><br></pre></td></tr></table></figure><h4 id="输出非转义的数据到模板上">输出非转义的数据到模板上</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%- code %&gt;</span><br></pre></td></tr></table></figure><h1>MongoDB</h1><h2 id="一、简介">一、简介</h2><h3 id="1-1-MongoDB是什么">1.1 MongoDB是什么</h3><p>MongoDB是一个基于分布式文件存储的数据库，官方地址 <a href="https://www.mongodb.com/">https://www.mongodb.com/</a></p><h3 id="1-2-数据库是什么">1.2 数据库是什么</h3><p>数据库（DataBase）是按照数据结构来组织、存储和管理数据的&lt;应用程序&gt;</p><h3 id="1-3-数据库的作用">1.3 数据库的作用</h3><p>数据库的主要作用就是&lt;管理数据&gt;，对数据进行&lt;增（c）、删（d）、改（u）、查（r）&gt;</p><h3 id="1-4-数据库管理数据的特点">1.4 数据库管理数据的特点</h3><p>相比于纯文件管理数据，数据库管理数据有如下特点：</p><ol><li>速度更快</li><li>扩展性更强</li><li>安全性更强</li></ol><h3 id="1-5-为什么选择-MongoDB">1.5 为什么选择 MongoDB</h3><p>操作语法与 JavaScript 类似，容易上手，学习成本低</p><h2 id="二、核心概念">二、核心概念</h2><p>Mongodb中有三个重要概念需要掌握</p><ul><li>数据库（database）：数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</li><li>集合（collection）：集合类似于JS中的数组，在集合中可以存放很多文档</li><li>文档（document）：文档是数据库中的最小单位，类似于JS中的对象</li></ul><p><strong>大家可以通过 JSON 文件来理解 Mongodb 中的概念</strong></p><ul><li>一个 JSON 文件 好比是一个 数据库，一个 Mongodb 服务下可以有 N 个数据库</li><li>JSON 文件中的一级属性的数组值 好比是 集合</li><li>数组中的对象好比是 文档</li><li>对象中的属性有时也称之为 字段</li></ul><p><strong>一般情况下</strong></p><ul><li>一个项目使用一个数据库</li><li>一个集合会存储同一种类型的数据</li></ul><h2 id="三、下载安装与启动">三、下载安装与启动</h2><p>下载地址： <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a> 建议选择 zip 类型，通用性更强</p><p>配置步骤如下：</p><p>1&gt; 将压缩包移动到 <code>C:\Program Files</code> 下，然后解压</p><p>2&gt; 创建 <code>C:\data\db</code> 目录，mongodb 会将数据默认保存在这个文件夹</p><p>3&gt; 以 mongodb 中 <code>bin</code> 目录作为工作目录，启动命令行</p><p>4&gt; 运行命令 <code>mongod</code></p><h1>会话控制</h1><h2 id="一、介绍-3">一、介绍</h2><p>所谓会话控制就是 <strong>对会话进行控制</strong></p><p>HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端， <strong>无法区分用户</strong></p><p>而产品中又大量存在的这样的需求， 所以我们需要通过 <strong>会话控制</strong> 来解决该问题</p><p>常见的会话控制技术有三种：</p><ul><li>cookie</li><li>session</li><li>token</li></ul><h2 id="二、cookie">二、cookie</h2><h3 id="2-1-cookie-是什么">2.1 cookie 是什么</h3><p>cookie 是 HTTP 服务器发送到用户浏览器并保存在本地的一小块数据</p><p><strong>cookie 是保存在浏览器端的一小块数据</strong></p><p><strong>cookie 是按照域名划分保存的</strong></p><p>简单示例：</p><table><thead><tr><th>域名</th><th>cookie</th></tr></thead><tbody><tr><td><a href="https://www.baidu.com/">https://www.baidu.com</a></td><td>a=100; b=200</td></tr><tr><td><a href="https://www.bilibili.com/">https://www.bilibili.com</a></td><td>xid=1020abce121; hm=112411213</td></tr><tr><td><a href="http://jd.com">jd.com</a></td><td>x=100; ocw=12414cce</td></tr></tbody></table><h3 id="2-2-cookie-的特点">2.2 cookie 的特点</h3><p>浏览器向服务器发送请求时，会自动将 当前域名下 可用的 cookie 设置在请求头中，然后传递给服务器</p><p>这个请求头的名字也叫 cookie ，所以将 cookie 理解为一个 HTTP 的请求头也是可以的 2.3 cookie 的运行流程 填写账号和密码校验身份，校验通过后下发 cookie</p><p><img src="./nodejs(1).assets/image-20250610180549565.png" alt="image-20250610180549565"></p><p>有了 cookie 之后，后续向服务器发送请求时，就会自动携带 cookie</p><p><img src="./nodejs(1).assets/image-20250610180611114.png" alt="image-20250610180611114"></p><h2 id="三、Session">三、Session</h2><h3 id="3-1-Session-是什么">3.1 Session 是什么</h3><p>Session 是保存在服务器端的一块儿数据，保存当前访问用户的相关信息。</p><h3 id="3-2-Session-的作用">3.2 Session 的作用</h3><p>实现会话控制，可以识别用户的身份，快速获取当前用户的相关信息。</p><h3 id="3-3-Session-运行流程">3.3 Session 运行流程</h3><ol><li>用户填写账号和密码校验身份，校验通过后创建 <code>session</code> 信息。</li><li>服务器将 <code>session_id</code> 的值通过响应头返回给浏览器。</li><li>当浏览器再次发送请求时，会将 <code>session_id</code> 携带在请求头中。</li><li>服务器接收到请求后，根据 <code>session_id</code> 找到对应的 <code>session</code> 信息，从而知道当前用户的身份等相关信息。</li></ol><p><img src="./nodejs(1).assets/image-20250610180718738.png" alt="image-20250610180718738"></p><p>有了 cookie，下次发送请求时会自动携带 cookie，服务器通过 cookie 中的 session_id 的值确定用 户的身份</p><p><img src="./nodejs(1).assets/image-20250610180739400.png" alt="image-20250610180739400"></p><p>类似比喻：好比去理发店，一般会有会员说是如果不充值35 充值25且这一次免费，充值玩后它会给你一张卡，然后他会再它的笔记本上记录信息 以后要剪头发只要去笔记本里看看有没有你的信息即可。</p><h1>四、session 和 cookie 的区别</h1><p>cookie 和 session 的区别主要有如下几点：</p><h2 id="1-存在的位置">1. 存在的位置</h2><ul><li>cookie：浏览器端</li><li>session：服务端</li></ul><h2 id="2-安全性">2. 安全性</h2><ul><li>cookie 是以明文的方式存放在客户端的，安全性相对较低</li><li>session 存放于服务器中，所以安全性相对较好</li></ul><h2 id="3-网络传输量">3. 网络传输量</h2><ul><li>cookie 设置内容过多会增大报文体积，会影响传输效率</li><li>session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</li></ul><h2 id="4-存储限制">4. 存储限制</h2><ul><li>浏览器限制单个 cookie 保存的数据不能超过 4K，且单个域名下的存储数量也有限制</li><li>session 数据存储在服务器中，所以没有这些限制</li></ul>]]></content>
    
    
    <summary type="html">Nodejs</summary>
    
    
    
    <category term="nodejs" scheme="https://yjyrichard.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://yjyrichard.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>numpy与pandas</title>
    <link href="https://yjyrichard.github.io/posts/47f8bb74.html"/>
    <id>https://yjyrichard.github.io/posts/47f8bb74.html</id>
    <published>2025-07-29T04:51:26.337Z</published>
    <updated>2025-08-01T10:12:16.957Z</updated>
    
    <content type="html"><![CDATA[<h1>大模型技术之numpy与pandas</h1><h2 id="第-1-章-环境搭建">第 1 章 环境搭建</h2><h3 id="1-1-Anaconda">1.1 Anaconda</h3><h4 id="1-1-1-什么是Anaconda">1.1.1 什么是Anaconda</h4><p>Anaconda官网地址：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><p>简单来说，Anaconda = Python + 包和环境管理器（Conda）+ 常用库 + 集成工具。它适合那些需要快速搭建数据科学或机器学习开发环境的用户。<strong>Anaconda和Python相当于是汽车和发动机的关系</strong>，安装Anaconda后，就像买了一台车，无需自己去安装发动机和其他零配件，而Python作为发动机提供Anaconda工作所需的内核。</p><p>Anaconda包及其依赖项和环境的管理工具为 conda 命令，与传统的 Python pip 工具相比Anaconda的conda可以更方便地在不同环境之间进行切换，环境管理较为简单。</p><p>为什么选择 Anaconda？</p><ul><li><p>方便安装： 安装 Anaconda 就像安装一个应用程序一样简单，它为您预先安装好了许多常用的工具，无需单独配置。</p></li><li><p>包管理器： Anaconda 包含一个名为 Conda 的包管理器，用于安装、更新和管理软件包。Conda 不仅限于 Python，还支持多种其他语言的包管理。</p></li><li><p>环境管理： 使用 Anaconda，您可以轻松地创建和管理多个独立的 Python 环境，比如可以安装 python2 和 python3 环境，然后实现自由切换。这对于在不同项目中使用不同的库和工具版本非常有用，以避免版本冲突。</p></li><li><p>集成工具和库： Anaconda 捆绑了许多用于数据科学、机器学习和科学计算的重要工具和库，如 NumPy、Pandas、Matplotlib、SciPy、Scikit-learn 等。</p></li><li><p>Jupyter 笔记本： Jupyter 是一个交互式的计算环境，支持多种编程语言，但在 Anaconda 中主要用于 Python。它允许用户创建和共享包含实时代码、方程式、可视化和叙述文本的文档。</p></li><li><p>Spyder 集成开发环境： Anaconda 中集成了 Spyder，这是一个专为科学计算和数据分析而设计的开发环境，具有代码编辑、调试和数据可视化等功能。</p></li><li><p>跨平台性： Anaconda可在Windows、macOS和 Linux等操作系统上运行，使其成为一个跨平台的解决方案。</p></li><li><p>社区支持： Anaconda 拥有庞大的社区，用户可以在社区论坛上获取帮助、分享经验和解决问题。</p></li></ul><h4 id="1-1-2-Anaconda下载">1.1.2 Anaconda下载</h4><p>进入官网，点击右上角Free Download 这部分不详写 搜一下都有的</p><p>若先前安装时未勾选添加环境变量，则需找到先前安装时设定的Anaconda安装路径。此处为“D:\ProgramFiles\anaconda3”，需对照自己的安装路径，在环境变量中点击“新建”依次添加如下路径：</p><p>D:\ProgramFiles\anaconda3（Anaconda安装路径）</p><p>D:\ProgramFiles\anaconda3\Library\mingw-w64\bin（Anaconda安装路径\Library\mingw-w64\bin）</p><p>D:\ProgramFiles\anaconda3\Library\usr\bin（Anaconda安装路径\Library\usr\bin）</p><p>D:\ProgramFiles\anaconda3\Library\bin（Anaconda安装路径\Library\bin）</p><p>D:\ProgramFiles\anaconda3\Scripts（Anaconda安装路径\Scripts）</p><p>按下“Win+R”，输入“cmd”，点击确定，打开命令提示符</p><p>输入conda info查看conda信息，输入python --version查看Python版本。Anaconda安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;conda info</span><br><span class="line"></span><br><span class="line">     active environment : None</span><br><span class="line">       user config file : C:\Users\Lenovo\.condarc</span><br><span class="line"> populated config files : D:\Anaconda\.condarc</span><br><span class="line">                          C:\Users\Lenovo\.condarc</span><br><span class="line">          conda version : 24.11.3</span><br><span class="line">    conda-build version : 24.9.0</span><br><span class="line">         python version : 3.12.7.final.0</span><br><span class="line">                 solver : libmamba (default)</span><br><span class="line">       virtual packages : __archspec=1=skylake</span><br><span class="line">                          __conda=24.11.3=0</span><br><span class="line">                          __win=0=0</span><br><span class="line">       base environment : D:\Anaconda  (writable)</span><br><span class="line">      conda av data dir : D:\Anaconda\etc\conda</span><br><span class="line">  conda av metadata url : None</span><br><span class="line">           channel URLs : https://conda.anaconda.org/conda-forge/win-64</span><br><span class="line">                          https://conda.anaconda.org/conda-forge/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/noarch</span><br><span class="line">          package cache : D:\Anaconda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\.conda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\pkgs</span><br><span class="line">       envs directories : D:\Anaconda\envs</span><br><span class="line">                          C:\Users\Lenovo\.conda\envs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\envs</span><br><span class="line">               platform : win-64</span><br><span class="line">             user-agent : conda/24.11.3 requests/2.32.3 CPython/3.12.7 Windows/11 Windows/10.0.26100 solver/libmamba conda-libmamba-solver/24.9.0 libmambapy/1.5.8 aau/0.4.4 c/rVfpE7nkGiuOJX7H5YEx2Q s/ybEmH48VLwjraFZk_NSvgg e/jardJs_a5vCg17Ewj4TZMQ</span><br><span class="line">          administrator : False</span><br><span class="line">             netrc file : None</span><br><span class="line">           offline mode : False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo&gt;</span><br></pre></td></tr></table></figure><p>因conda默认源服务器在海外，使用默认源下载第三方库时可能由于网络问题导致下载失败，故在此配置国内源。在命令提示符中执行conda config --set show_channel_urls yes，会在“C:\Users（用户）\用户名”路径下生成“.condarc”文件</p><p>双击“.condarc”文件，选择使用记事本打开，删除其中所有内容，并粘贴如下内容之后保存，这样就配置好了国内清华源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/msys2/</span></span><br><span class="line">  - https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud/conda-forge</span><br><span class="line">  - https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/free/</span></span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;conda info</span><br><span class="line"></span><br><span class="line">     active environment : None</span><br><span class="line">       user config file : C:\Users\Lenovo\.condarc</span><br><span class="line"> populated config files : D:\Anaconda\.condarc</span><br><span class="line">                          C:\Users\Lenovo\.condarc</span><br><span class="line">          conda version : 24.11.3</span><br><span class="line">    conda-build version : 24.9.0</span><br><span class="line">         python version : 3.12.7.final.0</span><br><span class="line">                 solver : libmamba (default)</span><br><span class="line">       virtual packages : __archspec=1=skylake</span><br><span class="line">                          __conda=24.11.3=0</span><br><span class="line">                          __win=0=0</span><br><span class="line">       base environment : D:\Anaconda  (writable)</span><br><span class="line">      conda av data dir : D:\Anaconda\etc\conda</span><br><span class="line">  conda av metadata url : None</span><br><span class="line">           channel URLs : https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/win-64</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/win-64</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/noarch</span><br><span class="line">          package cache : D:\Anaconda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\.conda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\pkgs</span><br><span class="line">       envs directories : D:\Anaconda\envs</span><br><span class="line">                          C:\Users\Lenovo\.conda\envs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\envs</span><br><span class="line">               platform : win-64</span><br><span class="line">             user-agent : conda/24.11.3 requests/2.32.3 CPython/3.12.7 Windows/11 Windows/10.0.26100 solver/libmamba conda-libmamba-solver/24.9.0 libmambapy/1.5.8 aau/0.4.4 c/rVfpE7nkGiuOJX7H5YEx2Q s/b2C_6saEEyn5YCaA_Vlj2Q e/jardJs_a5vCg17Ewj4TZMQ</span><br><span class="line">          administrator : False</span><br><span class="line">             netrc file : None</span><br><span class="line">           offline mode : False</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用本地Jupyter</p><p>命令提示符中输入jupyter lab或jupyter notebook，会弹出浏览器页面直接进入主页面</p><p>pycharm集成Jupyter</p><p>conda env list</p><p>Jupyter快捷键</p><p>Ø esc：从输入模式退出到命令模式</p><p>Ø a：在当前cell上面创建一个新的cell</p><p>Ø b：在当前cell 下面创建一个新的cell</p><p>Ø dd：删除当前cell</p><p>Ø m：切换到markdown模式</p><p>Ø y：切换到code模式</p><p>Ø ctrl+回车：运行cell</p><p>Ø shift +回车：运行当前cell并创建一个新的cell</p><h2 id="第-2-章-Numpy">第 2 章 Numpy</h2><h3 id="1-1-什么是numpy">1.1.什么是numpy</h3><p>numpy是Python中科学计算的基础包。它是一个Python库，提供多维数组对象、各种派生对象（例如掩码数组和矩阵）以及用于对数组进行快速操作的各种方法，包括数学、逻辑、形状操作、排序、选择、I/O 、离散傅里叶变换、基本线性代数、基本统计运算、随机模拟等等。</p><p>numpy的部分功能如下：</p><p>Ø ndarray，一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组。</p><p>Ø 用于对整组数据进行快速运算的标准数学函数（无需编写循环）。</p><p>Ø 用于读写磁盘数据的工具以及用于操作内存映射文件的工具。</p><p>Ø 线性代数、随机数生成以及傅里叶变换功能。</p><p>Ø 用于集成由C、C++、Fortran等语言编写的代码的API。</p><p>ndarray的限制</p><p>大多数numpy数组都有一些限制：</p><p>Ø 数组的所有元素必须具有相同的数据类型。</p><p>Ø 一旦创建，数组的总大小就不能改变。</p><p>Ø 形状必须是“矩形”，而不是“锯齿状”。例如二维数组的每一行必须具有相同的列数。</p><p>ndarray的属性</p><p>1）先安装numpy包</p><p>2）如果在Pycharm中加载不出来，可以通过如下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate python-2025-conda</span><br><span class="line">conda install numpy</span><br></pre></td></tr></table></figure><p>2）ndarray属性案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 导入numpy</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])  <span class="comment"># 创建一个二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.ndim)  <span class="comment"># 维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.shape)  <span class="comment"># 形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.size)  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.dtype)  <span class="comment"># 数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.itemsize)  <span class="comment"># 每个元素字节数大小</span></span><br></pre></td></tr></table></figure><h3 id="1-2-ndarray的创建方式">1.2 ndarray的创建方式</h3><h4 id="1-2-1-array-与asarray">1.2.1 array()与asarray()</h4><p><strong>array()</strong>：将输入数据转换为ndarray，会进行copy。</p><p><strong>asarray()</strong>：将输入数据转换为ndarray，如果输入本身是ndarray则不会进行copy。</p><p>数组的创建方式</p><blockquote><p>“”&quot;</p><p>array:将输入的数据转换为ndarray，会进行copy</p><p>asarray：将输入的数据转换为ndarray，如果输入本身是ndarray，则不会进行copy</p><p>“”&quot;</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;元数据地址为:<span class="subst">&#123;<span class="built_in">id</span>(data)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">arr = np.array(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr1地址为:<span class="subst">&#123;<span class="built_in">id</span>(arr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数组数据为:<span class="subst">&#123;arr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">arr2 = np.array(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr2地址为:<span class="subst">&#123;<span class="built_in">id</span>(arr2)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr2数组数据为:<span class="subst">&#123;arr2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">arr3 = np.asarray(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr3地址为:<span class="subst">&#123;<span class="built_in">id</span>(arr3)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr3数组数据为:<span class="subst">&#123;arr3&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>元数据地址为:2323645134208<br>arr1地址为:2323607245360</p><p>数组数据为:[1 2 3]</p><p>arr2地址为:2323645220400</p><p>arr2数组数据为:[1 2 3]</p><p>arr3地址为:2323607245360<br>arr3数组数据为:[1 2 3]</p></blockquote><h4 id="1-2-2-zeros-、ones-、empty-与zeros-like-、ones-like-、empty-like">1.2.2 zeros()、ones()、empty()与zeros_like()、ones_like()、empty_like()</h4><p><strong>zeros()</strong>：返回给定形状和类型的新数组，用0填充。</p><p><strong>ones()</strong>：返回给定形状和类型的新数组，用1填充。</p><p><strong>empty()</strong>：返回给定形状和类型的未初始化的新数组。</p><p>需要注意的是，np.empty 并不保证数组元素被初始化为 0，它只是分配内存空间，数组中的元素值是未初始化的，可能是内存中的任意值。</p><p>上述3个方法创建的数组元素类型默认都是float64。</p><p><strong>zeros_like()</strong>：返回与给定数组具有相同形状和类型的0新数组。</p><p><strong>ones_like()</strong>：返回与给定数组具有相同形状和类型的1新数组。</p><p><strong>empty_like()</strong>：返回与给定数组具有相同形状和类型的未初始化的新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.zeros((<span class="number">2</span>, <span class="number">5</span>))  <span class="comment"># 创建全0数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[0. 0. 0. 0. 0.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0. 0. 0. 0. 0.]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.ones_like(arr1)  <span class="comment"># 创建和arr1形状相同的全1数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1. 1. 1. 1. 1.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1. 1. 1. 1. 1.]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr3 = np.empty((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 创建未初始化的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[-9.05243306e-312 -1.06658093e-264  9.05246807e-312]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 9.05246807e-312  6.91691904e-323  2.96439388e-323]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr4 = np.empty_like(arr3)  <span class="comment"># 创建和arr3形状相同的未初始化数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[-6.95272242e-310  1.22635717e+139  9.05246806e-312]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 9.05246806e-312  1.33397724e-322  4.15015143e-322]]</span></span><br></pre></td></tr></table></figure><p>注意：这里元素间的分隔符是空格，而不是小数点 .</p><h4 id="1-2-3-full-与full-like">1.2.3 full()与full_like()</h4><p><strong>full()</strong>：返回给定形状和类型的新数组，用指定的值填充。</p><p><strong>full_like()</strong>：返回与给定数组具有相同形状和类型的用指定值填充的新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.full((<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[6 6 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [6 6 6]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.full_like(arr1, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[5 5 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [5 5 5]]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-arange">1.2.4 arange()</h4><p><strong>arange()</strong>：返回在给定范围内用均匀间隔的值填充的一维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0 2 4 6 8]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-linspace-与logspace">1.2.5 linspace()与logspace()</h4><p><strong>linspace()</strong>：返回指定范围和元素个数的等差数列。数组元素类型为浮点型。</p><p><strong>logspace()</strong>：返回指定指数范围、元素个数、底数的等比数列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.linspace(start=<span class="number">0</span>, stop=<span class="number">10</span>, num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 0.  2.5  5.  7.5 10. ]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.linspace(start=<span class="number">0</span>, stop=<span class="number">10</span>, num=<span class="number">5</span>, endpoint=<span class="literal">False</span>)  <span class="comment"># 设置endpoint=False，表示不包括stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0. 2. 4. 6. 8.]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr3 = np.logspace(start=<span class="number">2</span>, stop=<span class="number">5</span>, num=<span class="number">5</span>, base=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 4.      6.72717132 11.3137085  19.02731384 32.     ]</span></span><br></pre></td></tr></table></figure><p>默认endpoint=True时</p><p>如果把0到10看作一条线段，相当于用5个点将这条线段分成了4段，要计算每段的长度（即相邻元素的间隔），用总长度 (stop - start) 除以段数 (num - 1) ，得到间隔为 10-0 / 4 = 2.5。这样从起始点 0 开始，每次加上间隔 2.5 就能依次得到序列中的元素：0、2.5、5、7.5、10 。</p><p>若 endpoint=False 的情况</p><p>当 endpoint=False 时，意味着 stop 这个值不包含在生成的序列中，此时 [start, stop) 区间相当于一条右端点空心（不包含 stop 这个点）的线段。我们在这条线段上放置 num 个点进行划分，每一个点都会划分出一个新的区间段。比如，放 1 个点会把线段分成 1 段，放 2 个点会分成 2 段，放 num 个点就会分成 num 段，段数就等于点数 num，计算间隔的公式就变为 (stop - start) / num 。</p><h4 id="1-2-6-创建随机数数组">1.2.6 创建随机数数组</h4><p><strong>random.rand()</strong>：返回给定形状的数组，用 [0, 1) 上均匀分布的随机样本填充。</p><p><strong>random.randint()</strong>：返回给定形状的数组，用从低位(包含)到高位(不包含)上均匀分布的随机整数填充。</p><p><strong>random.uniform()</strong>：返回给定形状的数组，用从低位(包含)到高位(不包含)上均匀分布的随机浮点数填充。</p><p><strong>random.randn()</strong>：返回给定形状的数组，用标准正态分布(均值为0，标准差为1)的随机样本填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[0.77112868 0.97415392 0.25668864]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0.49946961 0.23491874 0.40514576]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[7 8 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1 2 3]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr3 = np.random.uniform(<span class="number">3</span>, <span class="number">6</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[5.69275495 3.84857937 3.2899215 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [5.32035519 3.7460973  3.33859905]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr4 = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[-2.03654925 -0.50146561  0.4362483 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [-1.90585739  0.94797017 -0.77026926]]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-7-matrix">1.2.7 matrix()</h4><p>matrix为ndarray的子类，只能生成二维的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.matrix(<span class="string">&quot;1 2; 3 4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [3 4]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.matrix([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [3 4]]</span></span><br></pre></td></tr></table></figure><h3 id="1-3-ndarray的数据类型">1.3 ndarray的数据类型</h3><table><thead><tr><th><strong>数据类型</strong></th><th><strong>类型代码</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>bool</strong></td><td>?</td><td>布尔类型</td></tr><tr><td><strong>int8</strong>、uint8  <strong>int16</strong>、uint16  <strong>int32</strong>、uint32  <strong>int64</strong>、uint64</td><td>i1,u1  i2,u2  i4,u4  i8,u8</td><td>有符号、无符号的8位（1字节）整型  有符号、无符号的16位（2字节）整型  有符号、无符号的32位（4字节）整型  有符号、无符号的64位（8字节）整型</td></tr><tr><td><strong>float16</strong>  <strong>float32</strong>  <strong>float64</strong></td><td>f2  f4或f  f8或d</td><td>半精度浮点型  单精度浮点型  双精度浮点型</td></tr><tr><td><strong>complex64</strong>  <strong>complex128</strong></td><td>c8  c16</td><td>用两个32位浮点数表示的复数  用两个64位浮点数表示的复数</td></tr></tbody></table><p>创建数组时可以使用dtype参数指定元素类型：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1. 2. 3.]</span></span><br><span class="line">arr2 = np.array([<span class="number">0.2</span>, <span class="number">2.5</span>, <span class="number">4.8</span>], dtype=<span class="string">&quot;i8&quot;</span>)</span><br><span class="line"><span class="comment"># [0 2 4]</span></span><br><span class="line">也可以使用ndarray.astype()方法转换数组的元素类型：</span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</span><br><span class="line"><span class="comment"># [1. 2. 3.]</span></span><br><span class="line">arr2 = arr1.astype(np.int64)</span><br><span class="line"><span class="comment"># [1 2 3]</span></span><br></pre></td></tr></table></figure><h3 id="1-4-ndarray切片和索引">1.4 ndarray切片和索引</h3><p>ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p><p>可以通过内置的slice函数，或者冒号设置start, stop及step参数进行切片，从原数组中切割出一个新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取索引为2的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引 2开始到索引9(不包含)停止，间隔为2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">9</span>,<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 4 6 8]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引2开始到索引9(不包含)停止，间隔为2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:<span class="number">9</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 4 6 8]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引2开始到最后(不包含)，默认间隔为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引2开始到索引9(不包含)结束，默认间隔为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 3 4 5 6 7 8]</span></span><br></pre></td></tr></table></figure><h3 id="1-5-numpy常用函数">1.5 numpy常用函数</h3><h4 id="1-5-1-基本函数">1.5.1 基本函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>np.abs()</strong></td><td>元素的绝对值，参数是 number 或 array</td></tr><tr><td><strong>np.ceil()</strong></td><td>向上取整，参数是 number 或 array</td></tr><tr><td><strong>np.floor()</strong></td><td>向下取整，参数是 number 或 array</td></tr><tr><td><strong>np.rint()</strong></td><td>四舍五入，参数是 number 或 array</td></tr><tr><td><strong>np.isnan()</strong></td><td>判断元素是否为NaN(Not a Number) ，参数是 number 或 array</td></tr><tr><td><strong>np.multiply()</strong></td><td>元素相乘，参数是 number 或 array。如果第二个参数传递的是number，原数组中所有元素乘以这个数字，返回新的数组；如果第二个参数也是一个数组，是将两个数组中对应位置的元素相乘，返回一个新的数组，其形状与输入数组相同。</td></tr><tr><td><strong>np.divide()</strong></td><td>元素相除，参数是 number 或 array</td></tr><tr><td><strong>np.where(condition, x, y)</strong></td><td>三元运算符，x if condition else y</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.ceil(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.floor(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.rint(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.isnan(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.multiply(arr1, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.divide(arr1, arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.where(arr1 &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h4 id="1-5-2-统计函数">1.5.2 统计函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>np.mean()</strong></td><td>所有元素的平均值</td></tr><tr><td><strong>np.sum()</strong></td><td>所有元素的和</td></tr><tr><td><strong>np.max()</strong></td><td>所有元素的最大值</td></tr><tr><td><strong>np.min()</strong></td><td>所有元素的最小值</td></tr><tr><td><strong>np.std()</strong></td><td>所有元素的标准差</td></tr><tr><td><strong>np.var()</strong></td><td>所有元素的方差</td></tr><tr><td><strong>np.argmax()</strong></td><td>最大值的下标索引值</td></tr><tr><td><strong>np.argmin()</strong></td><td>最小值的下标索引值</td></tr><tr><td><strong>np.cumsum()</strong></td><td>返回一个一维数组，每个元素都是之前所有元素的累加和</td></tr><tr><td><strong>np.cumprod()</strong></td><td>返回一个一维数组，每个元素都是之前所有元素的累乘积</td></tr></tbody></table><p>多维数组在计算时默认计算全部维度，可以使用axis参数指定按某一维度为轴心统计，axis=0按列统计、axis=1按行统计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">1</span>, <span class="number">5</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.std(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.var(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.argmax(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.argmin(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.cumsum(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.cumprod(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.cumprod(arr1, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h4 id="1-5-3-比较函数">1.5.3 比较函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>np.any()</strong></td><td>至少有一个元素满足指定条件，就返回True</td></tr><tr><td><strong>np.all()</strong></td><td>所有的元素都满足指定条件，才返回True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(arr1 &gt; <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(arr1 &gt; <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="1-5-4-排序函数">1.5.4 排序函数</h4><p><strong>ndarray.sort()</strong>：就地排序（直接修改原数组）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line">arr1.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line">arr1.sort(axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br></pre></td></tr></table></figure><p>axis：指定排序的轴。默认值为 -1，表示沿着最后一个轴进行排序。在二维数组中，axis = 0 表示按列排序，axis = 1 表示按行排序。</p><p>在 NumPy 中，轴是对数组维度的一种抽象描述。对于多维数组，每个维度都对应一个轴，轴的编号从 0 开始。对于二维数组，它有两个轴：</p><p>轴 0：代表垂直方向，也就是行的方向。可以把二维数组想象成一个表格，轴 0 就像是表格中从上到下的行索引方向对列数据排序，所以axis=0表示按列排序。</p><p>轴 1：代表水平方向，也就是列的方向。就像是表格中从左到右的列索引方向对行数据进行排序，所以axis=1表示按行排序。</p><p><strong>np.sort()</strong>：返回排序后的副本（创建新的数组）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.sort(arr1))</span><br></pre></td></tr></table></figure><h4 id="1-5-5-去重函数">1.5.5 去重函数</h4><p><strong>np.unique()</strong>：计算唯一值并返回有序结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">5</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.unique(arr1))</span><br></pre></td></tr></table></figure><h3 id="1-6-基本运算">1.6 基本运算</h3><p>numpy中的数组不用编写循环即可执行批量运算，称之为矢量化运算。</p><p>大小相等的数组之间的任何算术运算都会将运算应用到元素级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)   <span class="comment"># 对应相加即可</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(arr1 - arr2)   <span class="comment"># 对应相减</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 / arr2)</span><br></pre></td></tr></table></figure><p>数组与标量的算术运算会将标量值传播到各个元素，不同大小的数组之间的运算叫做广播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 - <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 / <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>广播机制是 NumPy 中一个强大的特性，它允许在不同形状的数组之间进行元素级运算。广播机制的规则如下：</p><ul><li>规则1：如果俩个数组的维度数不相同，那么小维度数组的形状将会在最左边补1。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 形状为 (3,)</span></span><br><span class="line"><span class="comment"># 在NumPy中，数组的形状（shape）是由各个维度上的元素数量决定的。对于一维数组，其形状表示为 (n,)，其中 n 是数组中元素的数量。而对于二维数组，形状才是 (m, n)，其中 m 是行数，n 是列数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">4</span>], [<span class="number">5</span>], [<span class="number">6</span>]])  <span class="comment"># 形状为 (3, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 arr1 应用规则 1，在其形状最左边补 1，变为 (1, 3) =》变成了这样[[1,2,3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 arr1 形状 (1, 3) 和 arr2 形状 (3, 1) 满足广播条件</span></span><br><span class="line"></span><br><span class="line">result = arr1 + arr2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;规则 1 示例结果：\n&quot;</span>, result)</span><br></pre></td></tr></table></figure><ul><li>规则2：如果俩个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度大小（元素个数）为1的维度开始扩展 ，（维度必须是1开始）直到所有维度都一样， 以匹配另一个数组的形状。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line">arr3 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])  <span class="comment"># 形状为 (1, 3)</span></span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line">arr4 = np.array([[<span class="number">4</span>], [<span class="number">5</span>], [<span class="number">6</span>]])  <span class="comment"># 形状为 (3, 1)</span></span><br><span class="line"><span class="comment"># arr3 沿着第0个维度扩展,将原有的一行数据复制成3行,为 (3, 3)=&gt;[[1,2,3], [1,2,3], [1,2,3]]</span></span><br><span class="line"><span class="comment"># arr4 沿着第1个维度扩展, (3, 3)=&gt;[[4,4,4], [5,5,5], [6,6,6]]</span></span><br><span class="line">result = arr3 + arr4</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;规则 2 示例结果：\n&quot;</span>, result)</span><br></pre></td></tr></table></figure><ul><li>规则3：如果俩个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度大小等于1，那么会引发异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line">arr5 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 形状为 (3,)</span></span><br><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line">arr6 = np.array([<span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 形状为 (2,)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  result = arr5 + arr6</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;规则 3 示例错误信息：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-7-矩阵乘法">1.7 矩阵乘法</h3><p>通过*运算符和np.multiply()对两个数组相乘进行的是对位乘法而非矩阵乘法运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.multiply(arr1, arr2))</span><br></pre></td></tr></table></figure><p>使用np.dot()、ndarray.dot()、@可以进行矩阵乘法运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">6</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对于矩阵乘法来说，要求第一个矩阵的列数等于第二个矩阵的行数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.shape, arr2.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.dot(arr1, arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.dot(arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 @ arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个二维数组跟一个大小合适的一维数组的矩阵点积运算之后将会得到一个一维数组</span></span><br><span class="line"></span><br><span class="line">arr3 = np.array([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 @ arr3)</span><br></pre></td></tr></table></figure><p>矩阵乘法的规则是：结果矩阵中第 i 行第 j 列的元素等于第一个矩阵的第 i 行与第二个矩阵的第 j 列对应元素乘积之和。</p><p>结果矩阵第一行第一列的元素：</p><p>计算 arr1 的第一行 [1, 2, 3] 与 arr2 的第一列 [6, 4, 2] 对应元素乘积之和，即 1<em>6 + 2</em>4 + 3*2 = 6 + 8 + 6 = 20。</p><p>结果矩阵第一行第二列的元素：</p><p>计算 arr1 的第一行 [1, 2, 3] 与 arr2 的第二列 [5, 3, 1] 对应元素乘积之和，即 1<em>5 + 2</em>3 + 3*1 = 5 + 6 + 3 = 14。</p><p>结果矩阵第二行第一列的元素：</p><p>计算 arr1 的第二行 [4, 5, 6] 与 arr2 的第一列 [6, 4, 2] 对应元素乘积之和，即 4<em>6 + 5</em>4 + 6*2 = 24 + 20 + 12 = 56。</p><p>结果矩阵第二行第二列的元素：</p><p>计算 arr1 的第二行 [4, 5, 6] 与 arr2 的第二列 [5, 3, 1] 对应元素乘积之和，即 4<em>5 + 5</em>3 + 6*1 = 20 + 15 + 6 = 41。</p><p>所以，手动计算得到的结果矩阵是 [[20, 14], [56, 41]]。</p><h2 id="第-3-章-Pandas">第 3 章 Pandas</h2><h3 id="3-1-什么是Pandas">3.1 什么是Pandas</h3><p>Pandas 是一个开源的数据分析和数据处理库，它是基于 Python 编程语言的。</p><p>Pandas 提供了易于使用的数据结构和数据分析工具，特别适用于处理结构化数据，如表格型数据（类似于Excel表格）。</p><p>Pandas 是数据科学和分析领域中常用的工具之一，它使得用户能够轻松地从各种数据源中导入数据，并对数据进行高效的操作和分析。</p><p>用得最多的pandas对象是Series，一个一维的标签化数组对象，另一个是DataFrame，它是一个面向列的二维表结构</p><p>pandas兼具numpy高性能的数组计算功能以及电子表格和关系型数据库（如SQL）灵活的数据处理功能。它提供了复杂精细的索引功能，能更加便捷地完成重塑、切片和切块、聚合以及选取数据子集等操作。</p><p>pandas功能：</p><p>有标签轴的数据结构</p><p>在数据结构中，每个轴都被赋予了特定的标签，这些标签用于标识和引用轴上的数据元素，使得数据的组织、访问和操作更加直观和方便</p><ul><li><p>集成时间序列功能。</p></li><li><p>相同的数据结构用于处理时间序列数据和非时间序列数据。</p></li><li><p>保存元数据的算术运算和压缩。</p></li><li><p>灵活处理缺失数据。</p></li><li><p>合并和其它流行数据库（例如基于SQL的数据库）的关系操作。</p></li></ul><p>pandas这个名字源于panel data（面板数据，这是多维结构化数据集在计量经济学中的术语）以及Python data analysis（Python数据分析）。</p><h4 id="3-2-Pandas数据结构-Series">3.2 Pandas数据结构-Series</h4><p>Series 是 Pandas 中的一个核心数据结构，类似于一个一维的数组，具有数据和索引。</p><p>Series 可以存储任何数据类型（整数、浮点数、字符串等），并通过标签（索引）来访问元素。Series 的数据结构是非常有用的，因为它可以处理各种数据类型，同时保持了高效的数据操作能力，比如可以通过标签来快速访问和操作数据。</p><p>​</p><p>1）Series 特点：</p><p>Ø 一维数组：Series 中的每个元素都有一个对应的索引值。</p><p>Ø 索引： 每个数据元素都可以通过标签（索引）来访问，默认情况下索引是从 0 开始的整数，但你也可以自定义索引。</p><p>Ø 数据类型： Series 可以容纳不同数据类型的元素，包括整数、浮点数、字符串、Python 对象等。</p><p>Ø 大小不变性：Series 的大小在创建后是不变的，但可以通过某些操作（如 append 或 delete）来改变。</p><p>Ø 操作：Series 支持各种操作，如数学运算、统计分析、字符串处理等。</p><p>Ø 缺失数据：Series 可以包含缺失数据，Pandas 使用NaN（Not a Number）来表示缺失或无值。</p><p>Ø 自动对齐：当对多个 Series 进行运算时，Pandas 会自动根据索引对齐数据，这使得数据处理更加高效。</p><p>我们可以使用 Pandas 库来创建一个 Series 对象，并且可以为其指定索引（Index）、名称（Name）以及值（Values）：</p><h4 id="1-2-2-Series的创建">1.2.2 Series的创建</h4><p>1）先安装pandas包，如果在Pycharm中加载不出来，可以通过如下命令安装</p><p>conda activate python-2025-conda</p><p>(python-2025-conda)xxx conda install pandas</p><p>2）直接通过列表创建Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 0   4</span></span><br><span class="line"><span class="comment"># 1   7</span></span><br><span class="line"><span class="comment"># 2  -5</span></span><br><span class="line"><span class="comment"># 3   3</span></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br></pre></td></tr></table></figure><p>Series的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。</p><p>3）通过列表创建Series时指定索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br></pre></td></tr></table></figure><p>4）通过列表创建Series时指定索引和名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>],name=<span class="string">&quot;hello_python&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: hello_python, dtype: int6</span></span><br></pre></td></tr></table></figure><p>5）直接通过字典创建Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">4</span>, <span class="string">&quot;b&quot;</span>: <span class="number">7</span>, <span class="string">&quot;c&quot;</span>: -<span class="number">5</span>, <span class="string">&quot;d&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s = pd.Series(dic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br><span class="line"></span><br><span class="line">s1 = pd.Series(dic,index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>],name=<span class="string">&quot;aacc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: aacc, dtype: int64</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-Series的常用属性">1.2.3 Series的常用属性</h4><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>index</strong></td><td>Series的索引对象</td></tr><tr><td><strong>values</strong></td><td>Series的值</td></tr><tr><td><strong>ndim</strong></td><td>Series的维度</td></tr><tr><td><strong>shape</strong></td><td>Series的形状</td></tr><tr><td><strong>size</strong></td><td>Series的元素个数</td></tr><tr><td><strong>dtype</strong>或<strong>dtypes</strong></td><td>Series的元素类型</td></tr><tr><td><strong>name</strong></td><td>Series的名称</td></tr><tr><td><strong>loc[]</strong></td><td>显式索引，按标签索引或切片</td></tr><tr><td><strong>iloc[]</strong></td><td>隐式索引，按位置索引或切片</td></tr><tr><td><strong>at[]</strong></td><td>使用标签访问单个元素</td></tr><tr><td><strong>iat[]</strong></td><td>使用位置访问单个元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">arrs = pd.Series([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>],name=<span class="string">&quot;yjy&quot;</span>,index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(arrs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index Series的索引对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arrs.index:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values   Series的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndim  Series的维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.ndim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shape Series的形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># size  Series的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype或dtypes Series的元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.dtype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name  Series的名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loc[] 显式索引，按标签索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.loc[<span class="string">&quot;c&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.loc[<span class="string">&quot;c&quot;</span>:<span class="string">&quot;d&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iloc[]   隐式索引，按位置索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.iloc[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.iloc[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># at[]  使用标签访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.at[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iat[] 使用位置访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.iat[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h4 id="1-2-4-Series的常用方法">1.2.4 Series的常用方法</h4><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>head()</strong></td><td>查看前n行数据，默认5行</td></tr><tr><td><strong>tail()</strong></td><td>查看后n行数据，默认5行</td></tr><tr><td><strong>isin()</strong></td><td>元素是否包含在参数集合中</td></tr><tr><td><strong>isna()</strong></td><td>元素是否为缺失值（通常为 NaN 或 None）</td></tr><tr><td><strong>sum()</strong></td><td>求和，会忽略 Series 中的缺失值</td></tr><tr><td><strong>mean()</strong></td><td>平均值</td></tr><tr><td><strong>min()</strong></td><td>最小值</td></tr><tr><td><strong>max()</strong></td><td>最大值</td></tr><tr><td><strong>var()</strong></td><td>方差</td></tr><tr><td><strong>std()</strong></td><td>标准差</td></tr><tr><td><strong>median()</strong></td><td>中位数</td></tr><tr><td><strong>mode()</strong></td><td>众数（出现频率最高的值），如果有多个值出现的频率相同且都是最高频率，这些值都会被包含在返回的 Series 中</td></tr><tr><td><strong>quantile(q,interpolation)</strong></td><td>指定位置的分位数  q的取值范围是 0 到 1 之间的浮点数或浮点数列表，如quantile(0.5)表示计算中位数（即第 50 百分位数）;  interpolation：指定在计算分位数时，如果分位数位置不在数据点上，采用的插值方法。默认值是线性插值 ‘linear’，还有其他可选值如 ‘lower’、‘higher’、‘midpoint’、‘nearest’ 等</td></tr><tr><td><strong>describe()</strong></td><td>常见统计信息</td></tr><tr><td><strong>value_count()</strong></td><td>每个元素的个数</td></tr><tr><td><strong>count()</strong></td><td>非缺失值元素的个数，如果要包含缺失值，用len()</td></tr><tr><td><strong>drop_duplicates()</strong></td><td>去重</td></tr><tr><td><strong>unique()</strong></td><td>去重后的数组</td></tr><tr><td><strong>nunique()</strong></td><td>去重后元素个数</td></tr><tr><td><strong>sample()</strong></td><td>随机采样</td></tr><tr><td><strong>sort_index()</strong></td><td>按索引排序</td></tr><tr><td><strong>sort_values()</strong></td><td>按值排序</td></tr><tr><td><strong>replace()</strong></td><td>用指定值代替原有值</td></tr><tr><td><strong>to_frame()</strong></td><td>将Series转换为DataFrame</td></tr><tr><td><strong>equals()</strong></td><td>判断两个Series是否相同</td></tr><tr><td><strong>keys()</strong></td><td>返回Series的索引对象</td></tr><tr><td><strong>corr()</strong></td><td>计算与另一个Series的相关系数   默认使用皮尔逊相关系数（Pearson correlation coefficient）来计算相关性。要求参与比较的数组元素类型都是数值型。  当相关系数为 1 时，表示两个变量完全正相关，即一个变量增加，另一个变量也随之增加。  当相关系数为 -1 时，表示两个变量完全负相关，即一个变量增加，另一个变量随之减少。  当相关系数为 0 时，表示两个变量之间不存在线性相关性。  例如，分析某地区的气温和冰淇淋销量之间的关系</td></tr><tr><td><strong>cov()</strong></td><td>计算与另一个Series的协方差</td></tr><tr><td><strong>hist()</strong></td><td>绘制直方图，用于展示数据的分布情况。它将数据划分为若干个区间（也称为 “bins”），并统计每个区间内数据的频数。  需要安装matplotlib包</td></tr><tr><td><strong>items()</strong></td><td>获取索引名以及值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrs = pd.Series([<span class="number">11</span>,<span class="number">22</span>,np.nan,<span class="literal">None</span>,<span class="number">44</span>,<span class="number">22</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># head()   查看前n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail()   查看后n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.tail(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isin()   判断数组中的每一个元素是否包含在参数集合中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.isin([<span class="number">11</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isna()   元素是否为缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.isna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum() 求和，会忽略 Series 中的缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean()   平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># min() 最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.<span class="built_in">min</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># max() 最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># var() 方差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.var())</span><br><span class="line"></span><br><span class="line"><span class="comment"># std() 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.std())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(arrs.var())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># median()  中位数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.median())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mode()   众数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.mode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># quantile()   指定位置的分位数，如quantile(0.5)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.quantile(<span class="number">0.25</span>, interpolation=<span class="string">&quot;midpoint&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># describe()   常见统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.describe())</span><br><span class="line"></span><br><span class="line"><span class="comment"># value_counts()   每个元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># count()  非缺失值元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.count())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(arrs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(arrs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop_duplicates() 去重  这里可以看出，底层None也作为NaN处理</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.drop_duplicates())</span><br><span class="line"></span><br><span class="line"><span class="comment"># unique()  去重后的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.unique())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nunique() 去重后元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.nunique())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample()  随机采样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.sample())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_index()  按索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.sort_index())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_values() 按值排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.sort_values())</span><br><span class="line"><span class="comment"># replace() 用指定值代替原有值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.replace(<span class="number">22</span>,<span class="string">&quot;haha&quot;</span>))</span><br><span class="line"><span class="comment"># to_frame()   将Series转换为DataFrame</span></span><br><span class="line"><span class="built_in">print</span>(arrs.to_frame())</span><br><span class="line"><span class="comment"># equals()  判断两个Series是否相同</span></span><br><span class="line">arr1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">arr2 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1.equals(arr2))</span><br><span class="line"><span class="comment"># keys()   返回Series的索引对象</span></span><br><span class="line"><span class="built_in">print</span>(arrs.index)</span><br><span class="line"><span class="built_in">print</span>(arrs.keys())</span><br><span class="line"><span class="comment"># corr()   计算与另一个Series的相关系数</span></span><br><span class="line">arr3 = pd.Series([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">arr4 = pd.Series([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">arr5 = pd.Series([<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">arr6 = pd.Series([<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr3))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr4))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr5.corr(arr6))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cov() 计算与另一个Series的协方差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr3))</span><br><span class="line"><span class="comment"># hist()   绘制直方图</span></span><br><span class="line"></span><br><span class="line">arr7 = pd.Series([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">arr7.hist(bins=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># items()  获取索引名以及值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> arr7.items():</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(i,v)</span><br></pre></td></tr></table></figure><h4 id="1-2-5-Series的布尔索引">1.2.5 Series的布尔索引</h4><p>可以使用布尔索引从Series中筛选满足某些条件的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(&#123;<span class="string">&quot;a&quot;</span>: -<span class="number">1.2</span>, <span class="string">&quot;b&quot;</span>: <span class="number">3.5</span>, <span class="string">&quot;c&quot;</span>: <span class="number">6.8</span>, <span class="string">&quot;d&quot;</span>: <span class="number">2.9</span>&#125;)</span><br><span class="line"></span><br><span class="line">bools = s &gt; s.mean()  <span class="comment"># 将大于平均值的元素标记为 True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   False</span></span><br><span class="line"><span class="comment"># b   True</span></span><br><span class="line"><span class="comment"># c   True</span></span><br><span class="line"><span class="comment"># d   False</span></span><br><span class="line"><span class="comment"># dtype: bool</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[bools])</span><br><span class="line"><span class="comment"># b   3.5</span></span><br><span class="line"><span class="comment"># c   6.8</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><h4 id="1-2-6-Series的运算">1.2.6 Series的运算</h4><p>1）Series与标量运算</p><p>标量会与每个元素进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(&#123;<span class="string">&quot;a&quot;</span>: -<span class="number">1.2</span>, <span class="string">&quot;b&quot;</span>: <span class="number">3.5</span>, <span class="string">&quot;c&quot;</span>: <span class="number">6.8</span>, <span class="string">&quot;d&quot;</span>: <span class="number">2.9</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a  -12.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   35.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c   68.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   29.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><p>2）Series与Series运算</p><p>会根据标签索引进行对位计算，索引没有匹配上的会用NaN填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">s2 = pd.Series([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 + s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0   NaN</span></span><br><span class="line"><span class="comment"># 1   3.0</span></span><br><span class="line"><span class="comment"># 2   3.0</span></span><br><span class="line"><span class="comment"># 3   3.0</span></span><br><span class="line"><span class="comment"># 4   NaN</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><h3 id="1-3-Pandas数据结构-DataFrame">1.3 Pandas数据结构-DataFrame</h3><p>DataFrame是Pandas 中的另一个核心数据结构，类似于一个二维的表格或数据库中的数据表。它是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值），既有行索引也有列索引。</p><p>​     <img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250727204054622.png" alt="image-20250727204054622"></p><p>DataFrame中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。它可以被看做由Series组成的字典（共同用一个索引）。提供了各种功能来进行数据访问、筛选、分割、合并、重塑、聚合以及转换等操作，广泛用于数据分析、清洗、转换、可视化等任务。</p><p>​     <img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250727204119335.png" alt="image-20250727204119335"></p><h4 id="1-3-1-DataFrame的创建">1.3.1 DataFrame的创建</h4><p>1）直接通过字典创建DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   id name  age</span></span><br><span class="line"><span class="comment"># 0  101  张三  20</span></span><br><span class="line"><span class="comment"># 1  102  李四  30</span></span><br><span class="line"><span class="comment"># 2  103  王五  40</span></span><br></pre></td></tr></table></figure><p>2）通过字典创建时指定列的顺序和行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]&#125;, columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>], index=[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>]</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   name  age</span></span><br><span class="line"><span class="comment"># 101  张三  20</span></span><br><span class="line"><span class="comment"># 102  李四  30</span></span><br><span class="line"><span class="comment"># 103  王五  40</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-DataFrame的常用属性">1.3.2 DataFrame的常用属性</h4><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>index</strong></td><td>DataFrame的行索引</td></tr><tr><td><strong>columns</strong></td><td>DataFrame的列标签</td></tr><tr><td><strong>values</strong></td><td>DataFrame的值</td></tr><tr><td><strong>ndim</strong></td><td>DataFrame的维度</td></tr><tr><td><strong>shape</strong></td><td>DataFrame的形状</td></tr><tr><td><strong>size</strong></td><td>DataFrame的元素个数</td></tr><tr><td><strong>dtypes</strong></td><td>DataFrame的元素类型</td></tr><tr><td><strong>T</strong></td><td>行列转置</td></tr><tr><td><strong>loc[]</strong></td><td>显式索引，按行列标签索引或切片</td></tr><tr><td><strong>iloc[]</strong></td><td>隐式索引，按行列位置索引或切片</td></tr><tr><td><strong>at[]</strong></td><td>使用行列标签访问单个元素</td></tr><tr><td><strong>iat[]</strong></td><td>使用行列位置访问单个元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;,index=[<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># index DataFrame的行索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># columns  DataFrame的列标签</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values   DataFrame的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndim  DataFrame的维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.ndim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shape DataFrame的形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.shape)</span><br><span class="line"><span class="comment"># size  DataFrame的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dtypes   DataFrame的元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># T 行列转置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loc[] 显式索引，按行列标签索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;aa&quot;</span>:<span class="string">&quot;cc&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,[<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iloc[]   隐式索引，按行列位置索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># at[]  使用行列标签访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.at[<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iat[] 使用行列位置访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iat[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="1-3-3-DataFrame的常用方法">1.3.3 DataFrame的常用方法</h4><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>head()</strong></td><td>查看前n行数据，默认5行</td></tr><tr><td><strong>tail()</strong></td><td>查看后n行数据，默认5行</td></tr><tr><td><strong>isin()</strong></td><td>元素是否包含在参数集合中</td></tr><tr><td><strong>isna()</strong></td><td>元素是否为缺失值</td></tr><tr><td><strong>sum()</strong></td><td>求和</td></tr><tr><td><strong>mean()</strong></td><td>平均值</td></tr><tr><td><strong>min()</strong></td><td>最小值</td></tr><tr><td><strong>max()</strong></td><td>最大值</td></tr><tr><td><strong>var()</strong></td><td>方差</td></tr><tr><td><strong>std()</strong></td><td>标准差</td></tr><tr><td><strong>median()</strong></td><td>中位数</td></tr><tr><td><strong>mode()</strong></td><td>众数</td></tr><tr><td><strong>quantile()</strong></td><td>指定位置的分位数，如quantile(0.5)</td></tr><tr><td><strong>describe()</strong></td><td>常见统计信息</td></tr><tr><td><strong>info()</strong></td><td>基本信息</td></tr><tr><td><strong>value_counts()</strong></td><td>每个元素的个数</td></tr><tr><td><strong>count()</strong></td><td>非空元素的个数</td></tr><tr><td><strong>drop_duplicates()</strong></td><td>去重</td></tr><tr><td><strong>sample()</strong></td><td>随机采样</td></tr><tr><td><strong>replace()</strong></td><td>用指定值代替原有值</td></tr><tr><td><strong>equals()</strong></td><td>判断两个DataFrame是否相同</td></tr><tr><td><strong>cummax()</strong></td><td>累计最大值</td></tr><tr><td><strong>cummin()</strong></td><td>累计最小值</td></tr><tr><td><strong>cumsum()</strong></td><td>累计和</td></tr><tr><td><strong>cumprod()</strong></td><td>累计积</td></tr><tr><td><strong>diff()</strong></td><td>一阶差分，对序列中的元素进行差分运算，也就是用当前元素减去前一个元素得到差值，默认情况下，它会计算一阶差分，即相邻元素之间的差值。参数：  periods：整数，默认为 1。表示要向前或向后移动的周期数，用于计算差值。正数表示向前移动，负数表示向后移动。  axis：指定计算的轴方向。0 或 ‘index’ 表示按列计算，1 或 ‘columns’ 表示按行计算，默认值为 0。</td></tr><tr><td><strong>sort_index()</strong></td><td>按行索引排序</td></tr><tr><td><strong>sort_values()</strong></td><td>按某列的值排序，可传入列表来按多列排序，并通过ascending参数设置升序或降序</td></tr><tr><td><strong>nlargest()</strong></td><td>返回某列最大的n条数据</td></tr><tr><td><strong>nsmallest()</strong></td><td>返回某列最小的n条数据</td></tr></tbody></table><p>在Pandas的 DataFrame 方法里，axis 是一个非常重要的参数，它用于指定操作的方向。</p><p>axis 参数可以取两个主要的值，即 0 或 ‘index’，以及 1 或 ‘columns’ ，其含义如下：</p><p>Ø axis=0 或 axis=‘index’：表示操作沿着行的方向进行，也就是对每一列的数据进行处理。例如，当计算每列的均值时，就是对每列中的所有行数据进行计算。</p><p>Ø axis=1 或 axis=‘columns’：表示操作沿着列的方向进行，也就是对每行的数据进行处理。例如，当计算每行的总和时，就是对每行中的所有列数据进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">106</span>,<span class="number">101</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;冯七&quot;</span>,<span class="string">&quot;周八&quot;</span>,<span class="string">&quot;张三&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="literal">None</span>, <span class="number">60</span>,<span class="number">10</span>]&#125;,index=[<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>, <span class="string">&quot;ee&quot;</span>, <span class="string">&quot;ff&quot;</span>,<span class="string">&quot;aa&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># head()   查看前n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail()   查看后n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail())</span><br><span class="line"></span><br><span class="line"><span class="comment"># isin()   元素是否包含在参数集合中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isin([<span class="number">103</span>,<span class="number">106</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isna()   元素是否为缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum() 求和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean()   平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># min() 最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].<span class="built_in">min</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># max() 最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># var() 方差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].var())</span><br><span class="line"></span><br><span class="line"><span class="comment"># std() 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].std())</span><br><span class="line"></span><br><span class="line"><span class="comment"># median()  中位数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].median())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mode()   众数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].mode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># quantile()   指定位置的分位数，如quantile(0.5)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].quantile(<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe()   常见统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br><span class="line"></span><br><span class="line"><span class="comment"># info()   基本信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># value_counts()   每个元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># count()  非空元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop_duplicates() 去重</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.duplicated(subset=<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample()  随机采样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sample())</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace() 用指定值代替原有值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.replace(<span class="number">20</span>,<span class="string">&quot;haha&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># equals()  判断两个DataFrame是否相同</span></span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1.equals(df2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cummax()  累计最大值</span></span><br><span class="line"></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按列 等价于axis=0 默认</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cummax(axis=<span class="string">&quot;index&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行 等价于axis=1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cummax(axis=<span class="string">&quot;columns&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cummin()  累计最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cummin())</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumsum()  累计和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cumsum())</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumprod() 累计积</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cumprod())</span><br><span class="line"></span><br><span class="line"><span class="comment"># diff()   一阶差分</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.diff())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_index()  按行索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_index())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_values() 按某列的值排序，可传入列表来按多列排序，并通过ascending参数设置升序或降序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># nlargest()   返回某列最大的n条数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.nlargest(n=<span class="number">2</span>,columns=<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># nsmallest()  返回某列最小的n条数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.nsmallest(n=<span class="number">1</span>,columns=<span class="string">&quot;age&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="1-3-4-DataFrame的布尔索引">1.3.4 DataFrame的布尔索引</h4><p>可以使用布尔索引从DataFrame中筛选满足某些条件的行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">101</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">25</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#101  False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#104   True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#103   True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#102  False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: age, dtype: bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   name  age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  李四  30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  王五  40</span></span><br></pre></td></tr></table></figure><h4 id="1-3-5-DataFrame的运算">1.3.5 DataFrame的运算</h4><p>1）DataFrame与标量运算</p><p>标量与每个元素进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">101</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    name  age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  张三张三  40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  李四李四  60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  王五王五  80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  赵六赵六  20</span></span><br></pre></td></tr></table></figure><p>2）DataFrame与DataFrame运算</p><p>根据标签索引进行对位计算，索引没有匹配上的用NaN填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;田七&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1 + df2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    name  age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  NaN  NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  李四张三  30.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  王五李四  50.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  赵六王五  70.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 105  NaN  NaN</span></span><br></pre></td></tr></table></figure><h4 id="1-3-6-DataFrame的更改操作">1.3.6 DataFrame的更改操作</h4><p>1）设置行索引</p><p>创建DataFrame时如果不指定行索引，pandas会自动添加从0开始的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>], <span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   age name  id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0  20  张三  101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  30  李四  102</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  40  王五  103</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3  10  赵六  104</span></span><br></pre></td></tr></table></figure><p>（1）通过set_index()设置行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df.set_index(&quot;id&quot;)：将 DataFrame df 的 &quot;id&quot; 列设为新的行索引（index）。</span></span><br><span class="line"><span class="comment"># inplace=True：直接修改原 DataFrame，而不是返回一个新的 DataFrame（如果不加 inplace=True，则需要写成 df = df.set_index(&quot;id&quot;)）。</span></span><br><span class="line">df.set_index(<span class="string">&quot;id&quot;</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 设置行索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br></pre></td></tr></table></figure><p>（2）通过reset_index()重置行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.reset_index(inplace=<span class="literal">True</span>)  <span class="comment"># 重置索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   id  age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0  101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3  104  10  赵六</span></span><br></pre></td></tr></table></figure><p>2）修改行索引名和列名</p><p>（1）通过rename()修改行索引名和列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>], <span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;id&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df.rename(index=&#123;<span class="number">101</span>: <span class="string">&quot;一&quot;</span>, <span class="number">102</span>: <span class="string">&quot;二&quot;</span>, <span class="number">103</span>: <span class="string">&quot;三&quot;</span>, <span class="number">104</span>: <span class="string">&quot;四&quot;</span>&#125;, columns=&#123;<span class="string">&quot;age&quot;</span>: <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;姓名&quot;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   年龄  姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四  10  赵六</span></span><br></pre></td></tr></table></figure><p>（2）将index和columns重新赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df.index = [<span class="string">&quot;Ⅰ&quot;</span>, <span class="string">&quot;Ⅱ&quot;</span>, <span class="string">&quot;Ⅲ&quot;</span>, <span class="string">&quot;Ⅳ&quot;</span>]</span><br><span class="line"></span><br><span class="line">df.columns = [<span class="string">&quot;年齡&quot;</span>, <span class="string">&quot;名稱&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   年齡  名稱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅰ  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅱ  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅲ  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅳ  10  赵六</span></span><br></pre></td></tr></table></figure><p>3）添加列</p><p>通过 df[“列名”] 添加列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;phone&quot;</span>] = [<span class="string">&quot;13333333333&quot;</span>, <span class="string">&quot;14444444444&quot;</span>, <span class="string">&quot;15555555555&quot;</span>, <span class="string">&quot;16666666666&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name      phone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三  13333333333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四  14444444444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五  15555555555</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六  16666666666</span></span><br></pre></td></tr></table></figure><p>4）删除列</p><p>（1）通过 df.drop(“列名”, axis=1) 删除，也可是删除行 axis=0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df.drop(<span class="string">&quot;phone&quot;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 删除phone，按列删除，inplace=True表示直接在原对象上修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br></pre></td></tr></table></figure><p>（2）通过 del df[“列名”] 删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df[<span class="string">&quot;phone&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br></pre></td></tr></table></figure><p>5）插入列</p><p>通过 insert(loc, column, value) 插入。该方法没有inplace参数，直接在原数据上修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df.insert(loc=<span class="number">0</span>, column=<span class="string">&quot;phone&quot;</span>, value=df[<span class="string">&quot;age&quot;</span>] * df.index)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    phone  age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  2020  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  3060  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  4120  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  1040  10  赵六</span></span><br></pre></td></tr></table></figure><h4 id="1-3-7-DataFrame数据的导入与导出">1.3.7 DataFrame数据的导入与导出</h4><p>1）导出数据</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>to_csv()</strong></td><td>将数据保存为csv格式文件，数据之间以逗号分隔，可通过sep参数设置使用其他分隔符，可通过index参数设置是否保存行标签，可通过header参数设置是否保存列标签。</td></tr><tr><td><strong>to_pickle()</strong></td><td>如要保存的对象是计算的中间结果，或者保存的对象以后会在Python中复用，可把对象保存为.pickle文件。如果保存成pickle文件，只能在python中使用。文件的扩展名可以是.p、.pkl、.pickle。</td></tr><tr><td><strong>to_excel()</strong></td><td>保存为Excel文件，需安装openpyxl包。</td></tr><tr><td><strong>to_clipboard()</strong></td><td>保存到剪切板。</td></tr><tr><td><strong>to_dict()</strong></td><td>保存为字典。</td></tr><tr><td><strong>to_hdf()</strong></td><td>保存为HDF格式，需安装tables包。</td></tr><tr><td><strong>to_html()</strong></td><td>保存为HTML格式，需安装lxml、html5lib、beautifulsoup4包。</td></tr><tr><td><strong>to_json()</strong></td><td>保存为JSON格式。</td></tr><tr><td><strong>to_feather()</strong></td><td>feather是一种文件格式，用于存储二进制对象。feather对象也可以加载到R语言中使用。feather格式的主要优点是在Python和R语言之间的读写速度要比csv文件快。feather数据格式通常只用中间数据格式，用于Python和R之间传递数据，一般不用做保存最终数据。需安装pyarrow包。</td></tr><tr><td><strong>to_sql()</strong></td><td>保存到数据库。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">&quot;data&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>], <span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;id&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;data/df.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;data/df.tsv&quot;</span>, sep=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 设置分隔符为 \t</span></span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;data/df_noindex.csv&quot;</span>, index=<span class="literal">False</span>)  <span class="comment"># index=False 不保存行索引</span></span><br><span class="line"></span><br><span class="line">df.to_pickle(<span class="string">&quot;data/df.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_excel(<span class="string">&quot;data/df.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_clipboard()</span><br><span class="line"></span><br><span class="line">df_dict = df.to_dict()</span><br><span class="line"></span><br><span class="line">df.to_hdf(<span class="string">&quot;data/df.h5&quot;</span>, key=<span class="string">&quot;df&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_html(<span class="string">&quot;data/df.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_json(<span class="string">&quot;data/df.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_feather(<span class="string">&quot;data/df.feather&quot;</span>)</span><br></pre></td></tr></table></figure><p>2）导入数据</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>read_csv()</strong></td><td>加载csv格式的数据。可通过sep参数指定分隔符，可通过index_col参数指定行索引。</td></tr><tr><td><strong>read_pickle()</strong></td><td>加载pickle格式的数据。</td></tr><tr><td><strong>read_excel()</strong></td><td>加载Excel格式的数据。</td></tr><tr><td><strong>read_clipboard()</strong></td><td>加载剪切板中的数据。</td></tr><tr><td><strong>read_hdf()</strong></td><td>加载HDF格式的数据。</td></tr><tr><td><strong>read_html()</strong></td><td>加载HTML格式的数据。</td></tr><tr><td><strong>read_json()</strong></td><td>加载JSON格式的数据。</td></tr><tr><td><strong>read_feather()</strong></td><td>加载feather格式的数据。</td></tr><tr><td><strong>read_sql()</strong></td><td>加载数据库中的数据。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">df_csv = pd.read_csv(<span class="string">&quot;data/df.csv&quot;</span>, index_col=<span class="string">&quot;id&quot;</span>)  <span class="comment"># 指定行索引</span></span><br><span class="line"></span><br><span class="line">df_tsv = pd.read_csv(<span class="string">&quot;data/df.tsv&quot;</span>, sep=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 指定分隔符</span></span><br><span class="line"></span><br><span class="line">df_pkl = pd.read_pickle(<span class="string">&quot;data/df.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_excel = pd.read_excel(<span class="string">&quot;data/df.xlsx&quot;</span>, index_col=<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_clipboard = pd.read_clipboard(index_col=<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_from_dict = pd.DataFrame(df_dict)</span><br><span class="line"></span><br><span class="line">df_hdf = pd.read_hdf(<span class="string">&quot;data/df.h5&quot;</span>, key=<span class="string">&quot;df&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_html = pd.read_html(<span class="string">&quot;data/df.html&quot;</span>, index_col=<span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">df_json = pd.read_json(<span class="string">&quot;data/df.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_feather = pd.read_feather(<span class="string">&quot;data/df.feather&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_csv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_tsv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_pkl)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_excel)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_clipboard)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_from_dict)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_hdf)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_html)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_json)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_feather)</span><br></pre></td></tr></table></figure><h3 id="1-4-Pandas日期数据处理初识">1.4 Pandas日期数据处理初识</h3><h4 id="1-4-1-to-datetime-进行日期格式转换">1.4.1 to_datetime()进行日期格式转换</h4><p>1）参数说明</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>arg</strong></td><td>要转换为日期时间的对象</td></tr><tr><td><strong>errors</strong></td><td>ignore,raise,coerce, 默认为ignore,表示无效的解析将会返回原值</td></tr><tr><td><strong>dayfirst</strong></td><td>指定日期解析顺序。如果为True，则以日期开头解析日期，例如：“10/11/12”解析为2012-11-10。默认false</td></tr><tr><td><strong>yearfirst</strong></td><td>如果为True，则以日期开头解析，例如：“10/11/12”解析为2010-11-12。如果dayfirst和yearfirst都为True，则yearfirst在前面。默认false。当日期字符串格式不明确时，指定年份是否在最前面。当日期字符串是 ‘2010/1/4’ 这种形式，由于年份是 4 位数字，pandas 能很清晰地识别出这是年份，所以即使 yearfirst 为 False，也不会影响其正确解析</td></tr><tr><td><strong>utc</strong></td><td>返回utc，即协调世界时间</td></tr><tr><td><strong>format</strong></td><td>格式化显示时间的格式，字符串，默认值为None</td></tr><tr><td><strong>exact</strong></td><td>要求格式完全匹配</td></tr><tr><td><strong>unit</strong></td><td>参数的单位表示时间的单位</td></tr><tr><td><strong>infer_datetime_format</strong></td><td>如果为True且未给出格式，则尝试基于第一个非nan元素推断datetime字符串的格式，如果可以推断，则切换到更快的解析方法。在某些情况下，这可以将解析速度提高5-10倍。</td></tr><tr><td><strong>origin</strong></td><td>默认值为unix,定义参考日期1970-01-01</td></tr><tr><td><strong>cache</strong></td><td>使用唯一的已转换日期缓存来应用日期时间转换。在解析重复日期字符串时产生显著的加速。</td></tr></tbody></table><p>2）将字符串字段转换为日期类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;gmv&quot;</span>:[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>],<span class="string">&quot;trade_date&quot;</span>:[<span class="string">&quot;2025-01-06&quot;</span>,<span class="string">&quot;2023-10-31&quot;</span>,<span class="string">&quot;2023-12-31&quot;</span>,<span class="string">&quot;2023-01-05&quot;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;ymd&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;trade_date&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>1.4.2 时间属性访问器对象Series.dt,获取日期数据的年月日星期</p><p>1）获取年月日</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;yy&#x27;</span>],df[<span class="string">&#x27;mm&#x27;</span>],df[<span class="string">&#x27;dd&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.year,df[<span class="string">&#x27;ymd&#x27;</span>].dt.month,df[<span class="string">&#x27;ymd&#x27;</span>].dt.day</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>2）获取星期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;week&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.day_name()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>3）获取日期所在季度</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;quarter&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.quarter</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>4）判断日期是否月底年底</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;mend&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.is_month_end</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;yend&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.is_year_end</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h4 id="1-4-3-to-period-获取统计周期">1.4.3 to_period()获取统计周期</h4><p>freq：这是 to_period() 方法最重要的参数，用于指定要转换的时间周期频率</p><p>常见的取值如下：</p><p>Ø “D”：按天周期，例如 2024-01-01 会转换为 2024-01-01 这个天的周期。</p><p>Ø “W”：按周周期，通常以周日作为一周的结束，比如日期落在某一周内，就会转换为该周的周期表示。</p><p>Ø “M”：按月周期，像 2024-05-15 会转换为 2024-05。</p><p>Ø “Q”：按季度周期，一年分为四个季度，日期会转换到对应的季度周期，例如 2024Q2 。</p><p>Ø “A” 或 “Y”：按年周期，如 2024-07-20 会转换为 2024 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;ystat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;mstat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;M&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;qstat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;Q&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;wstat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h3 id="1-5-DataFrame数据分析入门">1.5 DataFrame数据分析入门</h3><h4 id="1-5-1-加载数据集">1.5.1 加载数据集</h4><p>使用weather（天气）数据集。其中包含6个字段：</p><p>Ø date：日期，年-月-日格式。</p><p>Ø precipitation：降水量。</p><p>Ø temp_max：最高温度。</p><p>Ø temp_min：最低温度。</p><p>Ø wind：风力。</p><p>Ø weather：天气状况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;D:\\Note\\机器学习\\2.资料\\data\\weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))  <span class="comment"># 查看df类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.shape)  <span class="comment"># 查看df形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.columns)  <span class="comment"># 查看df的列名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dtypes)  <span class="comment"># 查看df各列数据类型</span></span><br><span class="line"></span><br><span class="line">df.info()  <span class="comment"># 查看df基本信息</span></span><br></pre></td></tr></table></figure><p>pandas与Python常用数据类型对照：</p><table><thead><tr><th><strong>pandas****类型</strong></th><th><strong>Python****类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>object</strong></td><td>string</td><td>字符串类型</td></tr><tr><td><strong>int64</strong></td><td>int</td><td>整型</td></tr><tr><td><strong>float64</strong></td><td>float</td><td>浮点型</td></tr><tr><td><strong>datetime64</strong></td><td>datetime</td><td>日期时间类型</td></tr></tbody></table><h4 id="1-5-2-查看部分数据">1.5.2 查看部分数据</h4><p>1）通过head()、tail()获取前n行或后n行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>2）获取一列或多列数据</p><p>（1）加载一列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_date_series = df[<span class="string">&quot;date&quot;</span>]  <span class="comment"># 返回的是Series</span></span><br><span class="line"></span><br><span class="line">df_date_dataframe = df[[<span class="string">&quot;date&quot;</span>]]  <span class="comment"># 返回的是DataFrame</span></span><br><span class="line"><span class="comment"># 双层中括号 [[&quot;date&quot;]] 表示选择列列表（即使只有一列），返回的是 DataFrame（二维数据结构）</span></span><br></pre></td></tr></table></figure><blockquote><table><thead><tr><th>操作方式</th><th>返回类型</th><th>数据结构</th><th>适用场景</th></tr></thead><tbody><tr><td><code>df[&quot;date&quot;]</code></td><td><code>Series</code></td><td>一维</td><td>单列操作（如 <code>.apply()</code>, <code>.str</code> 方法）</td></tr><tr><td><code>df[[&quot;date&quot;]]</code></td><td><code>DataFrame</code></td><td>二维</td><td>需要保持 <code>DataFrame</code> 结构的操作（如 <code>.merge()</code>, <code>.join()</code>）</td></tr></tbody></table><h3 id="为什么这样设计？"><strong>为什么这样设计？</strong></h3><ul><li><strong>灵活性</strong>：<code>Series</code> 适合单列计算（如 <code>.str</code> 字符串操作、<code>.dt</code> 时间操作），而 <code>DataFrame</code> 适合表格操作（如合并、分组）。</li><li><strong>一致性</strong>：<code>[[&quot;col1&quot;, &quot;col2&quot;]]</code> 总是返回 <code>DataFrame</code>，即使只选一列，避免因列数不同而改变类型。</li></ul></blockquote><p>（2）加载多列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">&quot;date&quot;</span>, <span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]]  <span class="comment"># 获取多列数据</span></span><br></pre></td></tr></table></figure><p>3）按行获取数据</p><p>（1）<strong>loc</strong>：通过行标签获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">1</span>]  <span class="comment"># 获取行标签为1的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[[<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]]  <span class="comment"># 获取行标签分别为1、10、100的数据</span></span><br></pre></td></tr></table></figure><p>（2）<strong>iloc</strong>：通过行位置获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>]  <span class="comment"># 获取行位置为0的数据</span></span><br><span class="line"></span><br><span class="line">df.iloc[-<span class="number">1</span>]  <span class="comment"># 获取行位置为最后一位的数据</span></span><br></pre></td></tr></table></figure><p>4）获取指定行与列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">1</span>, <span class="string">&quot;precipitation&quot;</span>]  <span class="comment"># 获取行标签为1，列标签为precipitation的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[:, <span class="string">&quot;precipitation&quot;</span>]  <span class="comment"># 获取所有行，列标签为precipitation的数据</span></span><br><span class="line"></span><br><span class="line">df.iloc[:, [<span class="number">3</span>, <span class="number">5</span>, -<span class="number">1</span>]]  <span class="comment"># 获取所有行，列位置为3，5，最后一位的数据</span></span><br><span class="line"></span><br><span class="line">df.iloc[:<span class="number">10</span>, <span class="number">2</span>:<span class="number">6</span>]  <span class="comment"># 获取前10行，列位置为2、3、4、5的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[:<span class="number">10</span>, [<span class="string">&quot;date&quot;</span>, <span class="string">&quot;precipitation&quot;</span>, <span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]]  <span class="comment"># 通过行列标签获取数据</span></span><br></pre></td></tr></table></figure><h4 id="1-5-3-分组聚合计算">1.5.3 分组聚合计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&quot;分组字段&quot;</span>)[<span class="string">&quot;要聚合的字段&quot;</span>].聚合函数()</span><br><span class="line"></span><br><span class="line">df.groupby([<span class="string">&quot;分组字段&quot;</span>, <span class="string">&quot;分组字段2&quot;</span>, ...])[[<span class="string">&quot;要聚合的字段&quot;</span>, <span class="string">&quot;要聚合的字段2&quot;</span>, ...]].聚合函数()</span><br></pre></td></tr></table></figure><p>（1）将数据按月分组，并统计最大温度和最小温度的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串类型的日期date转换为datetime日期pd.to_datetime(df[&quot;date&quot;])</span></span><br><span class="line">df[<span class="string">&quot;month&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).dt.to_period(<span class="string">&quot;M&quot;</span>).astype(<span class="built_in">str</span>)  <span class="comment"># 将date转换为 年-月 的格式</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df_groupby_date = df.groupby(<span class="string">&quot;month&quot;</span>)  <span class="comment"># 按month分组，返回一个分组对象(DataFrameGroupBy)</span></span><br><span class="line"></span><br><span class="line">month_temp = df_groupby_date[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]]  <span class="comment"># 从分组对象中选择特定的列</span></span><br><span class="line"></span><br><span class="line">month_temp_mean = month_temp.mean()  <span class="comment"># 对每个列求平均值</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上代码可以写在一起</span></span><br><span class="line"></span><br><span class="line">month_temp_mean = df.groupby(<span class="string">&quot;month&quot;</span>)[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]].mean()</span><br><span class="line"></span><br><span class="line"><span class="comment">#      temp_max  temp_min</span></span><br><span class="line"><span class="comment"># month</span></span><br><span class="line"><span class="comment"># 2012-01  7.054839  1.541935</span></span><br><span class="line"><span class="comment"># 2012-02  9.275862  3.203448</span></span><br><span class="line"><span class="comment"># 2012-03  9.554839  2.838710</span></span><br><span class="line"><span class="comment"># 2012-04  14.873333  5.993333</span></span><br><span class="line"><span class="comment"># 2012-05  17.661290  8.190323</span></span><br></pre></td></tr></table></figure><p>分组后默认会将分组字段作为行索引。如果分组字段有多个，得到的是复合索引。</p><p>（2）分组频数计算</p><p>统计每个月不同天气状况的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&quot;month&quot;</span>)[<span class="string">&quot;weather&quot;</span>].nunique()</span><br><span class="line"></span><br><span class="line"><span class="comment"># date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-01   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-02   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-03   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-04   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-05   3</span></span><br></pre></td></tr></table></figure><h4 id="1-5-4-基本绘图">1.5.4 基本绘图</h4><p>plot()：pandas 提供的绘图方法，它基于 matplotlib 库。将前面计算得到的均值结果绘制成图表，默认情况下会绘制折线图，其中 “month” 作为 x 轴，“temp_max” 和 “temp_min” 的均值作为 y 轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&quot;month&quot;</span>)[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]].mean().plot()  <span class="comment"># 使用plot绘制折线图</span></span><br></pre></td></tr></table></figure><p>​</p><h4 id="1-5-5-常用统计值">1.5.5 常用统计值</h4><p>可通过describe()查看常用统计信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.describe()  <span class="comment"># 查看常用统计信息</span></span><br><span class="line"></span><br><span class="line">df.describe().T  <span class="comment"># 行列转置</span></span><br></pre></td></tr></table></figure><p>可通过include参数指定要统计哪些数据类型的列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.describe(include=<span class="string">&quot;all&quot;</span>)  <span class="comment"># 统计所有列</span></span><br><span class="line"></span><br><span class="line">df.describe(include=[<span class="string">&quot;float64&quot;</span>])  <span class="comment"># 只统计数据类型为float64的列</span></span><br></pre></td></tr></table></figure><h4 id="1-5-6-常用排序方法">1.5.6 常用排序方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**nlargest(n, [****列名<span class="number">1</span>,** **列名<span class="number">2</span>, …])****：**按列排序的最大n个</span><br><span class="line"></span><br><span class="line">**nsmallest(n, [****列名<span class="number">1</span>,** **列名<span class="number">2</span>, …])****：**按列排序的最小n个</span><br><span class="line"></span><br><span class="line">**sort_values([****列名<span class="number">1</span>,** **列名<span class="number">2</span>, …], asceding=[<span class="literal">True</span>, <span class="literal">False</span>, …])****：**按列升序或降序排序</span><br><span class="line"></span><br><span class="line">**drop_duplicates(subset=[****列名<span class="number">1</span>,** **列名<span class="number">2</span>])****：**按列去重</span><br></pre></td></tr></table></figure><p>（1）找到最高温度最大的30天</p><p>通过nlargest()找出temp_max最大的30条数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.nlargest(<span class="number">30</span>, <span class="string">&quot;temp_max&quot;</span>) </span><br></pre></td></tr></table></figure><p>（2）从最高温度最大的30天中找出最低温度最小的5天</p><p>通过nlargest()找出temp_min最小的5条数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.nlargest(<span class="number">30</span>, <span class="string">&quot;temp_max&quot;</span>).nsmallest(<span class="number">5</span>, <span class="string">&quot;temp_min&quot;</span>)</span><br></pre></td></tr></table></figure><p>（3）找出每年的最高温度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;year&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).dt.to_period(<span class="string">&quot;Y&quot;</span>).astype(<span class="built_in">str</span>)  <span class="comment"># 将date转换为 年 格式</span></span><br><span class="line"></span><br><span class="line">df_sort = df.sort_values([<span class="string">&quot;year&quot;</span>, <span class="string">&quot;temp_max&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>])  <span class="comment"># 按year升序，temp_max降序排序</span></span><br><span class="line"></span><br><span class="line">df_sort.drop_duplicates(subset=<span class="string">&quot;year&quot;</span>)  <span class="comment"># 按year去重</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather  year</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 228  2012-08-16       0.0    34.4    18.3  2.8   sun 2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 546  2013-06-30       0.0    33.9    17.2  2.5   sun 2013</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 953  2014-08-11       0.5    35.6    17.8  2.6   rain 2014</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1295  2015-07-19       0.0    35.0    17.2  3.3   sun 2015</span></span><br></pre></td></tr></table></figure><h4 id="1-5-7-案例：简单数据分析练习">1.5.7 案例：简单数据分析练习</h4><p>使用employees（员工）数据集，其中包含10个字段：</p><p>Ø employee_id：员工id。</p><p>Ø first_name：员工名称。</p><p>Ø last_name：员工姓氏。</p><p>Ø email：员工邮箱。</p><p>Ø phone_number：员工电话号码。</p><p>Ø job_id：员工工种。</p><p>Ø salary：员工薪资。</p><p>Ø commission_pct：员工佣金比例。</p><p>Ø manager_id：员工领导的id。</p><p>Ø department_id：员工的部门id。</p><p>1）加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 加载员工数据</span></span><br></pre></td></tr></table></figure><p>2）查看数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment"># 查看前5行</span></span><br><span class="line"></span><br><span class="line">df.info() <span class="comment"># 查看数据信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.describe())  <span class="comment"># 查看统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.shape)  <span class="comment"># 查看数据形状</span></span><br></pre></td></tr></table></figure><p>3）找出薪资最低、最高的员工</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&quot;salary&quot;</span>] == df[<span class="string">&quot;salary&quot;</span>].<span class="built_in">min</span>()])  <span class="comment"># 找出最低薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[df[<span class="string">&quot;salary&quot;</span>] == df[<span class="string">&quot;salary&quot;</span>].<span class="built_in">min</span>()])  <span class="comment"># 找出最低薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[df[<span class="string">&quot;salary&quot;</span>] == df[<span class="string">&quot;salary&quot;</span>].<span class="built_in">max</span>()])  <span class="comment"># 找出最高薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(<span class="string">&quot;salary&quot;</span>).head(<span class="number">1</span>))  <span class="comment"># 使用排序的方法找出最低薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(<span class="string">&quot;salary&quot;</span>, ascending=<span class="literal">False</span>).head(<span class="number">1</span>))  <span class="comment"># 使用排序的方法找出最高薪资的员工</span></span><br></pre></td></tr></table></figure><p>4）找出薪资最高的10名员工</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.nlargest(<span class="number">10</span>, <span class="string">&quot;salary&quot;</span>))  <span class="comment"># 薪资最高的10名员工</span></span><br></pre></td></tr></table></figure><p>5）查看所有部门id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;department_id&quot;</span>].unique())  <span class="comment"># 所有部门id</span></span><br></pre></td></tr></table></figure><p>6）查看每个部门的员工数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;employee_id&quot;</span>].count().rename(<span class="string">&quot;employee_count&quot;</span>))  <span class="comment"># 查看每个部门的员工数</span></span><br></pre></td></tr></table></figure><p>7）绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;employee_id&quot;</span>].count().rename(<span class="string">&quot;employee_count&quot;</span>))  <span class="comment"># 查看每个部门的员工数</span></span><br></pre></td></tr></table></figure><p>​</p><p>8）薪资的分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;salary&quot;</span>].mean())  <span class="comment"># 平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;salary&quot;</span>].std())  <span class="comment"># 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;salary&quot;</span>].median())  <span class="comment"># 中位数</span></span><br></pre></td></tr></table></figure><p>9）找出平均薪资最高的部门id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].mean().nlargest(<span class="number">1</span>))  <span class="comment"># 平均薪资最高的部门</span></span><br></pre></td></tr></table></figure><h3 id="1-6-Padas的数据组合函数">1.6 Padas的数据组合函数</h3><h4 id="1-6-1-concat连接">1.6.1 concat连接</h4><p>沿着一条轴将多个对象堆叠到一起，可通过axis参数设置沿哪一条轴连接。</p><p>1）Series与Series连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>], index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">s2 = pd.Series([<span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>], index=[<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">s3 = pd.Series([<span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>], index=[<span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([s1, s2, s3])  <span class="comment"># 按行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1   A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2   B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4   D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5   E</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7   G</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8   H</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: object</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([s1, s2, s3], axis=<span class="number">1</span>)  <span class="comment"># 按列连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    0   1   2</span></span><br><span class="line"><span class="comment"># 1   A  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2   B  NaN  NaN</span></span><br><span class="line"><span class="comment"># 4  NaN   D  NaN</span></span><br><span class="line"><span class="comment"># 5  NaN   E  NaN</span></span><br><span class="line"><span class="comment"># 7  NaN  NaN   G</span></span><br><span class="line"><span class="comment"># 8  NaN  NaN   H</span></span><br><span class="line">缺失值会用NaN填充。</span><br></pre></td></tr></table></figure><p>2）DataFrame与Series连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">s1 = pd.Series(data=[<span class="number">7</span>, <span class="number">10</span>], index=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, s1])  <span class="comment"># 按行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a   b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  7  NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  10  NaN</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, s1], axis=<span class="number">1</span>)  <span class="comment"># 按列连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b  a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4  7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5  10</span></span><br></pre></td></tr></table></figure><p>3）DataFrame与DataFrame连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">7</span>, <span class="number">8</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2])  <span class="comment"># 按行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  7  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  8  11</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2], axis=<span class="number">1</span>)  <span class="comment"># 按列连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b  a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4  7  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5  8  11</span></span><br></pre></td></tr></table></figure><p>4）重置索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">可通过ignore_index=<span class="literal">True</span>来重置索引。</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">7</span>, <span class="number">8</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2], ignore_index=<span class="literal">True</span>)  <span class="comment"># 重置索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0  1  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  2  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  7  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3  8  11</span></span><br></pre></td></tr></table></figure><p>5）类似join的连接</p><p>默认的合并方式是对其他轴进行并集合并（join=outer），可以用join=inner实现其他轴上的交集合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;b&quot;</span>: [<span class="number">7</span>, <span class="number">8</span>], <span class="string">&quot;c&quot;</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;, index=[<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    a  b   c</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  1.0  4  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  2.0  5  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  NaN  7  10.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  NaN  8  11.0</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2], join=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   b</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  7</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  8</span></span><br></pre></td></tr></table></figure><h4 id="1-6-2-merge合并">1.6.2 merge合并</h4><p>通过一个或多个列将行连接。</p><p>1）数据连接的类型</p><p>merge()实现了三种数据连接的类型：一对一、多对一和多对多。</p><p>（1）一对一连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;hire_date&quot;</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   Lisa    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1    Bob    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Jake    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue    2014</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 通过相同的字段名employee进行关联的</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR    2014</span></span><br></pre></td></tr></table></figure><p>（2）多对一连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">在需要连接的两个列中，有一列的值有重复。通过多对一连接获得的结果将会保留重复值。</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>], <span class="string">&quot;supervisor&quot;</span>: [<span class="string">&quot;Carly&quot;</span>, <span class="string">&quot;Guido&quot;</span>, <span class="string">&quot;Steve&quot;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      group supervisor</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Accounting    Carly</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Engineering    Guido</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2      HR    Steve</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group supervisor</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting    Carly</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering    Guido</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering    Guido</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR    Steve</span></span><br><span class="line"></span><br><span class="line">在supervisor列中有些值会因为输入数据的对应关系而有所重复。</span><br></pre></td></tr></table></figure><p>（3）多对多连接</p><p>如果左右两个输入的共同列都包含重复值，那么合并的结果就是一种多对多连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>, <span class="string">&quot;HR&quot;</span>],</span><br><span class="line"></span><br><span class="line">​    <span class="string">&quot;skills&quot;</span>: [<span class="string">&quot;math&quot;</span>, <span class="string">&quot;spreadsheets&quot;</span>, <span class="string">&quot;coding&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;spreadsheets&quot;</span>, <span class="string">&quot;organization&quot;</span>],</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      group     skills</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Accounting      math</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Accounting  spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Engineering     coding</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Engineering     linux</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4      HR  spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5      HR  organization</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group     skills</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting      math</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1    Bob  Accounting  spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Jake  Engineering     coding</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3   Jake  Engineering     linux</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4   Lisa  Engineering     coding</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5   Lisa  Engineering     linux</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 6    Sue      HR spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 7    Sue      HR organization</span></span><br></pre></td></tr></table></figure><p>多对多连接产生的是行的笛卡尔积。由于左边有2个Engineering，右边有2个Engineering，所以最终结果有4个Engineering。</p><p>2）设置合并的键与索引</p><p>merge()会将两个输入的一个或多个共同列作为键进行合并。但由于两个输入要合并的列通常都不是同名的，因此merge()提供了一些参数处理这个问题。</p><p>（1）通过on指定使用某个列连接，只能在有共同列名的时候使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;hire_date&quot;</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   Lisa    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1    Bob    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Jake    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue    2014</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2, on=<span class="string">&quot;employee&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR    2014</span></span><br></pre></td></tr></table></figure><p>（2）两对象列名不同，通过left_on和right_on分别指定列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;salary&quot;</span>: [<span class="number">70000</span>, <span class="number">80000</span>, <span class="number">120000</span>, <span class="number">90000</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  salary</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob  70000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake  80000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa  120000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue  90000</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2, left_on=<span class="string">&quot;employee&quot;</span>, right_on=<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group  name  salary</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting  Bob  70000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering  Jake  80000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering  Lisa  120000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR  Sue  90000</span></span><br></pre></td></tr></table></figure><p>（3）通过left_index和right_index设置合并的索引</p><p>通过设置merge()中的left_index、right_index参数将索引设置为键来实现合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;hire_date&quot;</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df1.set_index(<span class="string">&quot;employee&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df2.set_index(<span class="string">&quot;employee&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># employee</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Bob     Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Jake    Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Lisa    Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Sue         HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># employee</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Lisa      2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Bob       2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Jake      2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Sue       2014</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 设置索引后，如果不指定关联列会报错，建议通过以下方式指定，on=&quot;employee&quot;也可#以实现，但是不同的解释器可能效果不一样，因为设置索引后，employee就不算是列了</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2, left_index=<span class="literal">True</span>, right_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         group  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># employee</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Bob     Accounting    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Jake    Engineering    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Lisa    Engineering    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Sue         HR    2014</span></span><br></pre></td></tr></table></figure><p>DataFrame实现了join()方法，可以按照索引进行数据合并。但要求没有重叠的列，或通过lsuffix、rsuffix指定重叠列的后缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;value1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;value2&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 合并两个 DataFrame，并处理列名冲突</span></span><br><span class="line"></span><br><span class="line">df1.join(df2,lsuffix=<span class="string">&#x27;_left&#x27;</span>,rsuffix=<span class="string">&#x27;_right&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3）设置数据连接的集合操作规则</p><p>当一个值出现在一列，却没有出现在另一列时，就需要考虑集合操作规则了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Paul&quot;</span>, <span class="string">&quot;Mary&quot;</span>], <span class="string">&quot;food&quot;</span>: [<span class="string">&quot;fish&quot;</span>, <span class="string">&quot;beans&quot;</span>, <span class="string">&quot;bread&quot;</span>]&#125;, columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;food&quot;</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;Joseph&quot;</span>], <span class="string">&quot;drink&quot;</span>: [<span class="string">&quot;wine&quot;</span>, <span class="string">&quot;beer&quot;</span>]&#125;, columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;drink&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  food</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Peter  fish</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Paul  beans</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Mary  bread</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    name drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   Mary  wine</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Joseph  beer</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  food drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Mary  bread  wine</span></span><br></pre></td></tr></table></figure><p>合并两个数据集，在name列中只有一个共同的值Mary。默认情况下，结果中只会包含两个输入集合的交集，这种连接方式被称为内连接（inner join）。</p><p>我们可以通过how参数设置连接方式，默认值为inner。how参数支持的数据连接方式还有outer、left和right。外连接（outer join）返回两个输入列的并集，所有缺失值都用 NaN 填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, how=<span class="string">&quot;outer&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    name  food drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Joseph   NaN  beer</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Mary  bread  wine</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Paul  beans  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Peter  fish  NaN</span></span><br><span class="line"></span><br><span class="line">左连接（left join）和右连接（right join）返回的结果分别只包含左列和右列。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, how=<span class="string">&quot;left&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  food drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Peter  fish  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Paul  beans  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Mary  bread  wine</span></span><br></pre></td></tr></table></figure><p>4）重复列名的处理</p><p>可能会遇到两个输入DataFrame有重名列的情况，merge()会自动为其增加后缀_x和_y，也可以通过suffixes参数自定义后缀名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;rank&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;rank&quot;</span>: [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob   1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa   3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue   4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob   3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake   1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa   4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue   2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, on=<span class="string">&quot;name&quot;</span>))  <span class="comment"># 不指定后缀名，默认为_x和_y</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank_x  rank_y</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob    1    3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake    2    1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa    3    4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue    4    2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, on=<span class="string">&quot;name&quot;</span>, suffixes=(<span class="string">&quot;_df1&quot;</span>, <span class="string">&quot;_df2&quot;</span>)))  <span class="comment"># 通过suffixes指定后缀名</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank_df1  rank_df2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob     1     3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake     2     1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa     3     4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue     4     2</span></span><br></pre></td></tr></table></figure><h3 id="1-7-Padas的缺失值处理函数">1.7 Padas的缺失值处理函数</h3><h4 id="1-7-1-pandas中的缺失值">1.7.1 pandas中的缺失值</h4><p>pandas使用浮点值NaN（Not a Number）表示缺失数据，使用NA（Not Available）表示缺失值。可以通过isnull()、isna()或notnull()、notna()方法判断某个值是否为缺失值。</p><p>Nan通常表示一个无效的或未定义的数字值，是浮点数的一种特殊取值，用于表示那些不能表示为正常数字的情况，如 0/0、∞-∞等数学运算的结果。nan与任何值（包括它自身）进行比较的结果都为False。例如在 Python 中，nan == nan返回False。</p><p>NA一般用于表示数据不可用或缺失的情况，它的含义更侧重于数据在某种上下文中是缺失或不存在的，不一定特指数字类型的缺失。</p><p>na和nan都用于表示缺失值，但nan更强调是数值计算中的特殊值，而na更强调数据的可用性或存在性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([np.nan, <span class="literal">None</span>, pd.NA])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   None</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.isnull())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: bool</span></span><br></pre></td></tr></table></figure><h4 id="1-7-2-加载数据中包含缺失值">1.7.2 加载数据中包含缺失值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>可以通过keep_default_na参数设置是否将空白值设置为缺失值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>, keep_default_na=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date precipitation temp_max temp_min wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6   12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>可通过na_values参数将指定值设置为缺失值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>, na_values=[<span class="string">&quot;2015-12-31&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460     NaN      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><h4 id="1-7-3-查看缺失值">1.7.3 查看缺失值</h4><p>1）通过isnull()查看缺失值数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># date        0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># precipitation   303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># temp_max     303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># temp_min     303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># wind       303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># weather      303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: int64</span></span><br></pre></td></tr></table></figure><p>2）通过missingno条形图展示缺失值</p><p>先安装missingno包：pip install missingno</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msno</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">msno.bar(df)</span><br></pre></td></tr></table></figure><p><img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250728072336765.png" alt="image-20250728072336765"></p><p>​</p><p>3）通过热力图查看缺失值的相关性</p><p>missingno绘制的热力图能够展示数据集中不同列的缺失值之间的相关性。这里的相关性体现的是当某一列出现缺失值时，其他列出现缺失值的可能性。如果两个列的缺失值呈现正相关，意味着当其中一列有缺失值时，另一列也很可能有缺失值；若为负相关，则表示当一列有缺失值时，另一列更倾向于没有缺失值。</p><p>Ø 颜色与数值：热力图中的颜色和数值反映了列之间缺失值的相关性。接近 1 表示正相关，接近 -1 表示负相关，接近 0 则表示缺失值之间没有明显的关联。</p><p>Ø 示例说明：假如 A 列和 B 列在热力图中对应区域颜色较深且数值接近 1，这就表明当 A 列出现缺失值时，B 列也很可能出现缺失值；若数值接近 -1，情况则相反。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msno.heatmap(df)</span><br></pre></td></tr></table></figure><p><img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250728072411823.png" alt="image-20250728072411823"></p><p>​</p><h4 id="1-7-4-剔除缺失值">1.7.4 剔除缺失值</h4><p>通过dropna()方法来剔除缺失值。</p><p>1）Series剔除缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, pd.NA, <span class="literal">None</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0    1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1   &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2   None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.dropna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0   1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: object</span></span><br></pre></td></tr></table></figure><p>2）DataFrame剔除缺失值</p><p>无法从DataFrame中单独剔除一个值，只能剔除缺失值所在的整行或整列。默认情况下，dropna()会剔除任何包含缺失值的整行数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [pd.NA, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   2   3  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;   4  6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   0  1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  2  3  5</span></span><br></pre></td></tr></table></figure><p>可以设置按不同的坐标轴剔除缺失值，比如axis=1（或 axis=‘columns’）会剔除任何包含缺失值的整列数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [pd.NA, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   2   3  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;   4  6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  6</span></span><br></pre></td></tr></table></figure><p>有时只需要剔除全部是缺失值的行或列，或者绝大多数是缺失值的行或列。这些需求可以通过设置how或thresh参数来满足，它们可以设置剔除行或列缺失值的数量阈值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [pd.NA, pd.NA, <span class="number">5</span>], [pd.NA, pd.NA, pd.NA]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  &lt;NA&gt;  &lt;NA&gt;   5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(how=<span class="string">&quot;all&quot;</span>))  <span class="comment"># 如果所有值都是缺失值,则删除这一行</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  &lt;NA&gt;  &lt;NA&gt;  5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(thresh=<span class="number">2</span>))  <span class="comment"># 如果至少有2个值不是缺失值,则保留这一行</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  1  &lt;NA&gt;  2</span></span><br></pre></td></tr></table></figure><p>可以通过设置subset参数来设置某一列有缺失值则进行剔除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [pd.NA, pd.NA, <span class="number">5</span>], [pd.NA, pd.NA, pd.NA]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  &lt;NA&gt;  &lt;NA&gt;   5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(subset=[<span class="number">0</span>]))  <span class="comment"># 如果0列有缺失值,则删除这一行</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  1  &lt;NA&gt;  2</span></span><br></pre></td></tr></table></figure><h4 id="1-7-5-填充缺失值">1.7.5 填充缺失值</h4><p>1）使用固定值填充</p><p>通过fillna()方法，传入值或字典进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.fillna(<span class="number">0</span>).tail())  <span class="comment"># 使用固定值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.fillna(&#123;<span class="string">&quot;temp_max&quot;</span>: <span class="number">60</span>, <span class="string">&quot;temp_min&quot;</span>: -<span class="number">60</span>&#125;).tail())  <span class="comment"># 使用字典来填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>2）使用统计值填充</p><p>通过fillna()方法，传入统计后的值进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.fillna(df[[<span class="string">&quot;precipitation&quot;</span>, <span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>, <span class="string">&quot;wind&quot;</span>]].mean()).tail())  <span class="comment"># 使用平均值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation  temp_max  temp_min    wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31    20.600000  12.200000 5.000000  3.800000   rain</span></span><br></pre></td></tr></table></figure><p>3）使用前后的有效值填充</p><p>通过ffill()或bfill()方法使用前面或后面的有效值填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.ffill().tail())  <span class="comment"># 使用前面的有效值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.bfill().tail())  <span class="comment"># 使用后面的有效值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>4）通过线性插值填充</p><p>通过interpolate()方法进行线性插值填充。线性插值操作，就是用于在已知数据点之间估算未知数据点的值。interpolate 方法支持多种插值方法，可通过 method 参数指定，常见的方法有：</p><p>Ø ‘linear’：线性插值，基于两点之间的直线来估算缺失值，适用于数据呈线性变化的情况。</p><p>Ø ‘time’：适用于时间序列数据，会考虑时间间隔进行插值。</p><p>Ø ‘polynomial’：多项式插值，通过拟合多项式曲线来估算缺失值，可通过 order 参数指定多项式的阶数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 创建包含缺失值的 Series</span></span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>, np.nan, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 使用默认的线性插值方法填充缺失值</span></span><br><span class="line"></span><br><span class="line">s_interpolated = s.interpolate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s_interpolated)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   2.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   3.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3   4.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4   5.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5   6.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><h3 id="1-8-Padas的apply函数">1.8 Padas的apply函数</h3><p>apply()函数可以对DataFrame或Series的数据进行逐行、逐列或逐元素的操作。可以使用自定义函数对数据进行变换、计算或处理，通常用于处理复杂的变换逻辑，或者处理不能通过向量化操作轻松完成的任务。</p><h4 id="1-8-1-Series使用apply">1.8.1 Series使用apply()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;a&quot;</span>].apply(f))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   100</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   200</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   300</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: a, dtype: int64</span></span><br></pre></td></tr></table></figure><p>也可以传入lambda表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;a&quot;</span>].apply(<span class="keyword">lambda</span> x: x * <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   100</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   200</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   300</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: a, dtype: int64</span></span><br></pre></td></tr></table></figure><p>传入带参数的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y=<span class="number">10</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;a&quot;</span>].apply(f, y=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   50</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   100</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   150</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: a, dtype: int64</span></span><br></pre></td></tr></table></figure><h4 id="1-8-2-DataFrame使用apply">1.8.2 DataFrame使用apply()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.apply(f))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    a   b</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  100  400</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  200  500</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  300  600</span></span><br></pre></td></tr></table></figure><p>默认axis=0，按行方向进行操作，对列进行统计；</p><p>可以设置axis=1，按照列的方向进行操作，参数设置按行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x[<span class="string">&quot;a&quot;</span>] / x[<span class="string">&quot;b&quot;</span>]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.apply(f, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   0.25</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   0.40</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   0.50</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><p>注意：df.apply 一次只能处理一个 Series（当 axis=0 时处理列，当 axis=1 时处理行），而你定义的函数 f 接收两个参数，不能直接使用 df.apply(f)</p><h4 id="1-8-3-向量化函数">1.8.3 向量化函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> np.nan</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x / y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">0</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(df[<span class="string">&quot;a&quot;</span>], df[<span class="string">&quot;b&quot;</span>]))  <span class="comment"># ValueError</span></span><br></pre></td></tr></table></figure><p>上述代码会报错，因为y==0中，y为向量而0为标量。</p><p>（1）可以通过np.vectorize()将函数向量化来进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> np.nan</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x / y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">0</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line">f_vec = np.vectorize(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f_vec(df[<span class="string">&quot;a&quot;</span>], df[<span class="string">&quot;b&quot;</span>]))  <span class="comment"># [0.25  nan 0.5 ]</span></span><br></pre></td></tr></table></figure><p>（2）也可以使用@np.vectorize装饰器将函数向量化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@np.vectorize</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> np.nan</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x / y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">0</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(df[<span class="string">&quot;a&quot;</span>], df[<span class="string">&quot;b&quot;</span>]))  <span class="comment"># [0.25  nan 0.5 ]</span></span><br></pre></td></tr></table></figure><h3 id="1-9-Padas的数据聚合、转换、过滤函数">1.9 Padas的数据聚合、转换、过滤函数</h3><h4 id="1-9-1-DataFrameGroupBy对象">1.9.1 DataFrameGroupBy对象</h4><p>对DataFrame对象调用groupby()方法后，会返回DataFrameGroupBy对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>))  <span class="comment"># 按department_id分组，返回DataFrameGroupBy对象</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000024FCBAFD700&gt;</span></span><br></pre></td></tr></table></figure><p>这个对象可以看成是一种特殊形式的 DataFrame，里面隐藏着若干组数据，但是在没有应用累计函数之前不会计算。GroupBy对象是一种非常灵活的抽象类型。在大多数场景中，可以将它看成是DataFrame的集合。</p><p>1）查看分组</p><p>通过groups属性查看分组结果，返回一个字典，字典的键是分组的标签，值是属于该组的所有索引的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>).groups)  <span class="comment"># 查看分组结果</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># &#123;10.0: [100], 20.0: [101, 102], 30.0: [14, 15, 16, 17, 18, 19]...</span></span><br></pre></td></tr></table></figure><p>通过get_group()方法获取分组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>).get_group(<span class="number">50</span>))  <span class="comment"># 获取分组为50的数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   employee_id first_name   last_name   email...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20      120   Matthew     Weiss   MWEISS...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 21      121    Adam     Fripp   AFRIPP...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 22      122    Payam   Kaufling  PKAUFLIN...</span></span><br></pre></td></tr></table></figure><p>2）按列取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>])  <span class="comment"># 按department_id分组，取salary列</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x0000022456D6F2F0&gt;</span></span><br></pre></td></tr></table></figure><p>这里从原来的DataFrame中取某个列名作为一个Series组。与GroupBy对象一样，直到我们运行累计函数，才会开始计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].mean())  <span class="comment"># 计算每个部门平均薪资</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0    4400.000000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0    9500.000000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0    4150.000000</span></span><br></pre></td></tr></table></figure><p>3）按组迭代</p><p>GroupBy对象支持直接按组进行迭代，返回的每一组都是Series或DataFrame。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dept_id,group <span class="keyword">in</span> df.groupby(<span class="string">&quot;department_id&quot;</span>):</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;当前组为<span class="subst">&#123;dept_id&#125;</span>，组里的数据情况<span class="subst">&#123;group.shape&#125;</span>:&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(group.iloc[:,<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 当前组为10.0，组里的数据情况(1, 10):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#    employee_id first_name last_name</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 100      200  Jennifer   Whalen</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># -------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 当前组为20.0，组里的数据情况(2, 10):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#    employee_id first_name  last_name</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 101      201   Michael  Hartstein</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 102      202     Pat     Fay</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>4）按多字段分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">salary_mean = df.groupby([<span class="string">&quot;department_id&quot;</span>, <span class="string">&quot;job_id&quot;</span>])[</span><br><span class="line"></span><br><span class="line">  [<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>]</span><br><span class="line"></span><br><span class="line">].mean()  <span class="comment"># 按department_id和job_id分组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean.index)  <span class="comment"># 查看分组后的索引</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># MultiIndex([( 10.0,   &#x27;AD_ASST&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 20.0,   &#x27;MK_MAN&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 20.0,   &#x27;MK_REP&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 30.0,  &#x27;PU_CLERK&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 30.0,   &#x27;PU_MAN&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean.columns)  <span class="comment"># 查看分组后的列</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Index([&#x27;salary&#x27;, &#x27;commission_pct&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"></span><br><span class="line">按多个字段分组后得到的索引为复合索引。</span><br><span class="line"></span><br><span class="line">可通过reset_index()方法重置索引。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean.reset_index())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   department_id    job_id     salary  commission_pct</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0       10.0   AD_ASST  4400.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1       20.0    MK_MAN 13000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2       20.0    MK_REP  6000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3       30.0   PU_CLERK  2780.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4       30.0    PU_MAN 11000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">也可以在分组的时候通过as_index = <span class="literal">False</span>参数（默认是<span class="literal">True</span>）重置索引。</span><br><span class="line"></span><br><span class="line">salary_mean = df.groupby([<span class="string">&quot;department_id&quot;</span>, <span class="string">&quot;job_id&quot;</span>], as_index=<span class="literal">False</span>)[</span><br><span class="line"></span><br><span class="line">  [<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>]</span><br><span class="line"></span><br><span class="line">].mean()  <span class="comment"># 按department_id和job_id分组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   department_id    job_id     salary  commission_pct</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0       10.0   AD_ASST  4400.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1       20.0    MK_MAN 13000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2       20.0    MK_REP  6000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3       30.0   PU_CLERK  2780.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4       30.0    PU_MAN 11000.000000       NaN</span></span><br></pre></td></tr></table></figure><p>5）cut()</p><p>pandas.cut()用于将连续数据（如数值型数据）分割成离散的区间。可以使用cut()来将数据划分为不同的类别或范围，通常用于数据的分箱处理。</p><p>cut()部分参数说明：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x</strong></td><td>要分箱的数组或Series，通常是数值型数据。</td></tr><tr><td><strong>bins</strong></td><td>切分区间的数值列表或者整数。如果是整数，则表示将数据均匀地分成多少个区间。如果是列表，则需要指定每个区间的边界。</td></tr><tr><td><strong>right</strong></td><td>默认True，表示每个区间的右端点是闭区间，即包含右端点。如果设置为False，则左端点为闭区间。</td></tr><tr><td><strong>labels</strong></td><td>传入一个列表指定每个区间的标签。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 加载员工数据</span></span><br><span class="line"></span><br><span class="line">salary = pd.cut(df.iloc[<span class="number">9</span>:<span class="number">16</span>][<span class="string">&quot;salary&quot;</span>], <span class="number">3</span>) <span class="comment"># 分成3部分 分为了三个区间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9    (8366.667, 11000.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14   (8366.667, 11000.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15    (3092.1, 5733.333]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: salary, dtype: category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Categories (3, interval[float64, right]): [(3092.1, 5733.333] &lt; (5733.333, 8366.667] &lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#                      (8366.667, 11000.0]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">salary = pd.cut(df.iloc[<span class="number">9</span>:<span class="number">16</span>][<span class="string">&quot;salary&quot;</span>], [<span class="number">0</span>, <span class="number">10000</span>, <span class="number">20000</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14   (10000, 20000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: salary, dtype: category</span></span><br><span class="line"><span class="comment"># Categories (2, interval[int64, right]): [(0, 10000] &lt; (10000, 20000]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">salary = pd.cut(df.iloc[<span class="number">9</span>:<span class="number">16</span>][<span class="string">&quot;salary&quot;</span>], <span class="number">3</span>, labels=[<span class="string">&quot;low&quot;</span>, <span class="string">&quot;medium&quot;</span>, <span class="string">&quot;high&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9    high</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14    high</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15    low</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: salary, dtype: category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Categories (3, object): [&#x27;low&#x27; &lt; &#x27;medium&#x27; &lt; &#x27;high&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="1-9-2-分组聚合">1.9.2 分组聚合</h4><p>df.groupby(“分组字段”)[“要聚合的字段”].聚合函数()</p><p>df.groupby([“分组字段”, “分组字段2”, …])[[“要聚合的字段”, “要聚合的字段2”, …]].聚合函数()</p><p>1）常用聚合函数</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sum()</strong></td><td>求和</td></tr><tr><td><strong>mean()</strong></td><td>平均值</td></tr><tr><td><strong>min()</strong></td><td>最小值</td></tr><tr><td><strong>max()</strong></td><td>最大值</td></tr><tr><td><strong>var()</strong></td><td>方差</td></tr><tr><td><strong>std()</strong></td><td>标准差</td></tr><tr><td><strong>median()</strong></td><td>中位数</td></tr><tr><td><strong>quantile()</strong></td><td>指定位置的分位数，如quantile(0.5)</td></tr><tr><td><strong>describe()</strong></td><td>常见统计信息</td></tr><tr><td><strong>size()</strong></td><td>所有元素的个数</td></tr><tr><td><strong>count()</strong></td><td>非空元素的个数</td></tr><tr><td><strong>first</strong></td><td>第一行</td></tr><tr><td><strong>last</strong></td><td>最后一行</td></tr><tr><td><strong>nth</strong></td><td>第n行</td></tr></tbody></table><p>2）一次计算多个统计值</p><p>可以通过agg()或aggregate()进行更复杂的操作，如一次计算多个统计值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按department_id分组，计算salary的最小值，中位数，最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].agg([<span class="string">&quot;min&quot;</span>, <span class="string">&quot;median&quot;</span>, <span class="string">&quot;max&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#           min  median    max</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.0       4400.0  4400.0  4400.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 20.0       6000.0  9500.0 13000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 30.0       2500.0  2850.0 11000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 40.0       6500.0  6500.0  6500.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 50.0       2100.0  3100.0  8200.</span></span><br></pre></td></tr></table></figure><p>3）多个列计算不同的统计值</p><p>也可以在agg()中传入字典，对多个列计算不同的统计值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按department_id分组，统计job_id的种类数，commission_pct的平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>).agg(&#123;<span class="string">&quot;job_id&quot;</span>: <span class="string">&quot;nunique&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>: <span class="string">&quot;mean&quot;</span>&#125;))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         job_id commission_pct</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0         1       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0         2       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0         2       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 40.0         1       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 50.0         3       NaN</span></span><br></pre></td></tr></table></figure><p>4）重命名统计值</p><p>可以在agg()后通过rename()对统计后的列重命名。</p><p>df = pd.read_csv(“data/employees.csv”)  # 读取员工数据</p><p># 按department_id分组，统计job_id的种类数，commission_pct的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line"></span><br><span class="line">  df.groupby(<span class="string">&quot;department_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">  .agg(</span><br><span class="line"></span><br><span class="line">​    &#123;<span class="string">&quot;job_id&quot;</span>: <span class="string">&quot;nunique&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>: <span class="string">&quot;mean&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  .rename(</span><br><span class="line"></span><br><span class="line">​    columns=&#123;<span class="string">&quot;job_id&quot;</span>: <span class="string">&quot;工种数&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>: <span class="string">&quot;佣金比例平均值&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         工种数  佣金比例平均值</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0       1    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0       2    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0       2    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 40.0       1    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 50.0       3    NaN</span></span><br></pre></td></tr></table></figure><p>5）自定义函数</p><p>可以向agg()中传入自定义函数进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;统计每个部门员工last_name的首字母&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line"></span><br><span class="line">​    result.add(i[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;last_name&quot;</span>].agg(f))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0                          &#123;W&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0                         &#123;F, H&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0                   &#123;B, T, R, C, K, H&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 40.0                          &#123;M&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 50.0   &#123;O, E, K, S, W, L, P, D, C, V, B, T, M, J, F, ...</span></span><br></pre></td></tr></table></figure><h4 id="1-9-3-分组转换">1.9.3 分组转换</h4><p>聚合操作返回的是对组内全量数据缩减过的结果，而转换操作会返回一个新的全量数据。数据经过转换之后，其形状与原来的输入数据是一样的。</p><p>1）通过transform()将每一组的样本数据减去各组的均值，实现数据标准化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].transform(<span class="keyword">lambda</span> x: x - x.mean()))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    4666.666667</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   -2333.333333</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   -2333.333333</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    3240.000000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4    240.000000</span></span><br></pre></td></tr></table></figure><p>2）通过transform()按分组使用平均值填充缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line">na_index = pd.Series(df.index.tolist()).sample(<span class="number">30</span>)  <span class="comment"># 随机挑选30条数据</span></span><br><span class="line"></span><br><span class="line">df.loc[na_index, <span class="string">&quot;salary&quot;</span>] = pd.NA  <span class="comment"># 将这30条数据的salary设置为缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].agg([<span class="string">&quot;size&quot;</span>, <span class="string">&quot;count&quot;</span>]))  <span class="comment"># 查看每组数据总数与非空数据数</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_missing</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 使用平均值填充，如果平均值也为NaN，用0填充</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> np.isnan(x.mean()):</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x.fillna(x.mean())</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;salary&quot;</span>] = df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].transform(fill_missing)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].agg([<span class="string">&quot;size&quot;</span>, <span class="string">&quot;count&quot;</span>]))  <span class="comment"># 查看每组数据总数与非空数据数</span></span><br></pre></td></tr></table></figure><h4 id="1-9-4-分组过滤">1.9.4 分组过滤</h4><p>过滤操作可以让我们按照分组的属性丢弃若干数据。</p><p>例如，我们可能只需要保留commission_pct不包含空值的分组的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">commission_pct_filter = df.groupby(<span class="string">&quot;department_id&quot;</span>).<span class="built_in">filter</span>(</span><br><span class="line"></span><br><span class="line">  <span class="keyword">lambda</span> x: x[<span class="string">&quot;commission_pct&quot;</span>].notnull().<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">)  <span class="comment"># 按department_id分组，过滤掉commission_pct包含空值的分组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(commission_pct_filter)</span><br></pre></td></tr></table></figure><h3 id="1-10-Pandas透视表">1.10 Pandas透视表</h3><h4 id="1-10-1-什么是透视表">1.10.1 什么是透视表</h4><p>透视表（pivot table）是各种电子表格程序和其他数据分析软件中一种常见的数据汇总工具。它可以根据多个行分组键和多个列分组键对数据进行聚合，并根据行和列上的分组键将数据分配到各个矩形区域中。</p><h4 id="1-10-2-pivot-table">1.10.2 pivot_table()</h4><p>pandas中提供了DataFrame.pivot_table()和pandas.pivot_table()方法来生成透视表。两者的区别是pandas.pivot_table()需要额外传入一个data参数指定对哪个DataFrame进行处理。</p><p>pivot_table()的参数如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>values</strong></td><td>待聚合的列，默认聚合所有数值列。</td></tr><tr><td><strong>index</strong></td><td>用作透视表行索引的列。即通过哪个（些）行来对数据进行分组，行索引决定了透视表的行维度。</td></tr><tr><td><strong>columns</strong></td><td>用作透视表列索引的列。即通过哪个（些）列来对数据进行分组，列索引决定了透视表的列维度。</td></tr><tr><td><strong>aggfunc</strong></td><td>聚合函数或函数列表，默认为mean。</td></tr><tr><td><strong>fill_value</strong></td><td>用于替换结果表中的缺失值。</td></tr><tr><td><strong>margins</strong></td><td>是否在透视表的边缘添加汇总行和列，显示总计。默认值是 False，如果设置为 True，会添加“总计”行和列，方便查看数据的总体汇总。</td></tr><tr><td><strong>dropna</strong></td><td>是否排除包含缺失值的行和列。默认为 True，即如果某个组合的行列数据中包含缺失值，则会被排除在外。如果设置为 False，则会保留这些含有缺失值的行和列。</td></tr><tr><td><strong>observerd</strong></td><td>是否显示所有组合数据，True:只显示实际存在的组合</td></tr></tbody></table><h4 id="1-10-3-案例：睡眠质量分析透视表">1.10.3 案例：睡眠质量分析透视表</h4><p>使用sleep（睡眠健康和生活方式）数据集，其中包含13个字段：</p><p>Ø person_id：每个人的唯一标识符。</p><p>Ø gender：个人的性别（男/女）。</p><p>Ø age：个人的年龄（以岁为单位）。</p><p>Ø occupation：个人的职业或就业状况（例如办公室职员、体力劳动者、学生）。</p><p>Ø sleep_duration：每天的睡眠总小时数。</p><p>Ø sleep_quality：睡眠质量的主观评分，范围从 1（差）到 10（极好）。</p><p>Ø physical_activity_level：每天花费在体力活动上的时间（以分钟为单位）。</p><p>Ø stress_level：压力水平的主观评级，范围从 1（低）到 10（高）。</p><p>Ø bmi_category：个人的 BMI 分类（体重过轻、正常、超重、肥胖）。</p><p>Ø blood_pressure：血压测量，显示为收缩压与舒张压的数值。</p><p>Ø heart_rate：静息心率，以每分钟心跳次数为单位。</p><p>Ø daily_steps：个人每天行走的步数。</p><p>Ø sleep_disorder：存在睡眠障碍（无、失眠、睡眠呼吸暂停）。</p><p>1）统计不同睡眠时间，不同压力等级下的睡眠质量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/sleep.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep_duration_stage = pd.cut(df[<span class="string">&quot;sleep_duration&quot;</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>])  <span class="comment"># 对睡眠时间进行划分</span></span><br><span class="line"></span><br><span class="line">stress_level_stage = pd.cut(df[<span class="string">&quot;stress_level&quot;</span>], <span class="number">4</span>)  <span class="comment"># 对压力等级进行划分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df[&quot;sleep_duration_stage&quot;] = sleep_duration_stage</span></span><br><span class="line"><span class="comment"># df[&quot;stress_level_stage&quot;] = stress_level_stage</span></span><br><span class="line"><span class="comment"># df.groupby([&quot;sleep_duration_stage&quot;,&quot;stress_level_stage&quot;])[&quot;sleep_quality&quot;].mean()</span></span><br><span class="line"><span class="built_in">print</span>(df.pivot_table(values=<span class="string">&quot;sleep_quality&quot;</span>, index=[sleep_duration_stage, stress_level_stage], aggfunc=<span class="string">&quot;mean&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#                sleep_quality</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># sleep_duration stress_level</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (0, 5]     (0.991, 3.25]    6.781818</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]     6.161538</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]     5.677778</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]     6.082353</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (5, 6]     (0.991, 3.25]    5.876923</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]     6.777778</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]     6.058333</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]     6.438462</span></span><br></pre></td></tr></table></figure><p>2）添加职业作为列维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line"></span><br><span class="line">  df.pivot_table(</span><br><span class="line"></span><br><span class="line">​    values=<span class="string">&quot;sleep_quality&quot;</span>, index=[sleep_duration_stage, stress_level_stage], columns=[<span class="string">&quot;occupation&quot;</span>], aggfunc=<span class="string">&quot;mean&quot;</span></span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># occupation           Manual Labor  Office Worker  Retired  Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep_duration stress_level</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (0, 5]     (0.991, 3.25]    6.900000    6.350000  6.720000  6.750000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (3.25, 5.5]     3.300000    7.966667  6.060000 5.650000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (5.5, 7.75]     4.833333    6.900000  3.200000 6.533333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (7.75, 10.0]    7.200000    5.977778  5.225000 7.150000</span></span><br><span class="line"><span class="comment"># (5, 6]     (0.991, 3.25]    5.220000    6.433333  5.700000  6.533333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (3.25, 5.5]     5.000000    7.050000  6.900000 9.000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (5.5, 7.75]     6.050000    5.300000  5.300000 7.200000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (7.75, 10.0]    6.475000    4.050000    NaN 7.10000</span></span><br></pre></td></tr></table></figure><p>3）添加性别作为第二个列维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line"></span><br><span class="line">  df.pivot_table(</span><br><span class="line"></span><br><span class="line">​    values=<span class="string">&quot;sleep_quality&quot;</span>,</span><br><span class="line"></span><br><span class="line">​    index=[sleep_duration_stage, stress_level_stage],</span><br><span class="line"></span><br><span class="line">​    columns=[<span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;gender&quot;</span>],</span><br><span class="line"></span><br><span class="line">​    aggfunc=<span class="string">&quot;mean&quot;</span>,</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># occupation          Manual Labor      Office Worker      Retired        Student</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># gender               Female    Male     Female  Male   Female    Male   Female    Male</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># sleep_duration stress_level</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (0, 5]     (0.991, 3.25]     6.75  7.300000    6.700000  6.000    NaN  6.720000  6.100000  7.400000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]      3.30    NaN    7.100000  9.700  4.850000  6.866667  5.300000 6.700000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]      4.55  5.400000    5.900000 7.900    NaN  3.200000  6.850000 5.900000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]      8.40  6.000000    5.180000 6.975  6.600000  4.766667  7.150000    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (5, 6]     (0.991, 3.25]     5.50  4.800000    8.200000  5.550  5.700000     NaN  8.150000  3.300000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]      5.00    NaN    6.600000  7.500  6.700000  7.100000  9.000000    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]      6.60  5.500000    4.900000 6.100  4.450000  7.000000  7.066667  7.600000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]      6.15  6.800000      NaN  4.050    NaN     NaN 7.266667  6.975000</span></span><br></pre></td></tr></table></figure><h3 id="1-11-Pandas时间序列">1.11 Pandas时间序列</h3><h4 id="1-11-1-Python中的日期与时间工具">1.11.1 Python中的日期与时间工具</h4><p>Python基本的日期与时间功能都在标准库的datetime模块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">date1 = datetime(year=<span class="number">2000</span>, month=<span class="number">1</span>, day=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">date2 = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1)  <span class="comment"># 2000-01-01 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2)  <span class="comment"># 2025-01-01 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1.year)  <span class="comment"># 2000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1.month)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1.day)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2.weekday())  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2.strftime(<span class="string">&quot;%A&quot;</span>))  <span class="comment"># Saturday</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2 - date1)  <span class="comment"># 18263 days, 0:00:00</span></span><br></pre></td></tr></table></figure><h4 id="1-11-2-pandas中的日期与时间">1.11.2 pandas中的日期与时间</h4><p>pandas的日期时间类型默认是datetime64[ns]。</p><p>Ø 针对时间戳数据，pandas提供了Timestamp类型。它本质上是Python原生datetime类型的替代品，但是在性能更好的numpy.datetime64类型的基础上创建。对应的索引数据结构是DatetimeIndex。</p><p>Ø 针对时间周期数据，pandas提供了Period类型。这是利用numpy.datetime64类型将固定频率的时间间隔进行编码。对应的索引数据结构是PeriodIndex。</p><p>Ø 针对时间增量或持续时间，pandas提供了Timedelta类型。Timedelta是一种代替Python原生datetime.timedelta类型的高性能数据结构，同样是基于numpy.timedelta64类型。对应的索引数据结构是TimedeltaIndex。</p><p>1）datetime64</p><p>to_datetime()可以解析许多日期与时间格式。对to_datetime()传递一个日期会返回一个Timestamp类型，传递一个时间序列会返回一个DatetimeIndex类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.to_datetime(<span class="string">&quot;2015-01-01&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-01-01 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.to_datetime([<span class="string">&quot;4th of July, 2015&quot;</span>, <span class="string">&quot;2015-Jul-6&quot;</span>, <span class="string">&quot;07-07-2015&quot;</span>, <span class="string">&quot;20150708&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;mixed&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-04&#x27;, &#x27;2015-07-06&#x27;, &#x27;2015-07-07&#x27;, &#x27;2015-07-08&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None)</span></span><br></pre></td></tr></table></figure><p>在加载数据时，可以通过to_datetime()将数据中的列解析为datetime64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;date&quot;</span>].tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456   2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457   2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458   2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459   2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460   2015-12-31</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: datetime64[ns]</span></span><br></pre></td></tr></table></figure><p>在加载数据时也可以通过parse_dates参数将指定列解析为datetime64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;date&quot;</span>].tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: datetime64[ns]</span></span><br></pre></td></tr></table></figure><p>2）提取日期的各个部分</p><p>（1）提取Timestamp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d = pd.Timestamp(<span class="string">&quot;2015-01-01 09:08:07.123456&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.year)  <span class="comment"># 2015</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.month)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.day)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.hour)  <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.minute)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.second)  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.microsecond)  <span class="comment"># 123456</span></span><br></pre></td></tr></table></figure><p>（2）对于Series对象，需要使用dt访问器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df_date = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;year&quot;</span>] = df_date.dt.year</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;month&quot;</span>] = df_date.dt.month</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;day&quot;</span>] = df_date.dt.day</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;date&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;month&quot;</span>, <span class="string">&quot;day&quot;</span>]].tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  year  month  day</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456 2015-12-27  2015   12  27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457 2015-12-28  2015   12  28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458 2015-12-29  2015   12  29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459 2015-12-30  2015   12  30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460 2015-12-31  2015   12  31</span></span><br></pre></td></tr></table></figure><p>3）period</p><p>可以通过to_period()方法和一个频率代码将datetime64类型转换成period类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;quarter&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).dt.to_period(<span class="string">&quot;Q&quot;</span>)  <span class="comment"># 将 年-月-日 转换为 年季度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;date&quot;</span>, <span class="string">&quot;quarter&quot;</span>]].head())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      date quarter</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  2012-01-01  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  2012-01-02  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  2012-01-03  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  2012-01-04  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  2012-01-05  2012Q1</span></span><br></pre></td></tr></table></figure><p>4）timedelta64</p><p>当用一个日期减去另一个日期，返回的结果是timedelta64类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df_date = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">timedelta = df_date - df_date[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(timedelta.head())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  0 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  1 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  2 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  3 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  4 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: timedelta64[ns]</span></span><br></pre></td></tr></table></figure><h4 id="1-11-3-使用时间作为索引">1.11.3 使用时间作为索引</h4><p>1）DatetimeIndex</p><p>将datetime64类型的数据设置为索引，得到的就是DatetimeIndex。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])  <span class="comment"># 将date列转换为datetime64类型</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;date&quot;</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 将date列设置为索引</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex: 1461 entries, 2012-01-01 to 2015-12-31</span></span><br></pre></td></tr></table></figure><p>将时间作为索引后可以直接使用时间进行切片取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;2013-01&quot;</span>:<span class="string">&quot;2013-06&quot;</span>])  <span class="comment"># 获取2013年1~6月的数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       precipitation  temp_max temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-01-01       0.0    5.0    -2.8  2.7   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-01-02       0.0    6.1    -1.1  3.2   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ...          ...    ...    ...  ...   ...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-06-29       0.0    30.0    18.3  1.7   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-06-30       0.0    33.9    17.2  2.5   sun</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;2015&quot;</span>])  <span class="comment"># 获取2015年所有数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       precipitation  temp_max temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-01-01       0.0    5.6    -3.2  1.2   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-01-02       1.5    5.6    0.0  2.3   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ...          ...    ...    ...  ...   ...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-12-30       0.0    5.6    -1.0  3.4   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-12-31       0.0    5.6    -2.1  3.5   sun</span></span><br><span class="line"></span><br><span class="line">也可以通过between_time()和at_time()获取某些时刻的数据。</span><br><span class="line"></span><br><span class="line">df.between_time(<span class="string">&quot;9:00&quot;</span>, <span class="string">&quot;11:00&quot;</span>)  <span class="comment"># 获取9:00到11:00之间的数据</span></span><br><span class="line"></span><br><span class="line">df.at_time(<span class="string">&quot;3:33&quot;</span>)  <span class="comment"># 获取3:33的数据</span></span><br></pre></td></tr></table></figure><p>2）TimedeltaIndex</p><p>将timedelta64类型的数据设置为索引，得到的就是TimedeltaIndex。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df_date = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;timedelta&quot;</span>] = df_date - df_date[<span class="number">0</span>]  <span class="comment"># 得到timedelta64类型的数据</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;timedelta&quot;</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 将timedelta列设置为索引</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># TimedeltaIndex: 1461 entries, 0 days to 1460 days</span></span><br></pre></td></tr></table></figure><p>将时间作为索引后可以直接使用时间进行切片取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;0 days&quot;</span>:<span class="string">&quot;5 days&quot;</span>])</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         date precipitation  temp_max  temp_min  wind  weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># timedelta</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0 days   2012-01-01       0.0    12.8    5.0  4.7  drizzle</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1 days   2012-01-02      10.9    10.6    2.8  4.5   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2 days   2012-01-03       0.8    11.7    7.2  2.3   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3 days   2012-01-04      20.3    12.2    5.6  4.7   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4 days   2012-01-05       1.3    8.9    2.8  6.1   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5 days   2012-01-06       2.5    4.4    2.2  2.2   rain</span></span><br></pre></td></tr></table></figure><h4 id="1-11-4-生成时间序列">1.11.4 生成时间序列</h4><p>为了能更简便地创建有规律的时间序列，pandas提供了date_range()方法。</p><p>1）date_range()</p><p>date_range()通过开始日期、结束日期和频率代码（可选）创建一个有规律的日期序列，默认的频率是天。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, <span class="string">&quot;2015-07-10&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03&#x27;, &#x27;2015-07-04&#x27;, &#x27;2015-07-05&#x27;, &#x27;2015-07-06&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-07&#x27;, &#x27;2015-07-08&#x27;, &#x27;2015-07-09&#x27;, &#x27;2015-07-10&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line">此外，日期范围不一定非是开始时间与结束时间，也可以是开始时间与周期数periods。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03&#x27;, &#x27;2015-07-04&#x27;, &#x27;2015-07-05&#x27;, &#x27;2015-07-06&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-07&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line">可以通过freq参数设置时间频率，默认值是D。此处改为h，按小时变化的时间戳。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">5</span>, freq=<span class="string">&quot;h&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03 00:00:00&#x27;, &#x27;2015-07-03 01:00:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 02:00:00&#x27;, &#x27;2015-07-03 03:00:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 04:00:00&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;h&#x27;)</span></span><br></pre></td></tr></table></figure><p>2）时间频率与偏移量</p><p>（1）可通过freq参数设置时间频率</p><p>下表为常见时间频率代码与说明：</p><table><thead><tr><th><strong>代码</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>D</strong></td><td>天（calendar day，按日历算，含双休日）</td></tr><tr><td><strong>B</strong></td><td>天（business day，仅含工作日）</td></tr><tr><td><strong>W</strong></td><td>周（weekly）</td></tr><tr><td><strong>ME / M</strong></td><td>月末（month end）</td></tr><tr><td><strong>BME</strong></td><td>月末（business month end，仅含工作日）</td></tr><tr><td><strong>MS</strong></td><td>月初（month start）</td></tr><tr><td><strong>BMS</strong></td><td>月初（business month start，仅含工作日）</td></tr><tr><td><strong>QE / Q</strong></td><td>季末（quarter end）</td></tr><tr><td><strong>BQE</strong></td><td>季末（business quarter end，仅含工作日）</td></tr><tr><td><strong>QS</strong></td><td>季初（quarter start）</td></tr><tr><td><strong>BQS</strong></td><td>季初（business quarter start，仅含工作日）</td></tr><tr><td><strong>YE / Y</strong></td><td>年末（year end）</td></tr><tr><td><strong>BYE</strong></td><td>年末（business year end，仅含工作日）</td></tr><tr><td><strong>YS</strong></td><td>年初（year start）</td></tr><tr><td><strong>BYS</strong></td><td>年初（business year start，仅含工作日）</td></tr><tr><td><strong>h</strong></td><td>小时（hours）</td></tr><tr><td><strong>bh</strong></td><td>小时（business hours，工作时间）</td></tr><tr><td><strong>min</strong></td><td>分钟（minutes）</td></tr><tr><td><strong>s</strong></td><td>秒（seconds）</td></tr><tr><td><strong>ms</strong></td><td>毫秒（milliseonds）</td></tr><tr><td><strong>us</strong></td><td>微秒（microseconds）</td></tr><tr><td><strong>ns</strong></td><td>纳秒（nanoseconds）</td></tr></tbody></table><p>（2）偏移量</p><p>可以在频率代码后面加三位月份缩写字母来改变季、年频率的开始时间。</p><p>Ø QE-JAN、BQE-FEB、QS-MAR、BQS-APR等</p><p>Ø YE-JAN、BYE-FEB、YS-MAR、BYS-APR等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">10</span>, freq=<span class="string">&quot;QE-JAN&quot;</span>))  <span class="comment"># 设置1月为季度末</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-31&#x27;, &#x27;2015-10-31&#x27;, &#x27;2016-01-31&#x27;, &#x27;2016-04-30&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2016-07-31&#x27;, &#x27;2016-10-31&#x27;, &#x27;2017-01-31&#x27;, &#x27;2017-04-30&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2017-07-31&#x27;, &#x27;2017-10-31&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;QE-JAN&#x27;)</span></span><br></pre></td></tr></table></figure><p>同理，也可以在后面加三位星期缩写字母来改变一周的开始时间。</p><p>Ø W-SUN、W-MON、W-TUE、W-WED等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">10</span>, freq=<span class="string">&quot;W-WED&quot;</span>))  <span class="comment"># 设置周三为一周的第一天</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-08&#x27;, &#x27;2015-07-15&#x27;, &#x27;2015-07-22&#x27;, &#x27;2015-07-29&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-08-05&#x27;, &#x27;2015-08-12&#x27;, &#x27;2015-08-19&#x27;, &#x27;2015-08-26&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-09-02&#x27;, &#x27;2015-09-09&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;W-WED&#x27;)</span></span><br></pre></td></tr></table></figure><p>在这些代码的基础上，还可以将频率组合起来创建的新的周期。例如，可以用小时（h）和分钟（min）的组合来实现2小时30分钟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">10</span>, freq=<span class="string">&quot;2h30min&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03 00:00:00&#x27;, &#x27;2015-07-03 02:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 05:00:00&#x27;, &#x27;2015-07-03 07:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 10:00:00&#x27;, &#x27;2015-07-03 12:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 15:00:00&#x27;, &#x27;2015-07-03 17:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 20:00:00&#x27;, &#x27;2015-07-03 22:30:00&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;150min&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="1-11-5-重新采样">1.11.5 重新采样</h4><p>处理时间序列数据时，经常需要按照新的频率（更高频率、更低频率）对数据进行重新采样。可以通过resample()方法解决这个问题。resample()方法以数据累计为基础，会将数据按指定的时间周期进行分组，之后可以对其使用聚合函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;date&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]].resample(<span class="string">&quot;YE&quot;</span>).mean())  <span class="comment"># 将数据按年分组,并计算每年的平均最高最低温度</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        temp_max  temp_min</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2012-12-31  15.276776  7.289617</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-12-31  16.058904  8.153973</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2014-12-31  16.995890  8.662466</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-12-31  17.427945  8.835616</span></span><br></pre></td></tr></table></figure><h3 id="1-12-Matplotlib可视化">1.12 Matplotlib可视化</h3><h4 id="1-12-1-Matplotlib简介">1.12.1 Matplotlib简介</h4><p>1）什么是Matplotlib</p><p>Matplotlib是一个Python绘图库，广泛用于创建各种类型的静态、动态和交互式图表。它是数据科学、机器学习、工程和科学计算领域中常用的绘图工具之一。</p><p>Ø 支持多种图表类型：折线图（Line plots）、散点图（Scatter plots）、柱状图（Bar charts）、直方图（Histograms）、饼图（Pie charts）、热图（Heatmaps）、箱型图（Box plots）、极坐标图（Polar plots）、3D图（3D plots，配合 mpl_toolkits.mplot3d）。</p><p>Ø 高度自定义：允许用户自定义图表的每个部分，包括标题、轴标签、刻度、图例等。    支持多种颜色、字体和线条样式。提供精确的图形渲染控制，如坐标轴范围、图形大小、字体大小等。</p><p>Ø 兼容性：与NumPy、Pandas等库紧密集成，特别适用于绘制基于数据框和数组的数据可视化。可以输出到多种格式（如PNG、PDF、SVG、EPS等）。</p><p>Ø 交互式绘图：在Jupyter Notebook 中，Matplotlib支持交互式绘图，可以动态更新图表。支持图形缩放、平移等交互操作。</p><p>Ø 动态图表：可以生成动画（使用FuncAnimation类），为用户提供动态数据的可视化。</p><p>2）不同开发环境下显示图形</p><p>Ø 在一个脚本文件中使用Matplotlib，那么显示图形的时候必须使用plt.show()。</p><p>Ø 在Notebook中使用Matplotlib，运行命令之后在每一个Notebook的单元中就会直接将PNG格式图形文件嵌入在单元中。</p><h4 id="1-12-2-两种画图接口">1.12.2 两种画图接口</h4><p>Matplotlib有两种画图接口：一个是便捷的MATLAB风格的有状态的接口，另一个是功能更强大的面向对象接口。</p><p>1）状态接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入matplotlib</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 创建x轴的数据</span></span><br><span class="line"></span><br><span class="line">y1 = np.sin(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line">y2 = np.cos(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))  <span class="comment"># 创建画布，并指定画布大小 10*6英寸</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 创建2行1列个子图，并指定第1个子图</span></span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&quot;sin(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;sin&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y1)  <span class="comment"># 绘制曲线</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 创建2行1列个子图，并指定第2个子图</span></span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&quot;cos(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;cos&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y2)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 显示图像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）面向对象接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入matplotlib</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 创建x轴的数据</span></span><br><span class="line"></span><br><span class="line">y1 = np.sin(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line">y2 = np.cos(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))  <span class="comment"># 创建画布，并指定画布大小</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_ylabel(<span class="string">&quot;sin(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&quot;sin&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].plot(x, y1)  <span class="comment"># 绘制曲线</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].plot(x, y2)  <span class="comment"># 绘制曲线</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_ylabel(<span class="string">&quot;cos(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&quot;cos&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">​     </span><br></pre></td></tr></table></figure><h4 id="1-12-3-单变量可视化">1.12.3 单变量可视化</h4><p>使用weather（天气）数据集。其中包含6个字段：</p><p>Ø date：日期，年-月-日格式。</p><p>Ø precipitation：降水量。</p><p>Ø temp_max：最高温度。</p><p>Ø temp_min：最低温度。</p><p>Ø wind：风力。</p><p>Ø weather：天气状况。</p><p>加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号显示问题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.info()  <span class="comment"># 查看数据集信息</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># RangeIndex: 1461 entries, 0 to 1460</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Data columns (total 6 columns):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># #  Column     Non-Null Count  Dtype</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ---  ------     --------------  -----</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  date      1461 non-null  object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  precipitation  1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  temp_max    1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  temp_min    1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  wind      1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5  weather     1461 non-null  object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtypes: float64(4), object(2)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># memory usage: 68.6+ KB</span></span><br><span class="line"></span><br><span class="line">使用直方图将降水量分组并绘制每组出现频次。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax1.hist(df[<span class="string">&quot;precipitation&quot;</span>], bins=<span class="number">5</span>)  <span class="comment"># 绘制直方图，将降水量均匀分为5组</span></span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;降水量&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;出现频次&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​</p><h4 id="1-12-4-多变量可视化">1.12.4 多变量可视化</h4><p>1）双变量</p><p>使用散点图呈现降水量随最高气温变化的大致趋势。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号显示问题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax1.scatter(df[<span class="string">&quot;temp_max&quot;</span>], df[<span class="string">&quot;precipitation&quot;</span>])  <span class="comment"># 绘制散点图，横轴为最高气温，纵轴为降水量</span></span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;最高气温&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;降水量&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​</p><p>2）多变量</p><p>使用散点图呈现降水量随最高气温变化的大致趋势，用不同颜色区分不同年份的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号显示问题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">year_color</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;添加一列，为不同年份的数据添加不同的颜色&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">match</span> x.year:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2012</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;r&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2013</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;g&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2014</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2015</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;k&quot;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;color&quot;</span>] = df[<span class="string">&quot;date&quot;</span>].apply(year_color)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 绘制散点图，横轴为最高气温，纵轴为降水量</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># c设置颜色,alpha设置透明度</span></span><br><span class="line"></span><br><span class="line">ax1.scatter(df[<span class="string">&quot;temp_max&quot;</span>], df[<span class="string">&quot;precipitation&quot;</span>], c=df[<span class="string">&quot;color&quot;</span>], alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;最高气温&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;降水量&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​</p><h3 id="1-13-Pandas可视化">1.13 Pandas可视化</h3><p>pandas提供了非常方便的绘图功能，可以直接在DataFrame或Series上调用plot()方法来生成各种类型的图表。底层实现依赖于Matplotlib，pandas的绘图功能集成了许多常见的图形类型，易于使用。</p><h4 id="1-13-1-单变量可视化">1.13.1 单变量可视化</h4><p>使用sleep（睡眠健康和生活方式）数据集，其中包含13个字段：</p><p>Ø person_id：每个人的唯一标识符。</p><p>Ø gender：个人的性别（男/女）。</p><p>Ø age：个人的年龄（以岁为单位）。</p><p>Ø occupation：个人的职业或就业状况（例如办公室职员、体力劳动者、学生）。</p><p>Ø sleep_duration：每天的睡眠总小时数。</p><p>Ø sleep_quality：睡眠质量的主观评分，范围从 1（差）到 10（极好）。</p><p>Ø physical_activity_level：每天花费在体力活动上的时间（以分钟为单位）。</p><p>Ø stress_level：压力水平的主观评级，范围从 1（低）到 10（高）。</p><p>Ø bmi_category：个人的 BMI 分类（体重过轻、正常、超重、肥胖）。</p><p>Ø blood_pressure：血压测量，显示为收缩压与舒张压的数值。</p><p>Ø heart_rate：静息心率，以每分钟心跳次数为单位。</p><p>Ø daily_steps：个人每天行走的步数。</p><p>Ø sleep_disorder：存在睡眠障碍（无、失眠、睡眠呼吸暂停）。</p><p>加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/sleep.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.info()  <span class="comment"># 查看数据集信息</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># RangeIndex: 400 entries, 0 to 399</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Data columns (total 13 columns):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># #  Column          Non-Null Count  Dtype</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ---  ------          --------------  -----</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  person_id         400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  gender          400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  age            400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  occupation        400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  sleep_duration      400 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5  sleep_quality       400 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 6  physical_activity_level  400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 7  stress_level       400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 8  bmi_category       400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 9  blood_pressure      400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10  heart_rate        400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 11  daily_steps        400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 12  sleep_disorder      110 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtypes: float64(2), int64(6), object(5)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># memory usage: 40.8+ KB</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1）柱状图</p><p>柱状图用于展示类别数据的分布情况。它通过一系列矩形的高度（或长度）来展示数据值，适合对比不同类别之间的数量或频率。简单直观，容易理解和比较各类别数据。</p><p>使用柱状图展示不同睡眠时长的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(df[<span class="string">&quot;sleep_duration&quot;</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]).value_counts().plot.bar(</span><br><span class="line"></span><br><span class="line">  color=[<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;cyan&quot;</span>, <span class="string">&quot;magenta&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;purple&quot;</span>]</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>​</p><p>2）折线图</p><p>折线图通常用于展示连续数据的变化趋势。它通过一系列数据点连接成的线段来表示数据的变化。能够清晰地展示数据的趋势和波动。</p><p>使用折线图展示不同睡眠时长的数量。</p><p>pd.cut(df[“sleep_duration”], [0, 5, 6, 7, 8, 9, 10, 11, 12]).value_counts().sort_index().plot()</p><p>​</p><p>3）面积图</p><p>面积图是折线图的一种变体，线下的区域被填充颜色，用于强调数据的总量或变化。可以更直观地展示数据量的变化，适合用来展示多个分类的累计趋势。</p><p>使用面积图展示不同睡眠时长的数量。</p><p>pd.cut(df[“sleep_duration”], [0, 5, 6, 7, 8, 9, 10, 11, 12]).value_counts().sort_index().plot.area()</p><p>​</p><p>4）直方图</p><p>直方图用于展示数据的分布情况。它将数据范围分成多个区间，并通过矩形的高度显示每个区间内数据的频率或数量。可以揭示数据分布的模式，如偏态、峰度等。</p><p>使用直方图展示不同睡眠时长的数量。</p><p>df[“sleep_duration”].value_counts().plot.hist()</p><p>​</p><p>5）饼状图</p><p>饼状图用于展示一个整体中各个部分所占的比例。它通过一个圆形图形分割成不同的扇形，每个扇形的角度与各部分的比例成正比。能够快速展示各部分之间的比例关系，但不适合用于展示过多的类别或比较数值差异较小的部分。</p><p>使用饼状图展示不同睡眠时长的占比。</p><p>pd.cut(df[“sleep_duration”], [0, 5, 6, 7, 8, 9, 10, 11, 12]).value_counts().sort_index().plot.pie()</p><p>​</p><h4 id="1-13-2-双变量可视化">1.13.2 双变量可视化</h4><p>1）散点图</p><p>散点图通过在二维坐标系中绘制数据点来展示两组数值数据之间的关系。能够揭示两个变量之间的相关性和趋势。</p><p>绘制睡眠时间与睡眠质量的散点图。</p><p>df.plot.scatter(x=“sleep_duration”, y=“sleep_quality”)</p><p>​</p><p>2）蜂窝图</p><p>蜂窝图是散点图的扩展，通常用于表示大量数据点之间的关系。它通过将数据点分布在一个六边形网格中，每个六边形的颜色代表其中的数据密度。适合展示大量数据点，避免了散点图中的过度重叠问题。</p><p>绘制睡眠时间与睡眠质量的蜂窝图。</p><p>df.plot.hexbin(x=“sleep_duration”, y=“sleep_quality”, gridsize=10)</p><p>​</p><p>3）堆叠图</p><p>堆叠图用于展示多个数据系列的累积变化。常见的堆叠图包括堆叠柱状图、堆叠面积图等。它通过将每个数据系列堆叠在前一个系列之上，展示数据的累积情况。能够清晰地展示不同部分的相对贡献，适合多个数据系列的比较。</p><p>绘制睡眠时间与睡眠质量的堆叠图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;sleep_quality_stage&quot;</span>] = pd.cut(df[<span class="string">&quot;sleep_quality&quot;</span>], <span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;sleep_duration_stage&quot;</span>] = pd.cut(df[<span class="string">&quot;sleep_duration&quot;</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line"></span><br><span class="line">df_pivot_table = df.pivot_table(</span><br><span class="line"></span><br><span class="line">  values=<span class="string">&quot;person_id&quot;</span>, index=<span class="string">&quot;sleep_quality_stage&quot;</span>, columns=<span class="string">&quot;sleep_duration_stage&quot;</span>, aggfunc=<span class="string">&quot;count&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_pivot_table.plot.bar()</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">设置stacked=<span class="literal">True</span>，会将柱体堆叠。</span><br><span class="line"></span><br><span class="line">df_pivot_table.plot.bar(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>4）折线图</p><p>df_pivot_table.plot.line()</p><p>​</p><h3 id="1-14-Seaborn可视化">1.14 Seaborn可视化</h3><h4 id="1-14-1-什么是Seaborn">1.14.1 什么是Seaborn</h4><p>Seaborn是一个基于Matplotlib的Python可视化库，旨在简化数据可视化的过程。它提供了更高级的接口，用于生成漂亮和复杂的统计图表，同时也能保持与Pandas数据结构的良好兼容性。</p><h4 id="1-14-2-单变量可视化">1.14.2 单变量可视化</h4><p>使用penguins（企鹅🐧）数据集，其中包含7个字段：</p><p>Ø species：企鹅种类（Adelie、Gentoo、Chinstrap）。</p><p>Ø island：观测岛屿（Torgersen, Biscoe, Dream）。</p><p>Ø bill_length_mm：喙（嘴）长度（毫米）。</p><p>Ø bill_depth_mm：喙深度（毫米）。</p><p>Ø flipper_length_mm：脚蹼长度（毫米）。</p><p>Ø body_mass_g：体重（克）。</p><p>Ø sex：性别（Male、Female）。</p><p>加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;KaiTi&quot;</span>]</span><br><span class="line"></span><br><span class="line">penguins = pd.read_csv(<span class="string">&quot;data/penguins.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">penguins.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">penguins.info()</span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Index: 333 entries, 0 to 343</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Data columns (total 7 columns):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># #  Column       Non-Null Count Dtype</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ---  ------       -------------- -----</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  species       333 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  island       333 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  bill_length_mm   333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  bill_depth_mm    333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  flipper_length_mm  333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5  body_mass_g     333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 6  sex         333 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtypes: float64(4), object(3)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># memory usage: 20.8+ KB</span></span><br></pre></td></tr></table></figure><p>1）直方图</p><p>绘制不同种类企鹅数量的直方图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.histplot(data=penguins, x=<span class="string">&quot;species&quot;</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>2）核密度估计图</p><p>核密度估计图（KDE，Kernel Density Estimate Plot）是一种用于显示数据分布的统计图表，它通过平滑直方图的方法来估计数据的概率密度函数，使得分布图看起来更加连续和平滑。核密度估计是一种非参数方法，用于估计随机变量的概率密度函数。其基本思想是，将每个数据点视为一个“核”（通常是高斯分布），然后将这些核的贡献相加以形成平滑的密度曲线。</p><p>绘制喙长度的核密度估计图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(data=penguins, x=<span class="string">&quot;bill_length_mm&quot;</span>)</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">在histplot()中设置kde=<span class="literal">True</span>也可以得到核密度估计图。</span><br><span class="line"></span><br><span class="line">sns.histplot(data=penguins, x=<span class="string">&quot;bill_length_mm&quot;</span>, kde=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>3）计数图</p><p>计数图用于绘制分类变量的计数分布图，显示每个类别在数据集中出现的次数，是分析分类数据非常直观的工具，可以快速了解类别的分布情况。</p><p>绘制不同岛屿企鹅数量的计数图。</p><p>sns.countplot(data=penguins, x=“island”)</p><p>​</p><p>1.14.3 双变量可视化</p><p>1）散点图</p><p>绘制横轴为体重，纵轴为脚蹼长度的散点图。可通过hue参数设置不同组别进行对比。</p><p>sns.scatterplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过regplot()函数绘制散点图，同时会拟合回归曲线。可以通过fit_reg=False关闭拟合。</p><p>sns.regplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>也可以通过lmplot()函数绘制基于hue参数的分组回归图。</p><p>sns.lmplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过jointplot()函数绘制在每个轴上包含单个变量的散点图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>2）蜂窝图</p><p>通过jointplot()函数，设置kind=&quot;hex&quot;来绘制蜂窝图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, kind=“hex”)</p><p>​</p><p>3）二维核密度估计图</p><p>通过kdeplot()函数，同时设置x参数和y参数来绘制二维核密度估计图。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>通过fill=True设置为填充，通过cbar=True设置显示颜色示意条。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, fill=True, cbar=True)</p><p>​</p><p>4）条形图</p><p>条形图会按x分组对y进行聚合，通过estimator参数设置聚合函数，并通过errorbar设置误差条，误差条默认会显示。可以通过误差条显示抽样数据统计结果的可能统计范围，如果数据不是抽样数据, 可以设置为None来关闭误差条。</p><p>sns.barplot(data=penguins, x=“species”, y=“bill_length_mm”, estimator=“mean”, errorbar=None</p><h4 id="1-14-3-双变量可视化">1.14.3 双变量可视化</h4><p>1）散点图</p><p>绘制横轴为体重，纵轴为脚蹼长度的散点图。可通过hue参数设置不同组别进行对比。</p><p>sns.scatterplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过regplot()函数绘制散点图，同时会拟合回归曲线。可以通过fit_reg=False关闭拟合。</p><p>sns.regplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>也可以通过lmplot()函数绘制基于hue参数的分组回归图。</p><p>sns.lmplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过jointplot()函数绘制在每个轴上包含单个变量的散点图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>2）蜂窝图</p><p>通过jointplot()函数，设置kind=&quot;hex&quot;来绘制蜂窝图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, kind=“hex”)</p><p>​</p><p>3）二维核密度估计图</p><p>通过kdeplot()函数，同时设置x参数和y参数来绘制二维核密度估计图。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>通过fill=True设置为填充，通过cbar=True设置显示颜色示意条。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, fill=True, cbar=True)</p><p>​</p><p>4）条形图</p><p>条形图会按x分组对y进行聚合，通过estimator参数设置聚合函数，并通过errorbar设置误差条，误差条默认会显示。可以通过误差条显示抽样数据统计结果的可能统计范围，如果数据不是抽样数据, 可以设置为None来关闭误差条。</p><p>sns.barplot(data=penguins, x=“species”, y=“bill_length_mm”, estimator=“mean”, errorbar=None)</p><p>​</p><p>5）箱线图</p><p>箱线图是一种用于展示数据分布、集中趋势、散布情况以及异常值的统计图表。它通过五个关键的统计量（最小值、第一四分位数、中位数、第三四分位数、最大值）来展示数据的分布情况。</p><p>箱线图通过箱体和须来表现数据的分布，能够有效地显示数据的偏斜、分散性以及异常值。箱线图的组成部分：</p><p>Ø 箱体（Box）：</p><p>Ø 下四分位数（Q1）：数据集下 25% 的位置，箱体的下边缘。</p><p>Ø 上四分位数（Q3）：数据集下 75% 的位置，箱体的上边缘。</p><p>Ø 四分位间距（IQR, Interquartile Range）：Q3 和 Q1 之间的距离，用来衡量数据的离散程度。</p><p>Ø 中位数（Median）：箱体内部的水平线，表示数据集的中位数。</p><p>Ø 须（Whiskers）：</p><p>Ø 下须：从 Q1 向下延伸，通常是数据集中最小值与 Q1 的距离，直到没有超过1.5倍 IQR 的数据点为止。</p><p>Ø 上须：从 Q3 向上延伸，通常是数据集中最大值与 Q3 的距离，直到没有超过1.5倍 IQR 的数据点为止。</p><p>Ø 异常值（Outliers）：</p><p>Ø 超过1.5倍 IQR 的数据被认为是异常值，通常用点标记出来。异常值是数据中相对于其他数据点而言“非常大”或“非常小”的值。</p><p>sns.boxplot(data=penguins, x=“species”, y=“bill_length_mm”)</p><p>​</p><p>6）小提琴图</p><p>小提琴图（Violin Plot） 是一种结合了箱线图和核密度估计图（KDE）的可视化图表，用于展示数据的分布情况、集中趋势、散布情况以及异常值。小提琴图不仅可以显示数据的基本统计量（如中位数和四分位数），还可以展示数据的概率密度，提供比箱线图更丰富的信息。</p><p>sns.violinplot(data=penguins, x=“species”, y=“bill_length_mm”)</p><p>​</p><p>7）成对关系图</p><p>成对关系图是一种用于显示多个变量之间关系的可视化工具。它可以展示各个变量之间的成对关系，并且通过不同的图表形式帮助我们理解数据中各个变量之间的相互作用。</p><p>对角线上的图通常显示每个变量的分布（如直方图或核密度估计图），帮助观察每个变量的单变量特性。其他位置展示所有变量的两两关系，用散点图表示。</p><p>sns.pairplot(data=penguins, hue=“species”)</p><p>​</p><p>通常情况下成对关系图左上和右下对应位置的图的信息是相同的，可以通过PairGrid()为每个区域设置不同的图类型。</p><p>pair_grid = sns.PairGrid(data=penguins, hue=“species”)</p><p># 通过 map 方法在网格上绘制不同的图形</p><p>pair_grid.map_upper(sns.scatterplot)  # 上三角部分使用散点图</p><p>pair_grid.map_lower(sns.kdeplot)  # 下三角部分使用核密度估计图</p><p>pair_grid.map_diag(sns.histplot)  # 对角线部分使用直方图</p><p>​</p><h4 id="1-1-2-多变量可视化">1.1.2 多变量可视化</h4><p>多数绘图函数都支持使用hue参数设置一个类别变量，统计时按此类别分组统计并在绘图时使用颜色区分。</p><p>例如对小提琴图设置hue参数添加性别类别：</p><p>sns.violinplot(data=penguins, x=“species”, y=“bill_length_mm”, hue=“sex”, split=True)</p><p>​</p><h4 id="1-1-3-Seaborn样式">1.1.3 Seaborn样式</h4><p>在Seaborn中，样式（style）控制了图表的整体外观，包括背景色、网格线、刻度线等元素。Seaborn提供了一些内置的样式选项，可以通过seaborn.set_style()来设置当前图表的样式。常见的样式有以下几种：</p><p>Ø white：纯白背景，没有网格线。</p><p>Ø dark：深色背景，带有网格线。</p><p>Ø whitegrid：白色背景，带有网格线。</p><p>Ø darkgrid：深色背景，带有网格线（默认样式）。</p><p>sns.set_style(“darkgrid”)</p><p>sns.histplot(data=penguins, x=“island”, kde=True)</p><p>​</p><h2 id="第-4-章-综合案例：房地产市场洞察与价值评估">第 4 章 综合案例：房地产市场洞察与价值评估</h2><h3 id="2-1-业务背景">2.1 业务背景</h3><p>在房地产市场中，准确的房价预测和深入的市场分析对于房产开发商、投资者以及购房者都至关重要。房产开发商需要根据市场趋势和不同因素对房价的影响来制定合理的定价策略，优化项目规划；投资者需要评估房产的潜在价值和投资回报率，做出明智的投资决策；购房者则希望了解市场行情，找到性价比高的房产。</p><p>某大型房地产数据研究机构收集了大量不同地区的房屋销售数据，这些数据包含了房屋的各种属性信息以及销售相关信息。为了更好地服务于市场参与者，该机构计划对这些数据进行全面深入的分析，挖掘数据背后的规律和价值。具体目标包括：</p><p>Ø 探究不同房屋特征（如卧室数量、浴室数量、居住面积等）对房价的影响程度，以便为房价预测模型提供依据。</p><p>Ø 分析不同地区（以邮政编码划分）的房地产市场差异，了解各地区的房价水平、市场活跃度等情况。</p><p>Ø 研究房屋的建造年份、翻新年份等时间因素对房价的影响，以及不同时间段的市场趋势变化。</p><p>Ø 通过可视化手段直观展示数据的分布和关系，为决策提供清晰的参考。</p><h3 id="2-2-数据源介绍">2.2 数据源介绍</h3><table><thead><tr><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>id</strong></td><td>房屋销售记录的唯一标识符</td><td>整数</td><td>用于唯一标识每一条房屋销售记录</td></tr><tr><td><strong>date</strong></td><td>房屋销售日期</td><td>日期时间类型</td><td>记录房屋实际完成销售的日期，可用于时间序列分析，观察不同时间段的市场趋势</td></tr><tr><td><strong>price</strong></td><td>房屋销售价格</td><td>数值型</td><td>反映房屋在销售时的成交金额，是分析的核心指标之一，受多种房屋特征和市场因素影响</td></tr><tr><td><strong>bedrooms</strong></td><td>卧室数量</td><td>整数</td><td>体现房屋的居住功能布局，卧室数量的多少会影响房屋的整体实用性和市场需求</td></tr><tr><td><strong>bathrooms</strong></td><td>浴室数量</td><td>整数</td><td>同样是影响房屋舒适度和实用性的重要因素，与卧室数量共同影响房屋的居住体验</td></tr><tr><td><strong>sqft_living</strong></td><td>居住面积（平方英尺）</td><td>数值型</td><td>指房屋内部可供居住使用的实际面积，是影响房价的关键因素之一</td></tr><tr><td><strong>sqft_lot</strong></td><td>土地面积（平方米）</td><td>数值型</td><td>包括房屋所在土地的总面积，土地面积大小会影响房屋的整体价值和使用空间</td></tr><tr><td><strong>floors</strong></td><td>楼层数</td><td>整数</td><td>房屋的楼层数量会影响房屋的视野、采光、私密性等方面，进而对房价产生影响</td></tr><tr><td><strong>waterfront</strong></td><td>是否临水</td><td>整数（0 或 1）</td><td>0 表示房屋不临水，1 表示房屋临水，临水房屋通常具有更高的景观价值和市场价格</td></tr><tr><td><strong>view</strong></td><td>景观评分</td><td>整数（0 - 4）</td><td>对房屋周边景观的评分，评分越高表示景观越好，景观质量会影响房屋的吸引力和价格</td></tr><tr><td><strong>condition</strong></td><td>房屋状况评分</td><td>整数（1 - 5）</td><td>反映房屋的整体状况，包括房屋的结构、装修、设施等方面的维护情况</td></tr><tr><td><strong>grade</strong></td><td>房屋整体质量评分</td><td>整数（1 - 13）</td><td>综合评估房屋的建筑质量、设计水平等因素，是衡量房屋价值的重要指标</td></tr><tr><td><strong>sqft_above</strong></td><td>地上面积（平方米）</td><td>数值型</td><td>指房屋地面以上部分的建筑面积，不包括地下室面积</td></tr><tr><td><strong>sqft_basement</strong></td><td>地下室面积（平方米）</td><td>数值型</td><td>地下室面积可作为额外的存储空间或功能区域，对房屋的实用性和价值有一定影响</td></tr><tr><td><strong>yr_built</strong></td><td>建造年份</td><td>整数</td><td>记录房屋的建成时间，房屋的建造年份会影响房屋的折旧程度、建筑风格和市场竞争力</td></tr><tr><td><strong>yr_renovated</strong></td><td>翻新年份</td><td>整数</td><td>0 表示房屋未进行过翻新，非 0 值表示房屋进行翻新的具体年份，翻新可以提升房屋的价值和居住体验</td></tr><tr><td><strong>zipcode</strong></td><td>邮政编码</td><td>整数</td><td>用于标识房屋所在的地理位置区域，不同的邮政编码区域可能具有不同的市场特征和房价水平</td></tr><tr><td><strong>lat</strong></td><td>纬度</td><td>数值型</td><td>房屋所在位置的纬度坐标，结合经度可确定房屋的具体地理位置</td></tr><tr><td><strong>long</strong></td><td>经度</td><td>数值型</td><td>房屋所在位置的经度坐标，与纬度共同用于地理空间分析</td></tr></tbody></table><h3 id="2-3-待统计指标及说明">2.3 待统计指标及说明</h3><h4 id="2-3-1-数值型列的描述性统计指标">2.3.1 <strong>数值型列的描述性统计指标</strong></h4><p>Ø **均值（**Mean）：一组数据的平均值，反映数据的集中趋势。例如，房价的均值可以让我们了解该地区房屋的平均销售价格水平。</p><p>Ø **中位数（****Median）：将数据按升序或降序排列后，位于中间位置的数值。当数据存在极端值时，中位数比均值更能代表数据的一般水平。</p><p>Ø <strong>标准差（<strong><strong>Standard Deviation</strong></strong>）</strong>：衡量数据相对于均值的离散程度。标准差越大，说明数据越分散；反之，则越集中。比如房价的标准差可以反映该地区房价的波动情况。</p><p>Ø <strong>最小值（<strong><strong>Minimum</strong></strong>）</strong>：数据集中的最小数值，可用于了解数据的下限。</p><p>Ø <strong>最大值（<strong><strong>Maximum</strong></strong>）</strong>：数据集中的最大数值，可用于了解数据的上限。</p><p>Ø 四分位数（Quartiles）：包括第一四分位数（Q1，25% 分位数）、第二四分位数（Q2，即中位数，50% 分位数）和第三四分位数（Q3，75% 分位数），能帮助了解数据的分布情况。</p><p><strong>2.3.2</strong> <strong>不同特征与房价的相关性</strong></p><p>Ø 使用皮尔逊相关系数衡量特征与房价之间的线性关系强度和方向，系数绝对值越接近 1，相关性越强；正系数表示正相关，负系数表示负相关。</p><p><strong>2.3.3</strong> <strong>按邮政编码、是否翻新、房龄分组的统计指标</strong></p><p>Ø 平均房价：各邮政编码区域内房屋的平均销售价格，用于对比不同区域的房价水平。</p><p>Ø 平均居住面积：各区域内房屋居住面积的平均值，反映区域房屋规模情况。</p><p>Ø 平均卧室数量：各区域内房屋卧室数量的平均值，体现区域房屋居住功能布局。</p><p><strong>2.3.4</strong> <strong>时间序列分析指标</strong></p><p>Ø <strong>每年平均房价（<strong><strong>Average Price per Year</strong></strong>）</strong>：按销售年份分组计算的房屋平均销售价格，可用于观察房价随时间的变化趋势。</p><h3 id="2-4-代码实现步骤">2.4 代码实现步骤</h3><h4 id="2-4-1-数据读取">2.4.1 数据读取</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;E:data\\house_sales.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据基本信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data.info()</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 pandas 的 read_csv 函数读取 house_sales.csv 文件，将数据存储在 DataFrame 对象 data 中，方便后续处理，并查看数据基本信息。</p><h4 id="2-4-2-数据清洗">2.4.2 数据清洗</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line"></span><br><span class="line">missing_values = data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各列缺失值数量：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(missing_values)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值，这里简单地删除包含缺失值的行</span></span><br><span class="line"></span><br><span class="line">data = data.dropna()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查异常值，以房价为例，使用 IQR 方法</span></span><br><span class="line"></span><br><span class="line">Q1 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">Q3 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">lower_bound = Q1 - <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">upper_bound = Q3 + <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">data = data[(data[<span class="string">&#x27;price&#x27;</span>] &gt;= lower_bound) &amp; (data[<span class="string">&#x27;price&#x27;</span>] &lt;= upper_bound)]</span><br></pre></td></tr></table></figure><blockquote><p>在统计学中，0.25（25%）和0.75（75%）的分位数分别被称为<strong>第一四分位数（Q1）**和**第三四分位数（Q3）</strong>。它们与**四分位距（IQR, Interquartile Range）**一起被广泛用于识别数据中的异常值（outliers）。以下是选择这两个特定值的原因：</p><h3 id="1-四分位数的统计意义">1. <strong>四分位数的统计意义</strong></h3><ul><li><strong>Q1（25%分位数）</strong>：数据中25%的值小于或等于Q1，它代表了数据的“较低部分”的分界线。</li><li><strong>Q3（75%分位数）</strong>：数据中75%的值小于或等于Q3，它代表了数据的“较高部分”的分界线。</li><li><strong>IQR = Q3 - Q1</strong>：表示中间50%数据的范围，反映了数据的离散程度（排除极端值的影响）。</li></ul><h3 id="2-为什么用1-5-×-IQR定义异常值边界？">2. <strong>为什么用1.5 × IQR定义异常值边界？</strong></h3><ul><li><p>历史与经验规则</p><p>：1.5 × IQR 是统计学家John Tukey提出的经验法则，基于正态分布的假设。在正态分布中：</p><ul><li>大约99.3%的数据会落在 <code>[Q1 - 1.5×IQR, Q3 + 1.5×IQR]</code> 范围内。</li><li>超出此范围的值极有可能是异常值（仅约0.7%的概率）。</li></ul></li><li><p><strong>稳健性</strong>：IQR对异常值不敏感（不像标准差受极端值影响大），因此用IQR定义的边界更可靠。</p></li></ul><h3 id="3-上下界的计算逻辑">3. <strong>上下界的计算逻辑</strong></h3><ul><li><strong>下界（Lower Bound）</strong>：<code>Q1 - 1.5 × IQR</code> 低于此值的数据点可能异常小（如输入错误或极端情况）。</li><li><strong>上界（Upper Bound）</strong>：<code>Q3 + 1.5 × IQR</code> 高于此值的数据点可能异常大。</li></ul><h3 id="4-为什么不用其他分位数（如0-1-0-9）？">4. <strong>为什么不用其他分位数（如0.1/0.9）？</strong></h3><ul><li><strong>平衡敏感性与实用性</strong>：0.25和0.75的选择能覆盖数据的中间50%，既不过于严格（如用0.1/0.9会漏掉更多潜在异常值），也不过于宽松（如用0.01/0.99可能保留太多异常值）。</li><li><strong>行业标准</strong>：IQR法是被广泛接受的异常值检测方法，尤其在箱线图（Boxplot）中直观体现。</li></ul><h3 id="5-你的代码在做什么？">5. <strong>你的代码在做什么？</strong></h3><p>通过以下步骤过滤数据中的“非典型”价格：</p><ol><li>计算Q1、Q3和IQR。</li><li>定义合理价格的上下界（<code>lower_bound</code>和<code>upper_bound</code>）。</li><li>保留落在该区间内的数据，剔除可能的异常值。</li></ol><h3 id="注意事项">注意事项</h3><ul><li><strong>非对称分布</strong>：如果数据分布严重偏斜（如房价通常右偏），IQR法可能误判一些真实数据为异常值。此时可考虑调整倍数（如用3×IQR）或使用其他方法（如对数变换+Z-Score）。</li><li><strong>领域知识</strong>：最终是否剔除异常值需结合业务背景。例如，奢侈品价格可能天然超出IQR边界，但属于合理数据。</li></ul><p>总之，选择0.25和0.75是基于统计学的稳健性和通用性，而1.5×IQR是经验性的平衡点。</p></blockquote><p>2）代码说明</p><p>缺失值处理：使用 isnull().sum() 统计各列缺失值数量，然后用 dropna() 删除包含缺失值的行。</p><p>异常值处理：使用 IQR（Inter - Quartile Range，四分位距）方法来检测和处理房价数据中的异常值。以房价为例，通过计算第一四分位数 Q1、第三四分位数 Q3 和四分位距 IQR，确定上下限，筛选出合理范围内的数据。</p><p>Ø data[‘price’].quantile(0.25)：quantile 是 pandas 中用于计算分位数的方法。这里 0.25 表示计算 25% 分位数，也就是第一四分位数 Q1。第一四分位数意味着有 25% 的数据小于这个值。</p><p>Ø data[‘price’].quantile(0.75)：同理，0.75 表示计算 75% 分位数，即第三四分位数 Q3。有 75% 的数据小于这个值。</p><p>Ø 四分位距 IQR 是第三四分位数 Q3 与第一四分位数 Q1 的差值。它衡量了数据中间 50% 的数据的分散程度。</p><p>Ø lower_bound：通过 Q1 - 1.5 * IQR 计算出异常值的下限。如果某个数据点小于这个下限，就可能被视为异常值。</p><p>Ø upper_bound：通过 Q3 + 1.5 * IQR 计算出异常值的上限。如果某个数据点大于这个上限，也可能被视为异常值。</p><p>Ø 这里的 1.5 是一个常用的系数，在很多情况下可以有效地识别出大部分异常值，但在某些特殊场景下可能需要调整。</p><p>Ø 使用布尔索引来筛选数据。(data[‘price’] &gt;= lower_bound) &amp; (data[‘price’] &lt;= upper_bound) 表示筛选出 price 列中值大于等于下限且小于等于上限的数据，将这些数据重新赋值给 data，从而去除了可能的异常值。</p><h4 id="2-4-3-数据类型转换">2.4.3 数据类型转换</h4><p>1）代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将日期列转换为日期类型</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;date&#x27;</span>])</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 pandas 的 to_datetime 函数将 date 列转换为日期类型，便于进行时间序列分析。</p><h4 id="2-4-4-创建新的特征">2.4.4 创建新的特征</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算房屋的使用年限</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age&#x27;</span>] = data[<span class="string">&#x27;date&#x27;</span>].dt.year - data[<span class="string">&#x27;yr_built&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新特征：是否翻新</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;is_renovated&#x27;</span>] = data[<span class="string">&#x27;yr_renovated&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>计算房屋使用年限：通过销售日期的年份减去建造年份，得到房屋的使用年限，存储在新列 age 中，这个特征可能会对房价产生影响。</p><p>创建是否翻新特征：使用 apply 方法和 lambda 函数对 yr_renovated 列进行判断，若值大于 0 则表示房屋已翻新，将 is_renovated 列对应的值设为 1，否则设为 0，以便后续分析翻新因素对房价的影响。</p><h4 id="2-4-5-数据探索性分析-描述性统计">2.4.5 数据探索性分析-描述性统计</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择数值型列</span></span><br><span class="line"></span><br><span class="line">numeric_columns = data.select_dtypes(include=[np.number]).columns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算描述性统计信息</span></span><br><span class="line"></span><br><span class="line">description = data[numeric_columns].describe(percentiles=[<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数值型列的描述性统计：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(description)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>data.select_dtypes(include=[np.number]) 选择数据集中的数值型列，并获取其列名存储在 numeric_columns 中。</p><p>data[numeric_columns].describe(percentiles=[0.25, 0.5, 0.75]) 计算数值型列的描述性统计信息，包括均值、中位数、标准差、最小值、最大值、四分位数等，并将结果存储在 description 中，帮助我们了解各数值特征的分布情况。</p><h4 id="2-4-6-数据探索性分析-相关性统计">2.4.6 数据探索性分析-相关性统计</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算不同特征与房价的相关性</span></span><br><span class="line"></span><br><span class="line">correlation = data[numeric_columns].corr()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各特征与房价的相关性：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(correlation[<span class="string">&#x27;price&#x27;</span>])</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>对数值型列使用 corr 方法计算相关系数矩阵，提取 price 列得到各特征与房价的相关性。</p><h4 id="2-4-7-按照邮政编码分组分析">2.4.7 按照邮政编码分组分析</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按邮政编码分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">zipcode_stats = data.groupby(<span class="string">&#x27;zipcode&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">zipcode_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不同邮政编码区域的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(zipcode_stats)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 data.groupby(‘zipcode’) 按邮政编码对数据进行分组。</p><p>agg 方法对分组后的数据进行聚合操作，分别计算每组的平均房价、平均居住面积和平均卧室数量。</p><p>对结果的列名进行重命名，使其更具可读性，并打印输出，可对比不同邮政编码区域的房屋特征情况。</p><h4 id="2-4-8-按照是否翻新分组分析">2.4.8 按照是否翻新分组分析</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按是否翻新分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">renovation_stats = data.groupby(<span class="string">&#x27;is_renovated&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">renovation_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否翻新分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(renovation_stats)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>按 is_renovated 特征对数据进行分组，分析翻新和未翻新房屋在房价、居住面积和卧室数量等方面的差异。同样使用 agg 方法进行聚合计算，得到相应的统计信息并打印。</p><h4 id="2-4-9-按照房龄分组分析">2.4.9 按照房龄分组分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）代码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按房屋使用年限分组（简单分为 5 个区间）</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age_group&#x27;</span>] = pd.cut(data[<span class="string">&#x27;age&#x27;</span>], bins=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">age_stats = data.groupby(<span class="string">&#x27;age_group&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;按房屋使用年限分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(age_stats)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 pd.cut 函数将房屋使用年限 age 划分为 5 个区间，创建新列 age_group。</p><p>按 age_group 分组，计算每组的平均房价、平均居住面积和平均卧室数量，了解不同使用年限房屋的特征差异。</p><h4 id="2-4-10-时间序列分析-每年平均房价">2.4.10 时间序列分析-每年平均房价</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按年份分组，计算每年的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_avg_price = data.groupby(data[<span class="string">&#x27;date&#x27;</span>].dt.year)[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_avg_price)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 data.groupby(data[‘date’].dt.year) 按销售日期的年份对数据进行分组。</p><p>对每组的 price 列计算均值，得到每年的平均房价，并存储在 yearly_avg_price 中进行打印输出，可观察房价随时间的变化趋势。</p><h4 id="2-4-11-时间序列分析-不同翻新情况平均房价">2.4.11 时间序列分析-不同翻新情况平均房价</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按年份和是否翻新分组，计算每年不同翻新情况的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_renovation_avg_price = data.groupby([data[<span class="string">&#x27;date&#x27;</span>].dt.year, <span class="string">&#x27;is_renovated&#x27;</span>])[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年不同翻新情况的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_renovation_avg_price)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>按销售年份和是否翻新进行分组，计算每年翻新和未翻新房屋的平均房价，能让我们看到在不同年份，翻新因素对房价的影响变化。</p><h4 id="2-4-12-可视化">2.4.12 可视化</h4><p>1）房价分布直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 房价分布直方图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.hist(data[<span class="string">&#x27;price&#x27;</span>], bins=<span class="number">30</span>, edgecolor=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房价分布直方图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;频数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.hist 函数绘制房价的分布直方图，bins=30 控制柱子的数量，edgecolor=‘k’ 为柱子添加黑色边框。添加标题和坐标轴标签，使图形更易理解，最后使用 plt.show() 显示图形。</p><p>2）卧室数量与房价的散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卧室数量与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;bedrooms&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;卧室数量与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;卧室数量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.scatter 函数绘制卧室数量与房价的散点图，直观展示两者之间的关系。</p><p>3）各特征与房价的相关性热力图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各特征与房价的相关性热力图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">plt.imshow(correlation, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns, rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;各特征与房价的相关性热力图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.imshow 函数绘制相关性热力图，cmap=‘coolwarm’ 设置颜色映射，interpolation=‘nearest’ 控制插值方式。添加颜色条和坐标轴标签，显示各特征与房价的相关性，最后显示图形。</p><p>4）不同邮政编码区域平均房价的柱状图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不同邮政编码区域平均房价的柱状图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(zipcode_stats.index.astype(<span class="built_in">str</span>), zipcode_stats[<span class="string">&#x27;avg_price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同邮政编码区域的平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;邮政编码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.bar 函数绘制不同邮政编码区域平均房价的柱状图，将 zipcode 转换为字符串类型。设置图形标题和坐标轴标签，旋转 x 轴标签避免重叠后显示图形。</p><p>5）每年平均房价的折线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每年平均房价的折线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(yearly_avg_price.index, yearly_avg_price)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;每年平均房价趋势&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;年份&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.plot 函数绘制每年平均房价的折线图，展示房价随时间的变化趋势。</p><p>6）不同翻新情况的房价箱线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不同翻新情况的房价箱线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">data.boxplot(column=<span class="string">&#x27;price&#x27;</span>, by=<span class="string">&#x27;is_renovated&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同翻新情况的房价箱线图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;是否翻新&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&#x27;未翻新&#x27;</span>, <span class="string">&#x27;已翻新&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 去掉默认的标题</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 data.boxplot 方法绘制不同翻新情况的房价箱线图，展示翻新和未翻新房屋房价的分布情况</p><p>7）房屋使用年限与房价的散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 房屋使用年限与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;age&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房屋使用年限与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房屋使用年限&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.scatter 函数绘制房屋使用年限与房价的散点图，观察两者之间的关系。</p><h3 id="2-4-13-完整代码">2.4.13 完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;E:\\大模型课程\\05_尚硅谷大模型技术之Numpy&amp;Pandas\\2.资料\\data\\house_sales.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据基本信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data.info()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 检查缺失值</span></span><br><span class="line"></span><br><span class="line">missing_values = data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各列缺失值数量：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(missing_values)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 处理缺失值，这里简单地删除包含缺失值的行</span></span><br><span class="line"></span><br><span class="line">data = data.dropna()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 检查异常值，以房价为例，使用 IQR 方法</span></span><br><span class="line"></span><br><span class="line">Q1 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">Q3 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">lower_bound = Q1 - <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">upper_bound = Q3 + <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">data = data[(data[<span class="string">&#x27;price&#x27;</span>] &gt;= lower_bound) &amp; (data[<span class="string">&#x27;price&#x27;</span>] &lt;= upper_bound)]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 将日期列转换为日期类型</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算房屋的使用年限</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age&#x27;</span>] = data[<span class="string">&#x27;date&#x27;</span>].dt.year - data[<span class="string">&#x27;yr_built&#x27;</span>]</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 创建新特征：是否翻新</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;is_renovated&#x27;</span>] = data[<span class="string">&#x27;yr_renovated&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 选择数值型列</span></span><br><span class="line"></span><br><span class="line">numeric_columns = data.select_dtypes(include=[np.number]).columns</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算描述性统计信息</span></span><br><span class="line"></span><br><span class="line">description = data[numeric_columns].describe(percentiles=[<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数值型列的描述性统计：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(description)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算不同特征与房价的相关性</span></span><br><span class="line"></span><br><span class="line">correlation = data[numeric_columns].corr()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各特征与房价的相关性：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(correlation[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按邮政编码分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">zipcode_stats = data.groupby(<span class="string">&#x27;zipcode&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">zipcode_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不同邮政编码区域的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(zipcode_stats)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按是否翻新分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">renovation_stats = data.groupby(<span class="string">&#x27;is_renovated&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">renovation_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否翻新分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(renovation_stats)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按房屋使用年限分组（简单分为 5 个区间）</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age_group&#x27;</span>] = pd.cut(data[<span class="string">&#x27;age&#x27;</span>], bins=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">age_stats = data.groupby(<span class="string">&#x27;age_group&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;按房屋使用年限分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(age_stats)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按年份分组，计算每年的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_avg_price = data.groupby(data[<span class="string">&#x27;date&#x27;</span>].dt.year)[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_avg_price)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按年份和是否翻新分组，计算每年不同翻新情况的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_renovation_avg_price = data.groupby([data[<span class="string">&#x27;date&#x27;</span>].dt.year, <span class="string">&#x27;is_renovated&#x27;</span>])[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年不同翻新情况的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_renovation_avg_price)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 房价分布直方图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.hist(data[<span class="string">&#x27;price&#x27;</span>], bins=<span class="number">30</span>, edgecolor=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房价分布直方图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;频数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 卧室数量与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;bedrooms&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;卧室数量与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;卧室数量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 各特征与房价的相关性热力图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">plt.imshow(correlation, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns, rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;各特征与房价的相关性热力图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 不同邮政编码区域平均房价的柱状图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(zipcode_stats.index.astype(<span class="built_in">str</span>), zipcode_stats[<span class="string">&#x27;avg_price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同邮政编码区域的平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;邮政编码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 每年平均房价的折线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(yearly_avg_price.index, yearly_avg_price)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;每年平均房价趋势&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;年份&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 不同翻新情况的房价箱线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">data.boxplot(column=<span class="string">&#x27;price&#x27;</span>, by=<span class="string">&#x27;is_renovated&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同翻新情况的房价箱线图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;是否翻新&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&#x27;未翻新&#x27;</span>, <span class="string">&#x27;已翻新&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 去掉默认的标题</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 房屋使用年限与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;age&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房屋使用年限与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房屋使用年限&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">机器学习基础</summary>
    
    
    
    <category term="机器学习基础" scheme="https://yjyrichard.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="机器学习基础" scheme="https://yjyrichard.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture</title>
    <link href="https://yjyrichard.github.io/posts/227b7dd1.html"/>
    <id>https://yjyrichard.github.io/posts/227b7dd1.html</id>
    <published>2025-07-25T12:37:33.746Z</published>
    <updated>2025-07-25T12:39:17.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="告别阻塞：从-Future-到-CompletableFuture，全面掌握-Java-异步编程精髓">告别阻塞：从 Future 到 CompletableFuture，全面掌握 Java 异步编程精髓</h2><p>在现代软件开发中，性能是永恒的追求。为了榨干多核CPU的性能，我们不可避免地要和异步与多线程打交道。Java 5 引入的 <code>Future</code> 接口，为我们打开了异步编程的大门。然而，这扇门只开了一半。直到 Java 8 的 <code>CompletableFuture</code> 横空出世，我们才真正拥有了优雅、强大的异步编排能力。</p><p>这篇文章将带你从 <code>Future</code> 的局限性出发，一步步深入 <code>CompletableFuture</code> 的世界，通过一个生动的电商比价案例，让你不仅“会用”，更能“讲透”，在面试中脱颖而出。</p><h3 id="1-温故知新：Future-的“初心”与“窘境”">1. 温故知新：Future 的“初心”与“窘境”</h3><p>在深入 <code>CompletableFuture</code> 之前，我们必须先理解它的前辈 <code>Future</code> 解决了什么问题，又留下了哪些遗憾。</p><h4 id="1-1-Future-的核心价值">1.1 Future 的核心价值</h4><p><code>Future</code> 的核心思想很简单：<strong>将一个耗时的任务提交到另一个线程去执行，并给你一个“未来的凭证”（即 Future 对象），让主线程可以继续做其他事情。</strong> 当主线程需要任务结果时，再用这个凭证去获取。</p><p>这就像老师在上课（主线程），突然想喝水，他不会停止讲课，而是让班长（子线程）去小卖部买水（耗时任务）。老师继续上课，过了一会课间休息时，再问班长水买回来了没有。</p><p><code>Future</code> 接口定义了几个核心操作：</p><ul><li><code>get()</code>: 获取任务结果，如果任务没执行完，就一直<strong>阻塞</strong>等待。</li><li><code>isDone()</code>: 判断任务是否执行完毕。</li><li><code>cancel()</code>: 尝试取消任务。</li><li><code>isCancelled()</code>: 判断任务是否被取消。</li></ul><p><code>FutureTask</code> 是 <code>Future</code> 和 <code>Runnable</code> 的一个经典实现，它既可以作为任务被线程执行，又能管理任务状态和结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---- come in call()&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Callable&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程干点别的事...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要结果时，调用get()</span></span><br><span class="line">        <span class="comment">// 这里会阻塞，直到T1线程执行完毕返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureTask.get(); </span><br><span class="line">        System.out.println(<span class="string">&quot;获取到异步结果: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-Future-的两大“窘境”">1.2 Future 的两大“窘境”</h4><p><code>Future</code> 模式虽然实现了异步，但在获取结果时却显得非常“笨拙”，主要体现在：</p><ol><li><p><strong>阻塞式 <code>get()</code></strong><br>一旦调用 <code>future.get()</code>，你的主线程就会被无情地阻塞，直到异步任务完成。这与异步编程“不等待”的核心理念背道而驰。如果任务耗时很长，整个应用的吞吐量都会下降。我们称之为“不见不散”的阻塞。</p></li><li><p><strong>轮询式 <code>isDone()</code></strong><br>为了避免 <code>get()</code> 的阻塞，我们可能会写出这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!future.isDone()) &#123;</span><br><span class="line">    <span class="comment">// 等待，或者干点别的，但CPU在空转</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br></pre></td></tr></table></figure><p>这种轮询（Busy-Wait）的方式会持续消耗CPU资源，非常低效，而且无法保证实时性。</p></li></ol><p><strong>结论</strong>：<code>Future</code> 解决了“有没有”的问题，但没有解决“如何优雅地处理结果”的问题。对于复杂的业务场景，比如<strong>任务A完成后自动触发任务B</strong>，或者<strong>多个任务结果需要合并</strong>，<code>Future</code> 提供的API就显得力不从心了。</p><h3 id="2-王者登场：CompletableFuture-的革命性改进">2. 王者登场：CompletableFuture 的革命性改进</h3><p>为了解决 <code>Future</code> 的窘境，Java 8 带来了 <code>CompletableFuture</code>。它不仅实现了 <code>Future</code> 接口，还实现了 <code>CompletionStage</code> 接口，这赋予了它强大的<strong>回调</strong>和<strong>编排</strong>能力。</p><p><code>CompletionStage</code> 接口代表了异步计算中的一个阶段，一个阶段完成后可以触发下一个阶段。<code>CompletableFuture</code> 正是利用这种机制，构建了一个<strong>响应式、非阻塞</strong>的异步编程模型。</p><p><strong>核心优势</strong>：</p><ul><li><strong>回调机制</strong>：当异步任务完成或异常时，自动调用你传入的回调函数，主线程彻底解放。</li><li><strong>异步任务编排</strong>：可以像流水线一样，将多个异步任务串联、并联或组合。</li><li><strong>优雅的异常处理</strong>：提供了专门的机制来处理异步链中的异常。</li></ul><h4 id="2-1-创建一个-CompletableFuture-任务">2.1 创建一个 CompletableFuture 任务</h4><p><code>CompletableFuture</code> 提供了四个核心的静态工厂方法来启动异步任务：</p><ol><li><code>runAsync(Runnable runnable)</code>: 执行一个没有返回值的异步任务。</li><li><code>runAsync(Runnable runnable, Executor executor)</code>: 使用自定义线程池执行。</li><li><code>supplyAsync(Supplier&lt;U&gt; supplier)</code>: 执行一个有返回值的异步任务。</li><li><code>supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</code>: 使用自定义线程池执行。</li></ol><blockquote><p><strong>面试要点</strong>：如果没有指定 <code>Executor</code>，<code>CompletableFuture</code> 默认使用 <code>ForkJoinPool.commonPool()</code> 这个公共线程池。在CPU密集型计算中它表现很好，但如果是IO密集型任务，建议使用自定义线程池，以避免公共池中的线程被长时间阻塞。</p></blockquote><h3 id="3-实战演练：用-CompletableFuture-实现电商比价">3. 实战演练：用 CompletableFuture 实现电商比价</h3><p>让我们通过一个常见的业务需求，来感受 <code>CompletableFuture</code> 的威力。</p><p><strong>需求</strong>：开发一个商品比价服务。当用户搜索“MySQL从入门到跑路”这本书时，需要同时从京东、淘宝、当当等多个电商平台查询价格，然后汇总成一个价格列表返回。</p><h4 id="3-1-传统方案的痛点">3.1 传统方案的痛点</h4><ul><li><strong>串行查询</strong>：查完京东，再查淘宝，再查当当。如果每个平台查询耗时2秒，3个平台就需要6秒，用户体验极差。</li><li><strong>手动创建线程</strong>：为每个查询创建一个 <code>Thread</code> 或使用 <code>Future</code>，代码繁琐，且结果合并处理起来很麻烦。</li></ul><h4 id="3-2-CompletableFuture-的优雅解法">3.2 CompletableFuture 的优雅解法</h4><p>我们可以为每个平台的查询创建一个 <code>supplyAsync</code> 任务，让它们并发执行。然后使用 <code>allOf</code> 等待所有任务完成，最后统一处理结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mallName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMall</span><span class="params">(String mallName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mallName = mallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPrice</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟网络延迟</span></span><br><span class="line">            Thread.sleep(ThreadLocalRandom.current().nextInt(<span class="number">1000</span>, <span class="number">3000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> ThreadLocalRandom.current().nextDouble() * <span class="number">100</span> + <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;《%s》 in %s price is %.2f&quot;</span>, productName, mallName, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriceComparatorDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> List&lt;NetMall&gt; malls = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;京东&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;淘宝&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;当当网&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;拼多多&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">findPrices</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用自定义线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(malls.size());</span><br><span class="line"></span><br><span class="line">        List&lt;CompletableFuture&lt;String&gt;&gt; priceFutures = malls.stream()</span><br><span class="line">                .map(mall -&gt; CompletableFuture.supplyAsync(() -&gt; mall.getPrice(productName), executor))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有任务完成，并收集结果</span></span><br><span class="line">        <span class="keyword">return</span> priceFutures.stream()</span><br><span class="line">                .map(CompletableFuture::join) <span class="comment">// join() 和 get() 类似，但它不抛出受检异常</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; prices = findPrices(<span class="string">&quot;MySQL从入门到跑路&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        prices.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---- Cost: &quot;</span> + (endTime - startTime) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 淘宝 price <span class="keyword">is</span> <span class="number">105.43</span></span><br><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 当当网 price <span class="keyword">is</span> <span class="number">88.91</span></span><br><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 京东 price <span class="keyword">is</span> <span class="number">120.77</span></span><br><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 拼多多 price <span class="keyword">is</span> <span class="number">95.20</span></span><br><span class="line"><span class="comment">---- Cost: 2987 ms</span></span><br></pre></td></tr></table></figure><p>可以看到，总耗时约等于最慢的那个网络请求的耗时，而不是所有请求耗时的总和。这就是异步并行的魅力！代码也极其简洁，充满了函数式编程的优雅。</p><h3 id="4-面试高频：CompletableFuture-核心-API-梳理">4. 面试高频：CompletableFuture 核心 API 梳理</h3><p>掌握了基本用法，我们再来系统梳理一下面试中常被问到的核心API。</p><h4 id="4-1-结果处理与消费-then…系列">4.1 结果处理与消费 (then…系列)</h4><p>这是 <code>CompletableFuture</code> 的精髓，用于构建任务流水线。</p><ul><li><code>thenApply(Function fn)</code>: <strong>串行依赖，有返回值</strong>。当上一个任务完成时，将其结果作为输入，执行 <code>fn</code> 函数，并返回一个新的 <code>CompletableFuture</code>。如果上一步出错，<code>thenApply</code> 不会执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="number">1024</span>)</span><br><span class="line">    .thenApply(r -&gt; r * <span class="number">2</span>)</span><br><span class="line">    .thenAccept(System.out::println); <span class="comment">// 输出 2048</span></span><br></pre></td></tr></table></figure></li><li><code>thenAccept(Consumer action)</code>: <strong>串行依赖，无返回值</strong>。消费上一个任务的结果，但自身不产生新值。</li><li><code>thenRun(Runnable action)</code>: <strong>不依赖上一步结果，无返回值</strong>。只关心上一步任务是否完成，完成后就执行 <code>action</code>。</li><li><code>handle(BiFunction fn)</code>: <strong>强大的异常处理</strong>。无论上一步是正常完成还是异常，<code>handle</code> 都会执行。它接收两个参数：结果和异常（有结果时异常为null，反之亦然）。这给了你一个恢复现场的机会。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;计算出错!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">&#125;).handle((result, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常: &quot;</span> + exception.getMessage());</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 返回一个默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;).thenAccept(System.out::println); <span class="comment">// 输出 -1</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>面试要点</strong>：<code>thenApply</code> vs <code>handle</code>？<code>thenApply</code> 是“一帆风顺”时的处理，一旦出错，链条就断了。<code>handle</code> 则是“无论风雨”都能处理，提供了更强的容错能力。</p></blockquote><h4 id="4-2-任务组合-combine-either-系列">4.2 任务组合 (combine/either 系列)</h4><ul><li><code>thenCombine(other, BiFunction fn)</code>: <strong>合并两个任务</strong>。等待当前任务和 <code>other</code> 任务都完成后，将两个结果作为参数传给 <code>fn</code> 函数进行处理。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; <span class="number">10</span>);</span><br><span class="line">CompletableFuture&lt;Integer&gt; cf2 = CompletableFuture.supplyAsync(() -&gt; <span class="number">20</span>);</span><br><span class="line">cf1.thenCombine(cf2, (r1, r2) -&gt; r1 + r2).thenAccept(System.out::println); <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure></li><li><code>applyToEither(other, Function fn)</code>: <strong>竞速</strong>。两个任务赛跑，谁先完成就用谁的结果来执行 <code>fn</code> 函数。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; taskA = CompletableFuture.supplyAsync(() -&gt; &#123; sleep(<span class="number">1</span>); <span class="keyword">return</span> <span class="string">&quot;TaskA&quot;</span>; &#125;);</span><br><span class="line">CompletableFuture&lt;String&gt; taskB = CompletableFuture.supplyAsync(() -&gt; &#123; sleep(<span class="number">2</span>); <span class="keyword">return</span> <span class="string">&quot;TaskB&quot;</span>; &#125;);</span><br><span class="line">taskA.applyToEither(taskB, result -&gt; result + <span class="string">&quot; is the winner&quot;</span>)</span><br><span class="line">     .thenAccept(System.out::println); <span class="comment">// 输出 TaskA is the winner</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-线程池说明-…Async-后缀">4.3 线程池说明 (…Async 后缀)</h4><p><code>thenApply</code>, <code>thenAccept</code>, <code>thenRun</code> 等方法都有一个对应的 <code>...Async</code> 版本，例如 <code>thenApplyAsync</code>。</p><ul><li><strong>不带 <code>Async</code></strong>: 下一步任务可能由上一步任务的线程执行，也可能由主线程（调用 <code>join</code>/<code>get</code> 的线程）执行，取决于上一步任务完成时，下一步任务是否已经注册。</li><li><strong>带 <code>Async</code></strong>: 始终会将下一步任务提交到线程池中异步执行。可以传入自定义线程池，否则使用默认的 <code>ForkJoinPool</code>。这能确保后续任务不会阻塞上一步任务的线程，是更推荐的做法。</li></ul><h3 id="5-总结">5. 总结</h3><p><code>CompletableFuture</code> 是 Java 异步编程的“瑞士军刀”，它彻底解决了 <code>Future</code> 模型的痛点，将我们从阻塞和轮询的泥潭中解放出来。</p><p><strong>面试核心要点回顾</strong>：</p><ol><li><strong>Why CompletableFuture?</strong> -&gt; 为了解决 <code>Future.get()</code> 阻塞和 <code>isDone()</code> 轮询的弊端，提供了基于回调的非阻塞模型。</li><li><strong>How to create?</strong> -&gt; <code>supplyAsync</code> (有返回) 和 <code>runAsync</code> (无返回)，并注意其对默认线程池 <code>ForkJoinPool</code> 的使用。</li><li><strong>How to chain tasks?</strong> -&gt; <code>thenApply</code> (转换), <code>thenAccept</code> (消费), <code>thenRun</code> (执行)，以及它们的 <code>...Async</code> 版本。</li><li><strong>How to handle errors?</strong> -&gt; <code>handle</code> (全能处理) 和 <code>exceptionally</code> (专门处理异常)。</li><li><strong>How to combine tasks?</strong> -&gt; <code>thenCombine</code> (合并结果) 和 <code>applyToEither</code> (竞速)。</li></ol><p>掌握了这些，你不仅能写出高性能、高可读性的异步代码，更能向面试官清晰地展示你对现代Java并发编程的深刻理解。希望这篇文章能成为你技术武器库中的一件利器！</p>]]></content>
    
    
    <summary type="html">CompletableFuture</summary>
    
    
    
    <category term="juc" scheme="https://yjyrichard.github.io/categories/juc/"/>
    
    
    <category term="juc" scheme="https://yjyrichard.github.io/tags/juc/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化开篇</title>
    <link href="https://yjyrichard.github.io/posts/8ad6401d.html"/>
    <id>https://yjyrichard.github.io/posts/8ad6401d.html</id>
    <published>2025-07-25T12:35:35.289Z</published>
    <updated>2025-07-25T12:39:17.032Z</updated>
    
    <content type="html"><![CDATA[<h1>第1章 前端工程化开篇</h1><h2 id="1-1-什么是前端工程化">1.1 什么是前端工程化</h2><blockquote><p>**<code>前端工程化</code><strong>是使用</strong><code>软件工程的方法</code><strong>来</strong><code>单独</code><strong>解决</strong><code>前端</code><strong>的开发流程中</strong><code>模块化、组件化、规范化、自动化</code>**的问题，以提高效率和降低成本。</p></blockquote><h2 id="1-2-前端工程化实现技术栈">1.2 前端工程化实现技术栈</h2><blockquote><p>前端工程化实现的技术栈有很多，我们采用ES6+Nodejs +npm+Vite+VUE3+Router+Pinia+Axios+Element-plus组合来实现。</p></blockquote><ul><li>ECMAScript6       VUE3中大量使用ES6语法；</li><li>Nodejs                前端项目运行环境；</li><li>npm                    依赖下载工具；</li><li>Vite                      前端项目构建工具；</li><li>Vue3                   优秀的渐进式前端框架；</li><li>Router                 通过路由实现页面切换；</li><li>Pinia                   通过状态管理实现组件数据传递；</li><li>Axios                   ajax异步请求封装技术实现前后端数据交互；</li><li>Element Plus     可以提供丰富的快速构建网页的组件仓库；</li></ul><h1>第2章 ECMA6Script</h1><h2 id="2-1-ES6的介绍">2.1 ES6的介绍</h2><blockquote><p>ECMAScript 6，简称ES6，是<strong>JavaScript</strong>语言的一次重大更新。它于<strong>2015</strong>年发布，是原来的ECMAScript标准的第六个版本。ES6带来了大量的新特性，包括箭头函数、模板字符串、let和const关键字、解构、默认参数值、模块系统等等，大大提升了JavaScript的开发体验。<code>由于VUE3中大量使用了ES6的语法,所以ES6成为了学习VUE3的门槛之一</code>。ES6对JavaScript的改进在以下几个方面：</p></blockquote><ol><li>更加简洁：ES6引入了一些新的语法，如箭头函数、模板字符串等，使代码更加简洁易懂；</li><li>更强大的功能：ES6引入了一些新的API、解构语法和迭代器等功能，从而使得JavaScript更加强大；</li><li>更好的适用性：ES6引入的模块化功能为JavaScript代码的组织和管理提供了更好的方式，不仅提高了程序的可维护性，还让JavaScript更方便地应用于大型的应用程序；</li></ol><blockquote><p>总的来说，ES6在提高JavaScript的核心语言特性和功能方面取得了很大的进展。由于ES6已经成为了JavaScript的标准，它的大多数新特性都已被现在浏览器所支持，因此现在可以放心地使用ES6来开发前端应用程序。</p></blockquote><p><strong>历史版本：</strong></p><table><thead><tr><th>标准版本</th><th>发布时间</th><th>新特性</th></tr></thead><tbody><tr><td>ES1</td><td>1997年</td><td>第一版 ECMAScript</td></tr><tr><td>ES2</td><td>1998年</td><td>引入setter和getter函数，增加了try/catch，switch语句允许字符串</td></tr><tr><td>ES3</td><td>1999年</td><td>引入了正则表达式和更好的字符串处理</td></tr><tr><td>ES4</td><td>取消</td><td>取消，部分特性被ES3.1和ES5继承</td></tr><tr><td>ES5</td><td>2009年</td><td>Object.defineProperty，JSON，严格模式，数组新增方法等</td></tr><tr><td>ES5.1</td><td>2011年</td><td>对ES5做了一些勘误和例行修订</td></tr><tr><td><code>ES6</code></td><td><code>2015年</code></td><td><code>箭头函数、模板字符串、解构、let和const关键字、类、模块系统等</code></td></tr><tr><td>ES2016</td><td>2016年</td><td>数组.includes，指数操作符（**），Array.prototype.fill等</td></tr><tr><td>ES2017</td><td>2017年</td><td>异步函数async/await，Object.values/Object.entries，字符串填充</td></tr><tr><td>ES2018</td><td>2018年</td><td>正则表达式命名捕获组，几个有用的对象方法，异步迭代器等</td></tr><tr><td>ES2019</td><td>2019年</td><td>Array.prototype.{flat，flatMap}，Object.fromEntries等</td></tr><tr><td>ES2020</td><td>2020年</td><td>BigInt、动态导入、可选链操作符、空位合并操作符</td></tr><tr><td>ES2021</td><td>2021年</td><td>String.prototype.replaceAll，逻辑赋值运算符，Promise.any等</td></tr><tr><td>… …</td><td></td><td></td></tr></tbody></table><h2 id="2-2-es6的变量和模板字符串">2.2 es6的变量和模板字符串</h2><blockquote><p>ES6 新增了<code>let</code>和<code>const</code>，用来声明变量，使用的细节上也存在诸多差异。</p></blockquote><ul><li><p>let 和var的差别：</p><p>1、let 不能重复声明；</p><p>2、let有块级作用域，非函数的花括号遇见let会有块级作用域，也就是只能在花括号里面访问；</p><p>3、let不会预解析进行变量提升；</p><p>4、let 定义的全局变量不会作为window的属性；</p><p>5、let在es6中推荐优先使用；</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 基本语法(let)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     let a = 1;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(a); //1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //console.log(a); //a is not defined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //2. 代码块内有效</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     let a = 0;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var b = 1;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(a); //a is not defined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(b); //1 </span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //3. 不能重复声明</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var b = 3;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var b = 4;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let a = 1;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let a = 2;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 循环+定时任务使用let</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//js单线程模型,如果循环包裹了定时任务,定时任务会在遍历结束后执行!</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (var i = 0; i &lt; 10; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setTimeout(function()&#123;//省略了window.setTimeout</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(i);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 输出十个 10 </span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (let j = 0; j &lt; 10; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(j);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125; //输出0-9</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5. 不存在变量提升</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//ReferenceError: a is not defined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> a = <span class="string">&quot;apple&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> b = <span class="string">&quot;banana&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>const和var的差异：</p><p>1、新增const和let类似，只是const定义的变量不能修改，声明一个只读变量</p><p>2、并不是变量的值不能改动，而是变量指向的那个内存地址所保存的数据不能改动；</p><blockquote><p>其实 const 保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。此时，你可能已经想到，简单类型和复合类型保存值的方式是不同的。是的，对于简单类型（数值 number、字符串 string 、布尔值 boolean）,值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1声明常量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">PI</span>=<span class="number">3.14</span> <span class="comment">//报错</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.对应数组和对象元素修改，不算常量修改，修改值，不修改地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;刘德华&#x27;</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="string">&#x27;郭富城&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;黎明&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>=[] <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模板字符串（template string）是增强版的字符串，用飘号，也叫反引号（`）标识  。</p></blockquote><p>1、字符串中可以出现换行符；</p><p>2、可以使用 ${xxx} 形式输出变量和拼接变量；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1 多行普通字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr =</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;ul&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;JAVA&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;html&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;VUE&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;/ul&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr)    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 多行模板字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr2 = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;JAVA&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;html&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;VUE&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/ul&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr2)        </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3  普通字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name =<span class="string">&#x27;张小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr =name+<span class="string">&#x27;被评为本年级优秀学员&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4  模板字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr2 =<span class="string">`<span class="subst">$&#123;name&#125;</span>被评为本年级优秀学员`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr2)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-es6的解构表达式">2.3 es6的解构表达式</h2><blockquote><p>ES6 的解构赋值是一种方便的语法，可以快速将数组或对象中的值拆分并赋值给变量。解构赋值的语法使用花括号 <code>&#123;&#125;</code> 表示对象，方括号 <code>[]</code> 表示数组。通过解构赋值，函数更方便进行参数接受等！</p></blockquote><blockquote><p><strong>数组解构赋值</strong>：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组模型的解构(快速获取数组数据)</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//2.可嵌套数组处理</span></span><br><span class="line"><span class="keyword">let</span> [d,[f],g] = [<span class="number">1</span>,[<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//3.可忽略数组处理</span></span><br><span class="line"><span class="keyword">let</span> [h,i] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> [j,,k] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k);<span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//4.解构默认值</span></span><br><span class="line"><span class="keyword">let</span> [l,m = <span class="number">2</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(l);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//5.剩余运算符</span></span><br><span class="line"><span class="comment">//...只能在最后</span></span><br><span class="line"><span class="keyword">let</span> [n,...o] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//6.字符串解构</span></span><br><span class="line"><span class="comment">//在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [aa,bb,cc,dd] = <span class="string">&#x27;abcdf&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aa);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bb);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cc);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>对象解构赋值</strong>：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.对象模型解构</span></span><br><span class="line"><span class="comment">//解构的属性名必须等于对象属性名,否则无法对应</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//可以利用:起别名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:ne,<span class="attr">age</span>:ae&#125; = &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ne);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ae);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//8.对象解构嵌套和忽略</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>:[<span class="string">&#x27;hello&#x27;</span>,&#123;<span class="attr">y</span>:<span class="string">&#x27;world&#x27;</span>&#125;]&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>:[ff,&#123;<span class="attr">y</span>:yy&#125;]&#125; = obj;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">p</span>: [<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="attr">y</span>: <span class="string">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123;  &#125;] &#125; = obj1;</span><br><span class="line"><span class="comment">//9.对象还剩余运算符</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:aaa, <span class="attr">b</span>:bbb, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;;</span><br><span class="line"><span class="comment">// aaa = 10</span></span><br><span class="line"><span class="comment">// bbb = 20</span></span><br><span class="line"><span class="comment">// rest = &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>函数参数解构赋值</strong>：</p></blockquote><ul><li>解构赋值也可以用于函数参数，例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><ul><li><p>该函数接受一个数组作为参数，将其中的第一个值赋给 x，第二个值赋给 y，然后返回它们的和；</p></li><li><p>ES6 解构赋值让变量的初始化更加简单和便捷。通过解构赋值，我们可以访问到对象中的属性，并将其赋值给对应的变量，从而提高代码的可读性和可维护性；</p></li></ul><h2 id="2-4-es6的箭头函数">2.4 es6的箭头函数</h2><blockquote><p>ES6 允许使用“箭头” 函数。语法类似Java中的Lambda表达式。</p></blockquote><h3 id="2-4-1-声明">2.4.1 声明</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ES6 允许使用“箭头”（=&gt;）定义函数。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 函数声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式二：</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//针对方式二可以使用箭头函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun2</span> = (<span class="params"></span>)=&gt;&#123;&#125; <span class="comment">//箭头函数,此处不需要书写function关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun3</span> = x =&gt;&#123;&#125; <span class="comment">//单参数可以省略(),多参数无参数不可以!</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun4</span> = x =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//只有一行方法体可以省略&#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun5</span> = x =&gt; x + <span class="number">1</span> <span class="comment">//当函数体只有一句返回值时，可以省略花括号和 return 语句</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-参数默认值">2.4.2 参数默认值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明一个求和的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a + b</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//少传一个参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result1 = <span class="title function_">sum</span>(<span class="number">1</span>) </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">//NaN</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明函数时设置默认值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">sum1</span> = (<span class="params">a,b=<span class="number">1</span></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a + b</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result2 = <span class="title function_">sum1</span>(<span class="number">1</span>,<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result3 = <span class="title function_">sum1</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-三个点扩展运算符">2.4.3 三个点扩展运算符</h3><blockquote><p>用法一：作为可变参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ... 作为参数列表,称之为rest参数 普通函数和箭头函数中都支持</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun = <span class="keyword">function</span> (<span class="params">a,...args</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params">a,...args</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//1赋值给a，2和3作为一个数组赋值给args</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">//1赋值给a，2、3、4作为一个数组赋值给args</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// rest参数在一个参数列表中的最后一个值,这也就无形之中要求一个参数列表中只能有一个rest参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let fun2 =  (...args,...args2) =&gt;&#123;&#125; // 这里报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用法二：复制数组和对象的属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//使用... 复制数组和对象的属性称为spread语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景1 合并数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr3=[...arr,...arr2]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景2 合并对象属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2=&#123;<span class="attr">age</span>:<span class="number">10</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3=&#123;<span class="attr">gender</span>:<span class="string">&quot;boy&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;...p1,...p2,...p3&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-链判断">2.5 链判断</h2><blockquote><p>如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。</p><p>比如，读取emp.dept.name这个属性，安全的写法是写成下面这样:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  emp = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="comment">//const  empName = emp.dept.name|| &#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">const</span> empName = (emp</span><br><span class="line">                   &amp;&amp; emp.<span class="property">dept</span></span><br><span class="line">                   &amp;&amp; emp.<span class="property">dept</span>.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(empName)</span><br></pre></td></tr></table></figure><blockquote><p>这样的层层判断非常麻烦，因此 <a href="https://github.com/tc39/proposal-optional-chaining">ES2020</a> 引入了“链判断运算符”（optional chaining operator）<strong>?.</strong>，简化上面的写法:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let emp = null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emp = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">dept</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;教学部&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> empName = emp?.<span class="property">dept</span>?.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-es6的模块化处理">2.6 es6的模块化处理</h2><h3 id="2-6-1模块化介绍">2.6.1模块化介绍</h3><blockquote><p>模块化是一种组织和管理前端代码的方式，将代码拆分成小的模块单元，使得代码更易于维护、扩展和复用。它包括了定义、导出、导入以及管理模块的方法和规范。前端模块化的主要优势如下：</p></blockquote><ol><li>提高代码可维护性：通过将代码拆分为小的模块单元，使得代码结构更为清晰，可读性更高，便于开发者阅读和维护；</li><li>提高代码可复用性：通过将重复使用的代码变成可复用的模块，减少代码重复率，降低开发成本；</li><li>提高代码可扩展性：通过模块化来实现代码的松耦合，便于更改和替换模块，从而方便地扩展功能；</li></ol><blockquote><p>目前，前端模块化有多种规范和实现，包括 CommonJS、AMD 和 ES6 模块化。ES6 模块化是 JavaScript 语言的模块标准，使用 import 和 export 关键字来实现模块的导入和导出。现在，大部分浏览器都已经原生支持 ES6 模块化，因此它成为了最为广泛使用的前端模块化标准.。</p></blockquote><ul><li>ES6模块化的几种暴露和导入方式：<ol><li>分别导出；</li><li>统一导出；</li><li>默认导出；</li></ol></li><li><code>ES6中无论以何种方式导出,导出的都是一个对象,导出的内容都可以理解为是向这个对象中添加属性或者方法</code>！！！</li></ul><h3 id="2-6-2-分别导出">2.6.2 分别导出</h3><p><img src="images/01.png" alt="1684461046181"></p><ul><li>module.js 向外分别暴露成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.分别暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,添加export关键字即可!</span></span><br><span class="line"><span class="comment">// 导出一个变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js 导入module.js中的成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">PI</span>)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><ul><li>index.html作为程序启动的入口 ，导入 app.js  ：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入JS文件 添加type=&#x27;module&#x27; 属性,否则不支持ES6的模块化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="2-6-3-统一导出">2.6.3 统一导出</h3><p><img src="images/02.png" alt="1684461701620"></p><ul><li>module.js向外统一导出成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.统一暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,export统一暴露想暴露的内容!</span></span><br><span class="line"><span class="comment">// 定义一个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统一对外导出(暴露)</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"><span class="variable constant_">PI</span>,</span><br><span class="line">    sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js导入module.js中的成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入要使用的来自于module.js中的成员</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入的名称要和module.js中导出的一致,也可以在此处起别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中如果定义了别名,那么在当前模块中就只能使用别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入成员的顺序可以不是暴露的顺序</span></span><br><span class="line"><span class="comment">    一个模块中可以同时有多个import</span></span><br><span class="line"><span class="comment">    多个import可以导入多个不同的模块,也可以是同一个模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span> ,sum &#125;  <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span> <span class="keyword">as</span> pi,sum <span class="keyword">as</span> add&#125;  <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result1 =<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br></pre></td></tr></table></figure><h3 id="2-6-4-默认导出">2.6.4 默认导出</h3><p><img src="images/03.png" alt="1684463528680"></p><ul><li>module.js中混合向外导出：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.默认和混合暴露</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    默认暴露语法  export default sum</span></span><br><span class="line"><span class="comment">    默认导出在一个模块中只能使用一次</span></span><br><span class="line"><span class="comment">    默认暴露相当于是在暴露的对象中增加了一个名字为default的属性</span></span><br><span class="line"><span class="comment">    三种暴露方式可以在一个module中混合使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</span><br></pre></td></tr></table></figure><ul><li>app.js 的default和其他导入写法混用：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> add&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 用的少</span></span><br><span class="line"><span class="keyword">import</span> add2 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 等效于 import &#123;default as add2&#125; from &#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">default</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="keyword">let</span> result3 =<span class="title function_">add2</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入其他方式暴露的内容</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br></pre></td></tr></table></figure><h1>第3章 前端工程化环境搭建</h1><h2 id="3-1-Nodejs的介绍与安装">3.1 Nodejs的介绍与安装</h2><h3 id="3-1-1-什么是Nodejs">3.1.1 什么是Nodejs</h3><img src="images/04.png" alt="1684487715655" style="zoom: 33%;" /><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，可以使 JavaScript 运行在服务器端。使用 Node.js，可以方便地开发服务器端应用程序，如 Web 应用、API、后端服务，还可以通过 Node.js 构建命令行工具等。相比于传统的服务器端语言（如 PHP、Java、Python 等），Node.js 具有以下特点：</p></blockquote><ul><li>单线程，但是采用了事件驱动、异步 I/O 模型，可以处理高并发请求；</li><li>轻量级，使用 C++ 编写的 V8 引擎让 Node.js 的运行速度很快；</li><li>模块化，Node.js 内置了大量模块，同时也可以通过第三方模块扩展功能；</li><li>跨平台，可以在 Windows、Linux、Mac 等多种平台下运行；</li></ul><blockquote><p>Node.js 的核心是其管理事件和异步 I/O 的能力。Node.js 的异步 I/O 使其能够处理大量并发请求，并且能够避免在等待 I/O 资源时造成的阻塞。此外，Node.js 还拥有高性能网络库和文件系统库，可用于搭建 WebSocket 服务器、上传文件等。<code>在 Node.js 中，我们可以使用 JavaScript 来编写服务器端程序，这也使得前端开发人员可以利用自己已经熟悉的技能来开发服务器端程序，同时也让 JavaScript 成为一种全栈语言。</code>Node.js 受到了广泛的应用，包括了大型企业级应用、云计算、物联网、游戏开发等领域。常用的 Node.js 框架包括 Express、Koa、Egg.js 等，它们能够显著提高开发效率和代码质量。</p></blockquote><h3 id="3-1-2-如何安装Nodejs">3.1.2 如何安装Nodejs</h3><ol><li>打开官网https://nodejs.org/en下载对应操作系统的 LTS 版本。</li><li>双击安装包进行安装，安装过程中遵循默认选项即可(或者参照https://www.runoob.com/nodejs/nodejs-install-setup.html )。安装完成后，可以在命令行终端输入 <code>node -v</code> 和 <code>npm -v</code> 查看 Node.js 和 npm 的版本号。</li></ol><img src="images/05.png" alt="1687765256680" style="zoom:50%;" /><ol start="3"><li>定义一个app.js文件，文件内定义如下代码。cmd到该文件所在目录，然后在dos上通过<code>node app.js</code>命令即可运行。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试Nodejs&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-npm-配置和使用">3.2 npm 配置和使用</h2><h3 id="3-2-1-npm介绍">3.2.1 npm介绍</h3><img src="images/06.png" alt="1684487779164" style="zoom:50%;" /><blockquote><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于后端的Maven的部分功能 。</p></blockquote><h3 id="3-2-2-npm-安装和配置">3.2.2 npm 安装和配置</h3><blockquote><p>1、安装 ：安装Nodejs，自动安装npm包管理工具！</p></blockquote><blockquote><p>2、配置依赖下载使用阿里镜像：</p></blockquote><ul><li>npm 安装依赖包时默认使用的是官方源，由于国内网络环境的原因，有时会出现下载速度过慢的情况。为了解决这个问题，可以配置使用阿里镜像来加速 npm 的下载速度，打开命令行终端，执行以下命令，配置使用阿里镜像：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><ul><li>验证配置，查看当前 registry 的配置：如果输出结果为 <code>https://registry.npmmirror.com</code>，说明配置已成功生效。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><ul><li>如果需要恢复默认的官方源，可以执行以下命令：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><blockquote><p>3、配置全局依赖下载后存储位置：</p></blockquote><ul><li><p>在 Windows 系统上，npm 的全局依赖默认安装在 <code>&lt;用户目录&gt;\AppData\Roaming\npm</code> 目录下。</p></li><li><p>如果需要修改全局依赖的安装路径，可以按照以下步骤操作：</p><ol><li><p>创建一个新的全局依赖存储目录，例如 <code>D:\GlobalNodeModules</code>。</p></li><li><p>打开命令行终端，执行以下命令来配置新的全局依赖存储路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\GlobalNodeModules&quot;</span><br></pre></td></tr></table></figure></li><li><p>确认配置已生效，可以使用以下命令查看当前的全局依赖存储路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>4、升级npm版本：</p></blockquote><ul><li>cmd 输入npm -v 查看版本，如果node中自带的npm版本过低！则需要升级至9.6.6！</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@9.6.6</span><br></pre></td></tr></table></figure><h3 id="3-2-3-npm-常用命令">3.2.3 npm 常用命令</h3><blockquote><p>1、项目初始化：</p></blockquote><ul><li>npm init<ul><li>进入一个vscode创建好的项目中，执行 npm init 命令后，npm 会引导您在命令行界面上回答一些问题，例如项目名称、版本号、作者、许可证等信息，并最终生成一个package.json 文件。package.json信息会包含项目基本信息！类似maven的pom.xml。</li></ul></li><li>npm init -y<ul><li>执行，-y yes的意思，所有信息使用当前文件夹的默认值！不用挨个填写！</li></ul></li></ul><blockquote><p>2、安装依赖  (查看所有依赖地址  <a href="https://www.npmjs.com">https://www.npmjs.com</a> )：</p></blockquote><ul><li>npm install 包名 或者 npm install 包名@版本号<ul><li>安装包或者指定版本的依赖包(安装到当前项目中)。</li></ul></li><li>npm install -g 包名<ul><li>安装全局依赖包(安装到d:/GlobalNodeModules)则可以在任何项目中使用它，而无需在每个项目中独立安装该包。</li></ul></li><li>npm install<ul><li>安装package.json中的所有记录的依赖。</li></ul></li></ul><blockquote><p>3、升级依赖：</p></blockquote><ul><li>npm update 包名<ul><li>将依赖升级到最新版本。</li></ul></li></ul><blockquote><p>4、卸载依赖：</p></blockquote><ul><li>npm uninstall 包名</li></ul><blockquote><p>5、查看依赖：</p></blockquote><ul><li><p>npm ls</p><ul><li>查看项目依赖。</li></ul></li><li><p>npm list -g</p><ul><li>查看全局依赖。</li></ul></li></ul><blockquote><p>6、运行命令：</p></blockquote><ul><li><p>npm run 命令是在执行 npm 脚本时使用的命令。npm 脚本是一组在 package.json 文件中定义的可执行命令。npm 脚本可用于启动应用程序，运行测试，生成文档等，还可以自定义命令以及配置需要运行的脚本。</p></li><li><p>在 package.json 文件中，scripts 字段是一个对象，其中包含一组键值对，键是要运行的脚本的名称，值是要执行的命令。例如，以下是一个简单的 package.json 文件：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">package.json 是每个 npm 项目的基础配置文件，它定义了项目的依赖关系、版本号、入口脚本、包的元数据等信息。</span><br><span class="line">一个基本的 package.json 文件包含以下字段：</span><br><span class="line">name<span class="punctuation">:</span> 包名</span><br><span class="line">version<span class="punctuation">:</span> 版本号，遵循语义化版本控制（Semantic Versioning）</span><br><span class="line">description<span class="punctuation">:</span> 包的描述</span><br><span class="line">main<span class="punctuation">:</span> 入口点脚本文件，通常是启动时加载的文件</span><br><span class="line">scripts<span class="punctuation">:</span> 定义运行脚本的脚本命令</span><br><span class="line">dependencies<span class="punctuation">:</span> 生产环境依赖</span><br><span class="line">devDependencies<span class="punctuation">:</span> 开发环境依赖</span><br><span class="line">repository<span class="punctuation">:</span> 代码仓库地址</span><br><span class="line">keywords<span class="punctuation">:</span> 关键词数组，有助于 npm 搜索</span><br><span class="line">author<span class="punctuation">:</span> 作者信息</span><br><span class="line">license<span class="punctuation">:</span> 许可证</span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example-package&quot;</span><span class="punctuation">,</span>  <span class="comment">//软件名</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>         <span class="comment">//定义版本</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A sample npm package&quot;</span><span class="punctuation">,</span> <span class="comment">//软件描述</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="comment">//启动执行的js文件</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//指定运行脚本</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span> <span class="comment">// npm run test 执行内部的测试输出命令</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        maven / 依赖 / scope / compile 全程需要 | runtime 写代码时候无法使用<span class="punctuation">,</span>运行才会有 mysql | provided main test 打包以后不使用 <span class="punctuation">[</span><span class="punctuation">[</span>servlet<span class="punctuation">]</span><span class="punctuation">]</span> | test  junit</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> (compile) <span class="punctuation">&#123;</span>  <span class="comment">//生产环境依赖</span></span><br><span class="line">        <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.17.1&quot;</span><span class="punctuation">,</span> #准确版本</span><br><span class="line">        <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span> #大版本必须<span class="number">4</span> 锁住大版本</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span>(provided) <span class="punctuation">&#123;</span> <span class="comment">//开发环境依赖 </span></span><br><span class="line">        <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//git仓库</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/username/example-package.git&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;example&quot;</span><span class="punctuation">,</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//npm搜索关键字</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Your Name&quot;</span><span class="punctuation">,</span> <span class="comment">//作者名字</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span> <span class="comment">//许可证</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">### 环境依赖配置</span><br><span class="line">    dependencies 生产环境依赖 (compile)</span><br><span class="line">    devDependencies 开发环境依赖  (provided)</span><br><span class="line">当你执行 npm install（没有额外参数时）时，dependencies 会被自动安装。</span><br><span class="line">    当你执行 npm install --production 或者设置环境变量为 NODE_ENV=production 时，devDependencies 会被忽略，只会安装 dependencies 中的依赖。</span><br><span class="line">### name</span><br><span class="line"></span><br><span class="line">    name 是指软件包名。</span><br><span class="line">    命名规则：</span><br><span class="line">    名称必须小于或等于 <span class="number">214</span> 个字符。这包括范围软件包的范围。</span><br><span class="line">    作用域软件包的名称可以以点或下划线开头。如果没有作用域，则不允许这样做。</span><br><span class="line">    新软件包名称中不能有大写字母。</span><br><span class="line">    名称最终会成为 URL、命令行参数和文件夹名称的一部分。因此，名称中不能包含任何非 URL 安全字符。</span><br><span class="line">    名称可选择以作用域作为前缀，例如 @myorg/mypackage。</span><br><span class="line">    提示：</span><br><span class="line">    不要使用与 Node 核心模块相同的名称。</span><br><span class="line">    不要在名称中使用 <span class="string">&quot;js &quot;</span>或 “node”。因为你编写的是 package.json 文件，所以我们假定它是 js，你可以使用 <span class="string">&quot;引擎 &quot;</span>字段指定引擎。(见下文）。</span><br><span class="line">    该名称可能会作为参数传递给 require()，因此应该简短，但也要有合理的描述性。</span><br><span class="line">    你可能需要检查一下 npm 注册表，看看是否已经有使用该名称的软件，以免过于依赖它。https<span class="punctuation">:</span><span class="comment">//www.npmjs.com/</span></span><br><span class="line">    这是发布包的注意事项，如果你的项目不准备分享发布，则无所谓，建议和你项目相同。</span><br><span class="line"></span><br><span class="line">### version</span><br><span class="line"></span><br><span class="line">    指发布包版本号<span class="punctuation">,</span>x.x.x的形式。</span><br><span class="line">    版本必须能被 node-semver 解析，node-semver 作为依赖项与 npm 捆绑。(npm install semver 可自行使用）。</span><br><span class="line">    命名版本号建议遵循版本语义规范<span class="punctuation">,</span>：</span><br><span class="line"></span><br><span class="line">### description</span><br><span class="line"></span><br><span class="line">    项目描述。</span><br><span class="line">    这是一个字符串。这有助于人们发现你的软件包，因为它会在 npm 搜索中列出。</span><br><span class="line"></span><br><span class="line">### keywords</span><br><span class="line"></span><br><span class="line">    项目关键字。</span><br><span class="line">    这是一个字符串数组。这有助于人们在 npm 搜索中发现你的软件包。</span><br><span class="line"></span><br><span class="line">### scripts</span><br><span class="line"></span><br><span class="line">    运行命令集合（字典）</span><br><span class="line">    脚本 <span class="string">&quot;属性是一个字典，包含在软件包生命周期的不同时间运行的脚本命令。键是生命周期事件，值是在该时刻运行的命令。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    package.json 文件的 &quot;</span>scripts <span class="string">&quot;属性支持大量内置脚本、预设生命周期事件以及任意脚本。这些脚本都可以通过运行 npm run-script 或 npm run 来执行。名称匹配的前置和后置命令也会被执行（例如 premyscript、myscript、postmyscript）。使用 npm explore – npm run 可以运行来自依赖项的脚本。</span></span><br><span class="line"><span class="string">    例如：</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;</span>scripts<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>precompress<span class="string">&quot;: &quot;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span> executes BEFORE the `compress` script <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &quot;</span>compress<span class="string">&quot;: &quot;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span> run command to compress files <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &quot;</span>postcompress<span class="string">&quot;: &quot;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span> executes AFTER `compress` script <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    npm run compress 就会执行compress后面对应的命令!</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><ul><li>scripts 对象包含 start、test 和 build 三个脚本。当您运行 npm run start 时，将运行 node index.js，并启动应用程序。同样，运行 npm run test 时，将运行 Jest 测试套件，而 npm run build 将运行 webpack 命令以生成最终的构建输出。</li><li>总之，npm run 命令为您提供了一种在 package.json 文件中定义和管理一组指令的方法，可以在项目中快速且灵活地运行各种操作。</li></ul><h1>第4章 Vue3框架</h1><h2 id="4-1-Vue3简介">4.1 Vue3简介</h2><h3 id="4-1-1-Vue3介绍">4.1.1 Vue3介绍</h3><img src="images/07.png" alt="1684487637025" style="zoom:50%;" /><blockquote><p>Vue (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。官网为:<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p></blockquote><p><strong>Vue的两个核心功能：</strong></p><ul><li><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系；</li><li><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM  ；</li></ul><blockquote><p>VUE作者:尤雨溪</p></blockquote><img src="images/08.png" alt="1684487839928" style="zoom:50%;" /><ul><li><p>尤雨溪（Evan You），毕业于科尔盖特大学，前端框架Vue.js的作者、HTML5版Clear的打造人、独立开源开发者。曾就职于Google Creative Labs和Meteor Development Group。由于工作中大量接触开源的JavaScript项目，最后自己也走上了开源之路，现全职开发和维护Vue.js；</p></li><li><p>尤雨溪毕业于上海复旦附中，在美国完成大学学业，本科毕业于Colgate University，后在Parsons设计学院获得Design &amp; Technology艺术硕士学位，任职于纽约Google Creative Lab；</p></li><li><p>尤雨溪大学专业并非是计算机专业，在大学期间他学习专业是室内艺术和艺术史，后来读了美术设计和技术的硕士，正是在读硕士期间，他偶然接触到了JavaScript，从此被这门编程语言深深吸引，开启了自己的前端生涯；</p></li></ul><h3 id="4-1-2-Vue3快速体验-非工程化方式">4.1.2 Vue3快速体验(非工程化方式)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue3初体验（非工程化方式）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.初始化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> message = <span class="string">&quot;Hello Vue3&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    message</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.挂载</span></span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更完整的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue3完整流程&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 第一步：准备HTML模板 --&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;计数器: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;increment&quot;&gt;点击+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第二步：引入Vue --&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 第三步：创建Vue应用</span><br><span class="line">        const app = Vue.createApp(&#123;</span><br><span class="line">            setup() &#123;</span><br><span class="line">                // 数据</span><br><span class="line">                let count = 0</span><br><span class="line">                let title = &quot;我的Vue应用&quot;</span><br><span class="line">                </span><br><span class="line">                // 方法</span><br><span class="line">                function increment() &#123;</span><br><span class="line">                    count++</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                // 返回给模板使用</span><br><span class="line">                return &#123;</span><br><span class="line">                    count,</span><br><span class="line">                    title,</span><br><span class="line">                    increment</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // 第四步：挂载到DOM</span><br><span class="line">        app.mount(&quot;#app&quot;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-Vue3通过Vite实现工程化">4.2 Vue3通过Vite实现工程化</h2><h3 id="4-2-1-Vite的介绍">4.2.1 Vite的介绍</h3><img src="images/09.png"/><blockquote><p>在浏览器支持 ES 模块之前，JavaScript 并没有提供原生机制让开发者以模块化的方式进行开发。这也正是我们对 “打包” 这个概念熟悉的原因：使用工具抓取、处理并将我们的源码模块串联成可以在浏览器中运行的文件。时过境迁，我们见证了诸如 <a href="https://webpack.js.org/" title="webpack">webpack</a>、<a href="https://rollupjs.org/" title="Rollup">Rollup</a> 和 <a href="https://parceljs.org/" title="Parcel">Parcel</a> 等工具的变迁，它们极大地改善了前端开发者的开发体验。</p></blockquote><ul><li>当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长；</li><li>包含数千个模块的大型项目相当普遍。基于 JavaScript 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用模块热替换（HMR），文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感；</li></ul><blockquote><p>Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。<a href="https://cn.vitejs.dev/guide/why.html%E3%80%82%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8C%85%E6%8B%AC%E4%BD%86%E4%B8%8D%E9%99%90%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%EF%BC%9A">https://cn.vitejs.dev/guide/why.html。前端工程化的作用包括但不限于以下几个方面：</a></p></blockquote><ol><li>快速创建项目：使用脚手架可以快速搭建项目基本框架，避免从零开始搭建项目的重复劳动和繁琐操作，从而节省时间和精力；</li><li>统一的工程化规范：前端脚手架可以预设项目目录结构、代码规范、git提交规范等统一的工程化规范，让不同开发者在同一个项目上编写出风格一致的代码，提高协作效率和质量；</li><li>代码模板和组件库：前端脚手架可以包含一些常用的代码模板和组件库，使开发者在实现常见功能时不再重复造轮子，避免因为轮子质量不高带来的麻烦，能够更加专注于项目的业务逻辑；</li><li>自动化构建和部署：前端脚手架可以自动进行代码打包、压缩、合并、编译等常见的构建工作，可以通过集成自动化部署脚本，自动将代码部署到测试、生产环境等；</li></ol><h3 id="4-2-2-Vite创建Vue3工程化项目">4.2.2 Vite创建Vue3工程化项目</h3><h4 id="1、Vite-Vue3项目的创建、启动、停止">1、Vite+Vue3项目的创建、启动、停止</h4><blockquote><p>1 使用命令行创建工程。</p></blockquote><ul><li>在磁盘的合适位置上，创建一个空目录用于存储多个前端项目；</li><li>用vscode打开该目录；</li><li>在vscode中打开命令行运行如下命令；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br></pre></td></tr></table></figure><ul><li>第一次使用Vite时会提示下载vite，输入y回车即可，下次使用Vite就不会出现了；</li></ul><img src="images/10.png" alt="1687769339457" style="zoom: 80%;" /><ul><li>注意： 输入项目名称vue3-demo，选择Vue+JavaScript选项即可；</li></ul><blockquote><p>2 安装项目所需依赖：</p></blockquote><ul><li>cd进入刚刚创建的项目目录；</li><li>npm install命令安装基础依赖；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./vue3-demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>3 启动项目：</p></blockquote><ul><li>查看项目下的package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.62.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.47&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><img src="images/11.png" style="zoom: 33%;" /><blockquote><p>5 停止项目：</p></blockquote><ul><li>命令行上 ctrl+c</li></ul><h4 id="2、Vite-Vue3项目的目录结构">2、Vite+Vue3项目的目录结构</h4><blockquote><p>1.下面是 Vite 项目结构和入口的详细说明：</p></blockquote><img src="images/12.png" alt="1684489112904" style="zoom:67%;" /><ul><li>public/ 目录：用于存放一些公共资源，如 HTML 文件、图像、字体等，这些资源会被直接复制到构建出的目标目录中。</li><li>src/ 目录：存放项目的源代码，包括 JavaScript、CSS、Vue 组件、图像和字体等资源。在开发过程中，这些文件会被 Vite 实时编译和处理，并在浏览器中进行实时预览和调试。以下是src内部划分建议：<ol><li><code>assets/</code> 目录：用于存放一些项目中用到的静态资源，如图片、字体、样式文件等。</li><li><code>components/</code> 目录：用于存放组件相关的文件。组件是代码复用的一种方式，用于抽象出一个可复用的 UI 部件，方便在不同的场景中进行重复使用。</li><li><code>layouts/</code> 目录：用于存放布局组件的文件。布局组件通常负责整个应用程序的整体布局，如头部、底部、导航菜单等。</li><li><code>pages/</code> 目录：用于存放页面级别的组件文件，通常是路由对应的组件文件。在这个目录下，可以创建对应的文件夹，用于存储不同的页面组件。</li><li><code>plugins/</code> 目录：用于存放 Vite 插件相关的文件，可以按需加载不同的插件来实现不同的功能，如自动化测试、代码压缩等。</li><li><code>router/</code> 目录：用于存放 Vue.js 的路由配置文件，负责管理视图和 URL 之间的映射关系，方便实现页面之间的跳转和数据传递。</li><li><code>store/</code> 目录：用于存放 Vuex 状态管理相关的文件，负责管理应用程序中的数据和状态，方便统一管理和共享数据，提高开发效率。</li><li><code>utils/</code> 目录：用于存放一些通用的工具函数，如日期处理函数、字符串操作函数等。</li></ol></li><li>vite.config.js 文件：Vite 的配置文件，可以通过该文件配置项目的参数、插件、打包优化等。该文件可以使用 CommonJS 或 ES6 模块的语法进行配置。</li><li>package.json 文件：标准的 Node.js 项目配置文件，包含了项目的基本信息和依赖关系。其中可以通过 scripts 字段定义几个命令，如 dev、build、serve 等，用于启动开发、构建和启动本地服务器等操作。</li><li>Vite 项目的入口为 src/main.js 文件，这是 Vue.js 应用程序的启动文件，也是整个前端应用程序的入口文件。在该文件中，通常会引入 Vue.js 及其相关插件和组件，同时会创建 Vue 实例，挂载到 HTML 页面上指定的 DOM 元素中。</li></ul><blockquote><p>2.vite的运行界面：</p></blockquote><ul><li>在安装了 Vite 的项目中，可以在 npm scripts 中使用 <code>vite</code> 可执行文件，或者直接使用 <code>npx vite</code> 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：(package.json)。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span> <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span> <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>运行设置端口号：(vite.config.js)。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改vite项目配置文件 vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3、Vite-Vue3项目组件-SFC入门">3、Vite+Vue3项目组件(SFC入门)</h4><blockquote><p>什么是VUE的组件?</p></blockquote><ul><li>一个页面作为整体，是由多个部分组成的，每个部分在这里就可以理解为一个组件；</li><li>每个.vue文件就可以理解为一个组件，多个.vue文件可以构成一个整体页面；</li><li>组件化给我们带来的另一个好处就是组件的复用和维护非常的方便；</li></ul><img src="images/13.png"  /><blockquote><p>什么是.vue文件?</p></blockquote><ul><li><p>传统的页面有html文件css文件和js文件三个文件组成(多文件组件) ；</p></li><li><p>vue将这文件合并成一个vue文件(Single-File Component，简称 SFC，单文件组件)； 整个项目叫SPA（single page application）</p></li><li><p>vue文件对js/css/html统一封装，这是VUE中的概念，该文件由三个部分组成    <code>&lt;script&gt; &lt;template&gt; &lt;style&gt;</code>；我们主要写的是<code>&lt;script&gt;</code>  html部分Elementplus可以解决如果不会问ai嘛</p><ul><li>template标签     代表组件的html部分代码，代替传统的html文件；</li><li>script标签           代表组件的js代码，代替传统的js文件；</li><li>style标签            代表组件的css样式代码，代替传统的css文件；</li></ul></li></ul><blockquote><p>工程化vue项目如何组织这些组件?</p></blockquote><ul><li>index.html是项目的入口，其中 <code>&lt;div id ='app'&gt;&lt;/div&gt;</code>是用于挂载所有组建的元素；</li><li>index.html中的script标签引入了一个main.js文件，具体的挂载过程在main.js中执行；</li><li>main.js是vue工程中非常重要的文件，他决定这项目使用哪些依赖，导入的第一个组件；（控制布局）</li><li>App.vue是vue中的核心组件，所有的其他组件都要通过该组件进行导入，该组件通过路由可以控制页面的切换；</li></ul><img src="images/14.png" alt="1684912274904" style="zoom: 50%;" /><h4 id="4、Vite-Vue3响应式入门和setup函数">4、Vite+Vue3响应式入门和setup函数</h4><blockquote><p>1 删除App.vue中自带的内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面的样式的是html代码  至少需要一个元素不然会报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    /** 存储的是css代码! <span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span> 是 Vue.js 单文件组件中用于设置组件样式的一种方式。</span></span><br><span class="line"><span class="language-xml">    它的含义是将样式局限在当前组件中，不对全局样式造成影响。 */</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2 Vue3响应式数据入门：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//非响应式数据: 修改后VUE不会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应式数据:   修改后VUE会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE2中数据默认是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE3中数据要经过ref或者reactive处理后才是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref是VUE3框架提供的一个函数,需要导入</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//let counter = 1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref处理的响应式数据在js编码修改的时候需要通过.value操作</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref响应式数据在绑定到html上时不需要.value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过.value修改响应式数据</span></span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                counter,</span></span><br><span class="line"><span class="language-javascript">                increase,</span></span><br><span class="line"><span class="language-javascript">                decrease</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrease()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>3 Vue3 setup函数和语法糖：</p></blockquote><ul><li>位置：src/App.vue。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组合式API编程模板--&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; setup&gt;   </span><br><span class="line">/* 通过setup关键字，可以省略 export default &#123;setup()&#123;   return&#123;&#125;&#125;&#125;这些冗余的语法结构 */</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">    // 定义响应式数据</span><br><span class="line">    let counter = ref(1)</span><br><span class="line">    // 定义函数</span><br><span class="line">    function increase()&#123;</span><br><span class="line">        counter.value++ //如果使用ref()声明响应式变量 js代码注意必须要加.value  指令或者插值表达式不用加</span><br><span class="line">    &#125;</span><br><span class="line">    function decrease()&#123;</span><br><span class="line">        counter.value--</span><br><span class="line">    &#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;decrease()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;increase()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    button&#123;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 导入ref函数 响应式变量</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">//let counter = 1;//不是响应式的</span><br><span class="line">let counter = ref(1);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;counter--&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    ==========&#123;&#123; counter &#125;&#125;==========</span><br><span class="line">    &lt;button @click=&quot;counter++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">button &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5、Vite-Vue3关于样式的导入方式">5、Vite+Vue3关于样式的导入方式</h4><ol><li>全局引入main.js；针对所有的vue页面生效<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span> <span class="comment">//书写引入的资源的相对路径即可！</span></span><br></pre></td></tr></table></figure></li><li>vue文件script代码引入；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Vue文件style代码引入；[不推荐]<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="6、vscode中创建vue3SFC模版">6、vscode中创建vue3SFC模版</h4><ol><li><p>vscode点击设置</p><p><img src="assets/image-20241021154904344.png" alt="image-20241021154904344"></p></li><li><p>搜索vue.json配置参数</p><p><img src="assets/image-20241021155020009.png" alt="image-20241021155020009"></p></li><li><p>添加vue3 SFC模板代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sfc&quot;</span><span class="punctuation">,</span>  <span class="comment">//键入该值，按tab快捷产生</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;&lt;script setup&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  &lt;div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  &lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;style scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/style&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3的sfc模板&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用vue3模板</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">vue</span> -&gt;</span> sfc + tab即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-3-Vue3视图渲染技术">4.3 Vue3视图渲染技术</h2><h3 id="4-3-1-模版语法">4.3.1 模版语法</h3><blockquote><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p></blockquote><h4 id="1、插值表达式和文本渲染">1、插值表达式和文本渲染</h4><blockquote><p>插值表达式：最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 ，即双大括号<code>&#123;&#123;&#125;&#125;</code>：</p></blockquote><ul><li>插值表达式是将数据渲染到元素的指定位置的手段之一；</li><li>插值表达式不绝对依赖标签，其位置相对自由；</li><li>插值表达式中支持javascript的运算表达式；</li><li>插值表达式中也支持函数的调用；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> message = <span class="string">&quot;测试插值表达式&quot;</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//声明一个函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> <span class="title function_">getAddress</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="string">&quot;宏福苑小区&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你成年了吗：&#123;&#123; age&gt;=18?&quot;已成年&quot;:&quot;未成年&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你的居住地：&#123;&#123; getAddress() &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> message = <span class="string">&#x27;永远不停止与这个世界对抗!&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="number">15</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">getAddress</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="string">&#x27;中国&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; age &gt;= 18 ? &#x27;成年啦！&#x27; : &quot;未成年&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; getAddress() &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为了渲染双标中的文本，我们也可以选择使用<code>v-text</code>和<code>v-html</code>命令：</p></blockquote><ul><li>v-*** 这种写法的方式使用的是vue的命令；</li><li>v-***的命令必须依赖元素，并且要写在元素的开始标签中；</li><li>v-***指令支持ES6中的模板字符串；</li><li>插值表达式中支持javascript的运算表达式；</li><li>插值表达式中也支持函数的调用；</li><li>v-text可以将数据渲染成双标签中间的文本，但是不识别html元素结构的文本；</li><li>v-html可以将数据渲染成双标签中间的文本，识别html元素结构的文本；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message = <span class="string">&quot;测试文本渲染&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> msg = <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;我要红&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试v-text和v-html的区别 --&gt;</span>8</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、Attribute属性渲染">2、Attribute属性渲染</h4><blockquote><p>想要渲染一个元素的 attribute，应该使用 <code>v-bind</code>指令。</p></blockquote><ul><li>由于插值表达式不能直接放在标签的属性中，要渲染元素的属性就应该使用v-bind；</li><li>v-bind可以用于渲染任何元素的属性，语法为 <code>v-bind:属性名='数据名'</code>， 可以简写为 <code>:属性名='数据名'</code>；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> data = <span class="string">&quot;测试属性渲染&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> link = <span class="string">&quot;http://www.yutao.com&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 完整写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;data&quot;</span>&gt;</span>我是div标签，我的id属性是通过Vue渲染的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.4+新特性 如果 attribute 的名称与绑定的 JavaScript 值的名称相同，那么可以进一步简化语法，省略 attribute 值：--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 与 :id=&quot;id&quot; 相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这也同样有效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、事件的绑定">3、事件的绑定</h4><blockquote><p>我们可以使用 <code>v-on</code> 来监听 DOM 事件，并在事件触发时执行对应的 Vue的JavaScript代码。</p></blockquote><ul><li>用法：<code>v-on:click=&quot;handler&quot;</code> 或简写为 <code>@click=&quot;handler&quot;</code>；</li><li>vue中的事件名=原生事件名去掉<code>on</code> 前缀   如:<code>onClick --&gt; click</code>；</li><li>handler的值可以是方法事件处理器，也可以是内联事件处理器；</li><li>绑定事件时，可以通过一些绑定的修饰符，常见的事件修饰符如下：<ul><li><code>.once：只触发一次事件。[重点]</code>；</li><li><code>.prevent：阻止默认事件。[重点]，例如：a标签添加阻止默认事件，就不触发href属性对应的地址了</code>；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//add函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对count加1</span></span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//sub函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">sub</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对count加1</span></span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//changeData函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">changeData</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文本框中的内容发生了变化&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//blurF函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">blurF</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文本框中失去了焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建一个取消默认行为的函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">stopDef</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//阻止事件（取消默认行为）</span></span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>➕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>➖<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 文本框改变事件 --&gt;</span></span><br><span class="line">  给文本框绑定内容改变的事件：<span class="tag">&lt;<span class="name">input</span> @<span class="attr">change</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  给文本框绑定失去焦点的事件：<span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur</span>=<span class="string">&quot;blurF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 让单击事件只执行一次 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>count只会被加一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 阻止事件（取消默认行为） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.u.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;&quot;</span>&gt;</span>官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用原生JS代码阻止事件（取消默认行为） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www..com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;stopDef($event)&quot;</span>&gt;</span>官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;请输入姓名&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeData</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  message.<span class="property">value</span> = data</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">blurInput</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  message.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    姓名:&#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeData($event.target.value)&quot;</span>&gt;</span> <span class="comment">&lt;!-- 输入完得按一下回车 --&gt;</span></span><br><span class="line"></span><br><span class="line">    《输入框失去焦点时触发》</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;blurInput&quot;</span>&gt;</span> &#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    只能触发一次</span><br><span class="line">    抽奖的场景可以使用</span><br><span class="line"></span><br><span class="line">    阻止链接跳转</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Vue3 事件处理详解<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 1. 文本框改变事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本框事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的值：&#123;&#123; inputValue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- @change 事件：内容改变且失去焦点时触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>change事件（失去焦点才触发）：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入后点击别处&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- @blur 事件：失去焦点时触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>blur事件（失去焦点就触发）：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur</span>=<span class="string">&quot;handleBlur&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点时触发&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- @input 事件：实时输入触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>input事件（实时触发）：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">input</span>=<span class="string">&quot;handleInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;实时输入触发&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 按钮点击事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>计数器：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 普通点击事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>普通点击（每次+1）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .once 修饰符：只执行一次 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>只执行一次（只会+1一次）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .stop 修饰符：阻止事件冒泡 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;parentClick&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: lightblue; padding: 20px;&quot;</span>&gt;</span></span><br><span class="line">        父级容器（点击我）</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childClick&quot;</span>&gt;</span>子级按钮（点击我）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;childClickStop&quot;</span>&gt;</span>阻止冒泡的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 链接事件处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>链接事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .prevent 修饰符：阻止默认行为 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;handleLink&quot;</span>&gt;</span>阻止跳转的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 不阻止默认行为 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleLinkWithDefault&quot;</span>&gt;</span>正常跳转的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 使用原生JS阻止默认行为 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;stopDefault($event)&quot;</span>&gt;</span>JS阻止跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 键盘事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>键盘事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>按下的键：&#123;&#123; pressedKey &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .enter 修饰符：只在回车键时触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;handleEnter&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按回车键试试&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 监听所有按键 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup</span>=<span class="string">&quot;handleKeyup&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按任意键试试&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> inputValue = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pressedKey = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 文本框事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;change事件触发:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  inputValue.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;change事件：内容改变了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleBlur</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;blur事件触发:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;blur事件：失去焦点了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleInput</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;input事件触发:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  inputValue.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 按钮事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;计数器:&#x27;</span>, count.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">parentClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父级被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;父级容器被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">childClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子级被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;子级按钮被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">childClickStop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;阻止冒泡的按钮被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;这个按钮点击不会冒泡到父级&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 链接事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleLink</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接被点击，但被阻止了跳转&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;链接被点击，但不会跳转！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleLinkWithDefault</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接被点击，会正常跳转&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;链接被点击，即将跳转！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">stopDefault</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;使用JS阻止默认行为&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  event.<span class="title function_">preventDefault</span>() <span class="comment">// 阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;使用JS阻止了跳转！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 键盘事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleEnter</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下了回车键&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;你按下了回车键！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleKeyup</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  pressedKey.<span class="property">value</span> = event.<span class="property">key</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下的键:&#x27;</span>, event.<span class="property">key</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span>, <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#42b983</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#369870</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-响应式基础">4.3.2 响应式基础</h3><blockquote><p>此处的响应式是指  ： 数据模型（自定义的变量、对象）发生变化时，自动更新DOM树内容，页面上显示的内容会进行同步变化。vue3的数据模型不是自动响应式的，需要我们做一些特殊的处理。</p></blockquote><h4 id="1、如何实现响应式">1、如何实现响应式</h4><blockquote><p>使用<code>ref</code>或<code>reactive</code>函数就可以将基本类型的数据（如字符串，数字等）和引用类型的数据（如对象）转换为一个响应式对象。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  响应式概念：在 Vue.js 中，响应式是一个核心概念，旨在实现数据和视图的自动同步。当你更改数据时，视图会自动更新，而不需要手动操作 DOM。这种机制使得开发者能够更加专注于业务逻辑，而不必关注视图的更新。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  vue版本区别：Vue2中所有的数据默认是响应式、在Vue3中JS中声明的数据默认不是响应式的，需要使用ref或reactive函数包装一下就变成了响应式的，包装之后就变成了ref对象或reactive对象.</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  ref函数和reactive函数的区别：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1.ref函数可以包装基本类型（字符串、数字,对象）和引入类型（数组、对象）；reactive只能包装引用类型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2.使用ref包装的数据在JS中修改或获取的时候需要加.value，在DOM中不用添加.value（template可以直接操作）；</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        用reactive包装的数据在JS和DOM中都不需要添加.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      3.使用ref包装的对象，对象和对象的属性都是响应式的；使用reactive包装的对象，对象不是响应式的，对象的属性是响应式的（不能做对象替换）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//包装基本类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">56</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> totalCount = <span class="title function_">reactive</span>(<span class="number">566</span>) <span class="comment">//不推荐 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//包装引用类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> obj = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&quot;蔡徐坤&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>:<span class="number">33</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> obj2 = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&quot;吴亦凡&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>:<span class="number">38</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeCount</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span> = <span class="number">58</span>   <span class="comment">//修改值 可以响应式回显数据</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeTotalCount</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  totalCount = <span class="number">588</span>   <span class="comment">//值修改 不能响应式更改数据</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObj</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj.<span class="property">value</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;李易峰&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">35</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObj2</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj2 = &#123;     <span class="comment">// reactive声明对象引用，可以修改对象属性值 但是不能更改对象本身的地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;PGOne&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">32</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObjAttr</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&quot;蔡大使&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObj2Attr</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj2.<span class="property">name</span> = <span class="string">&quot;吴签&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>班级总人数：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全校总人数：&#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用ref函数包装的对象：&#123;&#123; obj &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用reactive函数包装的对象：&#123;&#123; obj2 &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeCount&quot;</span>&gt;</span>改变ref包装的基本类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeTotalCount&quot;</span>&gt;</span>改变reactive包装的基本类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObj&quot;</span>&gt;</span>改变ref包装的对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObj2&quot;</span>&gt;</span>改变reactive包装的对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObjAttr&quot;</span>&gt;</span>改变ref包装的对象的属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObj2Attr&quot;</span>&gt;</span>改变reactive包装的对象的属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、ref与reactive的区别">2、ref与reactive的区别</h4><ol><li>ref函数可以包装基本类型（字符串、数字）和引用类型（数组、对象）；reactive只能包装引用类型</li><li>使用ref包装的数据在JS中修改或获取的时候需要加.value，在DOM（template标签内）中不用添加.value；用reactive包装的数据在JS和DOM中都不需要添加.value</li><li>使用ref包装的对象，对象和对象的属性都是响应式的；使用reactive包装的对象，对象不是响应式的，对象的属性是响应式的</li></ol><h3 id="4-3-2-条件和列表渲染">4.3.2 条件和列表渲染</h3><h4 id="1、条件渲染">1、条件渲染</h4><blockquote><p><code>v-if</code> 条件渲染：</p></blockquote><ul><li><p><code>v-if='表达式' </code>只会在指令的表达式返回真值时才被渲染</p></li><li><p>也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”。</p></li><li><p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 元素后面，否则它将不会被识别。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="number">16</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>已成年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>小屁孩儿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-show</code>条件渲染扩展：</p></blockquote><ul><li><p>另一个可以用来按条件显示一个元素的指令是 <code>v-show</code>。其用法基本一样；</p></li><li><p>不同之处在于 <code>v-show</code> 会在 DOM 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display</code> 的 CSS 属性；</p></li><li><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用；</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="number">16</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>已成年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>小屁孩儿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>成年人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt; 18&quot;</span>&gt;</span>儿童<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="images/15.png" alt="1684565503347" style="zoom: 80%;" /><blockquote><p><strong><code>v-if</code></strong>    <strong>vs</strong> <strong><code>v-show</code></strong>：</p></blockquote><ul><li><p><code>v-if</code> 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建；</p></li><li><p><code>v-if</code> 也是<strong>惰性</strong>的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染；</p></li><li><p>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS <code>display</code> 属性会被切换；</p></li><li><p>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适；</p></li></ul><h4 id="2、列表渲染">2、列表渲染</h4><blockquote><p>我们可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表：</p></blockquote><ul><li><p><code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的别名；</p></li><li><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引；</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> userArray = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> userArray2 = [</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;迪丽热巴&quot;</span>,<span class="attr">age</span>:<span class="number">30</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;古力娜扎&quot;</span>,<span class="attr">age</span>:<span class="number">28</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&quot;马蓉&quot;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">&quot;李小璐&quot;</span>,<span class="attr">age</span>:<span class="number">33</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">6</span>,<span class="attr">name</span>:<span class="string">&quot;杨颖&quot;</span>,<span class="attr">age</span>:<span class="number">34</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;userArray2.length==0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>没有任何用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in userArray2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-双向绑定">4.3.3 双向绑定</h3><blockquote><p>单项绑定和双向绑定：</p></blockquote><ul><li>单向绑定：响应式数据的变化会更新dom树，但是dom树上用户的操作造成的数据改变<code>不会同步更新到响应式数据</code>；</li><li>双向绑定：响应式数据的变化会更新dom树，但是dom树上用户的操作造成的数据改变<code>会同步更新到响应式数据</code>；<ul><li>用户通过表单标签才能够输入数据，所以双向绑定都是应用到表单标签上的，其他标签不行；</li><li>v-model专门用于双向绑定表单标签的value属性，语法为 <code>v-model:value=''</code>，可以简写为 <code>v-model=''</code>；</li><li>v-model还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> data = <span class="title function_">ref</span>(<span class="string">&quot;测试双向的数据绑定&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//修改JS中的data的函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeData</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">value</span> = <span class="string">&quot;新值&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单向数据绑定 --&gt;</span></span><br><span class="line">  测试单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 双向的数据绑定 --&gt;</span></span><br><span class="line">  测试双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span>点击修改JS中的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-Vue生命周期">4.3.4 Vue生命周期</h3><h4 id="1、生命周期简介">1、生命周期简介</h4><blockquote><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为<code>生命周期钩子的函数</code>，让开发者有机会在特定阶段运行自己的代码!</p></blockquote><ul><li>周期图解：</li></ul><img src="images/16.png" style="zoom: 50%;" /><ul><li>常见钩子函数：<ul><li>onMounted()              注册一个回调函数，在组件挂载完成后执行；</li><li>onUpdated()               注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用；</li><li>onUnmounted()         注册一个回调函数，在组件实例被卸载之后调用；</li><li>onBeforeMount()       注册一个钩子，在组件被挂载之前被调用；</li><li>onBeforeUpdate()      注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用；</li><li>onBeforeUnmount()  注册一个钩子，在组件实例被卸载之前调用；</li></ul></li></ul><h4 id="2、生命周期案例">2、生命周期案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,onUpdated,onMounted,onBeforeUpdate&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message =<span class="title function_">ref</span>(<span class="string">&#x27;hello&#x27;</span>)   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 挂载完毕生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onMounted---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新前生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onBeforeUpdate---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新完成生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onUpdated---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-5-Vue组件基础">4.3.5 Vue组件基础</h3><blockquote><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。组件就是实现应用中局部功能代码和资源的集合！在实际应用中，组件常常被组织成层层嵌套的树状结构：</p></blockquote><img src="images/17.png" style="zoom:50%;" /><ul><li>这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。</li></ul><blockquote><p>传统方式编写应用：</p></blockquote><img src="images/18.png" style="zoom: 35%;" /><blockquote><p>组件方式编写应用：</p></blockquote><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/posts/images/13.png"  /><ul><li><p>组件化：对js/css/html统一封装，这是Vue中的概念；</p></li><li><p>模块化：对js的统一封装,这是ES6中的概念；</p></li><li><p>组件化中，对js部分代码的处理使用ES6中的模块化；</p></li></ul><h3 id="4-3-6-Vue组件之间传递数据（了解）">4.3.6 Vue组件之间传递数据（了解）</h3><h4 id="1、父传子">1、父传子</h4><blockquote><p>Vue3 中父组件向子组件传值可以通过 props 进行，具体操作如下：</p></blockquote><ol><li><p>需要在子组件定义要接收的数据和参数</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 语法1: 数组方案声明</span></span><br><span class="line">defineProps([<span class="string">&#x27;foo&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2: 对象形式声明</span></span><br><span class="line"><span class="regexp">//</span> 使用 &lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 对于以对象形式声明的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。比如，如果要求一个 prop 的值是 number 类型，则可使用 Number 构造函数作为其声明的值。</span></span><br><span class="line"><span class="comment"># 对象形式声明可以添加参数校验 https://cn.vuejs.org/guide/components/props.html#prop-validation</span></span><br><span class="line"><span class="comment"># 校验选项中的 type 可以是下列这些原生构造函数：</span></span><br><span class="line"><span class="built_in">String</span></span><br><span class="line"><span class="built_in">Number</span></span><br><span class="line"><span class="built_in">Boolean</span></span><br><span class="line"><span class="built_in">Array</span></span><br><span class="line"><span class="built_in">Object</span></span><br><span class="line"><span class="built_in">Date</span></span><br><span class="line"><span class="built_in">Function</span></span><br><span class="line"><span class="built_in">Symbol</span></span><br><span class="line"><span class="built_in">Error</span></span><br><span class="line"></span><br><span class="line">获取数据：</span><br><span class="line">  方案<span class="number">1</span>：defineProps([<span class="string">&#x27;foo&#x27;</span>]) ｜ defineProps(&#123;title: <span class="built_in">String</span>&#125;)  直接使用声明属性名即可 &#123;&#123;foo | title&#125;&#125;</span><br><span class="line">  方案<span class="number">2</span>：let pops = defineProps([<span class="string">&#x27;foo&#x27;</span>])｜let pops =  defineProps(&#123;title: <span class="built_in">String</span>&#125;) 直接使用声明属性名即可 &#123;&#123;pops.foo | pops.title&#125;&#125;</span><br><span class="line">  方案<span class="number">3</span>：let &#123;foo&#125; = defineProps([<span class="string">&#x27;foo&#x27;</span>])｜let &#123;title&#125; =  defineProps(&#123;title: <span class="built_in">String</span>&#125;) 直接使用声明属性名即可 &#123;&#123;foo | title&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>父组件使用子组件时进行赋值即可</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">静态传参：</span></span><br><span class="line"><span class="language-xml">声明接收</span></span><br><span class="line"><span class="language-xml">defineProps(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  greetingMessage: String</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">参数传递</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">greeting-message</span>=<span class="string">&quot;hello&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">理论上你也可以在向子组件传递 props 时使用 camelCase 形式，但实际上为了和 HTML attribute 对齐，通常会将其写为 kebab-case 形式！</span></span><br><span class="line"><span class="language-xml">动态参数：</span></span><br><span class="line"><span class="language-xml">  相应地，还有使用 v-bind 或缩写 : 来进行动态绑定的 props</span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 根据一个变量的值动态传入 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 根据一个更复杂表达式的值动态传入 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title + &#x27; by &#x27; + post.author.name&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><ul><li>父组件代码：App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref,reactive,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;parent data!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> title = <span class="title function_">ref</span>(<span class="number">42</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">changeMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    message.<span class="property">value</span> = <span class="string">&#x27;修改数据！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用子组件，并且传递数据！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">:message</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>点击更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件代码：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,isRef,defineProps&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明父组件传递属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span> ,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、子传父">2、子传父</h4><blockquote><p>Vue3 中子组件向父组件传值可以通过 defineEmits 进行，具体操作如下：</p></blockquote><ol><li><p><strong>在子组件中定义事件</strong>：使用 <code>defineEmits</code> 定义事件。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//1.定义要发送给父组件的方法，可以1或者多个</span></span><br><span class="line"><span class="keyword">let</span> emites = defineEmits([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;sub&#x27;</span>]);</span><br></pre></td></tr></table></figure></li><li><p><strong>触发事件并传递参数</strong>：在子组件适当的事件处理程序中调用 emit 函数以发射事件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.触发父组件对应的方法，调用defineEmites对应的属性</span></span><br><span class="line"><span class="function"><span class="title">emites</span><span class="params">(<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;add data!&#x27;</span>+data.value)</span></span></span><br><span class="line"><span class="function"><span class="title">emites</span><span class="params">(<span class="string">&#x27;sub&#x27;</span>,<span class="string">&#x27;sub data!&#x27;</span>+data.value)</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>在父组件中监听事件</strong>：使用 <code>v-on</code> 或简写 <code>@</code> 语法在父组件中监听子组件的事件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明@事件名应该等于子模块对应事件名！调用方法可以是当前自定义！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son</span> @<span class="attr">add</span>=<span class="string">&quot;padd&quot;</span> @<span class="attr">sub</span>=<span class="string">&quot;psub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>父组件： App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> pdata = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">padd</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2222&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> =data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义接收，子组件传递数据方法！ 参数为数据！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">psub</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11111&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明@事件名应该等于子模块对应事件名！调用方法可以是当前自定义！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span> @<span class="attr">add</span>=<span class="string">&quot;padd&quot;</span> @<span class="attr">sub</span>=<span class="string">&quot;psub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; pdata &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.定义要发送给父组件的方法，可以1或者多个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> emites = <span class="title function_">defineEmits</span>([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;sub&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMsgToParent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.触发父组件对应的方法，调用defineEmites对应的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;add data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;sub&#x27;</span>,<span class="string">&#x27;sub data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">value</span> ++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsgToParent&quot;</span>&gt;</span>发送消息给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、兄弟传参">3、兄弟传参</h4><img src="images/19.png" style="zoom: 33%;" /><ul><li>Navigator.vue: 发送数据到App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;sendMenu&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//触发事件，向父容器发送数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emits</span>(<span class="string">&#x27;sendMenu&#x27;</span>,data);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐写一个根标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;学员管理&#x27;)&quot;</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;图书管理&#x27;)&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;请假管理&#x27;)&quot;</span>&gt;</span>请假管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;考试管理&#x27;)&quot;</span>&gt;</span>考试管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;讲师管理&#x27;)&quot;</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue: 发送数据到Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Header</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Navigator</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Navigator.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Content</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Content.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义接受navigator传递参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> navigator_menu = <span class="title function_">ref</span>(<span class="string">&#x27;ceshi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">receiver</span> = (<span class="params">data</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    navigator_menu.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      &#123;&#123; navigator_menu &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Navigator</span> @<span class="attr">sendMenu</span>=<span class="string">&quot;receiver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Navigator</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 向子组件传递数据--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:message</span>=<span class="string">&quot;navigator_menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navigator</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">83%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> goldenrod solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        展示的主要内容！</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第5章 Vue3官方库</h1><h2 id="5-1-路由机制Router">5.1 路由机制Router</h2><h3 id="5-1-1-路由简介">5.1.1 路由简介</h3><blockquote><p>1 什么是路由？</p></blockquote><ul><li>定义：路由就是根据不同的 URL 地址展示不同的内容或页面；</li><li>通俗理解：路由就像是一个地图，我们要去不同的地方，需要通过不同的路线进行导航；</li></ul><blockquote><p>2 路由的作用：</p></blockquote><ul><li>单页应用程序（SPA）中，路由可以实现不同视图之间的无刷新切换，提升用户体验；</li><li>路由还可以实现页面的认证和权限控制，保护用户的隐私和安全；</li><li>路由还可以利用浏览器的前进与后退，帮助用户更好地回到之前访问过的页面；</li></ul><h3 id="5-1-2-路由入门案例">5.1.2 路由入门案例</h3><blockquote><p>1 案例需求分析：</p></blockquote><img src="images/20.png" style="zoom: 33%;" /><blockquote><p>2 创建项目和导入路由依赖：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite //创建项目cd 项目文件夹 //进入项目文件夹</span><br><span class="line">npm install //安装项目需求依赖</span><br><span class="line">npm install vue-router@4 --save //安装全局的vue-router 4版本， --save表示添加依赖到package.json,默认可省略。--save-dev表示增加开发依赖配置。</span><br></pre></td></tr></table></figure><blockquote><p>3 准备页面和组件    ：</p></blockquote><ul><li>components/Home.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/List.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/Add.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/Update.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Update页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>4 准备路由配置：</p></blockquote><ul><li>src/routers/router.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//createWebHashHistory() 是 Vue.js 基于 hash 模式创建路由的工厂函数。在使用这种模式下，路由信息保存在 URL 的 hash 中，</span></span><br><span class="line">    <span class="comment">//使用 createWebHistory() 方法，可以创建一个路由历史记录对象，用于管理应用程序的路由。在 Vue.js 应用中，</span></span><br><span class="line">    <span class="comment">//通常使用该方法来创建路由的历史记录对象。</span></span><br><span class="line">    <span class="comment">//就是路由中缓存历史记录的对象，vue-router提供</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                component指定组件在默认的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:Home</span></span><br><span class="line"><span class="comment">                components指定组件在name为某个值的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:&#123;</span></span><br><span class="line"><span class="comment">                    default:Home,// 默认路由视图位置</span></span><br><span class="line"><span class="comment">                    homeView:Home// name为homeView的路由视图位置</span></span><br><span class="line"><span class="comment">                &#125;   </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">                <span class="attr">homeView</span>:<span class="title class_">Home</span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                listView : <span class="title class_">List</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">addView</span>:<span class="title class_">Add</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/update&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">updateView</span>:<span class="title class_">Update</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>5 main.js引入Router配置：</p></blockquote><ul><li>修改文件：main.js (入口文件)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//导入router模块</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">//绑定路由对象</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">//挂载视图</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>6 启动测试：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>内容解释： <a href="https://router.vuejs.org/zh/guide/">https://router.vuejs.org/zh/guide/</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="type">RouterLink</span> 用来渲染一个链接的组件，该链接在被点击时会触发导航<span class="operator">。</span> </span><br><span class="line">    <span class="operator">&lt;</span>router<span class="operator">-</span>link to<span class="operator">=</span><span class="string">&quot;/list&quot;</span><span class="operator">&gt;</span>list页<span class="operator">&lt;/</span>router<span class="operator">-</span>link<span class="operator">&gt;</span> <span class="operator">&lt;</span>br<span class="operator">&gt;</span> to属性指的是触发路径跳转到对应组件</span><br><span class="line"><span class="number">2</span>. <span class="type">RouterView</span> <span class="type">RouterView</span> 组件可以使 <span class="type">Vue</span> <span class="type">Router</span> 知道你想要在哪里渲染当前 <span class="type">URL</span> 路径对应的路由组件<span class="operator">。</span>它不一定要在 <span class="type">App</span>.vue 中，你可以把它放在任何地方！</span><br><span class="line">   可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口<span class="operator">。</span>如果 router<span class="operator">-</span>view 没有设置名字，那么默认为<span class="keyword">default</span></span><br><span class="line">   <span class="operator">&lt;</span>router<span class="operator">-</span>view <span class="keyword">class</span><span class="operator">=</span><span class="string">&quot;view left-sidebar&quot;</span> name<span class="operator">=</span><span class="string">&quot;LeftSidebar&quot;</span> <span class="operator">/&gt;</span></span><br><span class="line"><span class="number">3</span>. createRouter()函数</span><br><span class="line">   路由器实例是通过调用 createRouter() 函数创建的</span><br><span class="line">   const router <span class="operator">=</span> createRouter(&#123;</span><br><span class="line">   history: createMemoryHistory(), <span class="comment">//记录历史记录模式！ </span></span><br><span class="line">   routes:[</span><br><span class="line">   path: <span class="string">&quot;/对应地址&quot;</span>,component: 默认routerView显示组件,</span><br><span class="line">        path: <span class="string">&quot;/对应路径&quot;</span>,components:&#123;命名视图名:显示组件,命名视图名:显示组件&#125;</span><br><span class="line">   ]  <span class="comment">//路由规则</span></span><br><span class="line">  &#125;)</span><br><span class="line"> 路径：动态路径设置，路径传惨</span><br><span class="line"> <span class="regexp">/users/</span>:username              <span class="regexp">/users/</span>eduardo</span><br><span class="line">     <span class="regexp">/users/</span>:username<span class="regexp">/posts/</span>:postId  <span class="regexp">/users/</span>eduardo<span class="regexp">/posts/</span><span class="number">123</span></span><br><span class="line">     &#123;&#123; <span class="variable">$route</span>.params.username &#125;&#125; 获取参数</span><br><span class="line"><span class="number">4</span>. 注册路由器插件</span><br><span class="line">   createApp(<span class="type">App</span>)</span><br><span class="line">   .use(router)</span><br><span class="line">   .mount(&#x27;#app&#x27;)</span><br><span class="line">   注册路由作用：</span><br><span class="line">  全局注册 <span class="type">RouterView</span> 和 <span class="type">RouterLink</span> 组件<span class="operator">。</span></span><br><span class="line">  添加全局 <span class="variable">$router</span> 和 <span class="variable">$route</span> 属性<span class="operator">。</span></span><br><span class="line">  启用 useRouter() 和 useRoute() 组合式函数<span class="operator">。</span></span><br><span class="line">  触发路由器解析初始路由<span class="operator">。</span></span><br></pre></td></tr></table></figure><h3 id="5-1-3-路由重定向">5.1.3 路由重定向</h3><blockquote><p>重定向的作用：将一个路由重定向到另一个路由上。</p></blockquote><ul><li>修改案例：访问/list和/showAll都定向到List.vue.</li><li>router.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;/showAll&#x27;</span>,</span><br><span class="line">   <span class="comment">// 重定向</span></span><br><span class="line">   redirect :<span class="string">&#x27;/list&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showAll&quot;</span>&gt;</span>showAll页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-4-编程式路由-useRouter">5.1.4 编程式路由(useRouter)</h3><blockquote><p>声明式路由：</p></blockquote><ul><li><code>&lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;  </code>这种路由，点击后只能切换/list对应组件，是固定的。</li></ul><blockquote><p>编程式路由：</p></blockquote><ul><li><p>通过useRouter，动态决定向那个组件切换的路由；</p></li><li><p>在 Vue 3 和 Vue Router 4 中，你可以使用 <code>useRouter</code> 来实现动态路由(编程式路由)；</p></li><li><p>这里的 <code>useRouter</code> 方法返回的是一个 router 对象，你可以用它来做如导航到新页面、返回上一页面等操作；</p><table><thead><tr><th style="text-align:left">声明式</th><th style="text-align:left">编程式</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td style="text-align:left"><code>router.push(...)</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; </span><br><span class="line"></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// 同样</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// `params` 不能与 `path` 一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>案例需求：通过普通按钮配合事件绑定实现路由页面跳转，不直接使用router-link标签。</p></blockquote><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span>  <span class="title function_">showList</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 编程式路由</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 直接push一个路径</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// router.push(&#x27;/list&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// push一个带有path属性的对象</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 动态输入路径,点击按钮,触发单击事件的函数,在函数中通过编程是路由切换页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showList()&quot;</span>&gt;</span>showList<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-5-路由传参-useRoute">5.1.5 路由传参(useRoute)</h3><blockquote><p>路径参数：</p></blockquote><ul><li>在路径中使用一个动态字段来实现，我们称之为 <strong>路径参数</strong>：<ul><li>例如： 查看数据详情  <code>/showDetail/1</code>  ，<code>1</code>就是要查看详情的id，可以动态添值。</li></ul></li></ul><blockquote><p>键值对参数：</p></blockquote><ul><li><p>类似与get请求通过url传参，数据是键值对形式的：</p><ul><li>例如:  查看数据详情<code>/showDetail?hid=1</code>，<code>hid=1</code>就是要传递的键值对参数。</li></ul></li></ul><blockquote><p>读取参数：</p></blockquote><ul><li>在 Vue 3 和 Vue Router 4 中，你可以使用  <code>useRoute</code> 这个函数从 Vue 的组合式 API 中获取路由对象；</li><li><code>useRoute</code> 方法返回的是当前的 route 对象，你可以用它来获取关于当前路由的信息，如当前的路径、键值对参数等；</li></ul><blockquote><p>案例需求 : 切换到ShowDetail.vue组件时，向该组件通过路由传递参数。</p></blockquote><ul><li>修改App.vue文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//动态路由路径传参方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 尝试使用拼接字符串方式传递路径参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//router.push(`showDetail/$&#123;id&#125;/$&#123;languange&#125;`)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*路径参数,需要使用params  */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;showDetail&quot;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail2</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*uri键值对参数,需要使用query */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/showDetail2&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路径参数   --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showDetail/1/JAVA&quot;</span>&gt;</span>路径传参JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>编程式路由路径传参显示JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 键值对参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#123;path:&#x27;/showDetail2&#x27;,query:&#123;id:1,language:&#x27;Java&#x27;&#125;&#125;&quot;</span>&gt;</span>键值对传参JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail2(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>编程式路由键值对传参JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> showDetail视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> showDetail2视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改router.js增加路径参数占位符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[    </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 此处:id  :language作为路径的占位符 */</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail/:id/:language&#x27;</span>,</span><br><span class="line">            <span class="comment">/* 动态路由传参时,根据该名字找到该路由 */</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;showDetail&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView</span>:<span class="title class_">ShowDetail</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail2&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView2</span>:<span class="title class_">ShowDetail2</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>ShowDetail.vue 通过useRoute获取路径参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span> (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数</span></span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">language</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.params.id&#125;&#125;:&#123;&#123;route.params.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ShowDetail2.vue通过useRoute获取键值对参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span> (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数(通过query获取参数,此时参数是key-value形式的)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">language</span>       </span></span><br><span class="line"><span class="language-javascript">    &#125;)    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail2页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.query.id&#125;&#125;:&#123;&#123;route.query.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-6-路由守卫">5.1.6 路由守卫</h3><blockquote><p>在 Vue 3 中，路由守卫是用于在路由切换期间进行一些特定任务的回调函数。路由守卫可以用于许多任务，例如验证用户是否已登录、在路由切换前提供确认提示、请求数据等。Vue 3 为路由守卫提供了全面的支持，并提供了以下几种类型的路由守卫：</p></blockquote><ol><li><strong>全局前置守卫</strong>：在路由切换前被调用，可以用于验证用户是否已登录、中断导航、请求数据等；</li><li><strong>全局后置守卫</strong>：在路由切换之后被调用，可以用于处理数据、操作 DOM 、记录日志等；</li><li><strong>守卫代码的位置</strong>: 在router.js中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//to 是目标地包装对象  .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//from 是来源地包装对象 .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//next是方法,不调用默认拦截！ next() 放行,直接到达目标组件</span></span><br><span class="line">    <span class="comment">//next(&#x27;/地址&#x27;)可以转发到其他地址,到达目标组件前会再次经过前置路由守卫</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>,<span class="keyword">from</span>.<span class="property">path</span>,next)</span><br><span class="line">    <span class="comment">//需要判断，注意避免无限重定向</span></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; )</span><br><span class="line"><span class="comment">//全局后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Navigate from <span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span> to <span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>登录案例，登录以后才可以进入home，否则必须进入login。</p></blockquote><ul><li>定义Login.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> username =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> password =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(username.<span class="property">value</span> == <span class="string">&#x27;root&#x27;</span> &amp; password.<span class="property">value</span> == <span class="string">&#x27;123456&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">query</span>:&#123;<span class="string">&#x27;username&#x27;</span>:username.<span class="property">value</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//登录成功利用前端存储机制，存储账号！</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>,username.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//sessionStorage.setItem(&#x27;username&#x27;,username)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;登录失败，账号或者密码错误！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义Home.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//  并不是每次进入home页时,都有用户名参数传入</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//let username = route.query.username</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> <span class="title function_">logout</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 清除localStorge中的username</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//window.sessionStorage.removeItem(&#x27;username&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态路由到登录页</span></span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎&#123;&#123;username&#125;&#125;登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>     </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义routers.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/login.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&quot;/home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置路由的全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    to 要去那</span></span><br><span class="line"><span class="comment">    from 从哪里来</span></span><br><span class="line"><span class="comment">    next 放行路由时需要调用的方法,不调用则不放行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//放行路由  注意放行不要形成循环  </span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//let username =window.sessionStorage.getItem(&#x27;username&#x27;); </span></span><br><span class="line">        <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != username)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置路由的全局后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>启动测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="5-2-状态管理Pinia">5.2 状态管理Pinia</h2><h3 id="5-2-1-Pinia介绍">5.2.1 Pinia介绍</h3><blockquote><p>如何实现多个组件之间的数据传递?</p></blockquote><ul><li><p>方式1 组件传参 ；</p></li><li><p>方式2 路由传参 ；</p></li><li><p>方式3 通过pinia状态管理定义共享数据；</p></li></ul><blockquote><p>当我们有<code>多个组件共享一个共同的状态(数据源)</code>时，多个视图可能都依赖于同一份状态。来自不同视图的交互也可能需要更改同一份状态。虽然我们的手动状态管理解决方案（props，组件间通信，模块化）在简单的场景中已经足够了，但是在大规模的生产应用中还有很多其他事项需要考虑：</p></blockquote><ul><li>更强的团队协作约定；</li><li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试；</li><li>模块热更新 (HMR)；</li><li>服务端渲染支持；</li></ul><blockquote><p><a href="https://pinia.vuejs.org/zh/" title="Pinia">Pinia</a> 就是一个实现了上述需求的状态管理库，由 Vue 核心团队维护，对 Vue 2 和 Vue 3 都可用。</p><p>官网：<a href="https://pinia.vuejs.org/zh">https://pinia.vuejs.org/zh</a></p></blockquote><h3 id="5-2-2-Pinia基本用法">5.2.2 Pinia基本用法</h3><blockquote><p>1 准备Vite项目：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line">npm install vue-router@<span class="number">4</span> --save</span><br></pre></td></tr></table></figure><blockquote><p>2 安装Pinia：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><blockquote><p>3 定义pinia store对象 src/store/store.js （推荐这么命名不是强制）：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">//定义数据并且对外暴露</span></span><br><span class="line"><span class="comment">// store就是定义共享状态的包装对象</span></span><br><span class="line"><span class="comment">// 内部包含四个属性： id 唯一标识 state 完整类型推理，推荐使用箭头函数 存放的数据 getters 类似属性计算，获取存储数据</span></span><br><span class="line"><span class="comment">// 操作的方法  actions 存储数据的复杂业务逻辑方法</span></span><br><span class="line"><span class="comment">// 理解： store类似Java中的实体类， id就是类名， state 就是装数据值的属性  getters就是get方法，actions就是对数据操作的其他方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(<span class="string">&#x27;personPinia&#x27;</span>,<span class="comment">//必须唯一</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123; <span class="comment">// state中用于定义数据</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;<span class="comment">// 用于定义一些通过数据计算而得到结果的一些方法 一般在此处不做对数据的修改操作</span></span><br><span class="line">                 <span class="comment">// getters中的方法可以当做属性值方式使用</span></span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123; <span class="comment">// 用于定义一些对数据修改的方法</span></span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span>=<span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>4 在main.js配置Pinia组件到Vue中 ：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="comment">// 导pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 创建pinia对象</span></span><br><span class="line"><span class="keyword">let</span> pinia= <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// app中使用pinia功能</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia) </span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>5 Operate.vue 中操作Pinia数据：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//import  definedPerson  from &#x27;../store/store&#x27;;//如果采用默认导出，请使用该行导入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>operate视图,用户操作Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        请输入姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请输入年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请增加爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">br</span>&gt;</span>        </span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用person的doubleAge()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.doubleAge()&quot;</span>&gt;</span>年龄加倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用pinia提供的$reset()方法恢复数据的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$reset()&quot;</span>&gt;</span>恢复默认值<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用$patch方法一次性修改多个属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$patch(&#123;username:&#x27;奥特曼&#x27;,age:100,hobbies:[&#x27;晒太阳&#x27;,&#x27;打怪兽&#x27;]&#125;)&quot;</span>&gt;</span>变身奥特曼<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">显示pinia中的person数据:&#123;&#123;person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>6 List.vue中展示Pinia数据：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//import  definedPerson  from &#x27;../store/store&#x27;;//如果采用默认导出，请使用该行导入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面,展示Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        读取姓名:&#123;&#123;person.username&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        读取年龄:&#123;&#123;person.age&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        通过get年龄:&#123;&#123;person.getAge&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好数量:&#123;&#123;person.getHobbiesCount&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        所有的爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(hobby,index) in person.hobbies&#x27;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>7 定义组件路由router.js：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Operate</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/Operate.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/operate&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Operate</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>8 App.vue中通过路由切换组件：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/operate&quot;</span>&gt;</span>显示操作页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>显示展示页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>9 启动测试：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src=".%5Cassets%5C1740920109115.png" alt="1740920109115"></p><p><img src=".%5Cassets%5C1740920162887.png" alt="1740920162887"></p><h1>第6章 Axios</h1><h2 id="6-1-预讲知识-Promise">6.1 预讲知识-Promise</h2><h3 id="6-1-1-普通函数和回调函数">6.1.1 普通函数和回调函数</h3><blockquote><p>普通函数：正常调用的函数，一般函数执行完毕后才会继续执行下一行代码。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1 invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数执行完毕,继续执行后续代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>回调函数： 一些特殊的函数，表示未来才会执行的一些功能，后续代码不会等待该函数执行完毕就开始执行了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置一个2000毫秒后会执行一次的定时任务</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-2-Promise-简介">6.1.2 Promise 简介</h3><blockquote><p>前端中的异步编程技术，类似Java中的多线程+线程结果回调！</p></blockquote><ul><li><p>Promise 是异步编程的一种解决方案，比传统的解决方案回调函数和事件更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象；</p></li><li><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理；</p></li></ul><blockquote><p><code>Promise</code>对象有以下两个特点：</p></blockquote><ol><li><p>Promise对象代表一个异步操作，有三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称 Fulfilled）和<code>Rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变；</p></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果；</p></li></ol><h3 id="6-1-3-Promise-基本用法">6.1.3 Promise 基本用法</h3><blockquote><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/*  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1.实例化promise对象,并且执行(类似Java创建线程对象,并且start)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject随意命名,但是一般这么叫!</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject分别处理成功和失败的两个函数! 成功resolve(结果)  失败reject(结果)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在function中调用这里两个方法,那么promise会处于两个不同的状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    状态: promise有三个状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            pending   正在运行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            resolved  内部调用了resolve方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            rejected  内部调用了reject方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在第二步回调函数中就可以获取对应的结果 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>) 100s</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//resolve(&quot;promise success&quot;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&quot;promise fail&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.获取回调函数结果  then在这里会等待promise中的运行结果,但是不会阻塞代码继续运行</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;value&#125;</span>`</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了reject:<span class="subst">$&#123;error&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3 其他代码执行   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-4-Promise-catch">6.1.4 Promise catch()</h3><blockquote><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 故意响应一个异常对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject()的对应方法可以在产生异常时执行,接收到的就是异常中的提示信息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中可以只留一个resolve()的对应方法,reject()方法可以用后续的catch替换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject对应的回调函数被后续的catch替换后,catch中接收的数据是一个异常对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">resolveValue</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;resolveValue&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//function(rejectValue)&#123;console.log(`promise中执行了reject:$&#123;rejectValue&#125;`)&#125;</span></span></span><br><span class="line"><span class="language-javascript">    ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125; </span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>综合代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++111&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> promis = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一个异步 API 请求</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> userData = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">                    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="title function_">resolve</span>(userData);</span><br><span class="line">            &#125;, <span class="number">2000</span>); <span class="comment">// 模拟延迟2秒</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve:&quot;</span>+data.<span class="property">name</span>)</span><br><span class="line">    &#125;,<span class="function"><span class="params">failData</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reject:&quot;</span>+failData.<span class="property">name</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++222&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> promis1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一个异步 API 请求</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> userData1 = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;heheh&#x27;</span>,</span><br><span class="line">                    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//throw new Error(&quot;异常信息&quot;)</span></span><br><span class="line">                <span class="title function_">reject</span>(userData1);</span><br><span class="line">            &#125;, <span class="number">2000</span>); <span class="comment">// 模拟延迟2秒</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data1</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve:&quot;</span>+data1.<span class="property">name</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">failData1</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//console.log(&quot;reject:&quot;+failData1.name)</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reject:&quot;</span>+failData1)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++333&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="6-1-5-async和await的使用">6.1.5 async和await的使用</h3><blockquote><p> async和await是ES6中用于处理异步操作的新特性。通常，异步操作会涉及到Promise对象，而async/await则是在Promise基础上提供了更加直观和易于使用的语法。</p></blockquote><blockquote><p>async 用于标识函数的：</p></blockquote><ol><li>async标识函数后，async函数的返回值会变成一个Promise对象；</li><li>如果函数内部返回的数据是一个非Promise对象，async函数的结果会返回一个成功状态 Promise对象；</li><li>如果函数内部返回的是一个Promise对象，则async函数返回的状态与结果由该对象决定；</li><li>如果函数内部抛出的是一个异常，则async函数返回的是一个失败的Promise对象；</li><li>async其实就是给我们提供了一个快捷声明回调函数的语法，有了它无需编写 new Promise(… …) 这样的代码了；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//return 10</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//throw new Error(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;something wrong&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> promise</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise =<span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">        promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>await：</p></blockquote><ol><li>await右侧的表达式一般为一个Promise对象，但是也可以是一个其他值；</li><li>如果表达式是Promise对象，await返回的是Promise成功的值；</li><li>如果表达式是其他值，则直接返回该值；</li><li>await会等右边的Promise对象执行结束，然后再获取结果，所在方法的后续代码也会等待await的执行；</li><li>await必须在async函数中，但是async函数中可以没有await；</li><li>如果await右边的Promise失败了，就会抛出异常，可以通过 try … catch捕获处理；</li><li>await其实就是给我们提供了一个快捷获得Promise对象成功状态的语法，无需编写promise.then(… …)这样的代码了；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="number">10</span>        </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> res = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span>&#123;                </span></span><br><span class="line"><span class="language-javascript">                res = <span class="keyword">await</span> <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//res = await Promise.reject(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch got:&quot;</span>+e)   </span></span><br><span class="line"><span class="language-javascript">            &#125;          </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await got:&quot;</span>+res)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fun2</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>综合案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一个异步函数，获取用户数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟网络请求的延迟</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟返回的用户数据</span></span><br><span class="line">            <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">id</span>: userId,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">2000</span>); <span class="comment">// 模拟 2 秒的网络延迟</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response; <span class="comment">// 返回响应的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主执行函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">displayUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetching user data...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待 fetchUserData 的结果</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchUserData</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印用户信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User Data:&quot;</span>, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用主执行函数</span></span><br><span class="line"><span class="title function_">displayUser</span>();</span><br></pre></td></tr></table></figure><ol><li><strong>fetchUserData 函数</strong>：<ul><li>使用 <code>async</code> 修饰符定义一个异步函数 <code>fetchUserData</code>。</li><li>使用 <code>await</code> 关键字等待一个 Promise 的结果。在这个例子中，我们模拟了一个异步操作（网络请求），使用 <code>setTimeout</code> 来延迟响应。</li><li>一旦 Promise 被解决，我们返回用户数据。</li></ul></li><li><strong>displayUser 函数</strong>：<ul><li>这是主执行函数，同样使用 <code>async</code> 关键字。</li><li>在函数内部，我们调用 <code>fetchUserData</code>，并使用 <code>await</code> 等待它的结果。</li><li>一旦获取到用户数据，我们将其打印到控制台。</li></ul></li><li><strong>调用 displayUser</strong>：<ul><li>最后，我们调用 <code>displayUser</code> 函数，开始整个过程。</li></ul></li></ol><h2 id="6-2-Axios介绍">6.2 Axios介绍</h2><blockquote><p>AJAX ：</p></blockquote><ul><li><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）；</p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法；</p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容；</p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行；</p></li><li><p>XMLHttpRequest 只是实现 Ajax 的一种方式，本次我们使用Vue Axios方式实现；</p></li></ul><blockquote><p>什么是axios  官网介绍:<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a></p></blockquote><ul><li>Axios 是一个基于 Promise网络请求库，作用于<a href="https://nodejs.org/" title="node.js">node.js</a> 和浏览器中。 它是 <a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application" title="isomorphic"><em>isomorphic</em></a> 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块，而在客户端 (浏览端) 则使用 XMLHttpRequests。它有如下特性：<ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" title="XMLHttpRequests">XMLHttpRequest</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" title="http">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御[XSRF]</li></ul></li></ul><h2 id="6-3-Axios-入门案例">6.3 Axios 入门案例</h2><blockquote><p>1 案例需求：请求后台获取随机土味情话。</p></blockquote><ul><li>请求的url</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.uomg.com/api/rand.qinghua?format=json</span><br></pre></td></tr></table></figure><ul><li>请求的方式</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET/POST</span><br></pre></td></tr></table></figure><ul><li>数据返回的格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;我努力不是为了你而是因为你。&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>2 准备项目：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><blockquote><p>3 安装Axios：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><blockquote><p>4 设计页面（App.Vue）：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>, <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,  <span class="comment">// 请求的url</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// params: &#123;//get请求传递参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   username: &#x27;zhangsan&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123; <span class="comment">// 当请求方式为post时,data下的数据以JSON串放入请求体</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>( <span class="keyword">function</span> (<span class="params">response</span>)&#123;<span class="comment">//响应成功时要执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>)&#123;<span class="comment">// 响应失败时要执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>5 启动测试：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>异步响应的数据结构：</p></blockquote><ul><li>响应的数据是经过包装返回的！一个请求的响应包含以下信息。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText<span class="punctuation">:</span> &#x27;OK&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  config<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  request<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>then取值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>6 通过async和await处理异步请求：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>axios在发送异步请求时的可选配置：</p></blockquote><p>详情见 <a href="https://axios-http.com/zh/docs/req_config">https://axios-http.com/zh/docs/req_config</a></p><p><img src=".%5Cassets%5C1740927632433.png" alt="1740927632433"></p><h2 id="6-4-Axios-get和post方法">6.4 Axios get和post方法</h2><blockquote><p>配置添加语法：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">get</span>(url,&#123;</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line">axios.<span class="title function_">post</span>(url,&#123;<span class="attr">key</span>:value <span class="comment">//此位置数据，没有空对象即可&#123;&#125;&#125;,&#123;</span></span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>测试axios.get(… … )：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> axios.<span class="title function_">get</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;<span class="comment">// 向url后添加的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//jsonData = data; //行 才怪呢</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//BeanUtils.copyProperties(源,目标);</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//jsonData.code = data.code;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//jsonData.content = data.content;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)<span class="comment">// 将第二个属性拷贝到第一个属性的各个属性上</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试 axios.post(… …)：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">// 其他参数</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">params</span>:&#123;<span class="comment">// url上拼接的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =<span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src=".%5Cassets%5C1740928122658.png" alt="1740928122658"></p><p>前面的测试可能出现跨域问题。不要测试过多次数，可以过会再测试试。或在vite.config.js中配置代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vite.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-5-Axios-拦截器">6.5 Axios 拦截器</h2><blockquote><p>如果想在axios发送请求之前，或者是数据响应回来在执行then方法之前做一些额外的工作，可以通过拦截器完成：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器 请求发送之前</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 添加响应拦截器 数据响应回来</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>定义src/axios.js提取拦截器和配置语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">//  创建instance实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;https://api.uomg.com&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//  添加请求拦截</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置请求头配置信息</span></span><br><span class="line">    <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//处理指定的请求头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before request&quot;</span>)</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Accept</span> = <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置请求错误处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;request error&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置响应正确时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after success response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置响应异常时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after fail response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入自己定义的axios.js文件,而不是导入axios依赖  </span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./axios.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">// 其他键值对参数</span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//出现跨域问题临时解决办法。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//let json = &#123;data: &#123; code: 1, content: &#x27;别嫌弃我什么都不会，但是我只会娶你。&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//return Promise.resolve(json)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =<span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第7章 Element-plus组件库</h1><h2 id="7-1-Element-plus介绍">7.1 Element-plus介绍</h2><blockquote><p>Element Plus 是一套基于 Vue 3 的开源 UI 组件库，是由饿了么前端团队开发的升级版本 Element UI。Element Plus 提供了丰富的 UI 组件、易于使用的 API 接口和灵活的主题定制功能，可以帮助开发者快速构建高质量的 Web 应用程序。</p></blockquote><ul><li><p>Element Plus 支持按需加载，且不依赖于任何第三方 CSS 库，它可以轻松地集成到任何 Vue.js 项目中。Element Plus 的文档十分清晰，提供了各种组件的使用方法和示例代码，方便开发者快速上手。</p></li><li><p>Element Plus 目前已经推出了大量的常用 UI 组件，如按钮、表单、表格、对话框、选项卡等，此外还提供了一些高级组件，如日期选择器、时间选择器、级联选择器、滑块、颜色选择器等。这些组件具有一致的设计和可靠的代码质量，可以为开发者提供稳定的使用体验。</p></li><li><p>与 Element UI 相比，Element Plus 采用了现代化的技术架构和更加先进的设计理念，同时具备更好的性能和更好的兼容性。Element Plus 的更新迭代也更加频繁，可以为开发者提供更好的使用体验和更多的功能特性。</p></li><li><p>Element Plus 可以在支持 <a href="https://caniuse.com/?feats=mdn-javascript_builtins_regexp_dotall,mdn-javascript_builtins_regexp_lookbehind_assertion,mdn-javascript_builtins_regexp_named_capture_groups,mdn-javascript_builtins_regexp_property_escapes,mdn-javascript_builtins_symbol_asynciterator,mdn-javascript_functions_method_definitions_async_generator_methods,mdn-javascript_grammar_template_literals_template_literal_revision,mdn-javascript_operators_destructuring_rest_in_objects,mdn-javascript_operators_spread_spread_in_destructuring,promise-finally" title="ES2018">ES2018</a> 和 <a href="https://caniuse.com/resizeobserver" title="ResizeObserver">ResizeObserver</a> 的浏览器上运行。 如果您确实需要支持旧版本的浏览器，请自行添加 <a href="https://babeljs.io/" title="Babel">Babel</a> 和相应的 Polyfill</p></li><li><p>官网<a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus (element-plus.org)</a></p></li><li><p>由于 Vue 3 不再支持 IE11，Element Plus 也不再支持 IE 浏览器。</p></li></ul><p><img src="images/21.png" alt=""></p><h2 id="7-2-Element-plus环境搭建">7.2 Element-plus环境搭建</h2><blockquote><p>1 准备vite项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">进入项目</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><blockquote><p>2 安装element-plus</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><blockquote><p>3 完整引入element-plus</p></blockquote><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入element-plus相关内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-3-Element-plus常用组件">7.3  Element-plus常用组件</h2><blockquote><p>结合官网演示以下组件</p><p><a href="https://element-plus.org/zh-CN">https://element-plus.org/zh-CN</a></p><p><a href="https://element-plus-docs.bklab.cn/zh-CN/">https://element-plus-docs.bklab.cn/zh-CN/</a></p></blockquote><ul><li>Button组件和Card组件</li><li>Table组件和Pagination组件</li><li>Form组件和表单数据校验</li><li>Message、Message Box及Popconfirm弹框组件</li></ul><h1>TypeScript</h1><p><a href="https://www.runoob.com/typescript/ts-tutorial.html">TypeScript 教程 | 菜鸟教程</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello : <span class="built_in">string</span> = <span class="string">&quot;Yangjiayu!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello)</span><br></pre></td></tr></table></figure><h2 id="项目开发">项目开发</h2>]]></content>
    
    
    <summary type="html">前端工程化开篇</summary>
    
    
    
    <category term="前端" scheme="https://yjyrichard.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://yjyrichard.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
</feed>
