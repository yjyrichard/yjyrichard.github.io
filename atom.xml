<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yangjiayu</title>
  
  
  <link href="https://yjyrichard.github.io/atom.xml" rel="self"/>
  
  <link href="https://yjyrichard.github.io/"/>
  <updated>2025-08-01T02:51:31.820Z</updated>
  <id>https://yjyrichard.github.io/</id>
  
  <author>
    <name>Yangjiayu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Jenkins</title>
    <link href="https://yjyrichard.github.io/posts/9a7f448e.html"/>
    <id>https://yjyrichard.github.io/posts/9a7f448e.html</id>
    <published>2025-07-31T12:10:09.844Z</published>
    <updated>2025-08-01T02:51:31.820Z</updated>
    
    <content type="html"><![CDATA[<h1>Jenkins</h1><p>Jenkins，原名 Hudson，2011 年改为现在的名字。它是一个开源的实现持续集成的软件工具。</p><p>官方网站</p><p><a href="https://www.jenkins.io/">https://www.jenkins.io/</a></p><h2 id="GitLab安装使用">GitLab安装使用</h2><p>官方网站：<a href="https://about.gitlab.com/">https://about.gitlab.com/</a></p><p>安装所需最小配置</p><p>内存至少4G</p><p><a href="https://docs.gitlab.cn/jh/install/requirements.html">https://docs.gitlab.cn/jh/install/requirements.html</a></p><h3 id="在ssh下安装">在ssh下安装</h3><p>官方安装文档：<a href="https://gitlab.cn/install/?version=ce">https://gitlab.cn/install/?version=ce</a></p><h4 id="1-安装依赖">1 安装依赖</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> yum install -y curl policycoreutils-python openssh-server perl</span><br><span class="line"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> sshd</span><br><span class="line"><span class="built_in">sudo</span> systemctl start sshd</span><br></pre></td></tr></table></figure><h4 id="2-配置镜像">2 配置镜像</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https:<span class="regexp">//</span>packages.gitlab.cn<span class="regexp">/repository/</span>raw<span class="regexp">/scripts/</span>setup.sh | <span class="regexp">/bin/</span>bash</span><br></pre></td></tr></table></figure><h4 id="3-开始安装">3 开始安装</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo EXTERNAL_URL<span class="operator">=</span><span class="string">&quot;http://192.168.44.103&quot;</span> yum install -y gitlab-jh</span><br></pre></td></tr></table></figure><p>除非您在安装过程中指定了自定义密码，否则将随机生成一个密码并存储在 <code>/etc/gitlab/initial_root_password</code> 文件中(出于安全原因，24 小时后，此文件会被第一次 <code>gitlab-ctl reconfigure</code> 自动删除，因此若使用随机密码登录，建议安装成功初始登录成功之后，立即修改初始密码）。使用此密码和用户名 <code>root</code> 登录。</p><h4 id="gitlab常用命令">gitlab常用命令</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gitlab-ctl start                  <span class="comment"># 启动所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl stop                   <span class="comment"># 停止所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl restart                <span class="comment"># 重启所有 gitlab 组件；</span></span><br><span class="line">gitlab-ctl status                 <span class="comment"># 查看服务状态；</span></span><br><span class="line">gitlab-ctl reconfigure            <span class="comment"># 启动服务；</span></span><br><span class="line">vi /etc/gitlab/gitlab.rb         <span class="comment"># 修改默认的配置文件；</span></span><br><span class="line">gitlab-ctl <span class="built_in">tail</span>                   <span class="comment"># 查看日志；</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="在docker下安装">在docker下安装</h3><p><a href="https://docs.gitlab.cn/jh/install/docker.html">https://docs.gitlab.cn/jh/install/docker.html</a></p><p>安装所需最小配置</p><ul><li>内存至少4G</li><li>系统内核至少在3.10以上 <code>uname -r</code> 命令可查看系统内核版本</li></ul><h4 id="安装docker">安装docker</h4><ol><li>更新yum源</li></ol><p>​<code>yum update</code></p><ol start="2"><li>安装依赖</li></ol><p>​<code>yum install -y yum-utils device-mapper-persistent-data lvm2</code></p><ol start="3"><li>添加镜像</li></ol><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">//</span>国外镜像</span><br><span class="line">yum-config-manager --add-repo https:<span class="regexp">//</span>download.docker.com<span class="regexp">/linux/</span>centos/docker-ce.repo</span><br><span class="line"><span class="regexp">//</span>阿里镜像</span><br><span class="line">https:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/g</span>pg</span><br><span class="line">yum-config-manager --add-repo http:<span class="regexp">//mi</span>rrors.aliyun.com<span class="regexp">/docker-ce/</span>linux<span class="regexp">/centos/</span>docker-ce.repo</span><br></pre></td></tr></table></figure><ol start="4"><li>查看源中可使用版本</li></ol><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">list</span> docker-<span class="keyword">ce</span> --showduplicates | <span class="keyword">sort</span> -r</span><br></pre></td></tr></table></figure><ol start="5"><li>安装指定版本</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> docker</span><br></pre></td></tr></table></figure><ol start="6"><li>配置开机启动项</li></ol><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl <span class="keyword">start</span> docker</span><br><span class="line">systemctl <span class="keyword">enable</span> docker</span><br><span class="line">docker <span class="keyword">version</span></span><br></pre></td></tr></table></figure><h4 id="使用容器安装gitlab">使用容器安装gitlab</h4><p>1.添加容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run --detach \</span><br><span class="line">  --hostname 192.168.44.103 \</span><br><span class="line">  --publish 443:443 --publish 80:80 \</span><br><span class="line">  --name gitlab \</span><br><span class="line">  --restart always \</span><br><span class="line">  --volume $GITLAB_HOME/config:/etc/gitlab:Z \</span><br><span class="line">  --volume $GITLAB_HOME/logs:/var/log/gitlab:Z \</span><br><span class="line">  --volume $GITLAB_HOME/data:/var/opt/gitlab:Z \</span><br><span class="line">  --shm-size 256m \</span><br><span class="line">  registry.gitlab.cn/omnibus/gitlab-jh:latest</span><br></pre></td></tr></table></figure><p>2.启动容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start gitlab</span><br></pre></td></tr></table></figure><p>3.查看已存在的容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><p>4.进入容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker <span class="built_in">exec</span> -it  gitlab /bin/bash</span><br></pre></td></tr></table></figure><h4 id="访问">访问</h4><p><a href="http://192.168.44.101">http://192.168.44.101</a></p><p>当首次运行出现502错误的时候排查两个原因</p><ol><li>虚拟机内存至少需要4g</li><li>稍微再等等刷新一下可能就好了</li></ol><h4 id="管理员账号登录">管理员账号登录</h4><p>用户名：root</p><p>密码存在下面文件中，登录后需要改密码不然24小时之后会失效</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cat</span> /etc/gitlab/initial_root_password</span><br></pre></td></tr></table></figure><h2 id="Jenkins安装">Jenkins安装</h2><p>官方文档介绍非常详细</p><p><a href="https://www.jenkins.io">https://www.jenkins.io</a></p><p>安装需求</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">机器要求：</span><br><span class="line"></span><br><span class="line"><span class="number">256</span> MB 内存，建议大于 <span class="number">512</span> MB</span><br><span class="line"></span><br><span class="line"><span class="number">10</span> GB 的硬盘空间（用于 <span class="keyword">Jenkins </span>和 Docker 镜像）</span><br><span class="line"></span><br><span class="line">需要安装以下软件：</span><br><span class="line"></span><br><span class="line"><span class="keyword">Java </span><span class="number">8</span> ( <span class="keyword">JRE </span>或者 <span class="keyword">JDK </span>都可以)</span><br><span class="line"></span><br><span class="line">Docker （导航到网站顶部的Get Docker链接以访问适合您平台的Docker下载）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="安装JDK">安装JDK</h3><p>1 检索可用包</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="built_in">search</span> java|<span class="keyword">grep</span> jdk</span><br></pre></td></tr></table></figure><p>2 安装</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">yum</span> install java-<span class="number">1</span>.<span class="number">8</span>.<span class="number">0</span>-openjdk</span><br></pre></td></tr></table></figure><p>首次启动war包会在<code>/root/.jenkins</code>生成配置文件</p><p>待完全启动成功后 访问服务器8080端口完成配置</p><p>初始化后的密码：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Jenkins initial setup is required. An admin user has been created <span class="keyword">and</span> <span class="keyword">a</span> password generated.</span><br><span class="line">Please use <span class="keyword">the</span> following password <span class="built_in">to</span> proceed <span class="built_in">to</span> installation:</span><br><span class="line"></span><br><span class="line"><span class="number">4e67</span>bbe261da476abdc63c5b51311646</span><br><span class="line"></span><br><span class="line">This may also be found <span class="keyword">at</span>: /root/.jenkins/secrets/initialAdminPassword</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>密码文件使用后会自动删除</p><h3 id="Maven安装">Maven安装</h3><p>官网</p><p><a href="https://maven.apache.org/">https://maven.apache.org/</a></p><p>下载后复制到Jenkins所在服务器解压缩即可</p><h2 id="Jenkins-Git-Maven-自动化部署配置">Jenkins + Git + Maven 自动化部署配置</h2><h4 id="1-Git配置">1 Git配置</h4><p><img src="images/image-20220726213303821.png" alt="image-20220726213303821"></p><p><img src="images/image-20220726213505879.png" alt="image-20220726213505879"></p><h4 id="2-Maven配置">2 Maven配置</h4><p><img src="images/image-20220726214239888.png" alt="image-20220726214239888"></p><h4 id="3-Pom-xml配置">3 Pom.xml配置</h4><p><img src="images/image-20220726214200732.png" alt="image-20220726214200732"></p><h3 id="git安装">git安装</h3><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum <span class="keyword">install</span> -y git</span><br></pre></td></tr></table></figure><h4 id="javahome配置-可选">javahome配置(可选)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.322.b06-1.el7_9.x86_64</span><br><span class="line"><span class="built_in">export</span> JRE_HOME=<span class="variable">$JAVA_HOME</span>/jre</span><br><span class="line">PATH=<span class="variable">$PATH</span>:<span class="variable">$JAVA_HOME</span>/bin:<span class="variable">$JRE_HOME</span>/bin</span><br><span class="line"><span class="built_in">export</span> JAVA_HOME JRE_HOME CLASS_PATH PATH</span><br><span class="line"></span><br><span class="line">jdk</span><br><span class="line">/etc/alternatives/jre_openjdk</span><br><span class="line"><span class="built_in">source</span> /etc/profile 立即生效</span><br></pre></td></tr></table></figure><h4 id="报错找不到jdk？">报错找不到jdk？</h4><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">默认yum安装<span class="keyword">java的时候会显示安装的是openjdk1.8 </span>实则实际上只安装了<span class="keyword">jre</span></span><br><span class="line"><span class="keyword"></span>yum <span class="keyword">install </span>-y <span class="keyword">java-devel</span></span><br></pre></td></tr></table></figure><h4 id="Maven阿里云镜像">Maven阿里云镜像</h4><p>修改<code>/usr/local/maven/conf/settings.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">Licensed to the Apache Software Foundation (ASF) under one</span></span><br><span class="line"><span class="comment">or more contributor license agreements.  See the NOTICE file</span></span><br><span class="line"><span class="comment">distributed with this work for additional information</span></span><br><span class="line"><span class="comment">regarding copyright ownership.  The ASF licenses this file</span></span><br><span class="line"><span class="comment">to you under the Apache License, Version 2.0 (the</span></span><br><span class="line"><span class="comment">&quot;License&quot;); you may not use this file except in compliance</span></span><br><span class="line"><span class="comment">with the License.  You may obtain a copy of the License at</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    http://www.apache.org/licenses/LICENSE-2.0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Unless required by applicable law or agreed to in writing,</span></span><br><span class="line"><span class="comment">software distributed under the License is distributed on an</span></span><br><span class="line"><span class="comment">&quot;AS IS&quot; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY</span></span><br><span class="line"><span class="comment">KIND, either express or implied.  See the License for the</span></span><br><span class="line"><span class="comment">specific language governing permissions and limitations</span></span><br><span class="line"><span class="comment">under the License.</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> | This is the configuration file for Maven. It can be specified at two levels:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  1. User Level. This settings.xml file provides configuration for a single user,</span></span><br><span class="line"><span class="comment"> |                 and is normally provided in $&#123;user.home&#125;/.m2/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -s /path/to/user/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |  2. Global Level. This settings.xml file provides configuration for all Maven</span></span><br><span class="line"><span class="comment"> |                 users on a machine (assuming they&#x27;re all using the same Maven</span></span><br><span class="line"><span class="comment"> |                 installation). It&#x27;s normally provided in</span></span><br><span class="line"><span class="comment"> |                 $&#123;maven.conf&#125;/settings.xml.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 <span class="doctag">NOTE:</span> This location can be overridden with the CLI option:</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |                 -gs /path/to/global/settings.xml</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> | The sections in this sample file are intended to give you a running start at</span></span><br><span class="line"><span class="comment"> | getting the most out of your Maven installation. Where appropriate, the default</span></span><br><span class="line"><span class="comment"> | values (values used when the setting is not specified) are provided.</span></span><br><span class="line"><span class="comment"> |</span></span><br><span class="line"><span class="comment"> |--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- localRepository</span></span><br><span class="line"><span class="comment">   | The path to the local repository maven will use to store artifacts.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: $&#123;user.home&#125;/.m2/repository</span></span><br><span class="line"><span class="comment">  &lt;localRepository&gt;/path/to/local/repo&lt;/localRepository&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>$&#123;user.home&#125;/.m2/repository<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- interactiveMode</span></span><br><span class="line"><span class="comment">   | This will determine whether maven prompts you when it needs input. If set to false,</span></span><br><span class="line"><span class="comment">   | maven will use a sensible default value, perhaps based on some other setting, for</span></span><br><span class="line"><span class="comment">   | the parameter in question.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: true</span></span><br><span class="line"><span class="comment">  &lt;interactiveMode&gt;true&lt;/interactiveMode&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- offline</span></span><br><span class="line"><span class="comment">   | Determines whether maven should attempt to connect to the network when executing a build.</span></span><br><span class="line"><span class="comment">   | This will have an effect on artifact downloads, artifact deployment, and others.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | Default: false</span></span><br><span class="line"><span class="comment">  &lt;offline&gt;false&lt;/offline&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- pluginGroups</span></span><br><span class="line"><span class="comment">   | This is a list of additional group identifiers that will be searched when resolving plugins by their prefix, i.e.</span></span><br><span class="line"><span class="comment">   | when invoking a command line like &quot;mvn prefix:goal&quot;. Maven will automatically add the group identifiers</span></span><br><span class="line"><span class="comment">   | &quot;org.apache.maven.plugins&quot; and &quot;org.codehaus.mojo&quot; if these are not already contained in the list.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- pluginGroup</span></span><br><span class="line"><span class="comment">     | Specifies a further group identifier to use for plugin lookup.</span></span><br><span class="line"><span class="comment">    &lt;pluginGroup&gt;com.your.plugins&lt;/pluginGroup&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginGroup</span>&gt;</span>org.mortbay.jetty<span class="tag">&lt;/<span class="name">pluginGroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">pluginGroups</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- proxies</span></span><br><span class="line"><span class="comment">   | This is a list of proxies which can be used on this machine to connect to the network.</span></span><br><span class="line"><span class="comment">   | Unless otherwise specified (by system property or command-line switch), the first proxy</span></span><br><span class="line"><span class="comment">   | specification in this list marked as active will be used.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">proxies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- proxy</span></span><br><span class="line"><span class="comment">     | Specification for one proxy, to be used in connecting to the network.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;proxy&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;optional&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;active&gt;true&lt;/active&gt;</span></span><br><span class="line"><span class="comment">      &lt;protocol&gt;http&lt;/protocol&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;proxyuser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;proxypass&lt;/password&gt;</span></span><br><span class="line"><span class="comment">      &lt;host&gt;proxy.host.net&lt;/host&gt;</span></span><br><span class="line"><span class="comment">      &lt;port&gt;80&lt;/port&gt;</span></span><br><span class="line"><span class="comment">      &lt;nonProxyHosts&gt;local.net|some.host.com&lt;/nonProxyHosts&gt;</span></span><br><span class="line"><span class="comment">    &lt;/proxy&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">proxies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- servers</span></span><br><span class="line"><span class="comment">   | This is a list of authentication profiles, keyed by the server-id used within the system.</span></span><br><span class="line"><span class="comment">   | Authentication profiles can be used whenever maven must make a connection to a remote server.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- server</span></span><br><span class="line"><span class="comment">     | Specifies the authentication information to use when connecting to a particular server, identified by</span></span><br><span class="line"><span class="comment">     | a unique name within the system (referred to by the &#x27;id&#x27; attribute below).</span></span><br><span class="line"><span class="comment">     | </span></span><br><span class="line"><span class="comment">     | <span class="doctag">NOTE:</span> You should either specify username/password OR privateKey/passphrase, since these pairings are </span></span><br><span class="line"><span class="comment">     |       used together.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;deploymentRepo&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;username&gt;repouser&lt;/username&gt;</span></span><br><span class="line"><span class="comment">      &lt;password&gt;repopwd&lt;/password&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Another sample, using keys to authenticate.</span></span><br><span class="line"><span class="comment">    &lt;server&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;siteServer&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;privateKey&gt;/path/to/private/key&lt;/privateKey&gt;</span></span><br><span class="line"><span class="comment">      &lt;passphrase&gt;optional; leave empty if not used.&lt;/passphrase&gt;</span></span><br><span class="line"><span class="comment">    &lt;/server&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>releases<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">server</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>Snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">username</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">username</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">password</span>&gt;</span>ali<span class="tag">&lt;/<span class="name">password</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">server</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- mirrors</span></span><br><span class="line"><span class="comment">   | This is a list of mirrors to be used in downloading artifacts from remote repositories.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | It works like this: a POM may declare a repository to use in resolving certain artifacts.</span></span><br><span class="line"><span class="comment">   | However, this repository may have problems with heavy traffic at times, so people have mirrored</span></span><br><span class="line"><span class="comment">   | it to several places.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | That repository definition will have a unique id, so we can create a mirror reference for that</span></span><br><span class="line"><span class="comment">   | repository, to be used as an alternate download site. The mirror site will be the preferred</span></span><br><span class="line"><span class="comment">   | server for that repository.</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mirror</span></span><br><span class="line"><span class="comment">     | Specifies a repository mirror site to use instead of a given repository. The repository that</span></span><br><span class="line"><span class="comment">     | this mirror serves has an ID that matches the mirrorOf element of this mirror. IDs are used</span></span><br><span class="line"><span class="comment">     | for inheritance and direct lookup purposes, and must be unique across the set of mirrors.</span></span><br><span class="line"><span class="comment">     |</span></span><br><span class="line"><span class="comment">    &lt;mirror&gt;</span></span><br><span class="line"><span class="comment">      &lt;id&gt;mirrorId&lt;/id&gt;</span></span><br><span class="line"><span class="comment">      &lt;mirrorOf&gt;repositoryId&lt;/mirrorOf&gt;</span></span><br><span class="line"><span class="comment">      &lt;name&gt;Human Readable Name for this Mirror.&lt;/name&gt;</span></span><br><span class="line"><span class="comment">      &lt;url&gt;http://my.repository.com/repo/path&lt;/url&gt;</span></span><br><span class="line"><span class="comment">    &lt;/mirror&gt;</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--This sends everything else to /public --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">          profile below over to a different nexus group --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/repositories/snapshots/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--This is used to direct the public snapshots repo in the </span></span><br><span class="line"><span class="comment">          profile below over to a different nexus group --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-public-snapshots1<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>public-snapshots1<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://artifacts.alfresco.com/nexus/content/repositories/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- profiles</span></span><br><span class="line"><span class="comment">   | This is a list of profiles which can be activated in a variety of ways, and which can modify</span></span><br><span class="line"><span class="comment">   | the build process. Profiles provided in the settings.xml are intended to provide local machine-</span></span><br><span class="line"><span class="comment">   | specific paths and repository locations which allow the build to work in the local environment.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | For example, if you have an integration testing plugin - like cactus - that needs to know where</span></span><br><span class="line"><span class="comment">   | your Tomcat instance is installed, you can provide a variable here such that the variable is</span></span><br><span class="line"><span class="comment">   | dereferenced during the build process to configure the cactus plugin.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | As noted above, profiles can be activated in a variety of ways. One way - the activeProfiles</span></span><br><span class="line"><span class="comment">   | section of this document (settings.xml) - will be discussed later. Another way essentially</span></span><br><span class="line"><span class="comment">   | relies on the detection of a system property, either matching a particular value for the property,</span></span><br><span class="line"><span class="comment">   | or merely testing its existence. Profiles can also be activated by JDK version prefix, where a</span></span><br><span class="line"><span class="comment">   | value of &#x27;1.4&#x27; might activate a profile when the build is executed on a JDK version of &#x27;1.4.2_07&#x27;.</span></span><br><span class="line"><span class="comment">   | Finally, the list of active profiles can be specified directly from the command line.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   | <span class="doctag">NOTE:</span> For profiles defined in the settings.xml, you are restricted to specifying only artifact</span></span><br><span class="line"><span class="comment">   |       repositories, plugin repositories, and free-form properties to be used as configuration</span></span><br><span class="line"><span class="comment">   |       variables for plugins in the POM.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">   |--&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">profiles</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>development<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>central<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://central<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--this profile will allow snapshots to be searched when activated--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://public-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://public-snapshots<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">releases</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>false<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;/<span class="name">releases</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">snapshots</span>&gt;</span><span class="tag">&lt;<span class="name">enabled</span>&gt;</span>true<span class="tag">&lt;/<span class="name">enabled</span>&gt;</span><span class="tag">&lt;<span class="name">updatePolicy</span>&gt;</span>always<span class="tag">&lt;/<span class="name">updatePolicy</span>&gt;</span><span class="tag">&lt;/<span class="name">snapshots</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">pluginRepository</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">pluginRepositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">   <span class="tag">&lt;<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>development<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">activeProfile</span>&gt;</span>public-snapshots<span class="tag">&lt;/<span class="name">activeProfile</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">activeProfiles</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- activeProfiles</span></span><br><span class="line"><span class="comment">   | List of profiles that are active for all builds.</span></span><br><span class="line"><span class="comment">   |</span></span><br><span class="line"><span class="comment">  &lt;activeProfiles&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;alwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">    &lt;activeProfile&gt;anotherAlwaysActiveProfile&lt;/activeProfile&gt;</span></span><br><span class="line"><span class="comment">  &lt;/activeProfiles&gt;</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="publish-over-ssh-配置">publish over ssh 配置</h3><p>1 安装插件</p><p>在Configure System菜单里 往下来</p><p>2 添加一台目标服务器</p><p><img src="images/image-20220726223917263.png" alt="image-20220726223917263"></p><p><img src="images/image-20220726223937722.png" alt="image-20220726223937722"></p><p>3 修改配置</p><p><img src="images/image-20220727165700419.png" alt="image-20220727165700419"></p><h4 id="超时机制">超时机制</h4><p>输出命令时一定要注意不要让窗口卡主，不然Jenkins会认为认为一直没完成</p><h4 id="shell的日志输出">shell的日志输出</h4><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup java <span class="punctuation">-</span>jar /root/xxoo/demo*.jar &gt;mylog.<span class="built_in">log</span> <span class="number">2</span>&gt;<span class="meta">&amp;1 &amp;</span></span><br></pre></td></tr></table></figure><h4 id="数据流重定向">数据流重定向</h4><p>数据流重定向就是将某个命令执行后应该要出现在屏幕上的数据传输到其他地方</p><p>标准输入（stdin）：代码为0，使用&lt;或&lt;&lt;;<br>标准输出（stdout）：代码为1，使用&gt;或&gt;&gt;;<br>标准错误输出（stderr）：代码为2，使用2&gt;或2&gt;&gt;</p><p>&gt; 覆盖写<br>&gt;&gt; 追加写</p><h3 id="运行前清理">运行前清理</h3><p>配置杀死之前运行的进程</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">删除历史数据</span></span><br><span class="line">rm -rf xxoo</span><br><span class="line"></span><br><span class="line">appname=$1</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取传入的参数</span></span><br><span class="line">echo &quot;arg:$1&quot;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">获取正在运行的jar包pid</span></span><br><span class="line">pid=`ps -ef | grep $1 | grep &#x27;java -jar&#x27; | awk &#x27;&#123;printf $2&#125;&#x27;`</span><br><span class="line"></span><br><span class="line">echo $pid</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果pid为空，提示一下，否则，执行<span class="built_in">kill</span>命令</span></span><br><span class="line">if [ -z $pid ];</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">使用-z 做空值判断</span></span><br><span class="line">        then</span><br><span class="line">                echo &quot;$appname not started&quot;</span><br><span class="line"></span><br><span class="line">        else</span><br><span class="line">               kill -9 $pid</span><br><span class="line">                echo &quot;$appname stoping....&quot;</span><br><span class="line"></span><br><span class="line">check=`ps -ef | grep -w $pid | grep java`</span><br><span class="line">if [ -z $check ];</span><br><span class="line"></span><br><span class="line">        then</span><br><span class="line">                echo &quot;$appname pid:$pid is stop&quot;</span><br><span class="line">        else</span><br><span class="line">                echo &quot;$appname stop failed&quot;</span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fi</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="几种构建方式">几种构建方式</h3><ul><li>快照依赖构建/Build whenever a SNAPSHOT dependency is built<ul><li>当依赖的快照被构建时执行本job</li></ul></li><li>触发远程构建 (例如,使用脚本)<ul><li>远程调用本job的restapi时执行本job</li></ul></li><li>job依赖构建/Build after other projects are built<ul><li>当依赖的job被构建时执行本job</li></ul></li><li>定时构建/Build periodically<ul><li>使用cron表达式定时构建本job</li></ul></li><li>向GitHub提交代码时触发Jenkins自动构建/GitHub hook trigger for GITScm polling<ul><li>Github-WebHook出发时构建本job</li></ul></li><li>定期检查代码变更/Poll SCM<ul><li>使用cron表达式定时检查代码变更，变更后构建本job</li></ul></li></ul><h4 id="触发远程构建-gitlab上改动自动构建">触发远程构建/gitlab上改动自动构建</h4><p>代码改动自动可以使用gitlab的webhook回调钩子调起Jenkins的启动任务接口</p><p>在构建触发器中配置接口和token</p><p><img src="images/image-20220728170250273.png" alt="image-20220728170250273"></p><h4 id="定时构建">定时构建</h4><h5 id="Jenkins-cron表达式">Jenkins cron表达式</h5><p>标准cron</p><p><a href="https://crontab.guru">https://crontab.guru</a></p><p>Jenkins cron不是标准的cron表达式</p><figure class="highlight tap"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">第一个 * 表示每个小时的第几分钟，取值0~59</span><br><span class="line"></span><br><span class="line">H * * * *</span><br><span class="line">H：每小时执行一次</span><br><span class="line"></span><br><span class="line">第二颗 * 表示小时，取值0~23</span><br><span class="line"></span><br><span class="line">*<span class="number"> 15 </span>* * * 表示每天下午3点</span><br><span class="line">*<span class="number"> 1 </span>* * *  表示每天凌晨1点</span><br><span class="line"></span><br><span class="line">第三颗 * 表示一个月的第几天，取值1~31</span><br><span class="line">*<span class="number"> 1 </span>5 * *  表示每月5日凌晨1点</span><br><span class="line"></span><br><span class="line">第四颗 * 表示第几月，取值1~12</span><br><span class="line">*<span class="number"> 15 </span>5<span class="number"> 1 </span>*  表示每年几月执行</span><br><span class="line"></span><br><span class="line">第五颗 * 表示一周中的第几天，取值0~7，其中0和7代表的都是周日</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>“/”</strong></p><p>表示每隔多长时间，比如 */10 * * * * 表示 每隔10分钟</p><p><strong>“H”</strong></p><p>hash散列值，以job名取值，获取到以job名为入参的唯一值，相同名称值也相同，这个偏移量会和实际时间相加，获得一个真实的运行时间</p><p>意义在于：不同的项目在不同的时间运行，即使配置的值是一样的，比如 都是<code>15 * * * * </code> ，表示每个小时的第15分钟开始执行任务，那么会造成同一时间内在Jenkins中启动很多job，换成<code>H/15 * * * *</code>,那么在首次启动任务时，会有随机值参与进来，有的会在17分钟启动 有的会在19分钟启动，随后的启动时间也是这个值。这样就能错开相同cron值的任务执行了。</p><p>H的值也可以设置范围</p><p><code>H * * * *</code>表示一小时内的任意时间</p><p><code>*/10 * * * *</code>每10分钟</p><p><code>H/10 * * * *</code>每10分钟,可能是7,17,27，起始时间hash，步长不变</p><p><code>45 3 * * 1-6 </code> 每个周一至周六，凌晨3点45 执行1次</p><p><code>45 3-5 * * 1-6 </code> 每个周一至周六，凌晨3点45 ，凌晨4点45，凌晨5点45 各执行1次</p><p><code>H(40-48) 3-5 * * 1-6 </code> 在40~48之间取值 其他同上</p><p><code>45 3-5/2 * * 1-6 </code> 每个周一至周六，凌晨3点45 ，凌晨5点45 各执行1次</p><p><code>45 0-6/2 * * 1-6 * * 1-6</code> 0点开始，每间隔2小时执行一次 0:45、2:45、4:45</p><h4 id="源码变更构建">源码变更构建</h4><p>使用Poll SCM 方式与Build periodically一样</p><p>会主动定期检查代码托管服务器上是否有变化，一旦发生变化执行job构建</p><h3 id="测试报告邮件通知">测试报告邮件通知</h3><p>使用163免费邮箱发送邮件时注意密码填认证码，也就是发送手机短信后给的那个，不要用登录邮箱的密码</p><p>类似下面。。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">KDWJUWDQBWMOYGDC</span></span><br></pre></td></tr></table></figure><h3 id="自动化部署到docker容器中">自动化部署到docker容器中</h3><p><img src="./Jenkins.assets/image-20250512203940547.png" alt="image-20250512203940547"></p><p><img src="./Jenkins.assets/image-20250512203642721.png" alt="image-20250512203642721"></p><h4 id="docker外挂目录">docker外挂目录</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">docker</span> run -d -p <span class="number">8080</span>:<span class="number">8080</span> --name demo-out -v /root/jarfile/demo-<span class="number">1</span>-<span class="number">0</span>.<span class="number">0</span>.<span class="number">1</span>-SNAPSHOT.jar:/app.jar openjdk:<span class="number">11</span> java -jar app.jar</span><br></pre></td></tr></table></figure><h4 id="打包到容器内">打包到容器内</h4><ol><li>准备一台测试服务器 docker环境</li><li>准备支持jdk的镜像</li></ol><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> . /usr/src/myapp</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /usr/src/myapp</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> javac Main.java</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>, <span class="string">&quot;Main&quot;</span>]</span></span><br></pre></td></tr></table></figure><ol><li>把jar包打包到容器内</li></ol><p>dockerfile</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> openjdk:<span class="number">11</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> /root</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jarfile/demo*.jar /root/app.jar</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/root/app.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure><p>打包镜像</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t demo .</span><br></pre></td></tr></table></figure><p>配置国内镜像</p><p>修改<code>/etc/docker/daemon.json</code>文件，没有的话创建一个</p><p>写入</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;registry-mirrors&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;https://ustc-edu-cn.mirror.aliyuncs.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>,</span><br><span class="line">        <span class="string">&quot;https://registry.aliyuncs.com&quot;</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启服务</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="params">system</span>ctl daemon-reload</span><br><span class="line"><span class="params">system</span>ctl restart docker</span><br></pre></td></tr></table></figure><h2 id="Jenkins集群-并发构建">Jenkins集群/并发构建</h2><p>集群化构建可以有效提升构建效率，尤其是团队项目比较多或是子项目比较多的时候，可以并发在多台机器上执行构建。</p><h2 id="流水线-pipeline">流水线 pipeline</h2><p>流水线既能作为任务的本身，也能作为Jenkinsfile</p><p>使用流水线可以让我们的任务从ui手动操作，转换为代码化，像docker的dockerfile一样，从shell命令到配置文件，更适合大型项目，可以让团队其他开发者同时参与进来，同时也可以编辑开发Jenkinswebui不能完成的更复杂的构建逻辑，作为开发者可读性也更好。</p><h3 id="完整语法">完整语法</h3><p>5个必备的组成部分</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pipeline：整条流水线</span><br><span class="line"><span class="built_in">agent</span>：指定执行器</span><br><span class="line">stages：所有阶段</span><br><span class="line">stage：某一阶段，可有多个</span><br><span class="line">steps：阶段内的每一步，可执行命令</span><br></pre></td></tr></table></figure><h3 id="测试脚本">测试脚本</h3><h4 id="基础框架">基础框架</h4><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    <span class="built_in">agent</span> any</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">            </span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;拉取代码完成&#x27;</span></span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;执行构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                <span class="built_in">echo</span> <span class="string">&#x27;执行构建完成&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    post &#123;</span><br><span class="line">        </span><br><span class="line">        always &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;完成&quot;</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        failure &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">echo</span> <span class="string">&quot;失败&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="阶段视图-Stage-View">阶段视图 Stage View</h4><h4 id="blue-ocean可视化界面">blue ocean可视化界面</h4><p>全新的流水线控制ui，可重复执行某阶段代码</p><p>插件中心搜索blue ocean安装即可</p><h4 id="post">post</h4><p>流水线完成后可执行的任务</p><ul><li>always 无论流水线或者阶段的完成状态。</li><li>changed 只有当流水线或者阶段完成状态与之前不同时。</li><li>failure 只有当流水线或者阶段状态为&quot;failure&quot;运行。</li><li>success 只有当流水线或者阶段状态为&quot;success&quot;运行。</li><li>unstable 只有当流水线或者阶段状态为&quot;unstable&quot;运行。例如：测试失败。</li><li>aborted 只有当流水线或者阶段状态为&quot;aborted &quot;运行。例如：手动取消。</li></ul><h4 id="agent">agent</h4><p>可以指定执行节点</p><p>label 指定运行job的节点标签</p><p>any 不指定，由Jenkins分配</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">pipeline &#123;</span><br><span class="line">    agent &#123;</span><br><span class="line">        node &#123;</span><br><span class="line">            label <span class="string">&quot;jenkins-02&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    stages &#123;</span><br><span class="line">        stage(<span class="string">&#x27;拉取代码&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">          </span><br><span class="line">                sh <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">                    sleep 10</span></span><br><span class="line"><span class="string">                            </span></span><br><span class="line"><span class="string">                   &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">                echo <span class="string">&#x27;拉取代码完成&#x27;</span></span><br><span class="line">               </span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        stage(<span class="string">&#x27;执行构建&#x27;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                echo <span class="string">&#x27;执行构建完成&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    post &#123;</span><br><span class="line">        </span><br><span class="line">        always &#123;</span><br><span class="line">            </span><br><span class="line">            echo <span class="string">&quot;完成&quot;</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        failure &#123;</span><br><span class="line">            </span><br><span class="line">            echo <span class="string">&quot;失败&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="pipeline中执行自动化构建">pipeline中执行自动化构建</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">pipeline &#123;</span><br><span class="line">    agent any</span><br><span class="line"></span><br><span class="line">    tools &#123;</span><br><span class="line">        </span><br><span class="line">        maven <span class="string">&quot;maven3&quot;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    stages &#123;</span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;拉取代码&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                git branch: <span class="string">&#x27;main&#x27;</span>, credentialsId: <span class="string">&#x27;gitlab&#x27;</span>, url: <span class="string">&#x27;http://192.168.44.103/root/java-project.git&#x27;</span></span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;拉取成功&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;执行构建&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">            <span class="comment">//    sh &quot;mvn --version&quot;</span></span><br><span class="line">                sh <span class="string">&quot;&quot;</span><span class="string">&quot; </span></span><br><span class="line"><span class="string">                cd demo-1</span></span><br><span class="line"><span class="string">                </span></span><br><span class="line"><span class="string">                mvn clean package</span></span><br><span class="line"><span class="string">                &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">                </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;构建完成&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;clean test server&quot;</span>)&#123;</span><br><span class="line">            </span><br><span class="line">            steps&#123;</span><br><span class="line">                </span><br><span class="line"><span class="title function_ invoke__">sshPublisher</span>(<span class="attr">publishers</span>: [<span class="title function_ invoke__">sshPublisherDesc</span>(<span class="attr">configName</span>: <span class="string">&#x27;testserver&#x27;</span>, <span class="attr">transfers</span>: [<span class="title function_ invoke__">sshTransfer</span>(<span class="attr">cleanRemote</span>: <span class="literal">false</span>, <span class="attr">excludes</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execCommand</span>: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;rm -rf *</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">docker stop demo</span></span><br><span class="line"><span class="string">docker rm demo</span></span><br><span class="line"><span class="string">docker rmi demo</span></span><br><span class="line"><span class="string">&#x27;</span><span class="string">&#x27;&#x27;</span>, <span class="attr">execTimeout</span>: <span class="number">120000</span>, <span class="attr">flatten</span>: <span class="literal">false</span>, <span class="attr">makeEmptyDirs</span>: <span class="literal">false</span>, <span class="attr">noDefaultExcludes</span>: <span class="literal">false</span>, <span class="attr">patternSeparator</span>: <span class="string">&#x27;[, ]+&#x27;</span>, <span class="attr">remoteDirectory</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">remoteDirectorySDF</span>: <span class="literal">false</span>, <span class="attr">removePrefix</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">sourceFiles</span>: <span class="string">&#x27;/root&#x27;</span>)], <span class="attr">usePromotionTimestamp</span>: <span class="literal">false</span>, <span class="attr">useWorkspaceInPromotion</span>: <span class="literal">false</span>, <span class="attr">verbose</span>: <span class="literal">false</span>)])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="title function_ invoke__">stage</span>(<span class="string">&quot;发送jar包到测试服务器&quot;</span>) &#123;</span><br><span class="line">            steps &#123;</span><br><span class="line">                </span><br><span class="line">                <span class="title function_ invoke__">sshPublisher</span>(<span class="attr">publishers</span>: [<span class="title function_ invoke__">sshPublisherDesc</span>(<span class="attr">configName</span>: <span class="string">&#x27;testserver&#x27;</span>, <span class="attr">transfers</span>: [<span class="title function_ invoke__">sshTransfer</span>(<span class="attr">cleanRemote</span>: <span class="literal">false</span>, <span class="attr">excludes</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execCommand</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execTimeout</span>: <span class="number">120000</span>, <span class="attr">flatten</span>: <span class="literal">false</span>, <span class="attr">makeEmptyDirs</span>: <span class="literal">false</span>, <span class="attr">noDefaultExcludes</span>: <span class="literal">false</span>, <span class="attr">patternSeparator</span>: <span class="string">&#x27;[, ]+&#x27;</span>, <span class="attr">remoteDirectory</span>: <span class="string">&#x27;/jarfile&#x27;</span>, <span class="attr">remoteDirectorySDF</span>: <span class="literal">false</span>, <span class="attr">removePrefix</span>: <span class="string">&#x27;demo-1/target&#x27;</span>, <span class="attr">sourceFiles</span>: <span class="string">&#x27;**/demo*.jar&#x27;</span>), <span class="title function_ invoke__">sshTransfer</span>(<span class="attr">cleanRemote</span>: <span class="literal">false</span>, <span class="attr">excludes</span>: <span class="string">&#x27;&#x27;</span>, <span class="attr">execCommand</span>: <span class="string">&#x27;&#x27;</span><span class="string">&#x27;docker build -t demo .</span></span><br><span class="line"><span class="string">docker run -d -p 8080:8080 --name demo demo&#x27;</span><span class="string">&#x27;&#x27;</span>, <span class="attr">execTimeout</span>: <span class="number">120000</span>, <span class="attr">flatten</span>: <span class="literal">false</span>, <span class="attr">makeEmptyDirs</span>: <span class="literal">false</span>, <span class="attr">noDefaultExcludes</span>: <span class="literal">false</span>, <span class="attr">patternSeparator</span>: <span class="string">&#x27;[, ]+&#x27;</span>, <span class="attr">remoteDirectory</span>: <span class="string">&#x27;/&#x27;</span>, <span class="attr">remoteDirectorySDF</span>: <span class="literal">false</span>, <span class="attr">removePrefix</span>: <span class="string">&#x27;demo-1/docker&#x27;</span>, <span class="attr">sourceFiles</span>: <span class="string">&#x27;demo-1/docker/dockerfile&#x27;</span>)], <span class="attr">usePromotionTimestamp</span>: <span class="literal">false</span>, <span class="attr">useWorkspaceInPromotion</span>: <span class="literal">false</span>, <span class="attr">verbose</span>: <span class="literal">false</span>)])</span><br><span class="line">                </span><br><span class="line">                </span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;jar send over!&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="声明式流水线">声明式流水线</h4><p>好处</p><ul><li>更像是在Jenkins web ui中的操作</li><li>可读性比较高</li><li>可以使用blue ocean自动生成</li><li>支持语法检查</li></ul><p>坏处</p><ul><li>代码逻辑能力比脚本式弱，不能完成特别复杂的任务</li></ul><h4 id="脚本式流水线">脚本式流水线</h4><p>好处</p><ul><li>更少的代码和弱规范要求</li><li>更灵活的自定义代码操作</li><li>不受约束，可以构建特别复杂的工作流和流水线</li></ul><p>坏处</p><ul><li>读写对编程要求比较高</li><li>比声明式流水线代码更复杂</li></ul>]]></content>
    
    
    <summary type="html">Jenkins</summary>
    
    
    
    <category term="Jenkins" scheme="https://yjyrichard.github.io/categories/Jenkins/"/>
    
    
    <category term="Jenkins" scheme="https://yjyrichard.github.io/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Nodejs</title>
    <link href="https://yjyrichard.github.io/posts/33b4e017.html"/>
    <id>https://yjyrichard.github.io/posts/33b4e017.html</id>
    <published>2025-07-31T12:05:25.346Z</published>
    <updated>2025-08-01T02:51:31.848Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么学习Node-js">为什么学习Node.js?</h2><p>加入你有一个网页，你有没有办法让别人都访问这个网页？</p><p>这个就是Node.js的作用了，至于它是如何让每一个人都访问到的，后面会详细展开</p><p>前端开发三大框架</p><p>Vue React Angular</p><p><img src="./nodejs(1).assets/image-20250609200213029.png" alt="image-20250609200213029"></p><p>这三个项目开发的时候都离不开Node.js,是一个必学项。</p><p>所以总结来说:</p><blockquote><p>1.可以让其他人访问我们编写的网页</p><p>2.为后续的框架学习打基础</p></blockquote><h2 id="Node-js是什么？">Node.js是什么？</h2><p>有人说：Node.js 是一门编程语言，也有人说Node.js是新版本的JavaScript? 那我们来看看官方是如何描述Node.js的：Node.js® 是一个免费、开源、跨平台的 JavaScript 运行时环境, 它让开发人员能够创建服务器 Web 应用、命令行工具和脚本。</p><p>通俗来讲：Node.js 就是<code>一款应用程序</code>，是<code>一款软件</code>，它可以运行JavaScript</p><h2 id="Node-js-的作用">Node.js 的作用</h2><p>1.开发服务器应用</p><p>2.开发工具类应用</p><p>3.开发桌面端应用</p><p>我们下面来展开说一下：</p><h3 id="1-开发服务器应用">1.开发服务器应用</h3><p><img src="./nodejs(1).assets/image-20250609200702080.png" alt="image-20250609200702080"></p><p>Node.js 就可以是在B站服务器里面的软件。<br>我们前面说我们学习Node.js可以让别人访问到我们的网页，我们知道网页是由HTML,CSS,JavaScript 三件套组成的。那如果我们想让别人访问我们就必须使用服务器，但是服务器只有硬件，那么还得需要软件，Node.js就可以运行在服务器端，这样就可以让别人来访问我们的网站了。</p><h3 id="2-开发工具类应用">2.开发工具类应用</h3><p><img src="./nodejs(1).assets/image-20250609201015180.png" alt="image-20250609201015180"></p><h3 id="3-开发桌面端应用">3.开发桌面端应用</h3><p><img src="./nodejs(1).assets/image-20250609201050195.png" alt="image-20250609201050195"></p><p>这三个应用都是使用electron，而electron是基于node.js开发出来的。以后可以去学习electron就可以进行开发了</p><h2 id="Node-js-下载和安装">Node.js 下载和安装</h2><p>官网：<a href="https://nodejs.org/zh-cn">Node.js — 在任何地方运行 JavaScript</a></p><p>怎么验证安装成功了吗？</p><p>使用cmd:然后输入node -v</p><p><strong>认识命令行工具</strong></p><p>你有没有办法不使用鼠标来打开QQ？</p><p>我们可以使用键盘上下左右，然后按回车</p><p>还没有办法呢？</p><p>我们可以使用一些快速启动工具，比如uTools</p><p>我们还可以使用cmd  (win+R)</p><p><strong>命令的结构</strong></p><p>思考题：</p><p>如何使用命令行工具打开谷歌浏览器并访问百度首页？</p><p>win+R 输入cmd，在控制台中输入chrome <a href="http://www.baidu.com">http://www.baidu.com</a> 然后输入回车即可</p><p>chrome 是命令 ，网址后面是参数  如果后面再加http://bilibli.com 就会打开两个网页</p><p><strong>常用命令</strong></p><p>命令行如何查看【D：/Program Files 】里的内容？</p><p>我们可以cd（change directory） 到 cd /d D：/Program Files 然后输出dir</p><p>切换盘符直接 D： 即可</p><h2 id="Node-js-初体验">Node.js 初体验</h2><p>dir /s 是查看文件夹下所有的文件，ctrl+C可以停止</p><p>如果我们在hello.js中写下这样的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello Node.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我们在控制台中操作：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">D</span>:\<span class="title class_">Note</span>\code\nodejs&gt;node hello.<span class="property">js</span></span><br><span class="line">hello <span class="title class_">Node</span>.<span class="property">js</span></span><br></pre></td></tr></table></figure><h2 id="Node-js注意点">Node.js注意点</h2><p>Node.js中不能使用BOM和DOM的API</p><p><img src="./nodejs(1).assets/image-20250609202927856.png" alt="image-20250609202927856"></p><p><img src="./nodejs(1).assets/image-20250609202936856.png" alt="image-20250609202936856"></p><p>1.Node.js中不能使用BOM和DOM的API，可以使用console和定时器API</p><p>2.Node.js中的顶级对象为global,也可以使用globalThis 访问顶级对象</p><h2 id="Buffer">Buffer</h2><p>Buffer 中文译为【缓冲区】，是一个类似于Array的对象，用于表示固定长度的字节序列</p><p>换句话说，Buffer就是一段固定长度的内存空间，用于处理二进制数据</p><p><img src="./nodejs(1).assets/image-20250609203343347.png" alt="image-20250609203343347"></p><p><strong>特点</strong></p><p>1.Buffer 大小固定且无法调整</p><p>2.Buffer 性能较好，可以直接对计算机内存进行操作</p><p>3.每个元素的大小为 1 字节（byte）</p><p><img src="./nodejs(1).assets/image-20250609203455768.png" alt="image-20250609203455768"></p><p><strong>使用</strong></p><p>创建 Buffer Node.js 中创建 Buffer 的方式主要如下几种：</p><p>1.Buffer.alloc</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.alloc</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">alloc</span>(<span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf);</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Note\code\nodejs&gt; node .\创建buffer.js</span><br><span class="line">&lt;Buffer 00 00 00 00 00 00 00 00 00 00&gt;</span><br></pre></td></tr></table></figure><p>2.Buffer.allocUnsafe</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.allocUnsafe </span></span><br><span class="line"><span class="keyword">let</span> buf_2 = <span class="title class_">Buffer</span>.<span class="title function_">allocUnsafe</span>(<span class="number">10</span>); <span class="comment">//所创建的有可能会有旧数据 但是速度比alloc快</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_2);</span><br></pre></td></tr></table></figure><p>3.Buffer.from</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//3.from 通过字符串创建buffer</span></span><br><span class="line"><span class="keyword">let</span> buf_3 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3);</span><br><span class="line"><span class="comment">//通过数组创建 Buffer</span></span><br><span class="line"><span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>]);</span><br></pre></td></tr></table></figure><p>**Buffer与字符串的转化 **</p><p>我们可以借助 toString 方法将 Buffer 转为字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> buf_4 = <span class="title class_">Buffer</span>.<span class="title function_">from</span>([<span class="number">105</span>, <span class="number">108</span>, <span class="number">111</span>, <span class="number">118</span>, <span class="number">101</span>, <span class="number">121</span>, <span class="number">111</span>, <span class="number">117</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_4.<span class="title function_">toString</span>())</span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Note\code\nodejs&gt; node .\操作buffer.js</span><br><span class="line">iloveyou</span><br></pre></td></tr></table></figure><p>【这也可以是一种表白的方式】</p><blockquote><p>toString 默认是按照 utf-8 编码方式进行转换的。</p></blockquote><p>**Buffer 的读写 **</p><p>Buffer 可以直接通过 [] 的方式对数据进行处理。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3[<span class="number">1</span>]);</span><br><span class="line"><span class="comment">//修改</span></span><br><span class="line">buf_3[<span class="number">1</span>] = <span class="number">97</span>;</span><br><span class="line"><span class="comment">//查看字符串结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(buf_3.<span class="title function_">toString</span>(<span class="number">2</span>));<span class="comment">//查看2进制</span></span><br><span class="line"><span class="comment">//溢出</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">buf[<span class="number">0</span>] = <span class="number">361</span>;<span class="comment">//舍弃高位数字 因为最大只能255 0001 0110 1001 =&gt; 0110 1001</span></span><br><span class="line"><span class="comment">//中文</span></span><br><span class="line"><span class="keyword">let</span> buf = <span class="title class_">Buffer</span>.<span class="title function_">from</span>(<span class="string">&quot;你好&quot;</span>) <span class="comment">//结果是6个字节而不是2个字节 </span></span><br></pre></td></tr></table></figure><blockquote><p>注意:</p><ol><li><p>如果修改的数值超过 255 ，则超过 8 位数据会被舍弃</p></li><li><p>一个 utf-8 的字符 一般 占 3 个字节</p></li></ol></blockquote><h2 id="计算机基本组成">计算机基本组成</h2><p>CPU 内存 硬盘</p><p>内存：读写速度较快，断电丢失数据</p><p>硬盘：读写速度较慢，断电不丢失数据</p><p>主板：集成电路板</p><p>显卡：负责处理视频信号，当有信息需要呈现时，需要在屏幕中呈现就会将信息传递给显卡，显卡处理好后再传递给显示器。</p><p>机箱</p><p>外设</p><h2 id="程序运行的基本流程">程序运行的基本流程</h2><p>操作系统</p><p>windows, linux MacOS</p><p>操作系统也是一种应用程序，用来管理和调度硬件资源</p><p><img src="./nodejs(1).assets/image-20250609205140863.png" alt="image-20250609205140863"></p><p>英雄联盟是如何运行的？</p><p><img src="./nodejs(1).assets/image-20250609205248548.png" alt="image-20250609205248548"></p><p>小结：</p><p>程序一般保存再在硬盘中，软件安装的过程就是将程序写入硬盘的过程。</p><p>程序在运行时会加载进入内存，然后由CPU读取并执行程序</p><h2 id="进程和线程">进程和线程</h2><p><strong>进程</strong>：运行的程序</p><p>进程是程序的一次执行过程</p><p>可以通过任务管理器进行查看</p><p><strong>线程</strong>：</p><p>线程是一个进程中执行的一个执行流</p><p>一个线程是属于某个进程的</p><p>可以通过pslist -dmx [PID]</p><p><strong>线程和进程的关系</strong></p><p>比如说有一家蜜雪冰城的奶茶店</p><p>当开店的时候就好比是进程开始运行，有很多的员工，这里的员工就是线程</p><h2 id="fs模块">fs模块</h2><p>fs : file System</p><p>这个跟硬盘相关，fs模块可以实现与硬盘的交互。例如文件的创建，删除，重命名，移动，还有文件内容的写入，读取，以及文件夹的相关操作</p><p>fs 全称为 file system ，称之为 文件系统 ，是 Node.js 中的 内置模块 ，可以对计算机中的磁盘进行操 作。</p><p>本章节会介绍如下几个操作：</p><blockquote><p>文件写入</p><p>文件读取</p><p>文件移动与重命名</p><p>文件删除</p><p>文件夹操作</p><p>查看资源状态</p></blockquote><p>一、文件写入</p><p>文件写入就是将 数据 保存到 文件 中，我们可以使用如下几个方法来实现该效果</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>writeFile</td><td>异步写入</td></tr><tr><td>writeFileSync</td><td>同步写入</td></tr><tr><td>appendFile / appendFileSync</td><td>追加写入</td></tr><tr><td>createWriteStream</td><td>流式写入</td></tr></tbody></table><h3 id="1-1-writeFile异步写入">1 - 1. writeFile异步写入</h3><p><strong>语法</strong>: <code>fs.writeFile(file, data[, options], callback)</code></p><p><strong>参数说明</strong>:</p><ul><li><code>file</code>：文件名</li><li><code>data</code>：待写入的数据</li><li><code>options</code>（可选）：选项设置</li><li><code>callback</code>：写入回调</li></ul><p><strong>返回值</strong>: <code>undefined</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：</span></span><br><span class="line"><span class="comment"> * 新建一个文件，座右铭.txt 写入内容，三人行，则必有我师焉</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//1.导入fs模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.调用方法</span></span><br><span class="line">fs.<span class="title function_">writeFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;三人行，则必有我师焉&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入失败&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;写入成功&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>明明右键就可以新建，为什么我们要用代码？</p><p>举个例子：</p><p>比如我们有一个网站，我们希望记录用户每次访问我们网站的时间，并且记录在一个文件中。难道安排一个人吗？</p><p>vscode 也是借助了fs这个模块</p><h2 id="fs异步与同步">fs异步与同步</h2><p>小明和小红去打篮球，小红突然说要去测试，那这个时候如果我等他一起去那就是同步，但是如果我先去它后来那就是异步。</p><h3 id="1-2-writeFileSync-同步写入">1 - 2. writeFileSync 同步写入</h3><p><strong>语法</strong>：<code>fs.writeFileSync(file, data[, options])</code></p><p><strong>参数说明</strong>：参数与 <code>fs.writeFile</code> 大体一致，只是没有 <code>callback</code> 参数。</p><p><strong>返回值</strong>：<code>undefined</code></p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> data = <span class="string">&#x27;三人行，必有我师焉。&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> filePath = <span class="string">&#x27;./座右铭.txt&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">writeFileSync</span>(filePath, data);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Node.js 磁盘操作模式说明</strong>：</p><p>Node.js 中的磁盘操作是由其他线程完成的，结果的处理有两种模式：</p><ul><li><strong>同步处理</strong>：JavaScript 主线程会等待其他线程的执行结果，然后再继续执行主线程的代码，效率较低。</li><li><strong>异步处理</strong>：JavaScript 主线程不会等待其他线程的执行结果，直接执行后续的主线程代码，效率较好。</li></ul><h3 id="1-3-appendFile-appendFileSync-追加写入">1 - 3. appendFile / appendFileSync 追加写入</h3><p><code>appendFile</code> 的作用是在文件尾部追加内容，它的语法和 <code>writeFile</code> 完全相同。</p><p><strong>语法</strong>：</p><ul><li><code>fs.appendFile(file, data[, options], callback)</code></li><li><code>fs.appendFileSync(file, data[, options])</code></li></ul><p><strong>返回值</strong>：二者都为 <code>undefined</code></p><p><strong>实例代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// appendFile 示例</span></span><br><span class="line"><span class="keyword">const</span> appendData = <span class="string">&#x27;追加的数据内容&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> appendFilePath = <span class="string">&#x27;existing_file.txt&#x27;</span>;</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">appendFile</span>(appendFilePath, appendData, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;追加文件错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件追加成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// appendFileSync 示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> appendFileSyncData = <span class="string">&#x27;这是用同步方式追加的数据&#x27;</span>;</span><br><span class="line">    <span class="keyword">const</span> appendFileSyncPath = <span class="string">&#x27;another_existing_file.txt&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">appendFileSync</span>(appendFileSyncPath, appendFileSyncData);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步追加文件错误:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1-4-createWriteStream-流式写入">1 - 4. createWriteStream 流式写入</h3><p><strong>语法</strong>：<code>fs.createWriteStream(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>（可选）：选项配置</li></ul><p><strong>返回值</strong>：<code>Object</code></p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;./观书有感.txt&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;半亩方塘一鉴开\r\n&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;天光云影共徘徊\r\n&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;问渠那得清如许\r\n&#x27;</span>);</span><br><span class="line">ws.<span class="title function_">write</span>(<span class="string">&#x27;为有源头活水来\r\n&#x27;</span>);</span><br><span class="line"></span><br><span class="line">ws.<span class="title function_">end</span>();</span><br></pre></td></tr></table></figure><p><strong>特点说明</strong>：</p><ul><li><strong>资源消耗</strong>：程序打开一个文件是需要消耗资源的，流式写入可以减少打开关闭文件的次数。</li><li><strong>适用场景</strong>：流式写入方式适用于大文件写入或者频繁写入的场景，<code>writeFile</code>适合于写入频率较低的场景。</li></ul><h3 id="1-5-写入文件的场景">1 - 5. 写入文件的场景</h3><p>文件写入在计算机中是一个非常常见的操作，下面的场景都用到了文件写入：</p><ul><li>下载文件</li><li>安装软件</li><li>保存程序日志，如 Git</li><li>编辑器保存文件</li><li>视频录制</li></ul><p>当需要<strong>持久化保存数据</strong>的时候，应该想到<strong>文件写入</strong> 。</p><h3 id="二、文件读取">二、文件读取</h3><p>文件读取顾名思义，就是通过程序从文件中取出其中的数据，我们可以使用如下几种方式：</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>readFile</td><td>异步读</td></tr><tr><td>readFileSync</td><td>同步读</td></tr><tr><td>createReadStream</td><td>流式读</td></tr></tbody></table><h3 id="2-1-readFile-异步读取">2 - 1. <code>readFile</code> 异步读取</h3><p><strong>语法</strong>：<code>fs.readFile(path[, options], callback)</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：回调函数，第一个参数为错误对象 <code>err</code>（若读取无错误则为 <code>null</code>），第二个参数为读取到的数据 <code>data</code></li></ul><p><strong>返回值</strong>：<code>undefined</code></p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入 fs 模块</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 若未指定 encoding（如未指定 &#x27;utf -8&#x27;），data 是 Buffer 类型</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">fs.<span class="title function_">readFile</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);  <span class="comment">// 此时 data 是字符串类型</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li>第一种 <code>readFile</code> 调用方式，如果不指定编码（<code>'utf -8'</code>），<code>data</code> 是 <code>Buffer</code>（缓冲区）类型，它是一个类似数组的对象，用于表示二进制数据。</li><li>第二种 <code>readFile</code> 调用方式，指定了编码 <code>'utf -8'</code>，<code>data</code> 会被自动转换为字符串类型，方便直接处理文本内容。</li></ul><h3 id="2-2-readFileSync-同步读取">2 - 2. <code>readFileSync</code> 同步读取</h3><p><strong>语法</strong>：<code>fs.readFileSync(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>：选项配置（可选）</li></ul><p><strong>返回值</strong>：读取到的数据（是 <code>Buffer</code> 类型或者根据指定编码转换后的字符串类型）</p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> data1 = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data1);  <span class="comment">// 未指定 encoding，是 Buffer 类型</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> data2 = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./座右铭.txt&#x27;</span>, <span class="string">&#x27;utf -8&#x27;</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data2);  <span class="comment">// 指定了 &#x27;utf -8&#x27;，是字符串类型</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><code>readFileSync</code> 是同步读取文件，即 JavaScript 主线程会等待文件读取完成后才继续执行后续代码。</li><li>它的返回值直接是读取到的数据，不像 <code>readFile</code> 通过回调函数获取数据。</li></ul><h3 id="2-3-createReadStream-流式读取">2 - 3. <code>createReadStream</code> 流式读取</h3><p><strong>语法</strong>：<code>fs.createReadStream(path[, options])</code></p><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>options</code>：选项配置（可选）</li></ul><p><strong>返回值</strong>：<code>ReadStream</code> 对象</p><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> readStream = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;./较大的文本文件.txt&#x27;</span>, <span class="string">&#x27;utf -8&#x27;</span>);  <span class="comment">// 假设是一个较大的文本文件</span></span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function">(<span class="params">chunk</span>) =&gt;</span> &#123;  <span class="comment">// &#x27;data&#x27; 事件，当有数据可读时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取到数据块：&#x27;</span>, chunk);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;  <span class="comment">// &#x27;end&#x27; 事件，当读取到文件末尾时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取结束&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">readStream.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;  <span class="comment">// &#x27;error&#x27; 事件，当读取发生错误时触发</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件读取错误：&#x27;</span>, err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li>流式读取适合读取大文件，它不会一次性将整个文件读入内存，而是分块读取（<code>chunk</code> 表示读取到的数据块）。</li><li>通过监听 <code>ReadStream</code> 对象的 <code>'data'</code>、<code>'end'</code>、<code>'error'</code> 等事件来处理读取过程中的不同情况。</li></ul><h3 id="2-4读取文件应用场景">2 - 4读取文件应用场景</h3><ul><li>电脑开机</li><li>程序运行</li><li>编辑器打开文件</li><li>查看图片</li><li>播放视频</li><li>播放音乐</li><li>Git查看日志</li><li>上传文件</li><li>查看聊天记录</li></ul><p>复制文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 需求：复制【座右铭.txt】</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> process = <span class="built_in">require</span>(<span class="string">&#x27;process&#x27;</span>)</span><br><span class="line"><span class="comment">//方式一readFile</span></span><br><span class="line"><span class="comment">//读取文件内容</span></span><br><span class="line"><span class="comment">// let data = fs.readFileSync(&#x27;座右铭.txt&#x27;);</span></span><br><span class="line"><span class="comment">// //写入文件</span></span><br><span class="line"><span class="comment">// fs.writeFileSync(&#x27;座右铭1.txt&#x27;, data);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="title function_">memoryUsage</span>());<span class="comment">//rss</span></span><br><span class="line"><span class="comment">//方式二readStream</span></span><br><span class="line"><span class="keyword">let</span> rs = fs.<span class="title function_">createReadStream</span>(<span class="string">&#x27;座右铭.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> ws = fs.<span class="title function_">createWriteStream</span>(<span class="string">&#x27;座右铭2.txt&#x27;</span>);</span><br><span class="line">rs.<span class="title function_">pipe</span>(ws);<span class="comment">//这个pipe管道 这个用的不是特别多知道什么意思即可</span></span><br><span class="line">rs.<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;复制完成&#x27;</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(process.<span class="title function_">memoryUsage</span>());</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="三、文件移动与重命名">三、文件移动与重命名</h3><p>在 Node.js 中，我们可以使用 <code>rename</code> 或 <code>renameSync</code> 来移动或重命名 文件或文件夹。</p><p>语法：</p><ul><li><code>fs.rename(oldPath, newPath, callback)</code></li><li><code>fs.renameSync(oldPath, newPath)</code></li></ul><p>参数说明：</p><ul><li><code>oldPath</code>：文件当前的路径</li><li><code>newPath</code>：文件新的路径</li><li><code>callback</code>：操作后的回调</li></ul><h3 id="代码示例：">代码示例：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fs.<span class="title function_">rename</span>(<span class="string">&#x27;../观书有感.txt&#x27;</span>, <span class="string">&#x27;../论语/观书有感.txt&#x27;</span>, <span class="function">(<span class="params">err</span>) =&gt;</span>&#123;</span><br><span class="line">       <span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;移动完成&#x27;</span>)</span><br><span class="line">     &#125;);</span><br><span class="line"></span><br><span class="line">     fs.<span class="title function_">renameSync</span>(<span class="string">&#x27;../座右铭.txt&#x27;</span>, <span class="string">&#x27;../论语/我的座右铭.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="四、文件删除">四、文件删除</h3><p>在 Node.js 中，我们可以使用 <code>unlink</code> 或 <code>unlinkSync</code> 来删除文件</p><p><strong>语法</strong>：</p><ul><li><code>fs.unlink(path, callback)</code></li><li><code>fs.unlinkSync(path)</code></li><li>也可以使用rm rmSync</li></ul><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件路径</li><li><code>callback</code>：操作后的回调</li></ul><p><strong>代码示例</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步删除文件示例</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> filePath = <span class="string">&#x27;./要删除的文件.txt&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">unlink</span>(filePath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;文件删除错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件删除成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步删除文件示例</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> syncFilePath = <span class="string">&#x27;./另一个要删除的文件.txt&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">unlinkSync</span>(syncFilePath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步删除文件错误:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、文件夹操作">五、文件夹操作</h3><p>借助 Node.js 的能力，我们可以对文件夹进行创建、读取、删除等操作</p><table><thead><tr><th>方法</th><th>说明</th></tr></thead><tbody><tr><td>mkdir / mkdirSync</td><td>创建文件夹</td></tr><tr><td>readdir / readdirSync</td><td>读取文件夹</td></tr><tr><td>rmdir / rmdirSync</td><td>删除文件夹</td></tr></tbody></table><h3 id="5-1-mkdir-创建文件夹">5 - 1 mkdir 创建文件夹</h3><p>在 Node.js 中，我们可以使用 <code>mkdir</code> 或 <code>mkdirSync</code> 来创建文件夹</p><p><strong>语法</strong>：</p><ul><li><code>fs.mkdir(path[, options], callback)</code></li><li><code>fs.mkdirSync(path[, options])</code></li></ul><p><strong>参数说明</strong>：</p><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><p><strong>示例代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步创建文件夹</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> folderPath = <span class="string">&#x27;./new_folder&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">mkdir</span>(folderPath, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建文件夹错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件夹创建成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步创建文件夹</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> syncFolderPath = <span class="string">&#x27;./another_new_folder&#x27;</span>;</span><br><span class="line">    fs.<span class="title function_">mkdirSync</span>(syncFolderPath);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;同步创建文件夹错误:&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//递归创建</span></span><br><span class="line"><span class="keyword">const</span> folderPath = <span class="string">&#x27;./a/b/c&#x27;</span>;</span><br><span class="line">fs.<span class="title function_">mkdir</span>(folderPath, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;创建文件夹错误:&#x27;</span>, err);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;文件夹创建成功!&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.3读取文件夹 read dir</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;./资源&#x27;</span>,<span class="function">(<span class="params">err,data</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;读取失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//2-4删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./html&#x27;</span>,<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除失败&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-2-readdir-读取文件夹">5 - 2 <code>readdir</code> 读取文件夹</h3><p>在 Node.js 中，我们可以使用 <code>readdir</code> 或 <code>readdirSync</code> 来读取文件夹</p><h4 id="语法">语法:</h4><ul><li><code>fs.readdir(path[, options], callback)</code></li><li><code>fs.readdirSync(path[, options])</code></li></ul><h4 id="参数说明">参数说明:</h4><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><h4 id="示例代码">示例代码:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步读取</span></span><br><span class="line">fs.<span class="title function_">readdir</span>(<span class="string">&#x27;../论语/&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步读取</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;../论语/&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><h3 id="5-3-rndir-删除文件夹">5 - 3 rndir 删除文件夹</h3><p>在 Node.js 中，我们可以使用 <code>rndir</code> 或 <code>rndirSync</code> 来删除文件夹</p><h4 id="语法-2">语法:</h4><ul><li><code>fs.rmdir(path[, options], callback)</code></li><li><code>fs.rmdirSync(path[, options])</code></li></ul><h4 id="参数说明-2">参数说明:</h4><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><h4 id="示例代码-2">示例代码:</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//异步删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./page&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> err;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;删除成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//异步递归删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdir</span>(<span class="string">&#x27;./1&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(err) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;递归删除&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//同步递归删除文件夹</span></span><br><span class="line">fs.<span class="title function_">rmdirSync</span>(<span class="string">&#x27;./x&#x27;</span>, &#123;<span class="attr">recursive</span>: <span class="literal">true</span>&#125;)</span><br></pre></td></tr></table></figure><h4 id="注意">注意:</h4><ul><li><code>rmdir</code> 和 <code>rmdirSync</code> 只能删除空文件夹，如果要删除非空文件夹，需要先删除文件夹内的所有文件和子文件夹。</li><li>在实际应用中，为了确保安全，建议在删除文件夹之前先确认其内容是否为预期，避免误删重要数据。</li></ul><h3 id="六、查看资源状态">六、查看资源状态</h3><p>在 Node.js 中，我们可以使用 <code>stat</code> 或 <code>statSync</code> 来查看资源的详细信息</p><h4 id="语法：">语法：</h4><ul><li><code>fs.stat(path[, options], callback)</code></li><li><code>fs.statSync(path[, options])</code></li></ul><h4 id="参数说明：">参数说明：</h4><ul><li><code>path</code>：文件夹路径</li><li><code>options</code>：选项配置（可选）</li><li><code>callback</code>：操作后的回调</li></ul><h4 id="示例代码：">示例代码：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 异步获取状态</span></span><br><span class="line">fs.<span class="title function_">stat</span>(<span class="string">&#x27;./data.txt&#x27;</span>, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) <span class="keyword">throw</span> err;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 同步获取状态</span></span><br><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">statSync</span>(<span class="string">&#x27;./data.txt&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="说明：">说明：</h4><p><code>stat</code> 方法返回的 <code>data</code> 对象包含了文件或文件夹的各种信息，例如：</p><ul><li><code>data.isFile()</code>：判断是否为文件</li><li><code>data.isDirectory()</code>：判断是否为目录（文件夹）</li><li><code>data.size</code>：文件大小（字节数）</li><li><code>data.birthtime</code>：创建时间</li><li><code>data.mtime</code>：最后修改时间等。</li></ul><p>通过这些信息可以更深入地了解文件或文件夹的属性和状态，以便进行相应的处理操作。</p><h4 id="结果值对象结构：">结果值对象结构：</h4><ul><li>size：文件体积</li><li>birthtime：创建时间</li><li>mtime：最后修改时间</li><li>isFile：检测是否为文件</li><li>isDirectory：检测是否为文件夹</li><li>…</li></ul><h3 id="七、相对路径问题">七、相对路径问题</h3><p><code>fs</code> 模块对资源进行操作时，路径的写法有两种：</p><ul><li>相对路径<ul><li><code>./座右铭.txt</code> ：当前目录下的座右铭.txt</li><li><code>座右铭.txt</code> ：等同于上面的写法</li><li><code>../座右铭.txt</code> ：当前目录的上一级目录中的座右铭.txt</li></ul></li><li>绝对路径<ul><li><code>D:/Program Files</code> ：windows 系统下的绝对路径</li><li><code>/usr/bin</code> ：Linux 系统下的绝对路径</li></ul></li></ul><p>相对路径中所谓的 <strong>当前目录</strong> ，指的是 <strong>命令行的工作目录</strong> ，而并非是文件的所在目录。所以当命令行的工作目录与文件所在目录不一致时，会出现一些 BUG。</p><h3 id="八、-dirname">八、__dirname</h3><ul><li><code>__dirname</code> 与 <code>require</code> 类似，都是 Node.js 环境中的“全局”变量。</li><li><code>__dirname</code> 保存着当前文件所在目录的绝对路径，可以使用 <code>__dirname</code> 与文件名拼接成绝对路径。</li></ul><h4 id="代码示例：-2">代码示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> data = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/data.txt&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br></pre></td></tr></table></figure><ul><li>使用 <code>fs</code> 模块的时候，尽量使用 <code>__dirname</code> 将路径转化为绝对路径，这样可以避免相对路径产生的 Bug</li></ul><h3 id="练习：批量重命名">练习：批量重命名</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入fs</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取code文件夹</span></span><br><span class="line"><span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;./code&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历数组</span></span><br><span class="line">files.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//拆分文件名</span></span><br><span class="line">  <span class="keyword">let</span> data = item.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> [num, name] = data;</span><br><span class="line">  <span class="comment">//判断</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Number</span>(num) &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    num = <span class="string">&#x27;0&#x27;</span> + num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//创建新的文件名</span></span><br><span class="line">  <span class="keyword">let</span> newName = num + <span class="string">&#x27;-&#x27;</span> + name;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newName);</span><br><span class="line">  <span class="comment">//重命名</span></span><br><span class="line">  fs.<span class="title function_">renameSync</span>(<span class="string">`./code/<span class="subst">$&#123;item&#125;</span>`</span>, <span class="string">`./code/<span class="subst">$&#123;newName&#125;</span>`</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果把02删除了 能不能把03变02，04变03？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取 code 文件夹</span></span><br><span class="line"><span class="keyword">const</span> files = fs.<span class="title function_">readdirSync</span>(<span class="string">&#x27;./code&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按照文件名中的序号进行排序（假设文件名格式类似 &quot;01 - something&quot;）</span></span><br><span class="line">files.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> numA = <span class="built_in">parseInt</span>(a.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">const</span> numB = <span class="built_in">parseInt</span>(b.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>)[<span class="number">0</span>]);</span><br><span class="line">  <span class="keyword">return</span> numA - numB;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重新命名文件</span></span><br><span class="line">files.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> newNum = index + <span class="number">1</span>; <span class="comment">// 新的序号从 1 开始</span></span><br><span class="line">  <span class="comment">// 补零处理</span></span><br><span class="line">  <span class="keyword">if</span> (newNum &lt; <span class="number">10</span>) &#123;</span><br><span class="line">    newNum = <span class="string">&#x27;0&#x27;</span> + newNum;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> data = item.<span class="title function_">split</span>(<span class="string">&#x27;-&#x27;</span>);</span><br><span class="line">  <span class="keyword">let</span> [oldNum, name] = data;</span><br><span class="line">  <span class="keyword">let</span> newName = newNum + <span class="string">&#x27;-&#x27;</span> + name;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`重命名：<span class="subst">$&#123;item&#125;</span> -&gt; <span class="subst">$&#123;newName&#125;</span>`</span>);</span><br><span class="line">  fs.<span class="title function_">renameSync</span>(<span class="string">`./code/<span class="subst">$&#123;item&#125;</span>`</span>, <span class="string">`./code/<span class="subst">$&#123;newName&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="path-模块">path 模块</h2><p>path 模块提供了 <strong>操作路径</strong> 的功能，我们将介绍如下几个较为常用的几个 API：</p><table><thead><tr><th>API</th><th>说明</th></tr></thead><tbody><tr><td>path.resolve</td><td>拼接规范的绝对路径 <strong>常用</strong></td></tr><tr><td>path.sep</td><td>获取操作系统的路径分隔符</td></tr><tr><td>path.parse</td><td>解析路径并返回对象</td></tr><tr><td>path.basename</td><td>获取路径的基础名称</td></tr><tr><td>path.dirname</td><td>获取路径的目录名</td></tr><tr><td>path.extname</td><td>获得路径的扩展名</td></tr></tbody></table><h4 id="代码示例：-3">代码示例：</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//resolve</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname,<span class="string">&#x27;index.html&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径分隔符</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="property">sep</span>);<span class="comment">//window \ linux /</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接绝对路径</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;test&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析路径</span></span><br><span class="line"><span class="keyword">let</span> pathname = <span class="string">&#x27;D:/program file/nodejs/node.exe&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">parse</span>(pathname));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径基础名称</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">basename</span>(pathname))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径的目录名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">dirname</span>(pathname));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取路径的扩展名</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(path.<span class="title function_">extname</span>(pathname));</span><br></pre></td></tr></table></figure><h2 id="HTTPS协议">HTTPS协议</h2><h3 id="一、概念">一、概念</h3><p>HTTP（hypertext transport protocoI）协议；中文叫超文本传输协议。 是一种基于 TCP/IP 的应用层通信协议。 这个协议详细规定了浏览器和万维网服务器之间互相通信的规则。 协议中主要规定了两个方面的内容：</p><ul><li>客户端：用来向服务器发送数据，可以被称之为请求报文。</li><li>服务端：向客户端返回数据，可以被称之为响应报文。</li></ul><p><strong>报文</strong>：可以简单理解为就是一堆字符串。</p><p>【离婚协议，保密协议 https协议就是浏览器和服务器之间的协议】</p><p>如果我们想看到请求和响应的报文我们要下载一个软件叫fiddler</p><p><img src="./nodejs(1).assets/image-20250609221641878.png" alt="image-20250609221641878"></p><h3 id="二、请求报文的组成">二、请求报文的组成</h3><ul><li>请求行</li><li>请求头</li><li>空行</li><li>请求体</li></ul><h3 id="三、HTTP-的请求行">三、HTTP 的请求行</h3><ul><li><p>请求方法（get、post、put、delete等）</p></li><li><p>请求 URL（统一资源定位器）</p><ul><li><p>例如：</p><p><a href="http://www.baidu.com:80/index.html?a=100&amp;b=200#logo">http://www.baidu.com:80/index.html?a=100&amp;b=200#logo</a></p><ul><li>http: 协议（https、ftp、ssh等）</li><li><a href="http://www.baidu.com/">www.baidu.com</a> 域名</li><li>80 端口号</li><li>/index.html 路径</li><li>a=100&amp;b=200 查询字符串</li><li>#logo 哈希（锚点链接）</li></ul></li></ul></li><li><p>HTTP 协议版本号</p></li></ul><p>查询字符串和路径有什么区别？比如我要去买煎饼果子，这个就是路径，我说我煎饼果子要加辣椒要加根肠那就查询字符串</p><p><img src="./nodejs(1).assets/image-20250609222915592.png" alt="image-20250609222915592"></p><h3 id="四、HTTP-请求头">四、HTTP 请求头</h3><p>格式：『头名：头值』 常见的请求头有：</p><table><thead><tr><th>请求头</th><th>解释</th></tr></thead><tbody><tr><td>Host</td><td>主机名</td></tr><tr><td>Connection</td><td>连接的设置 keep - alive（保持连接）；close（关闭连接）</td></tr><tr><td>Cache - Control</td><td>缓存控制 max - age = 0（没有缓存）</td></tr><tr><td>Upgrade - Insecure - Requests</td><td>将网页中的 http 请求转化为 https 请求（很少用）老网站升级</td></tr><tr><td>User - Agent</td><td>用户代理，客户端字符串标识，服务器可以通过这个标识来识别这个请求来自哪个客户端，一般在 PC 端和手机端的区分</td></tr><tr><td>Accept</td><td>设置浏览器接收的数据类型</td></tr><tr><td>Accept - Encoding</td><td>设置接收的压缩方式</td></tr><tr><td>Accept - Language</td><td>设置接收的语言 q = 0.7 为喜好系数，满分为 1</td></tr><tr><td>Cookie</td><td>后面单独讲</td></tr></tbody></table><h3 id="五、HTTP-的请求体">五、HTTP 的请求体</h3><p>请求体内容的格式是非常灵活的， （可以是空）==&gt; GET 请求， （也可以是字符串，还可以是 JSON）===&gt; POST 请求 例如：</p><ul><li>字符串：<code>keywords=手机&amp;price=2000</code></li><li>JSON：<code>&#123;&quot;keywords&quot;:&quot;手机&quot;,&quot;price&quot;:2000&#125;</code></li></ul><h3 id="六、响应报文的组成">六、响应报文的组成</h3><ul><li>响应行</li></ul><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">HTTP</span>/<span class="number">1</span>.<span class="number">1</span> <span class="number">200</span> OK</span><br></pre></td></tr></table></figure><ul><li>HTTP/1.1：HTTP 协议版本号</li><li>200：响应状态码 404 Not Found 500 Internal Server Error 还有一些状态码，参考：<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status">https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Status</a></li><li>OK：响应状态描述</li></ul><blockquote><p>响应状态码和响应字符串关系是一一对应的。</p></blockquote><ul><li>响应头</li></ul><table><thead><tr><th style="text-align:center">响应头</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">Cache - Control</td><td style="text-align:center">缓存控制 （private 私有，只允许客户端缓存数据）</td></tr><tr><td style="text-align:center">Connection</td><td style="text-align:center">链接设置</td></tr><tr><td style="text-align:center">Content - Type</td><td style="text-align:center">设置响应体的数据类型以及字符集（如：text/html;charset=utf - 8 ，表示响应体为 html，字符集 utf - 8）</td></tr><tr><td style="text-align:center">Content - Length</td><td style="text-align:center">响应体的长度，单位为字节</td></tr></tbody></table><ul><li><strong>空行</strong></li><li><strong>响应体</strong> 响应体内容的类型是非常灵活的，常见的类型有 HTML、CSS、JS、图片、JSON</li></ul><h3 id="七、创建-HTTP-服务">七、创建 HTTP 服务</h3><p>地址 ==》 寻找收件人</p><p><strong>IP</strong> ==》 寻找网络设备</p><p>IP也称为【IP地址】，本身是一个数字标识 例如 192.168.1.3</p><p>IP 用来标识网络中的设备，实现设备间通信</p><p><img src="./nodejs(1).assets/image-20250610001641463.png" alt="image-20250610001641463"></p><p><strong>IP的分类</strong></p><p>32Bit IPV4  已经不够</p><p>如何解决？</p><p>共享IP</p><p>区域共享  家庭共享</p><p>局域网IP（又称之为私网IP）在这个网络里面我们的设备是可以相互通信的，比如手机可以给电脑发一个文件，电脑可以发一个视频给手机，这些都是可以的。但是如果你想跟小伙伴开黑，打视频那这个是做不到的。必须连接互联网，去通信公司办理业务，国内主要有三家电信，联通，移动。师傅会上门帮你的路由器接一根线，然后你的路由器就会得到广域网IP或公网IP，我们说所的共享IP其实是公网IP</p><p><strong>本地回环IP地址</strong></p><p>127.0.0.1 其实就是本机</p><p>127.0.0.1~127.255.255.254</p><p><img src="./nodejs(1).assets/image-20250610083606917.png" alt="image-20250610083606917"></p><p>IP标准分类 ： <a href="https://zhuanlan.zhihu.com/p/193729352">https://zhuanlan.zhihu.com/p/193729352</a></p><p><strong>端口</strong></p><p>端口举例</p><p><img src="./nodejs(1).assets/image-20250610083823911.png" alt="image-20250610083823911"></p><p>应用程序的数字标识</p><p>一台现代计算机有65536 个端口（0~65535）</p><p>一个应用程序可以使用一个或多个端口</p><p>端口的主要作用：实现不同主机应用程序之间的通信</p><p>身份转换~ 到后端啦</p><p>使用 nodejs 创建 HTTP 服务</p><h4 id="7-1-操作步骤">7.1 操作步骤</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1. 导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建服务对象 create 创建 server 服务</span></span><br><span class="line"><span class="comment">// request 意为请求，是对请求报文的封装对象，通过 request 对象可以获得请求报文的数据</span></span><br><span class="line"><span class="comment">// response 意为响应，是对响应报文的封装对象，通过 response 对象可以设置响应报文</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;Hello HTTP server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 监听端口，启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动，端口 9000 监听中...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="7-2测试">7.2测试</h4><p>浏览器请求对应端口<br><a href="http://127.0.0.1:9000">http://127.0.0.1:9000</a></p><h4 id="7-3注意事项">7.3注意事项</h4><p>1.命令行ctr1+c停止服务<br>2.当服务启动后，更新代码必须重启服务才能生效<br>3.响应内容中文乱码的解决办法</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.setHeader(<span class="symbol">&#x27;content</span>-<span class="keyword">type</span><span class="string">&#x27;,&#x27;</span>text/html;charset=utf-<span class="number">8</span>&#x27;);</span><br></pre></td></tr></table></figure><p>4.端口号被占用</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Error</span><span class="symbol">:listen</span> <span class="variable constant_">EADDRINUSE</span><span class="symbol">:address</span> already <span class="keyword">in</span> use <span class="number">9000</span></span><br></pre></td></tr></table></figure><p>1)关闭当前正在运行监听端口的服务（使用较多）<br>2)修改其他端口号</p><h4 id="HTTP协议默认端口">HTTP协议默认端口</h4><ul><li>HTTP协议默认端口是80。</li><li>HTTPS协议的默认端口是443。</li><li>HTTP服务开发常用端口有3000、8080、8090、9000等。</li></ul><h4 id="端口被占用处理">端口被占用处理</h4><p>如果端口被其他程序占用，可以使用<strong>资源监视器</strong>找到占用端口的程序，然后使用<strong>任务管理器</strong>关闭对应的程序。</p><h3 id="八、浏览器查看HTTP报文">八、浏览器查看HTTP报文</h3><p>f12</p><h3 id="九、获取HTTP请求报文">九、获取HTTP请求报文</h3><p>想要获取请求的数据，需要通过request对象</p><table><thead><tr><th>含义</th><th>语法</th><th>重点掌握</th></tr></thead><tbody><tr><td>请求方法</td><td>request.method</td><td>*</td></tr><tr><td>请求版本</td><td>request.httpVersion</td><td></td></tr><tr><td>请求路径</td><td>request.url</td><td>*</td></tr><tr><td>URL 路径</td><td>require(‘url’).parse(request.url).pathname</td><td>*</td></tr><tr><td>URL 查询字符串</td><td>require(‘url’).parse(request.url, true).query</td><td>*</td></tr><tr><td>请求头</td><td>request.headers</td><td>*</td></tr><tr><td>请求体</td><td>request.on(‘data’, function(chunk){})request.on(‘end’, function(){});</td><td></td></tr></tbody></table><h3 id="注意事项：">注意事项：</h3><ol><li>request.url 只能获取路径以及查询字符串，无法获取 URL 中的域名以及协议的内容</li><li>request.headers 将请求信息转化成一个对象，并将属性名都转化成了『小写』</li><li>关于路径：如果访问网站的时候，只填写了 IP 地址或者是域名信息，此时请求的路径为『 / 』</li><li>关于 favicon.ico：这个请求是属于浏览器自动发送的请求</li></ol><p><strong>9.1 练习</strong></p><p>按照以下要求搭建 HTTP 服务</p><table><thead><tr><th>请求类型(方法)</th><th>请求地址</th><th>响应体结果</th></tr></thead><tbody><tr><td>get</td><td>/login</td><td>登录页面</td></tr><tr><td>get</td><td>/reg</td><td>注册页面</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1、引入http模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&quot;http&quot;</span>);</span><br><span class="line"><span class="comment">//2、建立服务</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;url,method&#125; = request; <span class="comment">//对象的解构赋值</span></span><br><span class="line">    <span class="comment">//设置响应头信息</span></span><br><span class="line">    <span class="comment">//解决中文乱码</span></span><br><span class="line">    response.<span class="title function_">setHeader</span>(<span class="string">&quot;Content-Type&quot;</span>,<span class="string">&quot;text/html;charset=utf-8&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(url == <span class="string">&quot;/register&quot;</span> &amp;&amp; method == <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;注册页面&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(url==<span class="string">&quot;/login&quot;</span> &amp;&amp; method == <span class="string">&quot;GET&quot;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;登录页面&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//3、监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务启动中....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="十、设置-HTTP-响应报文">十、设置 HTTP 响应报文</h3><table><thead><tr><th>作用</th><th>语法</th></tr></thead><tbody><tr><td>设置响应状态码</td><td><code>response.statusCode</code></td></tr><tr><td>设置响应状态描述</td><td><code>response.statusMessage</code>（用的非常少）</td></tr><tr><td>设置响应头信息</td><td><code>response.setHeader('头名', '头值')</code></td></tr><tr><td>设置响应体</td><td><code>response.write('xx')``response.end('xxx')</code></td></tr></tbody></table><h3 id="write-和-end-的两种使用情况："><code>write</code> 和 <code>end</code> 的两种使用情况：</h3><h4 id="1-write-和-end-的结合使用（响应体相对分散）">1. <code>write</code> 和 <code>end</code> 的结合使用（响应体相对分散）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">write</span>(<span class="string">&#x27;xx&#x27;</span>);</span><br><span class="line">response.<span class="title function_">end</span>(); <span class="comment">// 每一个请求，在处理的时候必须要执行 end 方法的</span></span><br></pre></td></tr></table></figure><h4 id="2-单独使用-end-方法（响应体相对集中）">2. 单独使用 <code>end</code> 方法（响应体相对集中）</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="10-1-练习">10.1 练习</h3><p>搭建 HTTP 服务，响应一个 4 行 3 列的表格，并且要求表格有隔行换色效果，且点击单元格能高亮显示</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  response.<span class="title function_">end</span>(<span class="string">`</span></span><br><span class="line"><span class="string">    &lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">    &lt;html lang=&quot;en&quot;&gt;</span></span><br><span class="line"><span class="string">    &lt;head&gt;</span></span><br><span class="line"><span class="string">      &lt;meta charset=&quot;UTF - 8&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;meta http - equiv=&quot;X - UA - Compatible&quot; content=&quot;IE = edge&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;meta name=&quot;viewport&quot; content=&quot;width = device - width, initial - scale = 1.0&quot;&gt;</span></span><br><span class="line"><span class="string">      &lt;title&gt;Document&lt;/title&gt;</span></span><br><span class="line"><span class="string">      &lt;style&gt;</span></span><br><span class="line"><span class="string">        td&#123;</span></span><br><span class="line"><span class="string">          padding: 20px 40px;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        table tr:nth-child(odd)&#123;</span></span><br><span class="line"><span class="string">          background: #819dc0;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        table tr:nth-child(even)&#123;</span></span><br><span class="line"><span class="string">          background: #f5de19;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        table, td&#123;</span></span><br><span class="line"><span class="string">          border: 1px solid #000;</span></span><br><span class="line"><span class="string">          border-collapse: collapse;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;</span></span><br><span class="line"><span class="string">    &lt;/head&gt;</span></span><br><span class="line"><span class="string">    &lt;body&gt;</span></span><br><span class="line"><span class="string">      &lt;table border=&quot;1&quot;&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">        &lt;tr&gt;</span></span><br><span class="line"><span class="string">          &lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;</span></span><br><span class="line"><span class="string">        &lt;/tr&gt;</span></span><br><span class="line"><span class="string">      &lt;/table&gt;</span></span><br><span class="line"><span class="string">      &lt;script&gt;</span></span><br><span class="line"><span class="string">        //获取所有的 td</span></span><br><span class="line"><span class="string">        let tds = document.querySelectorAll(&#x27;td&#x27;);</span></span><br><span class="line"><span class="string">        //遍历</span></span><br><span class="line"><span class="string">        tds.forEach(item =&gt; &#123;</span></span><br><span class="line"><span class="string">          item.onclick = function () &#123;</span></span><br><span class="line"><span class="string">            this.style.background = &#x27;#222&#x27;;</span></span><br><span class="line"><span class="string">          &#125;</span></span><br><span class="line"><span class="string">        &#125;)</span></span><br><span class="line"><span class="string">      &lt;/script&gt;</span></span><br><span class="line"><span class="string">    &lt;/body&gt;</span></span><br><span class="line"><span class="string">    &lt;/html&gt;</span></span><br><span class="line"><span class="string">  `</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="核心代码解释：">核心代码解释：</h3><ul><li>在 HTML 表格标签<code>&lt;table&gt;</code>中，通过<code>nth - child(odd)</code>和<code>nth - child(even)</code>实现了表格的隔行换色效果。</li><li>在<code>&lt;script&gt;</code>标签中，通过<code>document.querySelectorAll('td')</code>获取到了所有的<code>&lt;td&gt;</code>标签元素，并通过遍历遍历为每个<code>td</code>元素添加了<code>onclick</code>事件。</li><li>在<code>onclick</code>事件中，通过<code>this.style.background = '#222'</code>实现了点击单元格时的高亮显示效果。</li></ul><h3 id="HTTP-服务搭建核心逻辑：">HTTP 服务搭建核心逻辑：</h3><ul><li>首先导入<code>http</code>模块。</li><li>然后通过<code>http.createServer</code>创建了一个 HTTP 服务，在这个服务的回调函数中，返回了包含上述 HTML 代码的响应体。</li><li>最后通过<code>server.listen</code>监听了<code>8080</code>端口，并在服务启动时打印了提示信息。</li></ul><p>优化：</p><p>有没有办法解决在这里面写html代码有高亮和提示？</p><p>table.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF - 8&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http</span> <span class="attr">-</span> <span class="attr">equiv</span>=<span class="string">&quot;X - UA - Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE = edge&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width = device - width, initial - scale = 1.0&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(odd)&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#819dc0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(even)&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">background</span>: <span class="number">#f5de19</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">table</span>, <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">      </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//获取所有的 td</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> tds = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;td&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//遍历</span></span></span><br><span class="line"><span class="language-javascript">        tds.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          item.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">style</span>.<span class="property">background</span> = <span class="string">&#x27;#222&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>node.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//读取文件内容</span></span><br><span class="line">  <span class="keyword">let</span> html = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/table.html&#x27;</span>, <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">  response.<span class="title function_">end</span>(html);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">8080</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="十一、网页资源的基本加载过程">十一、网页资源的基本加载过程</h3><p>网页资源的加载都是循序渐进的，首先获取 HTML 的内容， 然后解析 HTML 在发送其他资源的请求，如 CSS，Javascript，图片等。 理解了这个内容对于后续的学习与成长有非常大的帮助</p><p>如果要对上面哪个练习进行进一步的拆分：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//获取请求url的路径</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(pathname === <span class="string">&#x27;/&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> html = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/10_table.html&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(html); <span class="comment">//设置响应体</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname === <span class="string">&#x27;/index.css&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> css = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.css&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(css); <span class="comment">//设置响应体</span></span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(pathname === <span class="string">&#x27;/index.js&#x27;</span>)&#123;</span><br><span class="line">    <span class="comment">//读取文件内容</span></span><br><span class="line">    <span class="keyword">let</span> js = fs.<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.js&#x27;</span>);</span><br><span class="line">    response.<span class="title function_">end</span>(js); <span class="comment">//设置响应体</span></span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="十二、静态资源服务">十二、静态资源服务</h3><p><code>静态资源</code>是指 内容长时间不发生改变的资源 ，例如图片，视频，CSS 文件，JS文件，HTML文件，字体文 件等</p><p><code>动态资源</code>是指 内容经常更新的资源 ，例如百度首页，网易首页，京东搜索列表页面等</p><h3 id="12-1网站根目录或静态资源目录">**12.1网站根目录或静态资源目录 **</h3><p>HTTP 服务在哪个文件夹中寻找静态资源，那个文件夹就是 静态资源目录 ，也称之为 网站根目录</p><blockquote><p>思考：vscode 中使用 live-server 访问 HTML 时， 它启动的服务中网站根目录是谁？</p></blockquote><p>以打开文件夹</p><h3 id="12-2-网页中的-URL">12.2 网页中的 URL</h3><p>网页中的 URL 主要分为两大类：相对路径与绝对路径</p><h4 id="12-2-1-绝对路径">12.2.1 绝对路径</h4><p>绝对路径可靠性强，而且相对容易理解，在项目中运用较多</p><table><thead><tr><th>形式</th><th>特点</th></tr></thead><tbody><tr><td><code>http://yjy.com/web</code></td><td>直接向目标资源发送请求，容易理解。网站的外链会用到此形式</td></tr><tr><td><code>//yjy.com/web</code></td><td>与页面 URL 的协议拼接形成完整 URL 再发送请求。大型网站用的比较多</td></tr><tr><td><code>/web</code></td><td>与页面 URL 的协议、主机名、端口拼接形成完整 URL 再发送请求。中小型网站</td></tr></tbody></table><h4 id="12-2-2-相对路径">12.2.2 相对路径</h4><p>相对路径在发送请求时，需要与当前页面 URL 路径进行 <code>计算</code>，得到完整 URL 后，再发送请求，学习阶段用的较多</p><p>例如当前网页 url 为 <code>http://www.yjy.com/course/h5.html</code></p><table><thead><tr><th>形式</th><th>最终的 URL</th></tr></thead><tbody><tr><td><code>.css/app.css</code></td><td><code>http://www.yjy.com/course/css/app.css</code></td></tr><tr><td><code>js/app.js</code></td><td><code>http://www.yjy.com/course/js/app.js</code></td></tr><tr><td><code>../img/logo.png</code></td><td><code>http://www.yjy.com/img/logo.png</code></td></tr><tr><td><code>../../mp4/show.mp4</code></td><td><code>http://www.yjy.com/mp4/show.mp4</code></td></tr></tbody></table><h4 id="12-2-3-网页中使用-URL-的场景小结">12.2.3 网页中使用 URL 的场景小结</h4><p>包括但不限于如下场景：</p><ul><li>a 标签 href</li><li>link 标签 href</li><li>script 标签 src</li><li>img 标签 src</li><li>video audio 标签 src</li><li>form 中的 action</li><li>AJAX 请求中的 URL</li></ul><h4 id="12-3-设置资源类型（mime类型）">12.3 设置资源类型（mime类型）</h4><p>媒体类型（通常称为 Multipurpose Internet Mail Extensions 或 MIME 类型）是一种标准，用来表示文档、文件或字节流的性质和格式。</p><p>mime 类型结构： [type]/[subType]</p><p>例如： text/html  text/css  image/jpeg  image/png  application/json</p><p>HTTP 服务可以设置响应头 Content-Type 来表明响应体的 MIME 类型，浏览器会根据该类型决定如何处理资源</p><p>下面是常见文件对应的 mime 类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line"><span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line"><span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line"><span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line"><span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line"><span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line"><span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line"><span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line"><span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建一个 HTTP 服务，端口为 9000，满足如下需求</span></span><br><span class="line"><span class="comment"> * GET  /index.html        响应  page/index.html 的文件内容</span></span><br><span class="line"><span class="comment"> * GET  /css/app.css       响应  page/css/app.css 的文件内容</span></span><br><span class="line"><span class="comment"> * GET  /images/logo.png   响应  page/images/logo.png 的文件内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//导入 http 模块</span></span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="comment">//声明一个变量</span></span><br><span class="line"><span class="keyword">let</span> mimes = &#123;</span><br><span class="line">  <span class="attr">html</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">  <span class="attr">css</span>: <span class="string">&#x27;text/css&#x27;</span>,</span><br><span class="line">  <span class="attr">js</span>: <span class="string">&#x27;text/javascript&#x27;</span>,</span><br><span class="line">  <span class="attr">png</span>: <span class="string">&#x27;image/png&#x27;</span>,</span><br><span class="line">  <span class="attr">jpg</span>: <span class="string">&#x27;image/jpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">gif</span>: <span class="string">&#x27;image/gif&#x27;</span>,</span><br><span class="line">  <span class="attr">mp4</span>: <span class="string">&#x27;video/mp4&#x27;</span>,</span><br><span class="line">  <span class="attr">mp3</span>: <span class="string">&#x27;audio/mpeg&#x27;</span>,</span><br><span class="line">  <span class="attr">json</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> server = http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(request.<span class="property">method</span> !== <span class="string">&#x27;GET&#x27;</span>)&#123;</span><br><span class="line">    response.<span class="property">statusCode</span> = <span class="number">405</span>;</span><br><span class="line">    response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;405 Method Not Allowed&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//获取请求url的路径</span></span><br><span class="line">  <span class="keyword">let</span> &#123;pathname&#125; = <span class="keyword">new</span> <span class="title function_">URL</span>(request.<span class="property">url</span>, <span class="string">&#x27;http://127.0.0.1&#x27;</span>);</span><br><span class="line">  <span class="comment">//声明一个变量</span></span><br><span class="line">  <span class="keyword">let</span> root = __dirname + <span class="string">&#x27;/page&#x27;</span>;</span><br><span class="line">  <span class="comment">// let root = __dirname + &#x27;/../&#x27;;</span></span><br><span class="line">  <span class="comment">//拼接文件路径</span></span><br><span class="line">  <span class="keyword">let</span> filePath = root + pathname;</span><br><span class="line">  <span class="comment">//读取文件 fs 异步 API</span></span><br><span class="line">  fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">      <span class="comment">//设置字符集</span></span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>,<span class="string">&#x27;text/html;charset=utf-8&#x27;</span>);</span><br><span class="line">      <span class="comment">//判断错误的代号</span></span><br><span class="line">      <span class="keyword">switch</span>(err.<span class="property">code</span>)&#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ENOENT&#x27;</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;EPERM&#x27;</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">403</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;403 Forbidden&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">          response.<span class="property">statusCode</span> = <span class="number">500</span>;</span><br><span class="line">          response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;Internal Server Error&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取文件的后缀名</span></span><br><span class="line">    <span class="keyword">let</span> ext = path.<span class="title function_">extname</span>(filePath).<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//获取对应的类型</span></span><br><span class="line">    <span class="keyword">let</span> type = mimes[ext];</span><br><span class="line">    <span class="keyword">if</span>(type)&#123;</span><br><span class="line">      <span class="comment">//匹配到了                          text/html;charset=utf-8</span></span><br><span class="line">      <span class="keyword">if</span>(ext === <span class="string">&#x27;html&#x27;</span>)&#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type + <span class="string">&#x27;;charset=utf-8&#x27;</span>);</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, type);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//没有匹配到</span></span><br><span class="line">      response.<span class="title function_">setHeader</span>(<span class="string">&#x27;content-type&#x27;</span>, <span class="string">&#x27;application/octet-stream&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应文件内容</span></span><br><span class="line">    response.<span class="title function_">end</span>(data);</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口, 启动服务</span></span><br><span class="line">server.<span class="title function_">listen</span>(<span class="number">9000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动....&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>对于未知的资源类型，可以选择 <code>application/octet-stream</code> 类型，浏览器在遇到该类型的响应时，会对响应体内容进行独立存储，也就是我们常见的 <strong>下载</strong> 效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>).<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的方法以及路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123;url, method&#125; = request;</span><br><span class="line">    <span class="comment">// 判断请求方式以及请求路径</span></span><br><span class="line">    <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; url === <span class="string">&quot;/index.html&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要响应文件中的内容</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/index.html&#x27;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; url === <span class="string">&quot;/css/app.css&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要响应文件中的内容</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/public/css/app.css&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这里缺少设置Content-Type响应头</span></span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/css&#x27;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method === <span class="string">&quot;GET&quot;</span> &amp;&amp; url === <span class="string">&quot;/js/app.js&quot;</span>) &#123;</span><br><span class="line">        <span class="comment">// 需要响应文件中的内容</span></span><br><span class="line">        <span class="keyword">let</span> data = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(__dirname + <span class="string">&#x27;/public/js/app.js&#x27;</span>);</span><br><span class="line">        <span class="comment">// 这里缺少设置Content-Type响应头</span></span><br><span class="line">        response.<span class="title function_">setHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript&#x27;</span>);</span><br><span class="line">        response.<span class="title function_">end</span>(data);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 404响应</span></span><br><span class="line">        response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">        response.<span class="title function_">end</span>(<span class="string">&quot;&lt;h1&gt;404 Not Found&lt;/h1&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;80端口正在启动中....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="改进-HTTP-服务器代码（文件路径封装）">改进 HTTP 服务器代码（文件路径封装）</h4><p><strong>原始问题</strong>：之前的代码每增加一个请求路径就需要进行单独判断，不够灵活和完善。</p><p><strong>改进思路</strong>：将文件路径相关逻辑进行封装，实现通用的文件请求处理。</p><p><strong>改进代码</strong>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">&#x27;http&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line">http.<span class="title function_">createServer</span>(<span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求的方法已经路径</span></span><br><span class="line">    <span class="keyword">let</span> &#123; url, method &#125; = request;</span><br><span class="line">    <span class="comment">// 文件夹路径</span></span><br><span class="line">    <span class="keyword">let</span> rootDir = __dirname + <span class="string">&#x27;/public&#x27;</span>;</span><br><span class="line">    <span class="comment">// 拼接文件路径</span></span><br><span class="line">    <span class="keyword">let</span> filePath = rootDir + url;</span><br><span class="line">    <span class="comment">// 读取文件内容</span></span><br><span class="line">    fs.<span class="title function_">readFile</span>(filePath, <span class="function">(<span class="params">err, data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 如果出现错误，响应 404 状态码</span></span><br><span class="line">            response.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">            response.<span class="title function_">end</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 响应文件内容</span></span><br><span class="line">            response.<span class="title function_">end</span>(data);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;).<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;80 端口正在启动中....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="12-4-GET-和-POST-请求场景小结">12.4 GET 和 POST 请求场景小结</h4><h4 id="GET-请求的情况：">GET 请求的情况：</h4><ul><li>在地址栏直接输入 url 访问</li><li>点击 a 链接</li><li>link 标签引入 css</li><li>script 标签引入 js</li><li>img 标签引入图片</li><li>form 标签中的 method 为 get （不区分大小写）</li><li>ajax 中的 get 请求</li></ul><h4 id="POST-请求的情况：">POST 请求的情况：</h4><ul><li>form 标签中的 method 为 post （不区分大小写）</li><li>AJAX 的 post 请求</li></ul><h3 id="十三、GET-和-POST-请求的区别">十三、GET 和 POST 请求的区别</h3><p>GET 和 POST 是 HTTP 协议请求的两种方式。</p><ul><li>作用：GET 主要用来获取数据，POST 主要用来提交数据</li><li>参数位置：GET 带参数请求是将参数缀到 URL 之后，在地址栏中输入 url 访问网站就是 GET 请求 POST 带参数请求是将参数放到请求体中</li><li>安全性：POST 请求相对 GET 安全一些，因为在浏览器中参数会暴露在地址栏</li><li>GET 请求大小有限制，一般为 2K，而 POST 请求则没有大小限制</li></ul><h2 id="Node-js-模块化">Node.js 模块化</h2><h4 id="一、介绍">一、介绍</h4><ol><li><strong>什么是模块化与模块？</strong> 将一个复杂的程序文件依据一定规则 (规范) 拆分成多个文件的过程称之为 <strong>模块化</strong></li></ol><p>其中拆分出的 <strong>每个文件就是一个模块</strong>，模块的内部数据是私有的，不过模块可以暴露内部数据以便其他模块使用</p><ol><li><strong>什么是模块化项目？</strong> 编码时是按照模块一个一个编码的，整个项目就是一个模块化的项目</li><li><strong>模块化好处</strong> 下面是模块化的一些好处：<ul><li>防止命名冲突</li><li>高复用性</li><li>高维护性</li></ul></li></ol><h3 id="二、模块暴露数据">二、模块暴露数据</h3><h4 id="2-1-模块初体验">2.1 模块初体验</h4><p>可以通过下面的操作步骤，快速体验模块化：</p><ol><li><strong>创建 <code>me.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//声明函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">tiemo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;贴膜....&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//暴露数据</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = tiemo;</span><br></pre></td></tr></table></figure><ol><li><strong>创建 <code>index.js</code></strong></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入模块</span></span><br><span class="line"><span class="keyword">const</span> tiemo = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br><span class="line"><span class="comment">//调用函数</span></span><br><span class="line"><span class="title function_">tiemo</span>();</span><br></pre></td></tr></table></figure><h3 id="2-2-暴露数据">2.2 暴露数据</h3><p>模块暴露数据的方式有两种：</p><ol><li><code>module.exports = value</code></li><li><code>exports.name = value</code></li></ol><p>使用时有几点注意：</p><ul><li><code>module.exports</code> 可以暴露 <strong>任意</strong> 数据</li><li>不能使用 <code>exports = value</code> 的形式暴露数据，模块内部 <code>module</code> 与 <code>exports</code> 的隐式关系 <code>exports = module.exports = &#123;&#125;</code>，<code>require</code> 返回的是目标模块中 <code>module.exports</code> 的值</li></ul><p><img src="./nodejs(1).assets/image-20250610110144642.png" alt="image-20250610110144642"></p><h3 id="三、导入（引入）模块">三、导入（引入）模块</h3><p>在模块中使用 <code>require</code> 传入文件路径即可引入文件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> test = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br></pre></td></tr></table></figure><p><code>require</code> 使用的一些注意事项：</p><ol><li>对于自己创建的模块，导入时路径建议写 <code>相对路径</code> ，且不能省略 <code>./</code> 和 <code>../</code></li><li><code>js</code> 和 <code>json</code> 文件导入时可以不用写后缀，<code>c/c++</code> 编写的 <code>node</code> 扩展文件也可以不写后缀，但是一般用不到</li><li>如果导入其他类型的文件，会以 <code>js</code> 文件进行处理</li><li>如果导入的路径是个文件夹，则会 <strong>首先</strong> 检测该文件夹下 <code>package.json</code> 文件中 <code>main</code> 属性对应的文件，</li></ol><p>如果存在则导入，反之如果文件不存在会报错。</p><p>如果 <code>main</code> 属性不存在，或者 <code>package.json</code> 不存在，则会尝试导入文件夹下的 <code>index.js</code> 和 <code>index.json</code>，</p><p>如果还是没找到，就会报错 5. 导入 <code>node.js</code> 内置模块时，直接 <code>require</code> 模块的名字即可，无需加 <code>./</code> 和 <code>../</code></p><h3 id="四、导入模块的基本流程">四、导入模块的基本流程</h3><p>这里我们介绍一下 <code>require</code> 导入 <strong>自定义模块</strong> 的基本流程</p><ol><li>将相对路径转为绝对路径, 定位目标文件</li><li>缓存检测</li><li>读取目标文件代码</li><li>包裹为一个函数并执行 (自执行函数)。通过 <code>arguments.callee.toString()</code> 查看自执行函数</li><li>缓存模块的值</li><li>返回 <code>module.exports</code> 的值</li></ol><p><img src="./nodejs(1).assets/image-20250610110529684.png" alt="image-20250610110529684"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 伪代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params">file</span>)&#123;</span><br><span class="line">  <span class="comment">//1. 将相对路径转为绝对路径，定位目标文件</span></span><br><span class="line">  <span class="keyword">let</span> absolutePath = path.<span class="title function_">resolve</span>(__dirname, file);</span><br><span class="line">  <span class="comment">//2. 缓存检测</span></span><br><span class="line">  <span class="keyword">if</span>(caches[absolutePath])&#123;</span><br><span class="line">    <span class="keyword">return</span> caches[absolutePath];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//3. 读取文件的代码</span></span><br><span class="line">  <span class="keyword">let</span> code = fs.<span class="title function_">readFileSync</span>(absolutePath).<span class="title function_">toString</span>();</span><br><span class="line">  <span class="comment">//4. 包裹为一个函数 然后执行</span></span><br><span class="line">  <span class="keyword">let</span> <span class="variable language_">module</span> = &#123;&#125;;</span><br><span class="line">  <span class="keyword">let</span> <span class="built_in">exports</span> = <span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;;</span><br><span class="line">  (<span class="keyword">function</span> (<span class="params"><span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> test = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&#x27;yjy&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = test;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="title function_">toString</span>());</span><br><span class="line">  &#125;)(<span class="built_in">exports</span>, <span class="built_in">require</span>, <span class="variable language_">module</span>, __filename, __dirname)</span><br><span class="line">  <span class="comment">//5. 缓存结果</span></span><br><span class="line">  caches[absolutePath] = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">  <span class="comment">//6. 返回 module.exports 的值</span></span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> m = <span class="built_in">require</span>(<span class="string">&#x27;./me.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="五、CommonJS-规范">五、CommonJS 规范</h3><p><code>module.exports</code>、<code>exports</code> 以及 <code>require</code> 这些都是 <strong>CommonJS</strong> 模块化规范中的内容。</p><p>而 Node.js 是实现了 <strong>CommonJS</strong> 模块化规范，二者关系有点像 <code>JavaScript</code> 与 <code>ECMAScript</code>。</p><p>CommonJS 规范规定：</p><ul><li><p>每个文件就是一个模块，拥有独立的作用域。</p></li><li><p>模块内部通过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span></span><br></pre></td></tr></table></figure><p>暴露数据。</p><ul><li><code>module.exports</code> 可以暴露任意类型的值（对象、函数、基本数据类型等）。</li><li><code>exports</code> 实际上是 <code>module.exports</code> 的一个引用（<code>exports = module.exports = &#123;&#125;</code>），所以通过 <code>exports.xxx = value</code> 的方式可以为 <code>module.exports</code> 对象添加属性。但不能直接给 <code>exports</code> 赋值（如 <code>exports = value</code>），否则会切断与 <code>module.exports</code> 的联系。</li></ul></li><li><p>模块之间通过 <code>require</code> 函数导入其他模块暴露出来的数据。</p></li></ul><p>在 Node.js 中遵循 CommonJS 规范进行模块化开发，使得代码的组织和复用更加方便、规范。例如：</p><p><strong>模块 A（<code>moduleA.js</code>）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 暴露一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = add;</span><br></pre></td></tr></table></figure><p><strong>模块 B（<code>moduleB.js</code>）</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入模块 A</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="built_in">require</span>(<span class="string">&#x27;./moduleA.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> result = <span class="title function_">add</span>(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">// 输出 8</span></span><br></pre></td></tr></table></figure><p>这样，通过 <code>module.exports</code> 暴露函数，<code>require</code> 导入并使用，实现了模块间的功能复用和代码组织。</p><p>CommonJS 规范在服务器端（如 Node.js 环境）应用广泛，它的同步加载机制（在服务器端，文件读取等操作相对快速且对同步性要求较高）是其特点之一。但在浏览器端，由于同步加载会阻塞页面渲染等问题，后来出现了其他模块化规范（如 AMD、CMD、ES6 模块等）来适应浏览器环境的需求。不过在 Node.js 中，CommonJS 规范依然是核心的模块化方式，并且非常适合服务器端的开发场景，如构建 Web 服务器、处理文件 I/O 等任务时的代码模块化组织。</p><h2 id="包管理工具">包管理工具</h2><p>像极了哆啦A梦的口袋</p><h3 id="一、概念介绍">一、概念介绍</h3><h3 id="1-1-包是什么">1.1 包是什么</h3><p>『包』英文单词是 <code>package</code> ，代表了一组特定功能的源码集合</p><h3 id="1-2-包管理工具">1.2 包管理工具</h3><p>管理『包』的应用软件，可以对「包」进行 <code>下载安装</code> ， <code>更新</code> ， <code>删除</code> ， <code>上传</code> 等操作</p><p>借助包管理工具，可以快速开发项目，提升开发效率</p><p>包管理工具是一个通用的概念，很多编程语言都有包管理工具，所以 <code>掌握好包管理工具非常重要</code></p><h3 id="1-3-常用的包管理工具">1.3 常用的包管理工具</h3><p>下面列举了前端常用的包管理工具</p><ul><li><code>npm</code></li><li><code>yarn</code></li><li><code>cnpm</code></li></ul><h3 id="二、npm">二、npm</h3><p><code>npm</code> 全称 <code>Node Package Manager</code> ，翻译为中文意思是『Node 的包管理工具』</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm` 是 `node.js` 官方内置的包管理工具，是 `必须要掌握住的工具</span><br></pre></td></tr></table></figure><h4 id="2-1-npm-的安装">2.1 npm 的安装</h4><p>node.js 在安装时会 自动安装 npm ，所以如果你已经安装了 node.js，可以直接使用 npm 可以通过 npm -v 查看版本号测试，如果显示版本号说明安装成功，反之安装失败</p><h3 id="2-2-npm-基本使用">2.2 npm 基本使用</h3><h4 id="2-2-1-初始化">2.2.1 初始化</h4><p>创建一个空目录，然后以此目录作为工作目录 启动命令行工具 ，执行 npm init</p><p>npm init 命令的作用是将文件夹初始化为一个『包』，</p><p>交互式创建 package.json 文件 package.json 是包的配置文件，每个包都必须要有 package.json</p><p>package.json 内容示例</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;01_npm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1-npm&quot;</span><span class="punctuation">,</span>       #包的名字</span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>      #包的版本</span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>       #包的描述</span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>      #包的入口文件</span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>             #脚本配置</span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span>            #作者</span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span>         #开源证书</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="初始化的过程中还有一些注意事项：">初始化的过程中还有一些注意事项：</h3><ol><li>package name( 包名 )不能使用中文、大写，默认值是 文件夹的名称 ，所以文件夹名称也不能使用中文和大写</li><li>version( 版本号 )要求 x.x.x 的形式定义， x 必须是数字，默认值是 1.0.0</li><li>ISC 证书与 MIT 证书功能上是相同的，关于开源证书扩展阅读 <a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></li><li>package.json 可以手动创建与修改</li><li>使用 npm init -y 或者 npm init --yes 极速创建 package.json</li></ol><h3 id="2-2-2-搜索包">2.2.2 搜索包</h3><p>搜索包的方式有两种：</p><ol><li>命令行：<a href="https://docs.npmjs.com/cli/v9/commands/npm%E2%88%92search">npms/search关键字</a><a href="https://docs.npmjs.com/cli/v9/commands/npm%E2%88%92search">npms/search关键字</a></li><li>网站搜索：网址是 <a href="https://www.npmjs.com/">https://www.npmjs.com/</a></li></ol><p>经常有同学问，『我怎样才能精准找到我需要的包？』</p><p>这个事儿需要大家在实践中不断的积累，通过看文章，看项目去学习去积累。</p><h3 id="2-2-3-下载安装包">2.2.3 下载安装包</h3><p>我们可以通过 <code>npm install</code> 和 <code>npm i</code> 命令安装包。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式</span></span><br><span class="line">npm install &lt;包名&gt;</span><br><span class="line">npm i &lt;包名&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 移除数组当中的重复内容</span></span><br><span class="line">npm install <span class="built_in">uniq</span></span><br><span class="line">npm i <span class="built_in">uniq</span></span><br></pre></td></tr></table></figure><p>运行之后文件夹下会增加两个资源：</p><ul><li><code>node_modules</code> 文件夹：存放下载的包</li><li><code>package-lock.json</code>：包的锁文件，用来锁定包的版本</li></ul><blockquote><p>安装 <code>uniq</code> 之后， <code>uniq</code> 就是当前这个包的一个依赖包，有时会简称为依赖。</p><p>比如我们创建一个包名字为 <code>A</code>，<code>A</code> 中安装了包名字是 <code>B</code>，我们就说 <code>B</code> 是 <code>A</code> 的一个依赖包，也会说 <code>A</code> 依赖 <code>B</code>。</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="keyword">const</span> uniq = <span class="built_in">require</span>(<span class="string">&#x27;uniq&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniq</span>(arr));</span><br></pre></td></tr></table></figure><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">D</span>:\Note\code\nodejs\test&gt;npm i uniq</span><br><span class="line"></span><br><span class="line">added <span class="number">1</span> <span class="built_in">package</span> <span class="keyword">in</span> <span class="number">4</span>s</span><br><span class="line"></span><br><span class="line"><span class="name">D</span>:\Note\code\nodejs\test&gt;node index.js</span><br><span class="line">[ <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> ]</span><br></pre></td></tr></table></figure><h3 id="2-2-4-require-导入-npm-包基本流程">2.2.4 <code>require</code> 导入 npm 包基本流程</h3><ol><li>在当前文件夹下 <code>node_modules</code> 中寻找同名的文件夹。</li><li>在上级目录中下的 <code>node_modules</code> 中寻找同名的文件夹，直至找到磁盘根目录。</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.导入</span></span><br><span class="line"><span class="comment">// const uniq = require(&#x27;uniq&#x27;);//导入的是node_modules目录下的uniq模块 推荐这个 优势：找不到会往上找 直到找到 /</span></span><br><span class="line"><span class="comment">// const uniq = require(&#x27;./node_modules/uniq&#x27;);  //导入文件夹  逻辑是去这个文件夹当中找package.json当中main属性所对应的文件</span></span><br><span class="line"><span class="comment">// const uniq = require(&#x27;./node_modules/uniq/uniq.js&#x27;);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniq</span>(arr));</span><br></pre></td></tr></table></figure><h3 id="2-3-生产环境与开发环境">2.3 生产环境与开发环境</h3><p>开发环境是程序员<code>专门用来写代码</code>的环境，一般是指程序员的电脑，开发环境的项目一般<code>只能程序员自己访问</code>。</p><p>生产环境是项目<code>代码正式运行</code>的环境，一般是指正式的服务器电脑，生产环境的项目一般<code>每个客户都可以访问</code>。</p><h3 id="2-4-生产依赖与开发依赖">2.4 生产依赖与开发依赖</h3><p>我们可以在安装时设置选项来区分依赖的类型，目前分为两类：</p><table><thead><tr><th>类型</th><th>命令</th><th>补充</th></tr></thead><tbody><tr><td>生产依赖</td><td>npm i -S uniq / npm i --save uniq</td><td>-S 等效于 --save，-S 是默认选项包信息保存在 package.json 中 dependencies 属性</td></tr><tr><td>开发依赖</td><td>npm i -D less / npm i --save-dev less</td><td>-D 等效于 --save-dev包信息保存在 package.json 中 devDependencies 属性</td></tr></tbody></table><blockquote><p>举个例子方便大家理解，比如说做蛋炒饭需要大米，油，葱，鸡蛋，锅，煤气，铲子等。</p><p>其中锅，煤气，铲子属于开发依赖，只在制作阶段使用。</p><p>而大米，油，葱，鸡蛋属于生产依赖，在制作与最终食用都会用到。</p><p>所以开发依赖是只在开发阶段使用的依赖包，而生产依赖是开发阶段和最终上线运行阶段都用到的依赖包。</p></blockquote><h3 id="2-5-全局安装">2.5 全局安装</h3><p>我们可以执行安装选项 <code>-g</code> 进行全局安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g nodemon </span><br></pre></td></tr></table></figure><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">D</span>:\<span class="keyword">Note</span>\code\nodejs\<span class="keyword">test</span>&gt;npm i -<span class="keyword">g</span> nodemon </span><br><span class="line"></span><br><span class="line">added 29 packages <span class="keyword">in</span> 4s</span><br><span class="line"></span><br><span class="line">4 packages are looking <span class="keyword">for</span> funding</span><br><span class="line">  <span class="keyword">run</span> `npm fund` <span class="keyword">for</span> details</span><br></pre></td></tr></table></figure><p>全局安装完成之后就可以在命令行的任何位置运行 <code>nodemon</code> 命令。 该命令的作用是 <strong>自动重启</strong> <code>node</code> 应用程序。</p><p><strong>说明</strong>：</p><ul><li>全局安装的命令不受工作目录位置影响。</li><li>可以通过 <code>npm root -g</code> 查看全局安装包的位置。</li><li>不是所有的包都适合全局安装，只有全局类的工具才适合，可以通过 <strong>查看包的官方文档</strong> 来确定安装方式。</li></ul><h3 id="2-5-1-修改-Windows-执行策略">2.5.1 修改 Windows 执行策略</h3><p><img src="./nodejs(1).assets/image-20250610120349606.png" alt="image-20250610120349606"></p><p>windows 默认不允许 npm 全局命令执行脚本文件，所以需要修改执行策略</p><ol><li>以 管理员身份 打开 powershell 命令行</li></ol><p><img src="./nodejs(1).assets/image-20250610120420231.png" alt="image-20250610120420231"></p><ol start="2"><li>键入命令 set-ExecutionPolicy remoteSigned</li></ol><p><img src="./nodejs(1).assets/image-20250610120442762.png" alt="image-20250610120442762"></p><ol start="3"><li><p>键入 A 然后敲回车 👌 4. 如果不生效，可以尝试重启 vscode</p><p>npm i -g nodemon</p></li></ol><blockquote><p>D:\Note\code\nodejs\test&gt;npm install -g nodemon</p><p>changed 29 packages in 2s</p><p>D:\Note\code\nodejs\test&gt;nodemon index.js<br>‘nodemon’ 不是内部或外部命令，也不是可运行的程序</p></blockquote><p>解决：</p><blockquote><p>遇到的 “nodemon’ 不是内部或外部命令，也不是可运行的程序或批处理文件” 的问题，通常是由于以下几个原因造成的，即使您已经配置了环境变量：</p><ol><li><p><strong>环境变量配置未生效或配置错误：</strong></p><ul><li><p><strong>未重启命令行工具或计算机：</strong> 修改环境变量后，需要重新打开命令行工具（如 CMD 或 PowerShell）才能使新的环境变量生效。有时甚至需要重启计算机。</p></li><li><p>路径错误：</p><p>请确保您在系统环境变量</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Path</span></span><br></pre></td></tr></table></figure><p>中添加的路径是</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span></span><br></pre></td></tr></table></figure><p>全局安装模块的正确路径。您可以通过以下命令查看</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span></span><br></pre></td></tr></table></figure><p>的全局安装路径（prefix）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure><p>假设该命令返回的路径是</p><figure class="highlight moonscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="name">C</span>:\Users\YourUsername\AppData\Roaming\npm</span><br></pre></td></tr></table></figure><p>(这只是一个例子，您的路径可能不同)，那么您需要确保这个路径（或者这个路径下的</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node_modules\<span class="string">.bin</span></span><br></pre></td></tr></table></figure><p>目录，具体取决于您的 Node.js 和 npm 版本及配置）被添加到了系统环境变量</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Path</span></span><br></pre></td></tr></table></figure><p>中。</p></li><li><p><strong>用户变量与系统变量：</strong> 建议将 Node.js 和 npm 相关的路径添加到系统变量的 <code>Path</code> 中，而不是用户变量的 <code>Path</code> 中，以确保所有用户和所有终端都能访问。</p></li><li><p><strong>NODE_PATH 环境变量：</strong> 有些教程可能会提到配置 <code>NODE_PATH</code>，但 <code>NODE_PATH</code> 主要用于 <code>require</code> 模块时的查找路径，对于命令行工具的识别，关键在于 <code>Path</code> 环境变量。</p></li></ul></li><li><p><strong>npm 全局安装路径问题：</strong></p><ul><li><strong>自定义了全局安装路径：</strong> 如果您之前通过 <code>npm config set prefix &quot;新的路径&quot;</code> 命令修改了 npm 的全局安装路径，那么您需要将这个“新的路径”添加到系统环境变量 <code>Path</code> 中。 例如，如果您将全局路径设置为 <code>D:\nodejs\node_global</code>，那么 <code>D:\nodejs\node_global</code> 需要在 <code>Path</code> 环境变量中。</li><li><strong><code>node_modules\.bin</code> 目录：</strong> 全局安装的命令行工具（如 nodemon）的可执行文件通常位于全局安装路径下的 <code>node_modules\.bin</code> 目录。请确保这个 <code>.bin</code> 目录也包含在 <code>Path</code> 环境变量中，或者其父目录已在 <code>Path</code> 中且 npm 能正确处理。</li></ul></li><li><p><strong>安装问题：</strong></p><ul><li><p>nodemon 未成功全局安装：</p><p>虽然提示</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">changed</span> <span class="number">29</span> packages</span><br></pre></td></tr></table></figure><p>，但可能存在某些原因导致</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>没有正确安装到预期的全局位置。您可以尝试重新全局安装</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall -g nodemon</span><br><span class="line">npm install -g nodemon</span><br></pre></td></tr></table></figure></li><li><p><strong>权限问题：</strong> 在某些情况下，尤其是在 Windows 上，可能需要以管理员权限运行命令行工具来执行全局安装命令 <code>npm install -g nodemon</code>。</p></li></ul></li><li><p><strong>PowerShell 执行策略 (如果使用 PowerShell)：</strong></p><ul><li><p>如果是在 PowerShell 中运行</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>命令，并且遇到类似“无法加载文件…因为在此系统上禁止运行脚本”的错误，这可能是由于 PowerShell 的执行策略限制。 你可以尝试以管理员身份打开 PowerShell，然后运行以下命令来更改执行策略：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Set-ExecutionPolicy</span> RemoteSigned</span><br></pre></td></tr></table></figure><p>然后按提示输入</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Y</span></span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">A</span></span><br></pre></td></tr></table></figure><p>。</p><p>请注意：</p><p>更改执行策略可能会带来安全风险，请了解其含义后再操作。</p></li></ul></li></ol><p><strong>排查步骤建议：</strong></p><ol><li><p><strong>确认 npm 全局路径：</strong><br>打开新的命令行窗口，输入 <code>npm config get prefix</code>，记录下输出的路径。</p></li><li><p>检查环境变量 <code>Path</code>：</p><ul><li>打开“我的电脑”或“此电脑” -&gt; 右键“属性” -&gt; “高级系统设置” -&gt; “环境变量”。</li><li>在“系统变量”下找到名为 <code>Path</code> 的变量，双击编辑。</li><li>确认上一步得到的 <code>npm</code> 全局路径（例如 <code>C:\Users\YourUsername\AppData\Roaming\npm</code> 或者您自定义的全局路径如 <code>D:\nodejs\node_global</code>）是否已经添加到了 <code>Path</code> 变量列表中。 如果没有，请添加它。</li></ul></li><li><p><strong>重启命令行/计算机：</strong> 修改环境变量后，务必关闭所有已打开的命令行窗口，然后重新打开一个新的，或者直接重启计算机。</p></li><li><p>重新尝试运行 <code>nodemon</code>：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nodemon --version</span><br><span class="line">nodemon index.js</span><br></pre></td></tr></table></figure></li><li><p><strong>检查 <code>nodemon</code> 是否在全局路径下：</strong><br>导航到 <code>npm config get prefix</code> 返回的路径，查看该路径下是否有 <code>nodemon</code> 或 <code>nodemon.cmd</code> 文件，以及是否存在 <code>node_modules\.bin</code> 文件夹，里面是否有 <code>nodemon</code> 相关文件。</p></li><li><p>尝试使用 <code>npx</code>：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">npx</span></span><br></pre></td></tr></table></figure><p>是 npm 5.2+ 自带的工具，可以运行本地或远程 npm 包中的命令，即使没有全局安装。可以临时用它来测试：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npx nodemon index.js</span><br></pre></td></tr></table></figure><p>如果这个命令能成功运行，说明</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">nodemon</span></span><br></pre></td></tr></table></figure><p>本身是好的，问题更可能出在全局环境配置上。</p></li></ol><p>如果以上步骤都无法解决问题，请提供更多信息，例如：</p><ul><li><code>npm config get prefix</code> 的输出结果。</li><li>您的环境变量 <code>Path</code> 的具体内容截图或文本。</li><li>Node.js 和 npm 的版本 (<code>node -v</code> 和 <code>npm -v</code>)。</li></ul></blockquote><h3 id="2-5-2-环境变量-Path">2.5.2 环境变量 Path</h3><p>Path 是操作系统的一个环境变量，可以设置一些文件夹的路径，在当前工作目录下找不到可执行文件 时，就会在环境变量 Path 的目录中挨个的查找，如果找到则执行，如果没有找到就会报错</p><p><img src="./nodejs(1).assets/image-20250610120647937.png" alt="image-20250610120647937"></p><blockquote><h2 id="补充说明">补充说明</h2><ul><li>如果希望某个程序在任何工作目录下都能正常运行，就应该将该程序的所在目录配置到环境变量 <code>Path</code> 中。</li><li>windows 下查找命令的所在位置<ul><li><code>cmd</code> 命令行 中执行 <code>where nodemon</code>。</li><li><code>powershell</code> 命令行 执行 <code>get-command nodemon</code>。</li></ul></li></ul></blockquote><h3 id="2-6-安装包依赖">2.6 安装包依赖</h3><p>在项目协作中有一个常用的命令就是 <code>npm i</code>，通过该命令可以依据 <code>package.json</code> 和 <code>package-lock.json</code> 的依赖声明安装项目依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm i</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><code>node_modules</code> 文件夹大多数情况都不会存入版本库。</p><p>因为node_modules 非常大 我们不用把它上传到git上，只需要有package-lock.json 就可以了</p><h3 id="2-7-安装指定版本的包">2.7 安装指定版本的包</h3><p>项目中可能会遇到版本不匹配的情况，有时就需要安装指定版本的包，可以使用下面的命令。</p><h3 id="格式">格式</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i &lt;包名@版本号&gt;</span><br></pre></td></tr></table></figure><h3 id="示例">示例</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i jquery@1.11.2</span><br></pre></td></tr></table></figure><h3 id="2-8-删除依赖">2.8 删除依赖</h3><p>项目中可能需要删除某些不需要的包，可以使用下面的命令：</p><ul><li><strong>局部删除</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall <span class="built_in">uniq</span></span><br><span class="line">npm r <span class="built_in">uniq</span></span><br></pre></td></tr></table></figure><ul><li><strong>全局删除</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm remove -g nodemon</span><br></pre></td></tr></table></figure><h3 id="2-9-配置命令别名">2.9 配置命令别名</h3><p>通过配置命令别名可以更简单的执行命令。</p><ul><li><strong>配置package.json中的 scripts 属性</strong>：</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node index.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><strong>配置完成之后，可以使用别名执行命令</strong>：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><blockquote><p>注：<code>start</code> 别名比较特别，使用时可以省略 <code>run</code> ：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure><h4 id="补充说明：">补充说明：</h4><ul><li><code>npm start</code> 是项目中常用的一个命令，一般用来启动项目。</li><li><code>npm run</code> 有自动向上级目录查找的特性，跟 <code>require</code> 函数也一样。</li><li>对于陌生的项目，我们可以通过查看 <code>scripts</code> 属性来参考项目的一些操作。</li></ul><h3 id="三、cnpm">三、cnpm</h3><h4 id="3-1-介绍">3.1 介绍</h4><p>cnpm 是一个淘宝构建的 <code>npmjs.com</code> 的完整镜像，也称为「淘宝镜像」，网址 <a href="https://npmmirror.com/">https://npmmirror.com/</a></p><p>cnpm 服务器部署在国内阿里云服务器上，可以提高包的下载速度</p><p>官方也提供了一个全局工具包 <code>cnpm</code>，操作命令与 npm 大体相同</p><h4 id="3-2-安装">3.2 安装</h4><p>我们可以通过 npm 来安装 cnpm 工具</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h4 id="3-3-操作命令">3.3 操作命令</h4><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td><code>cnpm init</code> / <code>cnpm init</code></td></tr><tr><td>安装包</td><td><code>cnpm i uniq</code> <code>cnpm i -S uniq</code> <code>cnpm i -D uniq</code> <code>cnpm i -g nodemon</code></td></tr><tr><td>安装项目依赖</td><td><code>cnpm i</code></td></tr><tr><td>删除</td><td><code>cnpm runiq</code></td></tr></tbody></table><h4 id="3-4-npm-配置淘宝镜像">3.4 npm 配置淘宝镜像</h4><p>用 npm 也可以使用淘宝镜像，配置的方式有两种：</p><ul><li>直接配置</li><li>工具配置</li></ul><h4 id="3-4-1-直接配置">3.4.1 直接配置</h4><p>执行如下命令即可完成配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><h4 id="3-4-2-工具配置（示例使用-nrm-工具）">3.4.2 工具配置（示例使用 <code>nrm</code> 工具）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. **安装 nrm**</span><br><span class="line">npm i -g nrm</span><br></pre></td></tr></table></figure><ol><li><strong>修改镜像</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use taobao </span><br></pre></td></tr></table></figure><ol><li><strong>检查是否配置成功（选做）</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config list </span><br></pre></td></tr></table></figure><blockquote><p>检查 <code>registry</code> 地址是否为 <code>https://registry.npmmirror.com/</code>，如果 <strong>是</strong> 则表明成功</p></blockquote><h3 id="补充说明-2">补充说明:</h3><ol><li><strong>建议使用第二种方式（nrm 配置）</strong> 进行镜像配置，因为后续修改起来会比较方便</li><li>虽然 <code>cnpm</code> 可以提高速度，但是 <code>npm</code> 也可以通过淘宝镜像进行加速，所以 <code>npm</code> 的使用率还是高于 <code>cnpm</code></li></ol><h3 id="四、yarn">四、yarn</h3><h3 id="4-1-yarn-介绍">4.1 yarn 介绍</h3><p>yarn 是由 Facebook 在 2016 年推出的新的 Javascript 包管理工具，官方网址：<a href="https://yarnpkg.com/">https://yarnpkg.com/</a></p><h3 id="4-2-yarn-特点">4.2 yarn 特点</h3><p>yarn 官方宣称的一些特点</p><ul><li>速度超快：yarn 缓存了每个下载过的包，所以再次使用时无需重复下载。同时利用并行下载以最大化资源利用率，因此安装速度更快</li><li>超级安全：在执行代码之前，yarn 会通过算法校验每个安装包的完整性</li><li>超级可靠：使用详细、简洁的锁文件格式和明确的安装算法，yarn 能够保证在不同系统上无差异的工作</li></ul><h3 id="4-3-yarn-安装">4.3 yarn 安装</h3><p>我们可以使用 npm 安装 yarn</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -g yarn</span><br></pre></td></tr></table></figure><h3 id="4-4-yarn-常用命令">4.4 yarn 常用命令</h3><table><thead><tr><th>功能</th><th>命令</th></tr></thead><tbody><tr><td>初始化</td><td><code>yarn init</code> / <code>yarn init -y</code></td></tr><tr><td>安装包</td><td><code>yarn add uniq</code>（生产依赖）<code>yarn add less --dev</code>（开发依赖）<code>yarn global add nodemon</code>（全局安装）</td></tr><tr><td>删除包</td><td><code>yarn remove uniq</code>（删除项目依赖包）<code>yarn global remove nodemon</code>（全局删除包）</td></tr><tr><td>安装项目依赖</td><td><code>yarn</code></td></tr><tr><td>运行命令别名</td><td><code>yarn &lt;别名&gt;</code>（不需要添加 <code>run</code>）</td></tr></tbody></table><h3 id="4-5-yarn-配置淘宝镜像">4.5 yarn 配置淘宝镜像</h3><p>可以通过如下命令配置淘宝镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npmmirror.com/</span><br></pre></td></tr></table></figure><p>可以通过 <code>yarn config list</code> 查看 yarn 的配置项</p><h3 id="4-6-npm-和-yarn-选择">4.6 npm 和 yarn 选择</h3><p>大家可以根据不同的场景进行选择：</p><ol><li><strong>个人项目</strong> 如果是个人项目，哪个工具都可以，可以根据自己的喜好来选择。</li><li><strong>公司项目</strong> 如果是公司项目要根据项目代码来选择，可以通过锁文件判断项目的包管理工具：<ul><li><code>npm</code> 的锁文件为 <code>package-lock.json</code></li><li><code>yarn</code> 的锁文件为 <code>yarn.lock</code></li></ul></li></ol><p><strong>包管理工具不要混用，切记，切记，切记</strong></p><h3 id="五、管理发布包">五、管理发布包</h3><h4 id="5-1-创建与发布">5.1 创建与发布</h4><p>我们可以将自己开发的工具包发布到 npm 服务上，方便自己和其他开发者使用，操作步骤如下：</p><ol><li>创建文件夹，并创建文件 <code>index.js</code>，在文件中声明函数，使用 <code>module.exports</code> 暴露。</li><li>npm 初始化工具包，<code>package.json</code> 填写包的信息（包的名字是唯一的）。</li><li>注册账号 <a href="https://www.npmjs.com/signup%E3%80%82">https://www.npmjs.com/signup。</a></li><li>激活账号（一定要激活账号）。</li><li>修改为官方的官方镜像（命令行中运行 <code>nrm use npm</code>）。</li><li>命令行下 <code>npm login</code> 填写相关用户信息。</li><li>命令行下 <code>npm publish</code> 提交包。</li></ol><h4 id="5-2-更新包">5.2 更新包</h4><p>后续可以对自己发布的包进行更新，操作步骤如下：</p><ol><li>更新包中的代码。</li><li>测试代码是否可用。</li><li>修改 <code>package.json</code> 中的版本号。</li><li>发布更新。<code>npm publish</code>。</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><h3 id="六、扩展内容">六、扩展内容</h3><p>在很多语言中都有包管理工具，比如：</p><table><thead><tr><th>语言</th><th>包管理工具</th></tr></thead><tbody><tr><td>PHP</td><td>composer</td></tr><tr><td>Python</td><td>pip</td></tr><tr><td>Java</td><td>maven</td></tr><tr><td>Go</td><td>go mod</td></tr><tr><td>JavaScript</td><td>npm / yarn / cnpm / other</td></tr><tr><td>Ruby</td><td>rubyGems</td></tr></tbody></table><p>除了编程语言领域有包管理工具之外，操作系统层面也存在包管理工具，不过这个包指的是【软件包】</p><table><thead><tr><th>操作系统</th><th>包管理工具</th><th>网址</th></tr></thead><tbody><tr><td>Centos</td><td>yum</td><td><a href="https://packages.debian.org/stable/">https://packages.debian.org/stable/</a></td></tr><tr><td>Ubuntu</td><td>apt</td><td><a href="https://packages.ubuntu.com/">https://packages.ubuntu.com/</a></td></tr><tr><td>MacOS</td><td>homebrew</td><td><a href="https://brew.sh/">https://brew.sh/</a></td></tr><tr><td>Windows</td><td>chocolatey</td><td><a href="https://chocolatey.org/">https://chocolatey.org/</a></td></tr></tbody></table><h2 id="nvm">nvm</h2><h3 id="一、介绍-2">一、介绍</h3><p>nvm 全称 <code>Node Version Manager</code>，顾名思义它是用来管理 node 版本的工具，方便切换不同版本的 Node.js</p><h3 id="二、使用">二、使用</h3><p>nvm 的使用非常的简单，跟 npm 的使用方法类似</p><h4 id="2-1-下载安装">2.1 下载安装</h4><p>首先先下载 nvm，下载地址 <a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a> ，选择 <code>nvm-setup.exe</code> 下载即可</p><h4 id="2-2-常用命令">2.2 常用命令</h4><table><thead><tr><th>命令</th><th>说明</th></tr></thead><tbody><tr><td><code>nvm list available</code></td><td>显示所有可以下载的 Node.js 版本</td></tr><tr><td><code>nvm list</code></td><td>显示已安装的版本</td></tr><tr><td><code>nvm install 18.12.1</code></td><td>安装 18.12.1 版本的 Node.js</td></tr><tr><td><code>nvm install latest</code></td><td>安装最新版的 Node.js</td></tr><tr><td><code>nvm uninstall 18.12.1</code></td><td>删除某个版本的 Node.js</td></tr><tr><td><code>nvm use 18.12.1</code></td><td>切换 18.12.1 的 Node.js</td></tr></tbody></table><h2 id="ExpressJS">ExpressJS</h2><h3 id="一、express-介绍">一、express 介绍</h3><p>express 是一个基于 Node.js 平台的极简、灵活的 WEB 应用开发框架，官方网址：<a href="https://www.expressjs.com.cn/">https://www.expressjs.com.cn/</a></p><p>简单来说，express 是一个封装好的工具包，封装了很多功能，便于我们开发 WEB 应用（HTTP 服务）</p><h3 id="二、express-使用">二、express 使用</h3><h4 id="2-1-express-下载">2.1 express 下载</h4><p>express 本身是一个 npm 包，所以可以通过 npm 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm i express</span><br></pre></td></tr></table></figure><h4 id="2-2-express-初体验">2.2 express 初体验</h4><p>大家可以按照这个步骤进行操作：</p><ol><li>创建 JS 文件，键入如下代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 创建路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;hello express server&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 监听端口 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口监听为 3000...&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>命令行下执行：</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">node</span> <span class="title">&lt;文件名&gt;</span></span><br><span class="line"><span class="title"># 或者</span></span><br><span class="line"><span class="title">nodemon</span> <span class="tag">&lt;文件名&gt;</span></span><br></pre></td></tr></table></figure><p>访问 <code>http://127.0.0.1:3000/home</code> 可查看结果。</p><h3 id="三、express-路由">三、express 路由</h3><h4 id="3-1-什么是路由">3.1 什么是路由</h4><p>官方定义：路由确定了应用程序如何响应客户端对特定端点的请求。</p><h4 id="3-2-路由的使用">3.2 路由的使用</h4><p>一个路由的组成有<code>请求方法</code>，<code>路径</code>和<code>回调函数</code>组成。</p><p>express 中提供了一系列方法，可以很方便的使用路由，使用格式如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.&lt;method&gt;(path, callback)</span><br></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 get 路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/home&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;网站首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//首页路由</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;我才是真正的首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建 post 路由</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;登录成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//匹配所有的请求方法</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;/search&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;1 秒钟为您找到相关结果约 100,000,000 个&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义 404 路由</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;h1&gt;404 Not Found&lt;/h1&gt;&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口 启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;服务已经启动, 端口监听为 3000&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="3-3-获取请求参数">3.3 获取请求参数</h3><p>express 框架封装了一些 API 来方便获取请求报文中的数据，并且兼容原生 HTTP 模块的获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建应用对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/request&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//1. 获取报文的方式与原生 HTTP 获取方式是兼容的</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">method</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">url</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">httpVersion</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">headers</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">//2. express 独有的获取报文的方式</span></span><br><span class="line">  <span class="comment">//获取查询字符串</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="property">query</span>); <span class="comment">// [相对重要]</span></span><br><span class="line">  <span class="comment">// 获取指定的请求头</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(req.<span class="title function_">get</span>(<span class="string">&#x27;host&#x27;</span>));</span><br><span class="line"></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&#x27;请求报文的获取&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动服务</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;启动成功....&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="3-4-获取路由参数">3.4 获取路由参数</h3><p>路由参数指的是 URL 路径中的参数（数据）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/:id.html&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;商品详情，商品 id 为&#x27;</span> + req.<span class="property">params</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="练习">练习</h3><hr><h3 id="根据路由参数响应歌手的信息">根据路由参数响应歌手的信息</h3><p>路径结构如下</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/singer/</span><span class="number">1</span>.html</span><br></pre></td></tr></table></figure><p>显示歌手的<code>姓名</code>和<code>图片</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;singers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;周杰伦&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M0000025NhlN2yWrP4.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Jay Chou&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">4558</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;林俊杰&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M000001BLpXF2DyJe2.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;JJ Lin&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">4286</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;G.E.M. 邓紫棋&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M000001fNHEf1SFEFN.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Gloria Tang&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">13948</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">3</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;singer_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;薛之谦&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_pic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://y.gtimg.cn/music/photo_new/T001R150x150M000002J4UUk29y8BY.webp&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;other_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;singer_id&quot;</span><span class="punctuation">:</span> <span class="number">5062</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="四、express-响应设置">四、express 响应设置</h3><p>express 框架封装了一些 API 来方便给客户端响应数据，并且兼容原生 HTTP 模块的获取方式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取请求的路由规则</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/response&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//1. express 中设置响应的方式兼容 HTTP 模块的方式</span></span><br><span class="line">    res.<span class="property">statusCode</span> = <span class="number">404</span>;</span><br><span class="line">    res.<span class="property">statusMessage</span> = <span class="string">&#x27;xxx&#x27;</span>;</span><br><span class="line">    res.<span class="title function_">setHeader</span>(<span class="string">&#x27;abc&#x27;</span>, <span class="string">&#x27;xyz&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(<span class="string">&#x27;响应体&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. express 的响应方法</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>); <span class="comment">//设置响应状态码</span></span><br><span class="line">    res.<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>);<span class="comment">//设置响应头</span></span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;中文响应不乱码&#x27;</span>);<span class="comment">//设置响应体 send 不会乱码 会内置一个请求头</span></span><br><span class="line">    <span class="comment">//连贯操作</span></span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">404</span>).<span class="title function_">set</span>(<span class="string">&#x27;xxx&#x27;</span>, <span class="string">&#x27;yyy&#x27;</span>).<span class="title function_">send</span>(<span class="string">&#x27;你好朋友&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 其他响应</span></span><br><span class="line">    res.<span class="title function_">redirect</span>(<span class="string">&#x27;http://baidu.com&#x27;</span>);<span class="comment">//重定向</span></span><br><span class="line">    res.<span class="title function_">download</span>(<span class="string">&#x27;/package.json&#x27;</span>);<span class="comment">//下载响应</span></span><br><span class="line">    res.<span class="title function_">json</span>(&#123;&#125;);<span class="comment">//响应 JSON</span></span><br><span class="line">    res.<span class="title function_">sendFile</span>(__dirname + <span class="string">&#x27;/home.html&#x27;</span>) <span class="comment">//响应文件内容</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="五、express中间件">五、express中间件</h3><h2 id="5-1-什么是中间件">5.1 什么是中间件</h2><p>中间件（Middleware）本质是一个回调函数</p><p>中间件函数 可以像路由回调一样访问 请求对象（request），响应对象（response）</p><h2 id="5-2-中间件的作用">5.2 中间件的作用</h2><p>中间件的作用 就是 使用函数封装公共操作，简化代码</p><h2 id="5-3-中间件的类型">5.3 中间件的类型</h2><ul><li>全局中间件</li><li>路由中间件</li></ul><p>好比是我们去做高铁，我们都是先把行李过一次安检，我们就叫它安检门吧，这个安检门就是属于全局中间件，然后进入这个安检门以后会有很多通道我们需要刷卡进入 这就是路由中间件。</p><p>我们必须先检表再上高铁，不然就会产生很多混乱</p><h3 id="5-3-1-定义全局中间件">5.3.1 定义全局中间件</h3><p>每一个请求 到达服务端之后 都会执行全局中间件函数</p><p>声明中间件函数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> recordMiddleware = <span class="keyword">function</span>(<span class="params">request, response, next</span>)&#123;</span><br><span class="line">    <span class="comment">//实现功能代码</span></span><br><span class="line">    <span class="comment">//.....</span></span><br><span class="line">    <span class="comment">//执行next函数(当如果希望执行完中间件函数之后，仍然继续执行路由中的回调函数，必须调用next)</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="./nodejs(1).assets/image-20250610174956850.png" alt="image-20250610174956850"></p><p>应用中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(recordMiddleware);</span><br></pre></td></tr></table></figure><p>声明时可以直接将匿名函数传递给 <code>use</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第一个中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-3-2-多个全局中间件">5.3.2 多个全局中间件</h2><p><code>express</code> 允许使用 <code>app.use()</code> 定义多个全局中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第一个中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="keyword">function</span> (<span class="params">request, response, next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;定义第二个中间件&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="5-3-3-定义路由中间件">5.3.3 定义路由中间件</h2><p>如果只需要对某一些路由进行功能封装，则就需要路由中间件</p><p>调用格式如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>, <span class="string">&#x27;中间件函数&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/路径&#x27;</span>, <span class="string">&#x27;中间件函数1&#x27;</span>, <span class="string">&#x27;中间件函数2&#x27;</span>, <span class="function">(<span class="params">request, response</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="5-4-静态资源中间件">5.4 静态资源中间件</h3><p><code>express</code> 内置处理静态资源的中间件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入express框架</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="comment">//创建服务对象</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//静态资源中间件的设置，将当前文件夹下的public目录作为网站的根目录</span></span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(<span class="string">&#x27;./public&#x27;</span>)); </span><br><span class="line"><span class="comment">//如果访问的内容经常变化，还是需要设置路由</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//但是，在这里有一个问题，如果public目录下有index.html文件，单独也有index.html的路由，</span></span><br><span class="line"><span class="comment">//则谁书写在前，优先执行谁</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/index.html&#x27;</span>,<span class="function">(<span class="params">request,response</span>)=&gt;</span>&#123;</span><br><span class="line">  response.<span class="title function_">send</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//监听端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000端口启动....&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="注意事项">注意事项:</h4><ol><li><code>index.html</code> 文件为默认打开的资源</li><li>如果静态资源与路由规则同时匹配，谁先匹配谁就响应</li><li>路由响应动态资源，静态资源中间件响应静态资源</li></ol><h3 id="5-5-获取请求体数据-body-parser">5.5 获取请求体数据 body - parser</h3><p><code>express</code> 可以使用 <code>body - parser</code> 包处理请求体</p><h4 id="第一步：安装">第一步：安装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i body - parser</span><br></pre></td></tr></table></figure><h4 id="第二步：导入-body-parser-包">第二步：导入 body - parser 包</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body - parser&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="第三步：获取中间件函数">第三步：获取中间件函数</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 处理 querystring 格式的请求体</span></span><br><span class="line"><span class="keyword">let</span> urlParser = bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;);</span><br><span class="line"><span class="comment">// 处理 JSON 格式的请求体</span></span><br><span class="line"><span class="keyword">let</span> jsonParser = bodyParser.<span class="title function_">json</span>();</span><br></pre></td></tr></table></figure><h4 id="第四步：设置路由中间件，然后使用-request-body-来获取请求体数据">第四步：设置路由中间件，然后使用 <code>request.body</code> 来获取请求体数据</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/login&#x27;</span>, urlParser, <span class="function">(<span class="params">request, response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取请求体数据</span></span><br><span class="line">    <span class="comment">// console.log(request.body);</span></span><br><span class="line">    <span class="comment">// 用户名</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>.<span class="property">username</span>);</span><br><span class="line">    <span class="comment">// 密码</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(request.<span class="property">body</span>.<span class="property">userpass</span>);</span><br><span class="line">    response.<span class="title function_">send</span>(<span class="string">&#x27;获取请求体数据&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>获取到的请求体数据:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[Object: null prototype] &#123; username: <span class="string">&#x27;admin&#x27;</span>, userpass: <span class="string">&#x27;123456&#x27;</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="六、Router">六、Router</h3><h4 id="6-1-什么是-Router">6.1 什么是 Router</h4><p><code>express</code> 中的 <code>Router</code> 是一个完整的中间件和路由系统，可以看做是一个小型的 <code>app</code> 对象。</p><h4 id="6-2-Router-作用">6.2 Router 作用</h4><p>对路由进行模块化，更好的管理路由。</p><h4 id="6-3-Router-使用">6.3 Router 使用</h4><ul><li>创建独立的 <code>JS</code> 文件（<code>homeRouter.js</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">t<span class="comment">//1. 导入 express</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 创建路由器对象</span></span><br><span class="line"><span class="keyword">const</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 在 router 对象身上添加路由</span></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;首页&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/cart&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;购物车&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 暴露</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure><ul><li>主文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="comment">//5.引入子路由文件</span></span><br><span class="line"><span class="keyword">const</span> homeRouter = <span class="built_in">require</span>(<span class="string">&#x27;./routes/homeRouter&#x27;</span>);</span><br><span class="line"><span class="comment">//6.设置和使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(homeRouter);</span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3000</span>,<span class="function">()=&gt;</span>&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;3000 端口启动....&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="七、EJS-模板引擎">七、EJS 模板引擎</h3><h2 id="7-1-什么是模板引擎">7.1 什么是模板引擎</h2><p>模板引擎是分离用户界面和业务数据的一种技术。</p><h2 id="7-2-什么是-EJS">7.2 什么是 EJS</h2><p>EJS 是一个高效的 Javascript 的模板引擎。</p><ul><li>官网: <a href="https://ejs.co/">https://ejs.co/</a></li><li>中文站: <a href="https://ejs.bootcss.com/">https://ejs.bootcss.com/</a></li></ul><h2 id="7-3-EJS-初体验">7.3 EJS 初体验</h2><h3 id="下载安装-EJS">下载安装 EJS</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i ejs --save</span><br></pre></td></tr></table></figure><h3 id="代码示例">代码示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.引入ejs</span></span><br><span class="line"><span class="keyword">const</span> ejs = <span class="built_in">require</span>(<span class="string">&#x27;ejs&#x27;</span>);</span><br><span class="line"><span class="comment">// 2.定义数据</span></span><br><span class="line"><span class="keyword">let</span> person = [<span class="string">&#x27;张三&#x27;</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;王二麻子&#x27;</span>];</span><br><span class="line"><span class="comment">// 3.ejs解析模板返回结构</span></span><br><span class="line"><span class="comment">// &lt;%%&gt; 是ejs解析内容的标记，作用是输出当前表达式的执行结构</span></span><br><span class="line"><span class="keyword">let</span> html = ejs.<span class="title function_">render</span>(<span class="string">&#x27;&lt;%= person.join(&quot;, &quot;) %&gt;&#x27;</span>, &#123;<span class="attr">person</span>:person&#125;);</span><br><span class="line"><span class="comment">// 4.输出结果</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br></pre></td></tr></table></figure><p>命令行下运行</p><h3 id="7-4-EJS常用语法">7.4 EJS常用语法</h3><h4 id="执行JS代码">执行JS代码</h4><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">&lt;% code %&gt;</span></span><br></pre></td></tr></table></figure><h4 id="输出转义的数据到模板上">输出转义的数据到模板上</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= code %&gt;</span><br></pre></td></tr></table></figure><h4 id="输出非转义的数据到模板上">输出非转义的数据到模板上</h4><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%- code %&gt;</span><br></pre></td></tr></table></figure><h1>MongoDB</h1><h2 id="一、简介">一、简介</h2><h3 id="1-1-MongoDB是什么">1.1 MongoDB是什么</h3><p>MongoDB是一个基于分布式文件存储的数据库，官方地址 <a href="https://www.mongodb.com/">https://www.mongodb.com/</a></p><h3 id="1-2-数据库是什么">1.2 数据库是什么</h3><p>数据库（DataBase）是按照数据结构来组织、存储和管理数据的&lt;应用程序&gt;</p><h3 id="1-3-数据库的作用">1.3 数据库的作用</h3><p>数据库的主要作用就是&lt;管理数据&gt;，对数据进行&lt;增（c）、删（d）、改（u）、查（r）&gt;</p><h3 id="1-4-数据库管理数据的特点">1.4 数据库管理数据的特点</h3><p>相比于纯文件管理数据，数据库管理数据有如下特点：</p><ol><li>速度更快</li><li>扩展性更强</li><li>安全性更强</li></ol><h3 id="1-5-为什么选择-MongoDB">1.5 为什么选择 MongoDB</h3><p>操作语法与 JavaScript 类似，容易上手，学习成本低</p><h2 id="二、核心概念">二、核心概念</h2><p>Mongodb中有三个重要概念需要掌握</p><ul><li>数据库（database）：数据库是一个数据仓库，数据库服务下可以创建很多数据库，数据库中可以存放很多集合</li><li>集合（collection）：集合类似于JS中的数组，在集合中可以存放很多文档</li><li>文档（document）：文档是数据库中的最小单位，类似于JS中的对象</li></ul><p><strong>大家可以通过 JSON 文件来理解 Mongodb 中的概念</strong></p><ul><li>一个 JSON 文件 好比是一个 数据库，一个 Mongodb 服务下可以有 N 个数据库</li><li>JSON 文件中的一级属性的数组值 好比是 集合</li><li>数组中的对象好比是 文档</li><li>对象中的属性有时也称之为 字段</li></ul><p><strong>一般情况下</strong></p><ul><li>一个项目使用一个数据库</li><li>一个集合会存储同一种类型的数据</li></ul><h2 id="三、下载安装与启动">三、下载安装与启动</h2><p>下载地址： <a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a> 建议选择 zip 类型，通用性更强</p><p>配置步骤如下：</p><p>1&gt; 将压缩包移动到 <code>C:\Program Files</code> 下，然后解压</p><p>2&gt; 创建 <code>C:\data\db</code> 目录，mongodb 会将数据默认保存在这个文件夹</p><p>3&gt; 以 mongodb 中 <code>bin</code> 目录作为工作目录，启动命令行</p><p>4&gt; 运行命令 <code>mongod</code></p><h1>会话控制</h1><h2 id="一、介绍-3">一、介绍</h2><p>所谓会话控制就是 <strong>对会话进行控制</strong></p><p>HTTP 是一种无状态的协议，它没有办法区分多次的请求是否来自于同一个客户端， <strong>无法区分用户</strong></p><p>而产品中又大量存在的这样的需求， 所以我们需要通过 <strong>会话控制</strong> 来解决该问题</p><p>常见的会话控制技术有三种：</p><ul><li>cookie</li><li>session</li><li>token</li></ul><h2 id="二、cookie">二、cookie</h2><h3 id="2-1-cookie-是什么">2.1 cookie 是什么</h3><p>cookie 是 HTTP 服务器发送到用户浏览器并保存在本地的一小块数据</p><p><strong>cookie 是保存在浏览器端的一小块数据</strong></p><p><strong>cookie 是按照域名划分保存的</strong></p><p>简单示例：</p><table><thead><tr><th>域名</th><th>cookie</th></tr></thead><tbody><tr><td><a href="https://www.baidu.com/">https://www.baidu.com</a></td><td>a=100; b=200</td></tr><tr><td><a href="https://www.bilibili.com/">https://www.bilibili.com</a></td><td>xid=1020abce121; hm=112411213</td></tr><tr><td><a href="http://jd.com">jd.com</a></td><td>x=100; ocw=12414cce</td></tr></tbody></table><h3 id="2-2-cookie-的特点">2.2 cookie 的特点</h3><p>浏览器向服务器发送请求时，会自动将 当前域名下 可用的 cookie 设置在请求头中，然后传递给服务器</p><p>这个请求头的名字也叫 cookie ，所以将 cookie 理解为一个 HTTP 的请求头也是可以的 2.3 cookie 的运行流程 填写账号和密码校验身份，校验通过后下发 cookie</p><p><img src="./nodejs(1).assets/image-20250610180549565.png" alt="image-20250610180549565"></p><p>有了 cookie 之后，后续向服务器发送请求时，就会自动携带 cookie</p><p><img src="./nodejs(1).assets/image-20250610180611114.png" alt="image-20250610180611114"></p><h2 id="三、Session">三、Session</h2><h3 id="3-1-Session-是什么">3.1 Session 是什么</h3><p>Session 是保存在服务器端的一块儿数据，保存当前访问用户的相关信息。</p><h3 id="3-2-Session-的作用">3.2 Session 的作用</h3><p>实现会话控制，可以识别用户的身份，快速获取当前用户的相关信息。</p><h3 id="3-3-Session-运行流程">3.3 Session 运行流程</h3><ol><li>用户填写账号和密码校验身份，校验通过后创建 <code>session</code> 信息。</li><li>服务器将 <code>session_id</code> 的值通过响应头返回给浏览器。</li><li>当浏览器再次发送请求时，会将 <code>session_id</code> 携带在请求头中。</li><li>服务器接收到请求后，根据 <code>session_id</code> 找到对应的 <code>session</code> 信息，从而知道当前用户的身份等相关信息。</li></ol><p><img src="./nodejs(1).assets/image-20250610180718738.png" alt="image-20250610180718738"></p><p>有了 cookie，下次发送请求时会自动携带 cookie，服务器通过 cookie 中的 session_id 的值确定用 户的身份</p><p><img src="./nodejs(1).assets/image-20250610180739400.png" alt="image-20250610180739400"></p><p>类似比喻：好比去理发店，一般会有会员说是如果不充值35 充值25且这一次免费，充值玩后它会给你一张卡，然后他会再它的笔记本上记录信息 以后要剪头发只要去笔记本里看看有没有你的信息即可。</p><h1>四、session 和 cookie 的区别</h1><p>cookie 和 session 的区别主要有如下几点：</p><h2 id="1-存在的位置">1. 存在的位置</h2><ul><li>cookie：浏览器端</li><li>session：服务端</li></ul><h2 id="2-安全性">2. 安全性</h2><ul><li>cookie 是以明文的方式存放在客户端的，安全性相对较低</li><li>session 存放于服务器中，所以安全性相对较好</li></ul><h2 id="3-网络传输量">3. 网络传输量</h2><ul><li>cookie 设置内容过多会增大报文体积，会影响传输效率</li><li>session 数据存储在服务器，只是通过 cookie 传递 id，所以不影响传输效率</li></ul><h2 id="4-存储限制">4. 存储限制</h2><ul><li>浏览器限制单个 cookie 保存的数据不能超过 4K，且单个域名下的存储数量也有限制</li><li>session 数据存储在服务器中，所以没有这些限制</li></ul>]]></content>
    
    
    <summary type="html">Nodejs</summary>
    
    
    
    <category term="nodejs" scheme="https://yjyrichard.github.io/categories/nodejs/"/>
    
    
    <category term="nodejs" scheme="https://yjyrichard.github.io/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>numpy与pandas</title>
    <link href="https://yjyrichard.github.io/posts/47f8bb74.html"/>
    <id>https://yjyrichard.github.io/posts/47f8bb74.html</id>
    <published>2025-07-29T04:51:26.337Z</published>
    <updated>2025-08-01T10:12:16.957Z</updated>
    
    <content type="html"><![CDATA[<h1>大模型技术之numpy与pandas</h1><h2 id="第-1-章-环境搭建">第 1 章 环境搭建</h2><h3 id="1-1-Anaconda">1.1 Anaconda</h3><h4 id="1-1-1-什么是Anaconda">1.1.1 什么是Anaconda</h4><p>Anaconda官网地址：<a href="https://www.anaconda.com/">https://www.anaconda.com/</a></p><p>简单来说，Anaconda = Python + 包和环境管理器（Conda）+ 常用库 + 集成工具。它适合那些需要快速搭建数据科学或机器学习开发环境的用户。<strong>Anaconda和Python相当于是汽车和发动机的关系</strong>，安装Anaconda后，就像买了一台车，无需自己去安装发动机和其他零配件，而Python作为发动机提供Anaconda工作所需的内核。</p><p>Anaconda包及其依赖项和环境的管理工具为 conda 命令，与传统的 Python pip 工具相比Anaconda的conda可以更方便地在不同环境之间进行切换，环境管理较为简单。</p><p>为什么选择 Anaconda？</p><ul><li><p>方便安装： 安装 Anaconda 就像安装一个应用程序一样简单，它为您预先安装好了许多常用的工具，无需单独配置。</p></li><li><p>包管理器： Anaconda 包含一个名为 Conda 的包管理器，用于安装、更新和管理软件包。Conda 不仅限于 Python，还支持多种其他语言的包管理。</p></li><li><p>环境管理： 使用 Anaconda，您可以轻松地创建和管理多个独立的 Python 环境，比如可以安装 python2 和 python3 环境，然后实现自由切换。这对于在不同项目中使用不同的库和工具版本非常有用，以避免版本冲突。</p></li><li><p>集成工具和库： Anaconda 捆绑了许多用于数据科学、机器学习和科学计算的重要工具和库，如 NumPy、Pandas、Matplotlib、SciPy、Scikit-learn 等。</p></li><li><p>Jupyter 笔记本： Jupyter 是一个交互式的计算环境，支持多种编程语言，但在 Anaconda 中主要用于 Python。它允许用户创建和共享包含实时代码、方程式、可视化和叙述文本的文档。</p></li><li><p>Spyder 集成开发环境： Anaconda 中集成了 Spyder，这是一个专为科学计算和数据分析而设计的开发环境，具有代码编辑、调试和数据可视化等功能。</p></li><li><p>跨平台性： Anaconda可在Windows、macOS和 Linux等操作系统上运行，使其成为一个跨平台的解决方案。</p></li><li><p>社区支持： Anaconda 拥有庞大的社区，用户可以在社区论坛上获取帮助、分享经验和解决问题。</p></li></ul><h4 id="1-1-2-Anaconda下载">1.1.2 Anaconda下载</h4><p>进入官网，点击右上角Free Download 这部分不详写 搜一下都有的</p><p>若先前安装时未勾选添加环境变量，则需找到先前安装时设定的Anaconda安装路径。此处为“D:\ProgramFiles\anaconda3”，需对照自己的安装路径，在环境变量中点击“新建”依次添加如下路径：</p><p>D:\ProgramFiles\anaconda3（Anaconda安装路径）</p><p>D:\ProgramFiles\anaconda3\Library\mingw-w64\bin（Anaconda安装路径\Library\mingw-w64\bin）</p><p>D:\ProgramFiles\anaconda3\Library\usr\bin（Anaconda安装路径\Library\usr\bin）</p><p>D:\ProgramFiles\anaconda3\Library\bin（Anaconda安装路径\Library\bin）</p><p>D:\ProgramFiles\anaconda3\Scripts（Anaconda安装路径\Scripts）</p><p>按下“Win+R”，输入“cmd”，点击确定，打开命令提示符</p><p>输入conda info查看conda信息，输入python --version查看Python版本。Anaconda安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;conda info</span><br><span class="line"></span><br><span class="line">     active environment : None</span><br><span class="line">       user config file : C:\Users\Lenovo\.condarc</span><br><span class="line"> populated config files : D:\Anaconda\.condarc</span><br><span class="line">                          C:\Users\Lenovo\.condarc</span><br><span class="line">          conda version : 24.11.3</span><br><span class="line">    conda-build version : 24.9.0</span><br><span class="line">         python version : 3.12.7.final.0</span><br><span class="line">                 solver : libmamba (default)</span><br><span class="line">       virtual packages : __archspec=1=skylake</span><br><span class="line">                          __conda=24.11.3=0</span><br><span class="line">                          __win=0=0</span><br><span class="line">       base environment : D:\Anaconda  (writable)</span><br><span class="line">      conda av data dir : D:\Anaconda\etc\conda</span><br><span class="line">  conda av metadata url : None</span><br><span class="line">           channel URLs : https://conda.anaconda.org/conda-forge/win-64</span><br><span class="line">                          https://conda.anaconda.org/conda-forge/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/noarch</span><br><span class="line">          package cache : D:\Anaconda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\.conda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\pkgs</span><br><span class="line">       envs directories : D:\Anaconda\envs</span><br><span class="line">                          C:\Users\Lenovo\.conda\envs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\envs</span><br><span class="line">               platform : win-64</span><br><span class="line">             user-agent : conda/24.11.3 requests/2.32.3 CPython/3.12.7 Windows/11 Windows/10.0.26100 solver/libmamba conda-libmamba-solver/24.9.0 libmambapy/1.5.8 aau/0.4.4 c/rVfpE7nkGiuOJX7H5YEx2Q s/ybEmH48VLwjraFZk_NSvgg e/jardJs_a5vCg17Ewj4TZMQ</span><br><span class="line">          administrator : False</span><br><span class="line">             netrc file : None</span><br><span class="line">           offline mode : False</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\Lenovo&gt;</span><br></pre></td></tr></table></figure><p>因conda默认源服务器在海外，使用默认源下载第三方库时可能由于网络问题导致下载失败，故在此配置国内源。在命令提示符中执行conda config --set show_channel_urls yes，会在“C:\Users（用户）\用户名”路径下生成“.condarc”文件</p><p>双击“.condarc”文件，选择使用记事本打开，删除其中所有内容，并粘贴如下内容之后保存，这样就配置好了国内清华源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channels:</span><br><span class="line">  - https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud<span class="regexp">/msys2/</span></span><br><span class="line">  - https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>cloud/conda-forge</span><br><span class="line">  - https:<span class="regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="regexp">/anaconda/</span>pkgs<span class="regexp">/free/</span></span><br><span class="line">  - defaults</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\Lenovo&gt;conda info</span><br><span class="line"></span><br><span class="line">     active environment : None</span><br><span class="line">       user config file : C:\Users\Lenovo\.condarc</span><br><span class="line"> populated config files : D:\Anaconda\.condarc</span><br><span class="line">                          C:\Users\Lenovo\.condarc</span><br><span class="line">          conda version : 24.11.3</span><br><span class="line">    conda-build version : 24.9.0</span><br><span class="line">         python version : 3.12.7.final.0</span><br><span class="line">                 solver : libmamba (default)</span><br><span class="line">       virtual packages : __archspec=1=skylake</span><br><span class="line">                          __conda=24.11.3=0</span><br><span class="line">                          __win=0=0</span><br><span class="line">       base environment : D:\Anaconda  (writable)</span><br><span class="line">      conda av data dir : D:\Anaconda\etc\conda</span><br><span class="line">  conda av metadata url : None</span><br><span class="line">           channel URLs : https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/win-64</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/msys2/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/win-64</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/noarch</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/win-64</span><br><span class="line">                          https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/main/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/r/noarch</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/win-64</span><br><span class="line">                          https://repo.anaconda.com/pkgs/msys2/noarch</span><br><span class="line">          package cache : D:\Anaconda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\.conda\pkgs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\pkgs</span><br><span class="line">       envs directories : D:\Anaconda\envs</span><br><span class="line">                          C:\Users\Lenovo\.conda\envs</span><br><span class="line">                          C:\Users\Lenovo\AppData\Local\conda\conda\envs</span><br><span class="line">               platform : win-64</span><br><span class="line">             user-agent : conda/24.11.3 requests/2.32.3 CPython/3.12.7 Windows/11 Windows/10.0.26100 solver/libmamba conda-libmamba-solver/24.9.0 libmambapy/1.5.8 aau/0.4.4 c/rVfpE7nkGiuOJX7H5YEx2Q s/b2C_6saEEyn5YCaA_Vlj2Q e/jardJs_a5vCg17Ewj4TZMQ</span><br><span class="line">          administrator : False</span><br><span class="line">             netrc file : None</span><br><span class="line">           offline mode : False</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>使用本地Jupyter</p><p>命令提示符中输入jupyter lab或jupyter notebook，会弹出浏览器页面直接进入主页面</p><p>pycharm集成Jupyter</p><p>conda env list</p><p>Jupyter快捷键</p><p>Ø esc：从输入模式退出到命令模式</p><p>Ø a：在当前cell上面创建一个新的cell</p><p>Ø b：在当前cell 下面创建一个新的cell</p><p>Ø dd：删除当前cell</p><p>Ø m：切换到markdown模式</p><p>Ø y：切换到code模式</p><p>Ø ctrl+回车：运行cell</p><p>Ø shift +回车：运行当前cell并创建一个新的cell</p><h2 id="第-2-章-Numpy">第 2 章 Numpy</h2><h3 id="1-1-什么是numpy">1.1.什么是numpy</h3><p>numpy是Python中科学计算的基础包。它是一个Python库，提供多维数组对象、各种派生对象（例如掩码数组和矩阵）以及用于对数组进行快速操作的各种方法，包括数学、逻辑、形状操作、排序、选择、I/O 、离散傅里叶变换、基本线性代数、基本统计运算、随机模拟等等。</p><p>numpy的部分功能如下：</p><p>Ø ndarray，一个具有矢量算术运算和复杂广播能力的快速且节省空间的多维数组。</p><p>Ø 用于对整组数据进行快速运算的标准数学函数（无需编写循环）。</p><p>Ø 用于读写磁盘数据的工具以及用于操作内存映射文件的工具。</p><p>Ø 线性代数、随机数生成以及傅里叶变换功能。</p><p>Ø 用于集成由C、C++、Fortran等语言编写的代码的API。</p><p>ndarray的限制</p><p>大多数numpy数组都有一些限制：</p><p>Ø 数组的所有元素必须具有相同的数据类型。</p><p>Ø 一旦创建，数组的总大小就不能改变。</p><p>Ø 形状必须是“矩形”，而不是“锯齿状”。例如二维数组的每一行必须具有相同的列数。</p><p>ndarray的属性</p><p>1）先安装numpy包</p><p>2）如果在Pycharm中加载不出来，可以通过如下命令安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">conda activate python-2025-conda</span><br><span class="line">conda install numpy</span><br></pre></td></tr></table></figure><p>2）ndarray属性案例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  <span class="comment"># 导入numpy</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">a = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])  <span class="comment"># 创建一个二维数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.ndim)  <span class="comment"># 维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.shape)  <span class="comment"># 形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.size)  <span class="comment"># 元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.dtype)  <span class="comment"># 数据类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a.itemsize)  <span class="comment"># 每个元素字节数大小</span></span><br></pre></td></tr></table></figure><h3 id="1-2-ndarray的创建方式">1.2 ndarray的创建方式</h3><h4 id="1-2-1-array-与asarray">1.2.1 array()与asarray()</h4><p><strong>array()</strong>：将输入数据转换为ndarray，会进行copy。</p><p><strong>asarray()</strong>：将输入数据转换为ndarray，如果输入本身是ndarray则不会进行copy。</p><p>数组的创建方式</p><blockquote><p>“”&quot;</p><p>array:将输入的数据转换为ndarray，会进行copy</p><p>asarray：将输入的数据转换为ndarray，如果输入本身是ndarray，则不会进行copy</p><p>“”&quot;</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">data = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;元数据地址为:<span class="subst">&#123;<span class="built_in">id</span>(data)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">arr = np.array(data)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr1地址为:<span class="subst">&#123;<span class="built_in">id</span>(arr)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;数组数据为:<span class="subst">&#123;arr&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">arr2 = np.array(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr2地址为:<span class="subst">&#123;<span class="built_in">id</span>(arr2)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr2数组数据为:<span class="subst">&#123;arr2&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">arr3 = np.asarray(arr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr3地址为:<span class="subst">&#123;<span class="built_in">id</span>(arr3)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;arr3数组数据为:<span class="subst">&#123;arr3&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>元数据地址为:2323645134208<br>arr1地址为:2323607245360</p><p>数组数据为:[1 2 3]</p><p>arr2地址为:2323645220400</p><p>arr2数组数据为:[1 2 3]</p><p>arr3地址为:2323607245360<br>arr3数组数据为:[1 2 3]</p></blockquote><h4 id="1-2-2-zeros-、ones-、empty-与zeros-like-、ones-like-、empty-like">1.2.2 zeros()、ones()、empty()与zeros_like()、ones_like()、empty_like()</h4><p><strong>zeros()</strong>：返回给定形状和类型的新数组，用0填充。</p><p><strong>ones()</strong>：返回给定形状和类型的新数组，用1填充。</p><p><strong>empty()</strong>：返回给定形状和类型的未初始化的新数组。</p><p>需要注意的是，np.empty 并不保证数组元素被初始化为 0，它只是分配内存空间，数组中的元素值是未初始化的，可能是内存中的任意值。</p><p>上述3个方法创建的数组元素类型默认都是float64。</p><p><strong>zeros_like()</strong>：返回与给定数组具有相同形状和类型的0新数组。</p><p><strong>ones_like()</strong>：返回与给定数组具有相同形状和类型的1新数组。</p><p><strong>empty_like()</strong>：返回与给定数组具有相同形状和类型的未初始化的新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.zeros((<span class="number">2</span>, <span class="number">5</span>))  <span class="comment"># 创建全0数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[0. 0. 0. 0. 0.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0. 0. 0. 0. 0.]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.ones_like(arr1)  <span class="comment"># 创建和arr1形状相同的全1数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1. 1. 1. 1. 1.]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1. 1. 1. 1. 1.]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr3 = np.empty((<span class="number">2</span>, <span class="number">3</span>))  <span class="comment"># 创建未初始化的数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[-9.05243306e-312 -1.06658093e-264  9.05246807e-312]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 9.05246807e-312  6.91691904e-323  2.96439388e-323]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr4 = np.empty_like(arr3)  <span class="comment"># 创建和arr3形状相同的未初始化数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [[-6.95272242e-310  1.22635717e+139  9.05246806e-312]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 9.05246806e-312  1.33397724e-322  4.15015143e-322]]</span></span><br></pre></td></tr></table></figure><p>注意：这里元素间的分隔符是空格，而不是小数点 .</p><h4 id="1-2-3-full-与full-like">1.2.3 full()与full_like()</h4><p><strong>full()</strong>：返回给定形状和类型的新数组，用指定的值填充。</p><p><strong>full_like()</strong>：返回与给定数组具有相同形状和类型的用指定值填充的新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.full((<span class="number">2</span>, <span class="number">3</span>), <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[6 6 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [6 6 6]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.full_like(arr1, <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[5 5 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [5 5 5]]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-4-arange">1.2.4 arange()</h4><p><strong>arange()</strong>：返回在给定范围内用均匀间隔的值填充的一维数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.arange(<span class="number">0</span>, <span class="number">10</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0 2 4 6 8]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-5-linspace-与logspace">1.2.5 linspace()与logspace()</h4><p><strong>linspace()</strong>：返回指定范围和元素个数的等差数列。数组元素类型为浮点型。</p><p><strong>logspace()</strong>：返回指定指数范围、元素个数、底数的等比数列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.linspace(start=<span class="number">0</span>, stop=<span class="number">10</span>, num=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 0.  2.5  5.  7.5 10. ]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.linspace(start=<span class="number">0</span>, stop=<span class="number">10</span>, num=<span class="number">5</span>, endpoint=<span class="literal">False</span>)  <span class="comment"># 设置endpoint=False，表示不包括stop</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0. 2. 4. 6. 8.]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr3 = np.logspace(start=<span class="number">2</span>, stop=<span class="number">5</span>, num=<span class="number">5</span>, base=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [ 4.      6.72717132 11.3137085  19.02731384 32.     ]</span></span><br></pre></td></tr></table></figure><p>默认endpoint=True时</p><p>如果把0到10看作一条线段，相当于用5个点将这条线段分成了4段，要计算每段的长度（即相邻元素的间隔），用总长度 (stop - start) 除以段数 (num - 1) ，得到间隔为 10-0 / 4 = 2.5。这样从起始点 0 开始，每次加上间隔 2.5 就能依次得到序列中的元素：0、2.5、5、7.5、10 。</p><p>若 endpoint=False 的情况</p><p>当 endpoint=False 时，意味着 stop 这个值不包含在生成的序列中，此时 [start, stop) 区间相当于一条右端点空心（不包含 stop 这个点）的线段。我们在这条线段上放置 num 个点进行划分，每一个点都会划分出一个新的区间段。比如，放 1 个点会把线段分成 1 段，放 2 个点会分成 2 段，放 num 个点就会分成 num 段，段数就等于点数 num，计算间隔的公式就变为 (stop - start) / num 。</p><h4 id="1-2-6-创建随机数数组">1.2.6 创建随机数数组</h4><p><strong>random.rand()</strong>：返回给定形状的数组，用 [0, 1) 上均匀分布的随机样本填充。</p><p><strong>random.randint()</strong>：返回给定形状的数组，用从低位(包含)到高位(不包含)上均匀分布的随机整数填充。</p><p><strong>random.uniform()</strong>：返回给定形状的数组，用从低位(包含)到高位(不包含)上均匀分布的随机浮点数填充。</p><p><strong>random.randn()</strong>：返回给定形状的数组，用标准正态分布(均值为0，标准差为1)的随机样本填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.rand(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[0.77112868 0.97415392 0.25668864]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [0.49946961 0.23491874 0.40514576]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[7 8 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [1 2 3]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr3 = np.random.uniform(<span class="number">3</span>, <span class="number">6</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[5.69275495 3.84857937 3.2899215 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [5.32035519 3.7460973  3.33859905]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr4 = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[-2.03654925 -0.50146561  0.4362483 ]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [-1.90585739  0.94797017 -0.77026926]]</span></span><br></pre></td></tr></table></figure><h4 id="1-2-7-matrix">1.2.7 matrix()</h4><p>matrix为ndarray的子类，只能生成二维的矩阵。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.matrix(<span class="string">&quot;1 2; 3 4&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [3 4]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr2 = np.matrix([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [[1 2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># [3 4]]</span></span><br></pre></td></tr></table></figure><h3 id="1-3-ndarray的数据类型">1.3 ndarray的数据类型</h3><table><thead><tr><th><strong>数据类型</strong></th><th><strong>类型代码</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>bool</strong></td><td>?</td><td>布尔类型</td></tr><tr><td><strong>int8</strong>、uint8  <strong>int16</strong>、uint16  <strong>int32</strong>、uint32  <strong>int64</strong>、uint64</td><td>i1,u1  i2,u2  i4,u4  i8,u8</td><td>有符号、无符号的8位（1字节）整型  有符号、无符号的16位（2字节）整型  有符号、无符号的32位（4字节）整型  有符号、无符号的64位（8字节）整型</td></tr><tr><td><strong>float16</strong>  <strong>float32</strong>  <strong>float64</strong></td><td>f2  f4或f  f8或d</td><td>半精度浮点型  单精度浮点型  双精度浮点型</td></tr><tr><td><strong>complex64</strong>  <strong>complex128</strong></td><td>c8  c16</td><td>用两个32位浮点数表示的复数  用两个64位浮点数表示的复数</td></tr></tbody></table><p>创建数组时可以使用dtype参数指定元素类型：</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [1. 2. 3.]</span></span><br><span class="line">arr2 = np.array([<span class="number">0.2</span>, <span class="number">2.5</span>, <span class="number">4.8</span>], dtype=<span class="string">&quot;i8&quot;</span>)</span><br><span class="line"><span class="comment"># [0 2 4]</span></span><br><span class="line">也可以使用ndarray.astype()方法转换数组的元素类型：</span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], dtype=np.float64)</span><br><span class="line"><span class="comment"># [1. 2. 3.]</span></span><br><span class="line">arr2 = arr1.astype(np.int64)</span><br><span class="line"><span class="comment"># [1 2 3]</span></span><br></pre></td></tr></table></figure><h3 id="1-4-ndarray切片和索引">1.4 ndarray切片和索引</h3><p>ndarray对象的内容可以通过索引或切片来访问和修改，与 Python 中 list 的切片操作一样。</p><p>可以通过内置的slice函数，或者冒号设置start, stop及step参数进行切片，从原数组中切割出一个新数组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">arr = np.arange(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0 1 2 3 4 5 6 7 8 9</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment">#获取索引为2的数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引 2开始到索引9(不包含)停止，间隔为2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="built_in">slice</span>(<span class="number">2</span>,<span class="number">9</span>,<span class="number">2</span>)])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 4 6 8]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引2开始到索引9(不包含)停止，间隔为2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:<span class="number">9</span>:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 4 6 8]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引2开始到最后(不包含)，默认间隔为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 3 4 5 6 7 8 9]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 从索引2开始到索引9(不包含)结束，默认间隔为1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr[<span class="number">2</span>:<span class="number">9</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># [2 3 4 5 6 7 8]</span></span><br></pre></td></tr></table></figure><h3 id="1-5-numpy常用函数">1.5 numpy常用函数</h3><h4 id="1-5-1-基本函数">1.5.1 基本函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>np.abs()</strong></td><td>元素的绝对值，参数是 number 或 array</td></tr><tr><td><strong>np.ceil()</strong></td><td>向上取整，参数是 number 或 array</td></tr><tr><td><strong>np.floor()</strong></td><td>向下取整，参数是 number 或 array</td></tr><tr><td><strong>np.rint()</strong></td><td>四舍五入，参数是 number 或 array</td></tr><tr><td><strong>np.isnan()</strong></td><td>判断元素是否为NaN(Not a Number) ，参数是 number 或 array</td></tr><tr><td><strong>np.multiply()</strong></td><td>元素相乘，参数是 number 或 array。如果第二个参数传递的是number，原数组中所有元素乘以这个数字，返回新的数组；如果第二个参数也是一个数组，是将两个数组中对应位置的元素相乘，返回一个新的数组，其形状与输入数组相同。</td></tr><tr><td><strong>np.divide()</strong></td><td>元素相除，参数是 number 或 array</td></tr><tr><td><strong>np.where(condition, x, y)</strong></td><td>三元运算符，x if condition else y</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randn(<span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">abs</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.ceil(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.floor(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.rint(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.isnan(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.multiply(arr1, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.divide(arr1, arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.where(arr1 &gt; <span class="number">0</span>, <span class="number">1</span>, <span class="number">0</span>))</span><br></pre></td></tr></table></figure><h4 id="1-5-2-统计函数">1.5.2 统计函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>np.mean()</strong></td><td>所有元素的平均值</td></tr><tr><td><strong>np.sum()</strong></td><td>所有元素的和</td></tr><tr><td><strong>np.max()</strong></td><td>所有元素的最大值</td></tr><tr><td><strong>np.min()</strong></td><td>所有元素的最小值</td></tr><tr><td><strong>np.std()</strong></td><td>所有元素的标准差</td></tr><tr><td><strong>np.var()</strong></td><td>所有元素的方差</td></tr><tr><td><strong>np.argmax()</strong></td><td>最大值的下标索引值</td></tr><tr><td><strong>np.argmin()</strong></td><td>最小值的下标索引值</td></tr><tr><td><strong>np.cumsum()</strong></td><td>返回一个一维数组，每个元素都是之前所有元素的累加和</td></tr><tr><td><strong>np.cumprod()</strong></td><td>返回一个一维数组，每个元素都是之前所有元素的累乘积</td></tr></tbody></table><p>多维数组在计算时默认计算全部维度，可以使用axis参数指定按某一维度为轴心统计，axis=0按列统计、axis=1按行统计。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">1</span>, <span class="number">5</span>, (<span class="number">2</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.mean(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">sum</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">max</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">min</span>(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.std(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.var(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.argmax(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.argmin(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.cumsum(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.cumprod(arr1))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.cumprod(arr1, axis=<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h4 id="1-5-3-比较函数">1.5.3 比较函数</h4><table><thead><tr><th><strong>函数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>np.any()</strong></td><td>至少有一个元素满足指定条件，就返回True</td></tr><tr><td><strong>np.all()</strong></td><td>所有的元素都满足指定条件，才返回True</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">any</span>(arr1 &gt; <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.<span class="built_in">all</span>(arr1 &gt; <span class="number">3</span>))</span><br></pre></td></tr></table></figure><h4 id="1-5-4-排序函数">1.5.4 排序函数</h4><p><strong>ndarray.sort()</strong>：就地排序（直接修改原数组）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line">arr1.sort()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line">arr1.sort(axis=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br></pre></td></tr></table></figure><p>axis：指定排序的轴。默认值为 -1，表示沿着最后一个轴进行排序。在二维数组中，axis = 0 表示按列排序，axis = 1 表示按行排序。</p><p>在 NumPy 中，轴是对数组维度的一种抽象描述。对于多维数组，每个维度都对应一个轴，轴的编号从 0 开始。对于二维数组，它有两个轴：</p><p>轴 0：代表垂直方向，也就是行的方向。可以把二维数组想象成一个表格，轴 0 就像是表格中从上到下的行索引方向对列数据排序，所以axis=0表示按列排序。</p><p>轴 1：代表水平方向，也就是列的方向。就像是表格中从左到右的列索引方向对行数据进行排序，所以axis=1表示按行排序。</p><p><strong>np.sort()</strong>：返回排序后的副本（创建新的数组）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.sort(arr1))</span><br></pre></td></tr></table></figure><h4 id="1-5-5-去重函数">1.5.5 去重函数</h4><p><strong>np.unique()</strong>：计算唯一值并返回有序结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.random.randint(<span class="number">0</span>, <span class="number">5</span>, (<span class="number">3</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.unique(arr1))</span><br></pre></td></tr></table></figure><h3 id="1-6-基本运算">1.6 基本运算</h3><p>numpy中的数组不用编写循环即可执行批量运算，称之为矢量化运算。</p><p>大小相等的数组之间的任何算术运算都会将运算应用到元素级。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + arr2)   <span class="comment"># 对应相加即可</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(arr1 - arr2)   <span class="comment"># 对应相减</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 / arr2)</span><br></pre></td></tr></table></figure><p>数组与标量的算术运算会将标量值传播到各个元素，不同大小的数组之间的运算叫做广播。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 + <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 - <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 * <span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 / <span class="number">100</span>)</span><br></pre></td></tr></table></figure><p>广播机制是 NumPy 中一个强大的特性，它允许在不同形状的数组之间进行元素级运算。广播机制的规则如下：</p><ul><li>规则1：如果俩个数组的维度数不相同，那么小维度数组的形状将会在最左边补1。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line"></span><br><span class="line">arr1 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 形状为 (3,)</span></span><br><span class="line"><span class="comment"># 在NumPy中，数组的形状（shape）是由各个维度上的元素数量决定的。对于一维数组，其形状表示为 (n,)，其中 n 是数组中元素的数量。而对于二维数组，形状才是 (m, n)，其中 m 是行数，n 是列数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">4</span>], [<span class="number">5</span>], [<span class="number">6</span>]])  <span class="comment"># 形状为 (3, 1)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 对 arr1 应用规则 1，在其形状最左边补 1，变为 (1, 3) =》变成了这样[[1,2,3]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 此时 arr1 形状 (1, 3) 和 arr2 形状 (3, 1) 满足广播条件</span></span><br><span class="line"></span><br><span class="line">result = arr1 + arr2</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;规则 1 示例结果：\n&quot;</span>, result)</span><br></pre></td></tr></table></figure><ul><li>规则2：如果俩个数组的形状在任何一个维度上都不匹配，那么数组的形状会沿着维度大小（元素个数）为1的维度开始扩展 ，（维度必须是1开始）直到所有维度都一样， 以匹配另一个数组的形状。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line">arr3 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]])  <span class="comment"># 形状为 (1, 3)</span></span><br><span class="line"><span class="comment"># 二维数组</span></span><br><span class="line">arr4 = np.array([[<span class="number">4</span>], [<span class="number">5</span>], [<span class="number">6</span>]])  <span class="comment"># 形状为 (3, 1)</span></span><br><span class="line"><span class="comment"># arr3 沿着第0个维度扩展,将原有的一行数据复制成3行,为 (3, 3)=&gt;[[1,2,3], [1,2,3], [1,2,3]]</span></span><br><span class="line"><span class="comment"># arr4 沿着第1个维度扩展, (3, 3)=&gt;[[4,4,4], [5,5,5], [6,6,6]]</span></span><br><span class="line">result = arr3 + arr4</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;规则 2 示例结果：\n&quot;</span>, result)</span><br></pre></td></tr></table></figure><ul><li>规则3：如果俩个数组的形状在任何一个维度上都不匹配，并且没有任何一个维度大小等于1，那么会引发异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line">arr5 = np.array([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])  <span class="comment"># 形状为 (3,)</span></span><br><span class="line"><span class="comment"># 一维数组</span></span><br><span class="line">arr6 = np.array([<span class="number">4</span>, <span class="number">5</span>])  <span class="comment"># 形状为 (2,)</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  result = arr5 + arr6</span><br><span class="line">  <span class="built_in">print</span>(result)</span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;规则 3 示例错误信息：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="1-7-矩阵乘法">1.7 矩阵乘法</h3><p>通过*运算符和np.multiply()对两个数组相乘进行的是对位乘法而非矩阵乘法运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>], [<span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 * arr2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.multiply(arr1, arr2))</span><br></pre></td></tr></table></figure><p>使用np.dot()、ndarray.dot()、@可以进行矩阵乘法运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">arr1 = np.array([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">arr2 = np.array([[<span class="number">6</span>, <span class="number">5</span>], [<span class="number">4</span>, <span class="number">3</span>], [<span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment">#对于矩阵乘法来说，要求第一个矩阵的列数等于第二个矩阵的行数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.shape, arr2.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(np.dot(arr1, arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.dot(arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 @ arr2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一个二维数组跟一个大小合适的一维数组的矩阵点积运算之后将会得到一个一维数组</span></span><br><span class="line"></span><br><span class="line">arr3 = np.array([<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1 @ arr3)</span><br></pre></td></tr></table></figure><p>矩阵乘法的规则是：结果矩阵中第 i 行第 j 列的元素等于第一个矩阵的第 i 行与第二个矩阵的第 j 列对应元素乘积之和。</p><p>结果矩阵第一行第一列的元素：</p><p>计算 arr1 的第一行 [1, 2, 3] 与 arr2 的第一列 [6, 4, 2] 对应元素乘积之和，即 1<em>6 + 2</em>4 + 3*2 = 6 + 8 + 6 = 20。</p><p>结果矩阵第一行第二列的元素：</p><p>计算 arr1 的第一行 [1, 2, 3] 与 arr2 的第二列 [5, 3, 1] 对应元素乘积之和，即 1<em>5 + 2</em>3 + 3*1 = 5 + 6 + 3 = 14。</p><p>结果矩阵第二行第一列的元素：</p><p>计算 arr1 的第二行 [4, 5, 6] 与 arr2 的第一列 [6, 4, 2] 对应元素乘积之和，即 4<em>6 + 5</em>4 + 6*2 = 24 + 20 + 12 = 56。</p><p>结果矩阵第二行第二列的元素：</p><p>计算 arr1 的第二行 [4, 5, 6] 与 arr2 的第二列 [5, 3, 1] 对应元素乘积之和，即 4<em>5 + 5</em>3 + 6*1 = 20 + 15 + 6 = 41。</p><p>所以，手动计算得到的结果矩阵是 [[20, 14], [56, 41]]。</p><h2 id="第-3-章-Pandas">第 3 章 Pandas</h2><h3 id="3-1-什么是Pandas">3.1 什么是Pandas</h3><p>Pandas 是一个开源的数据分析和数据处理库，它是基于 Python 编程语言的。</p><p>Pandas 提供了易于使用的数据结构和数据分析工具，特别适用于处理结构化数据，如表格型数据（类似于Excel表格）。</p><p>Pandas 是数据科学和分析领域中常用的工具之一，它使得用户能够轻松地从各种数据源中导入数据，并对数据进行高效的操作和分析。</p><p>用得最多的pandas对象是Series，一个一维的标签化数组对象，另一个是DataFrame，它是一个面向列的二维表结构</p><p>pandas兼具numpy高性能的数组计算功能以及电子表格和关系型数据库（如SQL）灵活的数据处理功能。它提供了复杂精细的索引功能，能更加便捷地完成重塑、切片和切块、聚合以及选取数据子集等操作。</p><p>pandas功能：</p><p>有标签轴的数据结构</p><p>在数据结构中，每个轴都被赋予了特定的标签，这些标签用于标识和引用轴上的数据元素，使得数据的组织、访问和操作更加直观和方便</p><ul><li><p>集成时间序列功能。</p></li><li><p>相同的数据结构用于处理时间序列数据和非时间序列数据。</p></li><li><p>保存元数据的算术运算和压缩。</p></li><li><p>灵活处理缺失数据。</p></li><li><p>合并和其它流行数据库（例如基于SQL的数据库）的关系操作。</p></li></ul><p>pandas这个名字源于panel data（面板数据，这是多维结构化数据集在计量经济学中的术语）以及Python data analysis（Python数据分析）。</p><h4 id="3-2-Pandas数据结构-Series">3.2 Pandas数据结构-Series</h4><p>Series 是 Pandas 中的一个核心数据结构，类似于一个一维的数组，具有数据和索引。</p><p>Series 可以存储任何数据类型（整数、浮点数、字符串等），并通过标签（索引）来访问元素。Series 的数据结构是非常有用的，因为它可以处理各种数据类型，同时保持了高效的数据操作能力，比如可以通过标签来快速访问和操作数据。</p><p>​</p><p>1）Series 特点：</p><p>Ø 一维数组：Series 中的每个元素都有一个对应的索引值。</p><p>Ø 索引： 每个数据元素都可以通过标签（索引）来访问，默认情况下索引是从 0 开始的整数，但你也可以自定义索引。</p><p>Ø 数据类型： Series 可以容纳不同数据类型的元素，包括整数、浮点数、字符串、Python 对象等。</p><p>Ø 大小不变性：Series 的大小在创建后是不变的，但可以通过某些操作（如 append 或 delete）来改变。</p><p>Ø 操作：Series 支持各种操作，如数学运算、统计分析、字符串处理等。</p><p>Ø 缺失数据：Series 可以包含缺失数据，Pandas 使用NaN（Not a Number）来表示缺失或无值。</p><p>Ø 自动对齐：当对多个 Series 进行运算时，Pandas 会自动根据索引对齐数据，这使得数据处理更加高效。</p><p>我们可以使用 Pandas 库来创建一个 Series 对象，并且可以为其指定索引（Index）、名称（Name）以及值（Values）：</p><h4 id="1-2-2-Series的创建">1.2.2 Series的创建</h4><p>1）先安装pandas包，如果在Pycharm中加载不出来，可以通过如下命令安装</p><p>conda activate python-2025-conda</p><p>(python-2025-conda)xxx conda install pandas</p><p>2）直接通过列表创建Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">s = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"><span class="comment"># 0   4</span></span><br><span class="line"><span class="comment"># 1   7</span></span><br><span class="line"><span class="comment"># 2  -5</span></span><br><span class="line"><span class="comment"># 3   3</span></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br></pre></td></tr></table></figure><p>Series的字符串表现形式为：索引在左边，值在右边。由于我们没有为数据指定索引，于是会自动创建一个0到N-1（N为数据的长度）的整数型索引。</p><p>3）通过列表创建Series时指定索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br></pre></td></tr></table></figure><p>4）通过列表创建Series时指定索引和名称</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">4</span>, <span class="number">7</span>, -<span class="number">5</span>, <span class="number">3</span>], index=[<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>],name=<span class="string">&quot;hello_python&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: hello_python, dtype: int6</span></span><br></pre></td></tr></table></figure><p>5）直接通过字典创建Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">dic = &#123;<span class="string">&quot;a&quot;</span>: <span class="number">4</span>, <span class="string">&quot;b&quot;</span>: <span class="number">7</span>, <span class="string">&quot;c&quot;</span>: -<span class="number">5</span>, <span class="string">&quot;d&quot;</span>: <span class="number">3</span>&#125;</span><br><span class="line"></span><br><span class="line">s = pd.Series(dic)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: int64</span></span><br><span class="line"></span><br><span class="line">s1 = pd.Series(dic,index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;c&quot;</span>],name=<span class="string">&quot;aacc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c  -5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: aacc, dtype: int64</span></span><br></pre></td></tr></table></figure><h4 id="1-2-3-Series的常用属性">1.2.3 Series的常用属性</h4><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>index</strong></td><td>Series的索引对象</td></tr><tr><td><strong>values</strong></td><td>Series的值</td></tr><tr><td><strong>ndim</strong></td><td>Series的维度</td></tr><tr><td><strong>shape</strong></td><td>Series的形状</td></tr><tr><td><strong>size</strong></td><td>Series的元素个数</td></tr><tr><td><strong>dtype</strong>或<strong>dtypes</strong></td><td>Series的元素类型</td></tr><tr><td><strong>name</strong></td><td>Series的名称</td></tr><tr><td><strong>loc[]</strong></td><td>显式索引，按标签索引或切片</td></tr><tr><td><strong>iloc[]</strong></td><td>隐式索引，按位置索引或切片</td></tr><tr><td><strong>at[]</strong></td><td>使用标签访问单个元素</td></tr><tr><td><strong>iat[]</strong></td><td>使用位置访问单个元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">arrs = pd.Series([<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>],name=<span class="string">&quot;yjy&quot;</span>,index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(arrs)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># index Series的索引对象</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.index)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> arrs.index:</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values   Series的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndim  Series的维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.ndim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shape Series的形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.shape)</span><br><span class="line"></span><br><span class="line"><span class="comment"># size  Series的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype或dtypes Series的元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.dtype)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># name  Series的名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loc[] 显式索引，按标签索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.loc[<span class="string">&quot;c&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.loc[<span class="string">&quot;c&quot;</span>:<span class="string">&quot;d&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iloc[]   隐式索引，按位置索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.iloc[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.iloc[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># at[]  使用标签访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.at[<span class="string">&quot;a&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iat[] 使用位置访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.iat[<span class="number">3</span>])</span><br></pre></td></tr></table></figure><h4 id="1-2-4-Series的常用方法">1.2.4 Series的常用方法</h4><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>head()</strong></td><td>查看前n行数据，默认5行</td></tr><tr><td><strong>tail()</strong></td><td>查看后n行数据，默认5行</td></tr><tr><td><strong>isin()</strong></td><td>元素是否包含在参数集合中</td></tr><tr><td><strong>isna()</strong></td><td>元素是否为缺失值（通常为 NaN 或 None）</td></tr><tr><td><strong>sum()</strong></td><td>求和，会忽略 Series 中的缺失值</td></tr><tr><td><strong>mean()</strong></td><td>平均值</td></tr><tr><td><strong>min()</strong></td><td>最小值</td></tr><tr><td><strong>max()</strong></td><td>最大值</td></tr><tr><td><strong>var()</strong></td><td>方差</td></tr><tr><td><strong>std()</strong></td><td>标准差</td></tr><tr><td><strong>median()</strong></td><td>中位数</td></tr><tr><td><strong>mode()</strong></td><td>众数（出现频率最高的值），如果有多个值出现的频率相同且都是最高频率，这些值都会被包含在返回的 Series 中</td></tr><tr><td><strong>quantile(q,interpolation)</strong></td><td>指定位置的分位数  q的取值范围是 0 到 1 之间的浮点数或浮点数列表，如quantile(0.5)表示计算中位数（即第 50 百分位数）;  interpolation：指定在计算分位数时，如果分位数位置不在数据点上，采用的插值方法。默认值是线性插值 ‘linear’，还有其他可选值如 ‘lower’、‘higher’、‘midpoint’、‘nearest’ 等</td></tr><tr><td><strong>describe()</strong></td><td>常见统计信息</td></tr><tr><td><strong>value_count()</strong></td><td>每个元素的个数</td></tr><tr><td><strong>count()</strong></td><td>非缺失值元素的个数，如果要包含缺失值，用len()</td></tr><tr><td><strong>drop_duplicates()</strong></td><td>去重</td></tr><tr><td><strong>unique()</strong></td><td>去重后的数组</td></tr><tr><td><strong>nunique()</strong></td><td>去重后元素个数</td></tr><tr><td><strong>sample()</strong></td><td>随机采样</td></tr><tr><td><strong>sort_index()</strong></td><td>按索引排序</td></tr><tr><td><strong>sort_values()</strong></td><td>按值排序</td></tr><tr><td><strong>replace()</strong></td><td>用指定值代替原有值</td></tr><tr><td><strong>to_frame()</strong></td><td>将Series转换为DataFrame</td></tr><tr><td><strong>equals()</strong></td><td>判断两个Series是否相同</td></tr><tr><td><strong>keys()</strong></td><td>返回Series的索引对象</td></tr><tr><td><strong>corr()</strong></td><td>计算与另一个Series的相关系数   默认使用皮尔逊相关系数（Pearson correlation coefficient）来计算相关性。要求参与比较的数组元素类型都是数值型。  当相关系数为 1 时，表示两个变量完全正相关，即一个变量增加，另一个变量也随之增加。  当相关系数为 -1 时，表示两个变量完全负相关，即一个变量增加，另一个变量随之减少。  当相关系数为 0 时，表示两个变量之间不存在线性相关性。  例如，分析某地区的气温和冰淇淋销量之间的关系</td></tr><tr><td><strong>cov()</strong></td><td>计算与另一个Series的协方差</td></tr><tr><td><strong>hist()</strong></td><td>绘制直方图，用于展示数据的分布情况。它将数据划分为若干个区间（也称为 “bins”），并统计每个区间内数据的频数。  需要安装matplotlib包</td></tr><tr><td><strong>items()</strong></td><td>获取索引名以及值</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arrs = pd.Series([<span class="number">11</span>,<span class="number">22</span>,np.nan,<span class="literal">None</span>,<span class="number">44</span>,<span class="number">22</span>],index=[<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># head()   查看前n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail()   查看后n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.tail(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isin()   判断数组中的每一个元素是否包含在参数集合中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.isin([<span class="number">11</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isna()   元素是否为缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.isna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum() 求和，会忽略 Series 中的缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean()   平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># min() 最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.<span class="built_in">min</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># max() 最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># var() 方差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.var())</span><br><span class="line"></span><br><span class="line"><span class="comment"># std() 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.std())</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(arrs.var())</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># median()  中位数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.median())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mode()   众数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.mode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># quantile()   指定位置的分位数，如quantile(0.5)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.quantile(<span class="number">0.25</span>, interpolation=<span class="string">&quot;midpoint&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># describe()   常见统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.describe())</span><br><span class="line"></span><br><span class="line"><span class="comment"># value_counts()   每个元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># count()  非缺失值元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.count())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(arrs))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(arrs))</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop_duplicates() 去重  这里可以看出，底层None也作为NaN处理</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.drop_duplicates())</span><br><span class="line"></span><br><span class="line"><span class="comment"># unique()  去重后的数组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.unique())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># nunique() 去重后元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.nunique())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample()  随机采样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.sample())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_index()  按索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.sort_index())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_values() 按值排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.sort_values())</span><br><span class="line"><span class="comment"># replace() 用指定值代替原有值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arrs.replace(<span class="number">22</span>,<span class="string">&quot;haha&quot;</span>))</span><br><span class="line"><span class="comment"># to_frame()   将Series转换为DataFrame</span></span><br><span class="line"><span class="built_in">print</span>(arrs.to_frame())</span><br><span class="line"><span class="comment"># equals()  判断两个Series是否相同</span></span><br><span class="line">arr1 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">arr2 = pd.Series([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line"><span class="built_in">print</span>(arr1.equals(arr2))</span><br><span class="line"><span class="comment"># keys()   返回Series的索引对象</span></span><br><span class="line"><span class="built_in">print</span>(arrs.index)</span><br><span class="line"><span class="built_in">print</span>(arrs.keys())</span><br><span class="line"><span class="comment"># corr()   计算与另一个Series的相关系数</span></span><br><span class="line">arr3 = pd.Series([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">arr4 = pd.Series([<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">arr5 = pd.Series([<span class="number">1</span>, -<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">arr6 = pd.Series([<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr2))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr3))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr4))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr5.corr(arr6))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cov() 计算与另一个Series的协方差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(arr1.corr(arr3))</span><br><span class="line"><span class="comment"># hist()   绘制直方图</span></span><br><span class="line"></span><br><span class="line">arr7 = pd.Series([<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>])</span><br><span class="line"><span class="comment"># 绘制直方图</span></span><br><span class="line">arr7.hist(bins=<span class="number">3</span>)</span><br><span class="line"><span class="comment"># items()  获取索引名以及值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> arr7.items():</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(i,v)</span><br></pre></td></tr></table></figure><h4 id="1-2-5-Series的布尔索引">1.2.5 Series的布尔索引</h4><p>可以使用布尔索引从Series中筛选满足某些条件的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(&#123;<span class="string">&quot;a&quot;</span>: -<span class="number">1.2</span>, <span class="string">&quot;b&quot;</span>: <span class="number">3.5</span>, <span class="string">&quot;c&quot;</span>: <span class="number">6.8</span>, <span class="string">&quot;d&quot;</span>: <span class="number">2.9</span>&#125;)</span><br><span class="line"></span><br><span class="line">bools = s &gt; s.mean()  <span class="comment"># 将大于平均值的元素标记为 True</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bools)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a   False</span></span><br><span class="line"><span class="comment"># b   True</span></span><br><span class="line"><span class="comment"># c   True</span></span><br><span class="line"><span class="comment"># d   False</span></span><br><span class="line"><span class="comment"># dtype: bool</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s[bools])</span><br><span class="line"><span class="comment"># b   3.5</span></span><br><span class="line"><span class="comment"># c   6.8</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><h4 id="1-2-6-Series的运算">1.2.6 Series的运算</h4><p>1）Series与标量运算</p><p>标量会与每个元素进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series(&#123;<span class="string">&quot;a&quot;</span>: -<span class="number">1.2</span>, <span class="string">&quot;b&quot;</span>: <span class="number">3.5</span>, <span class="string">&quot;c&quot;</span>: <span class="number">6.8</span>, <span class="string">&quot;d&quot;</span>: <span class="number">2.9</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s * <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># a  -12.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># b   35.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># c   68.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># d   29.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><p>2）Series与Series运算</p><p>会根据标签索引进行对位计算，索引没有匹配上的会用NaN填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">s2 = pd.Series([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>], index=[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s1 + s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0   NaN</span></span><br><span class="line"><span class="comment"># 1   3.0</span></span><br><span class="line"><span class="comment"># 2   3.0</span></span><br><span class="line"><span class="comment"># 3   3.0</span></span><br><span class="line"><span class="comment"># 4   NaN</span></span><br><span class="line"><span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><h3 id="1-3-Pandas数据结构-DataFrame">1.3 Pandas数据结构-DataFrame</h3><p>DataFrame是Pandas 中的另一个核心数据结构，类似于一个二维的表格或数据库中的数据表。它是一个表格型的数据结构，它含有一组有序的列，每列可以是不同的值类型（数值、字符串、布尔型值），既有行索引也有列索引。</p><p>​     <img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250727204054622.png" alt="image-20250727204054622"></p><p>DataFrame中的数据是以一个或多个二维块存放的（而不是列表、字典或别的一维数据结构）。它可以被看做由Series组成的字典（共同用一个索引）。提供了各种功能来进行数据访问、筛选、分割、合并、重塑、聚合以及转换等操作，广泛用于数据分析、清洗、转换、可视化等任务。</p><p>​     <img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250727204119335.png" alt="image-20250727204119335"></p><h4 id="1-3-1-DataFrame的创建">1.3.1 DataFrame的创建</h4><p>1）直接通过字典创建DataFrame</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   id name  age</span></span><br><span class="line"><span class="comment"># 0  101  张三  20</span></span><br><span class="line"><span class="comment"># 1  102  李四  30</span></span><br><span class="line"><span class="comment"># 2  103  王五  40</span></span><br></pre></td></tr></table></figure><p>2）通过字典创建时指定列的顺序和行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]&#125;, columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>], index=[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>]</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   name  age</span></span><br><span class="line"><span class="comment"># 101  张三  20</span></span><br><span class="line"><span class="comment"># 102  李四  30</span></span><br><span class="line"><span class="comment"># 103  王五  40</span></span><br></pre></td></tr></table></figure><h4 id="1-3-2-DataFrame的常用属性">1.3.2 DataFrame的常用属性</h4><table><thead><tr><th><strong>属性</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>index</strong></td><td>DataFrame的行索引</td></tr><tr><td><strong>columns</strong></td><td>DataFrame的列标签</td></tr><tr><td><strong>values</strong></td><td>DataFrame的值</td></tr><tr><td><strong>ndim</strong></td><td>DataFrame的维度</td></tr><tr><td><strong>shape</strong></td><td>DataFrame的形状</td></tr><tr><td><strong>size</strong></td><td>DataFrame的元素个数</td></tr><tr><td><strong>dtypes</strong></td><td>DataFrame的元素类型</td></tr><tr><td><strong>T</strong></td><td>行列转置</td></tr><tr><td><strong>loc[]</strong></td><td>显式索引，按行列标签索引或切片</td></tr><tr><td><strong>iloc[]</strong></td><td>隐式索引，按行列位置索引或切片</td></tr><tr><td><strong>at[]</strong></td><td>使用行列标签访问单个元素</td></tr><tr><td><strong>iat[]</strong></td><td>使用行列位置访问单个元素</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]&#125;,index=[<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># index DataFrame的行索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.index)</span><br><span class="line"></span><br><span class="line"><span class="comment"># columns  DataFrame的列标签</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.columns)</span><br><span class="line"></span><br><span class="line"><span class="comment"># values   DataFrame的值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.values)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ndim  DataFrame的维度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.ndim)</span><br><span class="line"></span><br><span class="line"><span class="comment"># shape DataFrame的形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.shape)</span><br><span class="line"><span class="comment"># size  DataFrame的元素个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dtypes   DataFrame的元素类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dtypes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># T 行列转置</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.T)</span><br><span class="line"></span><br><span class="line"><span class="comment"># loc[] 显式索引，按行列标签索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;aa&quot;</span>:<span class="string">&quot;cc&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[:,[<span class="string">&quot;id&quot;</span>,<span class="string">&quot;name&quot;</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iloc[]   隐式索引，按行列位置索引或切片</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iloc[<span class="number">0</span>:<span class="number">3</span>,<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># at[]  使用行列标签访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.at[<span class="string">&quot;aa&quot;</span>,<span class="string">&quot;name&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># iat[] 使用行列位置访问单个元素</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.iat[<span class="number">0</span>,<span class="number">1</span>])</span><br></pre></td></tr></table></figure><h4 id="1-3-3-DataFrame的常用方法">1.3.3 DataFrame的常用方法</h4><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>head()</strong></td><td>查看前n行数据，默认5行</td></tr><tr><td><strong>tail()</strong></td><td>查看后n行数据，默认5行</td></tr><tr><td><strong>isin()</strong></td><td>元素是否包含在参数集合中</td></tr><tr><td><strong>isna()</strong></td><td>元素是否为缺失值</td></tr><tr><td><strong>sum()</strong></td><td>求和</td></tr><tr><td><strong>mean()</strong></td><td>平均值</td></tr><tr><td><strong>min()</strong></td><td>最小值</td></tr><tr><td><strong>max()</strong></td><td>最大值</td></tr><tr><td><strong>var()</strong></td><td>方差</td></tr><tr><td><strong>std()</strong></td><td>标准差</td></tr><tr><td><strong>median()</strong></td><td>中位数</td></tr><tr><td><strong>mode()</strong></td><td>众数</td></tr><tr><td><strong>quantile()</strong></td><td>指定位置的分位数，如quantile(0.5)</td></tr><tr><td><strong>describe()</strong></td><td>常见统计信息</td></tr><tr><td><strong>info()</strong></td><td>基本信息</td></tr><tr><td><strong>value_counts()</strong></td><td>每个元素的个数</td></tr><tr><td><strong>count()</strong></td><td>非空元素的个数</td></tr><tr><td><strong>drop_duplicates()</strong></td><td>去重</td></tr><tr><td><strong>sample()</strong></td><td>随机采样</td></tr><tr><td><strong>replace()</strong></td><td>用指定值代替原有值</td></tr><tr><td><strong>equals()</strong></td><td>判断两个DataFrame是否相同</td></tr><tr><td><strong>cummax()</strong></td><td>累计最大值</td></tr><tr><td><strong>cummin()</strong></td><td>累计最小值</td></tr><tr><td><strong>cumsum()</strong></td><td>累计和</td></tr><tr><td><strong>cumprod()</strong></td><td>累计积</td></tr><tr><td><strong>diff()</strong></td><td>一阶差分，对序列中的元素进行差分运算，也就是用当前元素减去前一个元素得到差值，默认情况下，它会计算一阶差分，即相邻元素之间的差值。参数：  periods：整数，默认为 1。表示要向前或向后移动的周期数，用于计算差值。正数表示向前移动，负数表示向后移动。  axis：指定计算的轴方向。0 或 ‘index’ 表示按列计算，1 或 ‘columns’ 表示按行计算，默认值为 0。</td></tr><tr><td><strong>sort_index()</strong></td><td>按行索引排序</td></tr><tr><td><strong>sort_values()</strong></td><td>按某列的值排序，可传入列表来按多列排序，并通过ascending参数设置升序或降序</td></tr><tr><td><strong>nlargest()</strong></td><td>返回某列最大的n条数据</td></tr><tr><td><strong>nsmallest()</strong></td><td>返回某列最小的n条数据</td></tr></tbody></table><p>在Pandas的 DataFrame 方法里，axis 是一个非常重要的参数，它用于指定操作的方向。</p><p>axis 参数可以取两个主要的值，即 0 或 ‘index’，以及 1 或 ‘columns’ ，其含义如下：</p><p>Ø axis=0 或 axis=‘index’：表示操作沿着行的方向进行，也就是对每一列的数据进行处理。例如，当计算每列的均值时，就是对每列中的所有行数据进行计算。</p><p>Ø axis=1 或 axis=‘columns’：表示操作沿着列的方向进行，也就是对每行的数据进行处理。例如，当计算每行的总和时，就是对每行中的所有列数据进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>,<span class="number">104</span>,<span class="number">105</span>,<span class="number">106</span>,<span class="number">101</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>,<span class="string">&quot;赵六&quot;</span>,<span class="string">&quot;冯七&quot;</span>,<span class="string">&quot;周八&quot;</span>,<span class="string">&quot;张三&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="literal">None</span>, <span class="number">60</span>,<span class="number">10</span>]&#125;,index=[<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;dd&quot;</span>, <span class="string">&quot;ee&quot;</span>, <span class="string">&quot;ff&quot;</span>,<span class="string">&quot;aa&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># head()   查看前n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># tail()   查看后n行数据，默认5行</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail())</span><br><span class="line"></span><br><span class="line"><span class="comment"># isin()   元素是否包含在参数集合中</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isin([<span class="number">103</span>,<span class="number">106</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># isna()   元素是否为缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum() 求和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mean()   平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].mean())</span><br><span class="line"></span><br><span class="line"><span class="comment"># min() 最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].<span class="built_in">min</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># max() 最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].<span class="built_in">max</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># var() 方差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].var())</span><br><span class="line"></span><br><span class="line"><span class="comment"># std() 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].std())</span><br><span class="line"></span><br><span class="line"><span class="comment"># median()  中位数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].median())</span><br><span class="line"></span><br><span class="line"><span class="comment"># mode()   众数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].mode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># quantile()   指定位置的分位数，如quantile(0.5)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>].quantile(<span class="number">0.5</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># describe()   常见统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br><span class="line"></span><br><span class="line"><span class="comment"># info()   基本信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># value_counts()   每个元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># count()  非空元素的个数</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.count())</span><br><span class="line"></span><br><span class="line"><span class="comment"># drop_duplicates() 去重</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.duplicated(subset=<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sample()  随机采样</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sample())</span><br><span class="line"></span><br><span class="line"><span class="comment"># replace() 用指定值代替原有值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.replace(<span class="number">20</span>,<span class="string">&quot;haha&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># equals()  判断两个DataFrame是否相同</span></span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>], <span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1.equals(df2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cummax()  累计最大值</span></span><br><span class="line"></span><br><span class="line">df3 = pd.DataFrame(&#123;<span class="string">&#x27;A&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">4</span>],<span class="string">&#x27;B&#x27;</span>: [<span class="number">1</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">3</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按列 等价于axis=0 默认</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cummax(axis=<span class="string">&quot;index&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按行 等价于axis=1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cummax(axis=<span class="string">&quot;columns&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># cummin()  累计最小值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cummin())</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumsum()  累计和</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cumsum())</span><br><span class="line"></span><br><span class="line"><span class="comment"># cumprod() 累计积</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.cumprod())</span><br><span class="line"></span><br><span class="line"><span class="comment"># diff()   一阶差分</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3.diff())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_index()  按行索引排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_index())</span><br><span class="line"></span><br><span class="line"><span class="comment"># sort_values() 按某列的值排序，可传入列表来按多列排序，并通过ascending参数设置升序或降序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(by=<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># nlargest()   返回某列最大的n条数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.nlargest(n=<span class="number">2</span>,columns=<span class="string">&quot;age&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># nsmallest()  返回某列最小的n条数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.nsmallest(n=<span class="number">1</span>,columns=<span class="string">&quot;age&quot;</span>))</span><br></pre></td></tr></table></figure><h4 id="1-3-4-DataFrame的布尔索引">1.3.4 DataFrame的布尔索引</h4><p>可以使用布尔索引从DataFrame中筛选满足某些条件的行。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">101</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">25</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&quot;age&quot;</span>] &gt; <span class="number">25</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#101  False</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#104   True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#103   True</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#102  False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: age, dtype: bool</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   name  age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  李四  30</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  王五  40</span></span><br></pre></td></tr></table></figure><h4 id="1-3-5-DataFrame的运算">1.3.5 DataFrame的运算</h4><p>1）DataFrame与标量运算</p><p>标量与每个元素进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">101</span>, <span class="number">104</span>, <span class="number">103</span>, <span class="number">102</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    name  age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  张三张三  40</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  李四李四  60</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  王五王五  80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  赵六赵六  20</span></span><br></pre></td></tr></table></figure><p>2）DataFrame与DataFrame运算</p><p>根据标签索引进行对位计算，索引没有匹配上的用NaN填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  data=&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;田七&quot;</span>]&#125;,</span><br><span class="line"></span><br><span class="line">  columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;age&quot;</span>],</span><br><span class="line"></span><br><span class="line">  index=[<span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>, <span class="number">105</span>],</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1 + df2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    name  age</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  NaN  NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  李四张三  30.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  王五李四  50.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  赵六王五  70.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 105  NaN  NaN</span></span><br></pre></td></tr></table></figure><h4 id="1-3-6-DataFrame的更改操作">1.3.6 DataFrame的更改操作</h4><p>1）设置行索引</p><p>创建DataFrame时如果不指定行索引，pandas会自动添加从0开始的索引。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>], <span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   age name  id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0  20  张三  101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  30  李四  102</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  40  王五  103</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3  10  赵六  104</span></span><br></pre></td></tr></table></figure><p>（1）通过set_index()设置行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># df.set_index(&quot;id&quot;)：将 DataFrame df 的 &quot;id&quot; 列设为新的行索引（index）。</span></span><br><span class="line"><span class="comment"># inplace=True：直接修改原 DataFrame，而不是返回一个新的 DataFrame（如果不加 inplace=True，则需要写成 df = df.set_index(&quot;id&quot;)）。</span></span><br><span class="line">df.set_index(<span class="string">&quot;id&quot;</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 设置行索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br></pre></td></tr></table></figure><p>（2）通过reset_index()重置行索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.reset_index(inplace=<span class="literal">True</span>)  <span class="comment"># 重置索引</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   id  age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0  101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3  104  10  赵六</span></span><br></pre></td></tr></table></figure><p>2）修改行索引名和列名</p><p>（1）通过rename()修改行索引名和列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>], <span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;id&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df.rename(index=&#123;<span class="number">101</span>: <span class="string">&quot;一&quot;</span>, <span class="number">102</span>: <span class="string">&quot;二&quot;</span>, <span class="number">103</span>: <span class="string">&quot;三&quot;</span>, <span class="number">104</span>: <span class="string">&quot;四&quot;</span>&#125;, columns=&#123;<span class="string">&quot;age&quot;</span>: <span class="string">&quot;年龄&quot;</span>, <span class="string">&quot;name&quot;</span>: <span class="string">&quot;姓名&quot;</span>&#125;, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   年龄  姓名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 一  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 二  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 三  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 四  10  赵六</span></span><br></pre></td></tr></table></figure><p>（2）将index和columns重新赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df.index = [<span class="string">&quot;Ⅰ&quot;</span>, <span class="string">&quot;Ⅱ&quot;</span>, <span class="string">&quot;Ⅲ&quot;</span>, <span class="string">&quot;Ⅳ&quot;</span>]</span><br><span class="line"></span><br><span class="line">df.columns = [<span class="string">&quot;年齡&quot;</span>, <span class="string">&quot;名稱&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#   年齡  名稱</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅰ  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅱ  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅲ  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Ⅳ  10  赵六</span></span><br></pre></td></tr></table></figure><p>3）添加列</p><p>通过 df[“列名”] 添加列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;phone&quot;</span>] = [<span class="string">&quot;13333333333&quot;</span>, <span class="string">&quot;14444444444&quot;</span>, <span class="string">&quot;15555555555&quot;</span>, <span class="string">&quot;16666666666&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name      phone</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三  13333333333</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四  14444444444</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五  15555555555</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六  16666666666</span></span><br></pre></td></tr></table></figure><p>4）删除列</p><p>（1）通过 df.drop(“列名”, axis=1) 删除，也可是删除行 axis=0</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df.drop(<span class="string">&quot;phone&quot;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 删除phone，按列删除，inplace=True表示直接在原对象上修改</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br></pre></td></tr></table></figure><p>（2）通过 del df[“列名”] 删除</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> df[<span class="string">&quot;phone&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  10  赵六</span></span><br></pre></td></tr></table></figure><p>5）插入列</p><p>通过 insert(loc, column, value) 插入。该方法没有inplace参数，直接在原数据上修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df.insert(loc=<span class="number">0</span>, column=<span class="string">&quot;phone&quot;</span>, value=df[<span class="string">&quot;age&quot;</span>] * df.index)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment">#    phone  age name</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 101  2020  20  张三</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 102  3060  30  李四</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 103  4120  40  王五</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 104  1040  10  赵六</span></span><br></pre></td></tr></table></figure><h4 id="1-3-7-DataFrame数据的导入与导出">1.3.7 DataFrame数据的导入与导出</h4><p>1）导出数据</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>to_csv()</strong></td><td>将数据保存为csv格式文件，数据之间以逗号分隔，可通过sep参数设置使用其他分隔符，可通过index参数设置是否保存行标签，可通过header参数设置是否保存列标签。</td></tr><tr><td><strong>to_pickle()</strong></td><td>如要保存的对象是计算的中间结果，或者保存的对象以后会在Python中复用，可把对象保存为.pickle文件。如果保存成pickle文件，只能在python中使用。文件的扩展名可以是.p、.pkl、.pickle。</td></tr><tr><td><strong>to_excel()</strong></td><td>保存为Excel文件，需安装openpyxl包。</td></tr><tr><td><strong>to_clipboard()</strong></td><td>保存到剪切板。</td></tr><tr><td><strong>to_dict()</strong></td><td>保存为字典。</td></tr><tr><td><strong>to_hdf()</strong></td><td>保存为HDF格式，需安装tables包。</td></tr><tr><td><strong>to_html()</strong></td><td>保存为HTML格式，需安装lxml、html5lib、beautifulsoup4包。</td></tr><tr><td><strong>to_json()</strong></td><td>保存为JSON格式。</td></tr><tr><td><strong>to_feather()</strong></td><td>feather是一种文件格式，用于存储二进制对象。feather对象也可以加载到R语言中使用。feather格式的主要优点是在Python和R语言之间的读写速度要比csv文件快。feather数据格式通常只用中间数据格式，用于Python和R之间传递数据，一般不用做保存最终数据。需安装pyarrow包。</td></tr><tr><td><strong>to_sql()</strong></td><td>保存到数据库。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">os.makedirs(<span class="string">&quot;data&quot;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;age&quot;</span>: [<span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">10</span>], <span class="string">&quot;name&quot;</span>: [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>, <span class="string">&quot;赵六&quot;</span>], <span class="string">&quot;id&quot;</span>: [<span class="number">101</span>, <span class="number">102</span>, <span class="number">103</span>, <span class="number">104</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;id&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;data/df.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;data/df.tsv&quot;</span>, sep=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 设置分隔符为 \t</span></span><br><span class="line"></span><br><span class="line">df.to_csv(<span class="string">&quot;data/df_noindex.csv&quot;</span>, index=<span class="literal">False</span>)  <span class="comment"># index=False 不保存行索引</span></span><br><span class="line"></span><br><span class="line">df.to_pickle(<span class="string">&quot;data/df.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_excel(<span class="string">&quot;data/df.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_clipboard()</span><br><span class="line"></span><br><span class="line">df_dict = df.to_dict()</span><br><span class="line"></span><br><span class="line">df.to_hdf(<span class="string">&quot;data/df.h5&quot;</span>, key=<span class="string">&quot;df&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_html(<span class="string">&quot;data/df.html&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_json(<span class="string">&quot;data/df.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.to_feather(<span class="string">&quot;data/df.feather&quot;</span>)</span><br></pre></td></tr></table></figure><p>2）导入数据</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>read_csv()</strong></td><td>加载csv格式的数据。可通过sep参数指定分隔符，可通过index_col参数指定行索引。</td></tr><tr><td><strong>read_pickle()</strong></td><td>加载pickle格式的数据。</td></tr><tr><td><strong>read_excel()</strong></td><td>加载Excel格式的数据。</td></tr><tr><td><strong>read_clipboard()</strong></td><td>加载剪切板中的数据。</td></tr><tr><td><strong>read_hdf()</strong></td><td>加载HDF格式的数据。</td></tr><tr><td><strong>read_html()</strong></td><td>加载HTML格式的数据。</td></tr><tr><td><strong>read_json()</strong></td><td>加载JSON格式的数据。</td></tr><tr><td><strong>read_feather()</strong></td><td>加载feather格式的数据。</td></tr><tr><td><strong>read_sql()</strong></td><td>加载数据库中的数据。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">df_csv = pd.read_csv(<span class="string">&quot;data/df.csv&quot;</span>, index_col=<span class="string">&quot;id&quot;</span>)  <span class="comment"># 指定行索引</span></span><br><span class="line"></span><br><span class="line">df_tsv = pd.read_csv(<span class="string">&quot;data/df.tsv&quot;</span>, sep=<span class="string">&quot;\t&quot;</span>)  <span class="comment"># 指定分隔符</span></span><br><span class="line"></span><br><span class="line">df_pkl = pd.read_pickle(<span class="string">&quot;data/df.pkl&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_excel = pd.read_excel(<span class="string">&quot;data/df.xlsx&quot;</span>, index_col=<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_clipboard = pd.read_clipboard(index_col=<span class="string">&quot;id&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_from_dict = pd.DataFrame(df_dict)</span><br><span class="line"></span><br><span class="line">df_hdf = pd.read_hdf(<span class="string">&quot;data/df.h5&quot;</span>, key=<span class="string">&quot;df&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_html = pd.read_html(<span class="string">&quot;data/df.html&quot;</span>, index_col=<span class="number">0</span>)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">df_json = pd.read_json(<span class="string">&quot;data/df.json&quot;</span>)</span><br><span class="line"></span><br><span class="line">df_feather = pd.read_feather(<span class="string">&quot;data/df.feather&quot;</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_csv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_tsv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_pkl)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_excel)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_clipboard)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_from_dict)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_hdf)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_html)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_json)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_feather)</span><br></pre></td></tr></table></figure><h3 id="1-4-Pandas日期数据处理初识">1.4 Pandas日期数据处理初识</h3><h4 id="1-4-1-to-datetime-进行日期格式转换">1.4.1 to_datetime()进行日期格式转换</h4><p>1）参数说明</p><table><thead><tr><th><strong>参数名</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>arg</strong></td><td>要转换为日期时间的对象</td></tr><tr><td><strong>errors</strong></td><td>ignore,raise,coerce, 默认为ignore,表示无效的解析将会返回原值</td></tr><tr><td><strong>dayfirst</strong></td><td>指定日期解析顺序。如果为True，则以日期开头解析日期，例如：“10/11/12”解析为2012-11-10。默认false</td></tr><tr><td><strong>yearfirst</strong></td><td>如果为True，则以日期开头解析，例如：“10/11/12”解析为2010-11-12。如果dayfirst和yearfirst都为True，则yearfirst在前面。默认false。当日期字符串格式不明确时，指定年份是否在最前面。当日期字符串是 ‘2010/1/4’ 这种形式，由于年份是 4 位数字，pandas 能很清晰地识别出这是年份，所以即使 yearfirst 为 False，也不会影响其正确解析</td></tr><tr><td><strong>utc</strong></td><td>返回utc，即协调世界时间</td></tr><tr><td><strong>format</strong></td><td>格式化显示时间的格式，字符串，默认值为None</td></tr><tr><td><strong>exact</strong></td><td>要求格式完全匹配</td></tr><tr><td><strong>unit</strong></td><td>参数的单位表示时间的单位</td></tr><tr><td><strong>infer_datetime_format</strong></td><td>如果为True且未给出格式，则尝试基于第一个非nan元素推断datetime字符串的格式，如果可以推断，则切换到更快的解析方法。在某些情况下，这可以将解析速度提高5-10倍。</td></tr><tr><td><strong>origin</strong></td><td>默认值为unix,定义参考日期1970-01-01</td></tr><tr><td><strong>cache</strong></td><td>使用唯一的已转换日期缓存来应用日期时间转换。在解析重复日期字符串时产生显著的加速。</td></tr></tbody></table><p>2）将字符串字段转换为日期类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;gmv&quot;</span>:[<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>],<span class="string">&quot;trade_date&quot;</span>:[<span class="string">&quot;2025-01-06&quot;</span>,<span class="string">&quot;2023-10-31&quot;</span>,<span class="string">&quot;2023-12-31&quot;</span>,<span class="string">&quot;2023-01-05&quot;</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;ymd&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;trade_date&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>1.4.2 时间属性访问器对象Series.dt,获取日期数据的年月日星期</p><p>1）获取年月日</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;yy&#x27;</span>],df[<span class="string">&#x27;mm&#x27;</span>],df[<span class="string">&#x27;dd&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.year,df[<span class="string">&#x27;ymd&#x27;</span>].dt.month,df[<span class="string">&#x27;ymd&#x27;</span>].dt.day</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>2）获取星期</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;week&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.day_name()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>3）获取日期所在季度</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;quarter&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.quarter</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><p>4）判断日期是否月底年底</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&#x27;mend&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.is_month_end</span><br><span class="line"></span><br><span class="line">df[<span class="string">&#x27;yend&#x27;</span>]=df[<span class="string">&#x27;ymd&#x27;</span>].dt.is_year_end</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h4 id="1-4-3-to-period-获取统计周期">1.4.3 to_period()获取统计周期</h4><p>freq：这是 to_period() 方法最重要的参数，用于指定要转换的时间周期频率</p><p>常见的取值如下：</p><p>Ø “D”：按天周期，例如 2024-01-01 会转换为 2024-01-01 这个天的周期。</p><p>Ø “W”：按周周期，通常以周日作为一周的结束，比如日期落在某一周内，就会转换为该周的周期表示。</p><p>Ø “M”：按月周期，像 2024-05-15 会转换为 2024-05。</p><p>Ø “Q”：按季度周期，一年分为四个季度，日期会转换到对应的季度周期，例如 2024Q2 。</p><p>Ø “A” 或 “Y”：按年周期，如 2024-07-20 会转换为 2024 。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;ystat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;Y&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;mstat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;M&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;qstat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;Q&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;wstat&quot;</span>] = df[<span class="string">&quot;ymd&quot;</span>].dt.to_period(<span class="string">&quot;W&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure><h3 id="1-5-DataFrame数据分析入门">1.5 DataFrame数据分析入门</h3><h4 id="1-5-1-加载数据集">1.5.1 加载数据集</h4><p>使用weather（天气）数据集。其中包含6个字段：</p><p>Ø date：日期，年-月-日格式。</p><p>Ø precipitation：降水量。</p><p>Ø temp_max：最高温度。</p><p>Ø temp_min：最低温度。</p><p>Ø wind：风力。</p><p>Ø weather：天气状况。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;D:\\Note\\机器学习\\2.资料\\data\\weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(df))  <span class="comment"># 查看df类型</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.shape)  <span class="comment"># 查看df形状</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.columns)  <span class="comment"># 查看df的列名</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dtypes)  <span class="comment"># 查看df各列数据类型</span></span><br><span class="line"></span><br><span class="line">df.info()  <span class="comment"># 查看df基本信息</span></span><br></pre></td></tr></table></figure><p>pandas与Python常用数据类型对照：</p><table><thead><tr><th><strong>pandas****类型</strong></th><th><strong>Python****类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>object</strong></td><td>string</td><td>字符串类型</td></tr><tr><td><strong>int64</strong></td><td>int</td><td>整型</td></tr><tr><td><strong>float64</strong></td><td>float</td><td>浮点型</td></tr><tr><td><strong>datetime64</strong></td><td>datetime</td><td>日期时间类型</td></tr></tbody></table><h4 id="1-5-2-查看部分数据">1.5.2 查看部分数据</h4><p>1）通过head()、tail()获取前n行或后n行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.head())</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">10</span>))</span><br></pre></td></tr></table></figure><p>2）获取一列或多列数据</p><p>（1）加载一列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">df_date_series = df[<span class="string">&quot;date&quot;</span>]  <span class="comment"># 返回的是Series</span></span><br><span class="line"></span><br><span class="line">df_date_dataframe = df[[<span class="string">&quot;date&quot;</span>]]  <span class="comment"># 返回的是DataFrame</span></span><br><span class="line"><span class="comment"># 双层中括号 [[&quot;date&quot;]] 表示选择列列表（即使只有一列），返回的是 DataFrame（二维数据结构）</span></span><br></pre></td></tr></table></figure><blockquote><table><thead><tr><th>操作方式</th><th>返回类型</th><th>数据结构</th><th>适用场景</th></tr></thead><tbody><tr><td><code>df[&quot;date&quot;]</code></td><td><code>Series</code></td><td>一维</td><td>单列操作（如 <code>.apply()</code>, <code>.str</code> 方法）</td></tr><tr><td><code>df[[&quot;date&quot;]]</code></td><td><code>DataFrame</code></td><td>二维</td><td>需要保持 <code>DataFrame</code> 结构的操作（如 <code>.merge()</code>, <code>.join()</code>）</td></tr></tbody></table><h3 id="为什么这样设计？"><strong>为什么这样设计？</strong></h3><ul><li><strong>灵活性</strong>：<code>Series</code> 适合单列计算（如 <code>.str</code> 字符串操作、<code>.dt</code> 时间操作），而 <code>DataFrame</code> 适合表格操作（如合并、分组）。</li><li><strong>一致性</strong>：<code>[[&quot;col1&quot;, &quot;col2&quot;]]</code> 总是返回 <code>DataFrame</code>，即使只选一列，避免因列数不同而改变类型。</li></ul></blockquote><p>（2）加载多列数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[[<span class="string">&quot;date&quot;</span>, <span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]]  <span class="comment"># 获取多列数据</span></span><br></pre></td></tr></table></figure><p>3）按行获取数据</p><p>（1）<strong>loc</strong>：通过行标签获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">1</span>]  <span class="comment"># 获取行标签为1的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[[<span class="number">1</span>, <span class="number">10</span>, <span class="number">100</span>]]  <span class="comment"># 获取行标签分别为1、10、100的数据</span></span><br></pre></td></tr></table></figure><p>（2）<strong>iloc</strong>：通过行位置获取数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.iloc[<span class="number">0</span>]  <span class="comment"># 获取行位置为0的数据</span></span><br><span class="line"></span><br><span class="line">df.iloc[-<span class="number">1</span>]  <span class="comment"># 获取行位置为最后一位的数据</span></span><br></pre></td></tr></table></figure><p>4）获取指定行与列的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df.loc[<span class="number">1</span>, <span class="string">&quot;precipitation&quot;</span>]  <span class="comment"># 获取行标签为1，列标签为precipitation的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[:, <span class="string">&quot;precipitation&quot;</span>]  <span class="comment"># 获取所有行，列标签为precipitation的数据</span></span><br><span class="line"></span><br><span class="line">df.iloc[:, [<span class="number">3</span>, <span class="number">5</span>, -<span class="number">1</span>]]  <span class="comment"># 获取所有行，列位置为3，5，最后一位的数据</span></span><br><span class="line"></span><br><span class="line">df.iloc[:<span class="number">10</span>, <span class="number">2</span>:<span class="number">6</span>]  <span class="comment"># 获取前10行，列位置为2、3、4、5的数据</span></span><br><span class="line"></span><br><span class="line">df.loc[:<span class="number">10</span>, [<span class="string">&quot;date&quot;</span>, <span class="string">&quot;precipitation&quot;</span>, <span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]]  <span class="comment"># 通过行列标签获取数据</span></span><br></pre></td></tr></table></figure><h4 id="1-5-3-分组聚合计算">1.5.3 分组聚合计算</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&quot;分组字段&quot;</span>)[<span class="string">&quot;要聚合的字段&quot;</span>].聚合函数()</span><br><span class="line"></span><br><span class="line">df.groupby([<span class="string">&quot;分组字段&quot;</span>, <span class="string">&quot;分组字段2&quot;</span>, ...])[[<span class="string">&quot;要聚合的字段&quot;</span>, <span class="string">&quot;要聚合的字段2&quot;</span>, ...]].聚合函数()</span><br></pre></td></tr></table></figure><p>（1）将数据按月分组，并统计最大温度和最小温度的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将字符串类型的日期date转换为datetime日期pd.to_datetime(df[&quot;date&quot;])</span></span><br><span class="line">df[<span class="string">&quot;month&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).dt.to_period(<span class="string">&quot;M&quot;</span>).astype(<span class="built_in">str</span>)  <span class="comment"># 将date转换为 年-月 的格式</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df_groupby_date = df.groupby(<span class="string">&quot;month&quot;</span>)  <span class="comment"># 按month分组，返回一个分组对象(DataFrameGroupBy)</span></span><br><span class="line"></span><br><span class="line">month_temp = df_groupby_date[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]]  <span class="comment"># 从分组对象中选择特定的列</span></span><br><span class="line"></span><br><span class="line">month_temp_mean = month_temp.mean()  <span class="comment"># 对每个列求平均值</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 以上代码可以写在一起</span></span><br><span class="line"></span><br><span class="line">month_temp_mean = df.groupby(<span class="string">&quot;month&quot;</span>)[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]].mean()</span><br><span class="line"></span><br><span class="line"><span class="comment">#      temp_max  temp_min</span></span><br><span class="line"><span class="comment"># month</span></span><br><span class="line"><span class="comment"># 2012-01  7.054839  1.541935</span></span><br><span class="line"><span class="comment"># 2012-02  9.275862  3.203448</span></span><br><span class="line"><span class="comment"># 2012-03  9.554839  2.838710</span></span><br><span class="line"><span class="comment"># 2012-04  14.873333  5.993333</span></span><br><span class="line"><span class="comment"># 2012-05  17.661290  8.190323</span></span><br></pre></td></tr></table></figure><p>分组后默认会将分组字段作为行索引。如果分组字段有多个，得到的是复合索引。</p><p>（2）分组频数计算</p><p>统计每个月不同天气状况的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&quot;month&quot;</span>)[<span class="string">&quot;weather&quot;</span>].nunique()</span><br><span class="line"></span><br><span class="line"><span class="comment"># date</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-01   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-02   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-03   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-04   4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2012-05   3</span></span><br></pre></td></tr></table></figure><h4 id="1-5-4-基本绘图">1.5.4 基本绘图</h4><p>plot()：pandas 提供的绘图方法，它基于 matplotlib 库。将前面计算得到的均值结果绘制成图表，默认情况下会绘制折线图，其中 “month” 作为 x 轴，“temp_max” 和 “temp_min” 的均值作为 y 轴。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.groupby(<span class="string">&quot;month&quot;</span>)[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]].mean().plot()  <span class="comment"># 使用plot绘制折线图</span></span><br></pre></td></tr></table></figure><p>​</p><h4 id="1-5-5-常用统计值">1.5.5 常用统计值</h4><p>可通过describe()查看常用统计信息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.describe()  <span class="comment"># 查看常用统计信息</span></span><br><span class="line"></span><br><span class="line">df.describe().T  <span class="comment"># 行列转置</span></span><br></pre></td></tr></table></figure><p>可通过include参数指定要统计哪些数据类型的列。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df.describe(include=<span class="string">&quot;all&quot;</span>)  <span class="comment"># 统计所有列</span></span><br><span class="line"></span><br><span class="line">df.describe(include=[<span class="string">&quot;float64&quot;</span>])  <span class="comment"># 只统计数据类型为float64的列</span></span><br></pre></td></tr></table></figure><h4 id="1-5-6-常用排序方法">1.5.6 常用排序方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">**nlargest(n, [****列名<span class="number">1</span>,** **列名<span class="number">2</span>, …])****：**按列排序的最大n个</span><br><span class="line"></span><br><span class="line">**nsmallest(n, [****列名<span class="number">1</span>,** **列名<span class="number">2</span>, …])****：**按列排序的最小n个</span><br><span class="line"></span><br><span class="line">**sort_values([****列名<span class="number">1</span>,** **列名<span class="number">2</span>, …], asceding=[<span class="literal">True</span>, <span class="literal">False</span>, …])****：**按列升序或降序排序</span><br><span class="line"></span><br><span class="line">**drop_duplicates(subset=[****列名<span class="number">1</span>,** **列名<span class="number">2</span>])****：**按列去重</span><br></pre></td></tr></table></figure><p>（1）找到最高温度最大的30天</p><p>通过nlargest()找出temp_max最大的30条数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.nlargest(<span class="number">30</span>, <span class="string">&quot;temp_max&quot;</span>) </span><br></pre></td></tr></table></figure><p>（2）从最高温度最大的30天中找出最低温度最小的5天</p><p>通过nlargest()找出temp_min最小的5条数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.nlargest(<span class="number">30</span>, <span class="string">&quot;temp_max&quot;</span>).nsmallest(<span class="number">5</span>, <span class="string">&quot;temp_min&quot;</span>)</span><br></pre></td></tr></table></figure><p>（3）找出每年的最高温度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;year&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).dt.to_period(<span class="string">&quot;Y&quot;</span>).astype(<span class="built_in">str</span>)  <span class="comment"># 将date转换为 年 格式</span></span><br><span class="line"></span><br><span class="line">df_sort = df.sort_values([<span class="string">&quot;year&quot;</span>, <span class="string">&quot;temp_max&quot;</span>], ascending=[<span class="literal">True</span>, <span class="literal">False</span>])  <span class="comment"># 按year升序，temp_max降序排序</span></span><br><span class="line"></span><br><span class="line">df_sort.drop_duplicates(subset=<span class="string">&quot;year&quot;</span>)  <span class="comment"># 按year去重</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather  year</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 228  2012-08-16       0.0    34.4    18.3  2.8   sun 2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 546  2013-06-30       0.0    33.9    17.2  2.5   sun 2013</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 953  2014-08-11       0.5    35.6    17.8  2.6   rain 2014</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1295  2015-07-19       0.0    35.0    17.2  3.3   sun 2015</span></span><br></pre></td></tr></table></figure><h4 id="1-5-7-案例：简单数据分析练习">1.5.7 案例：简单数据分析练习</h4><p>使用employees（员工）数据集，其中包含10个字段：</p><p>Ø employee_id：员工id。</p><p>Ø first_name：员工名称。</p><p>Ø last_name：员工姓氏。</p><p>Ø email：员工邮箱。</p><p>Ø phone_number：员工电话号码。</p><p>Ø job_id：员工工种。</p><p>Ø salary：员工薪资。</p><p>Ø commission_pct：员工佣金比例。</p><p>Ø manager_id：员工领导的id。</p><p>Ø department_id：员工的部门id。</p><p>1）加载数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 加载员工数据</span></span><br></pre></td></tr></table></figure><p>2）查看数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.head())  <span class="comment"># 查看前5行</span></span><br><span class="line"></span><br><span class="line">df.info() <span class="comment"># 查看数据信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.describe())  <span class="comment"># 查看统计信息</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.shape)  <span class="comment"># 查看数据形状</span></span><br></pre></td></tr></table></figure><p>3）找出薪资最低、最高的员工</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 布尔索引</span></span><br><span class="line"><span class="built_in">print</span>(df[df[<span class="string">&quot;salary&quot;</span>] == df[<span class="string">&quot;salary&quot;</span>].<span class="built_in">min</span>()])  <span class="comment"># 找出最低薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[df[<span class="string">&quot;salary&quot;</span>] == df[<span class="string">&quot;salary&quot;</span>].<span class="built_in">min</span>()])  <span class="comment"># 找出最低薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[df[<span class="string">&quot;salary&quot;</span>] == df[<span class="string">&quot;salary&quot;</span>].<span class="built_in">max</span>()])  <span class="comment"># 找出最高薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(<span class="string">&quot;salary&quot;</span>).head(<span class="number">1</span>))  <span class="comment"># 使用排序的方法找出最低薪资的员工</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.sort_values(<span class="string">&quot;salary&quot;</span>, ascending=<span class="literal">False</span>).head(<span class="number">1</span>))  <span class="comment"># 使用排序的方法找出最高薪资的员工</span></span><br></pre></td></tr></table></figure><p>4）找出薪资最高的10名员工</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.nlargest(<span class="number">10</span>, <span class="string">&quot;salary&quot;</span>))  <span class="comment"># 薪资最高的10名员工</span></span><br></pre></td></tr></table></figure><p>5）查看所有部门id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;department_id&quot;</span>].unique())  <span class="comment"># 所有部门id</span></span><br></pre></td></tr></table></figure><p>6）查看每个部门的员工数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;employee_id&quot;</span>].count().rename(<span class="string">&quot;employee_count&quot;</span>))  <span class="comment"># 查看每个部门的员工数</span></span><br></pre></td></tr></table></figure><p>7）绘图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;employee_id&quot;</span>].count().rename(<span class="string">&quot;employee_count&quot;</span>))  <span class="comment"># 查看每个部门的员工数</span></span><br></pre></td></tr></table></figure><p>​</p><p>8）薪资的分布</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;salary&quot;</span>].mean())  <span class="comment"># 平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;salary&quot;</span>].std())  <span class="comment"># 标准差</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;salary&quot;</span>].median())  <span class="comment"># 中位数</span></span><br></pre></td></tr></table></figure><p>9）找出平均薪资最高的部门id</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].mean().nlargest(<span class="number">1</span>))  <span class="comment"># 平均薪资最高的部门</span></span><br></pre></td></tr></table></figure><h3 id="1-6-Padas的数据组合函数">1.6 Padas的数据组合函数</h3><h4 id="1-6-1-concat连接">1.6.1 concat连接</h4><p>沿着一条轴将多个对象堆叠到一起，可通过axis参数设置沿哪一条轴连接。</p><p>1）Series与Series连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">s1 = pd.Series([<span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>], index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">s2 = pd.Series([<span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>], index=[<span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">s3 = pd.Series([<span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>], index=[<span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([s1, s2, s3])  <span class="comment"># 按行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1   A</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2   B</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4   D</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 5   E</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 7   G</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8   H</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: object</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([s1, s2, s3], axis=<span class="number">1</span>)  <span class="comment"># 按列连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#    0   1   2</span></span><br><span class="line"><span class="comment"># 1   A  NaN  NaN</span></span><br><span class="line"><span class="comment"># 2   B  NaN  NaN</span></span><br><span class="line"><span class="comment"># 4  NaN   D  NaN</span></span><br><span class="line"><span class="comment"># 5  NaN   E  NaN</span></span><br><span class="line"><span class="comment"># 7  NaN  NaN   G</span></span><br><span class="line"><span class="comment"># 8  NaN  NaN   H</span></span><br><span class="line">缺失值会用NaN填充。</span><br></pre></td></tr></table></figure><p>2）DataFrame与Series连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">s1 = pd.Series(data=[<span class="number">7</span>, <span class="number">10</span>], index=[<span class="number">1</span>, <span class="number">2</span>], name=<span class="string">&quot;a&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, s1])  <span class="comment"># 按行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a   b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  7  NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  10  NaN</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, s1], axis=<span class="number">1</span>)  <span class="comment"># 按列连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b  a</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4  7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5  10</span></span><br></pre></td></tr></table></figure><p>3）DataFrame与DataFrame连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">7</span>, <span class="number">8</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2])  <span class="comment"># 按行连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  7  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  8  11</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2], axis=<span class="number">1</span>)  <span class="comment"># 按列连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b  a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  1  4  7  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  2  5  8  11</span></span><br></pre></td></tr></table></figure><p>4）重置索引</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">可通过ignore_index=<span class="literal">True</span>来重置索引。</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">7</span>, <span class="number">8</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2], ignore_index=<span class="literal">True</span>)  <span class="comment"># 重置索引</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#   a  b</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 0  1  4</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1  2  5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2  7  10</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3  8  11</span></span><br></pre></td></tr></table></figure><p>5）类似join的连接</p><p>默认的合并方式是对其他轴进行并集合并（join=outer），可以用join=inner实现其他轴上的交集合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(data=&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">4</span>, <span class="number">5</span>]&#125;, index=[<span class="number">1</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(data=&#123;<span class="string">&quot;b&quot;</span>: [<span class="number">7</span>, <span class="number">8</span>], <span class="string">&quot;c&quot;</span>: [<span class="number">10</span>, <span class="number">11</span>]&#125;, index=[<span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2])</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    a  b   c</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  1.0  4  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  2.0  5  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  NaN  7  10.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  NaN  8  11.0</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">pd.concat([df1, df2], join=<span class="string">&quot;inner&quot;</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   b</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  7</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  8</span></span><br></pre></td></tr></table></figure><h4 id="1-6-2-merge合并">1.6.2 merge合并</h4><p>通过一个或多个列将行连接。</p><p>1）数据连接的类型</p><p>merge()实现了三种数据连接的类型：一对一、多对一和多对多。</p><p>（1）一对一连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;hire_date&quot;</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   Lisa    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1    Bob    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Jake    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue    2014</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 通过相同的字段名employee进行关联的</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR    2014</span></span><br></pre></td></tr></table></figure><p>（2）多对一连接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">在需要连接的两个列中，有一列的值有重复。通过多对一连接获得的结果将会保留重复值。</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>], <span class="string">&quot;supervisor&quot;</span>: [<span class="string">&quot;Carly&quot;</span>, <span class="string">&quot;Guido&quot;</span>, <span class="string">&quot;Steve&quot;</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      group supervisor</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Accounting    Carly</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Engineering    Guido</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2      HR    Steve</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group supervisor</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting    Carly</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering    Guido</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering    Guido</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR    Steve</span></span><br><span class="line"></span><br><span class="line">在supervisor列中有些值会因为输入数据的对应关系而有所重复。</span><br></pre></td></tr></table></figure><p>（3）多对多连接</p><p>如果左右两个输入的共同列都包含重复值，那么合并的结果就是一种多对多连接。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line"></span><br><span class="line">​    <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>, <span class="string">&quot;HR&quot;</span>],</span><br><span class="line"></span><br><span class="line">​    <span class="string">&quot;skills&quot;</span>: [<span class="string">&quot;math&quot;</span>, <span class="string">&quot;spreadsheets&quot;</span>, <span class="string">&quot;coding&quot;</span>, <span class="string">&quot;linux&quot;</span>, <span class="string">&quot;spreadsheets&quot;</span>, <span class="string">&quot;organization&quot;</span>],</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      group     skills</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Accounting      math</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Accounting  spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Engineering     coding</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Engineering     linux</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4      HR  spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5      HR  organization</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group     skills</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting      math</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1    Bob  Accounting  spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Jake  Engineering     coding</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3   Jake  Engineering     linux</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4   Lisa  Engineering     coding</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5   Lisa  Engineering     linux</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 6    Sue      HR spreadsheets</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 7    Sue      HR organization</span></span><br></pre></td></tr></table></figure><p>多对多连接产生的是行的笛卡尔积。由于左边有2个Engineering，右边有2个Engineering，所以最终结果有4个Engineering。</p><p>2）设置合并的键与索引</p><p>merge()会将两个输入的一个或多个共同列作为键进行合并。但由于两个输入要合并的列通常都不是同名的，因此merge()提供了一些参数处理这个问题。</p><p>（1）通过on指定使用某个列连接，只能在有共同列名的时候使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;hire_date&quot;</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   Lisa    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1    Bob    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Jake    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue    2014</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2, on=<span class="string">&quot;employee&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR    2014</span></span><br></pre></td></tr></table></figure><p>（2）两对象列名不同，通过left_on和right_on分别指定列名</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;salary&quot;</span>: [<span class="number">70000</span>, <span class="number">80000</span>, <span class="number">120000</span>, <span class="number">90000</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  salary</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob  70000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake  80000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa  120000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue  90000</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2, left_on=<span class="string">&quot;employee&quot;</span>, right_on=<span class="string">&quot;name&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df3)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#  employee     group  name  salary</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    Bob  Accounting  Bob  70000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Jake  Engineering  Jake  80000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Lisa  Engineering  Lisa  120000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    Sue      HR  Sue  90000</span></span><br></pre></td></tr></table></figure><p>（3）通过left_index和right_index设置合并的索引</p><p>通过设置merge()中的left_index、right_index参数将索引设置为键来实现合并。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(</span><br><span class="line"></span><br><span class="line">  &#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;group&quot;</span>: [<span class="string">&quot;Accounting&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;Engineering&quot;</span>, <span class="string">&quot;HR&quot;</span>]&#125;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;employee&quot;</span>: [<span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;hire_date&quot;</span>: [<span class="number">2004</span>, <span class="number">2008</span>, <span class="number">2012</span>, <span class="number">2014</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df1.set_index(<span class="string">&quot;employee&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">df2.set_index(<span class="string">&quot;employee&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         group</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># employee</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Bob     Accounting</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Jake    Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Lisa    Engineering</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Sue         HR</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># employee</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Lisa      2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Bob       2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Jake      2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Sue       2014</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 设置索引后，如果不指定关联列会报错，建议通过以下方式指定，on=&quot;employee&quot;也可#以实现，但是不同的解释器可能效果不一样，因为设置索引后，employee就不算是列了</span></span><br><span class="line"></span><br><span class="line">df3 = pd.merge(df1, df2, left_index=<span class="literal">True</span>, right_index=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         group  hire_date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># employee</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Bob     Accounting    2008</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Jake    Engineering    2012</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Lisa    Engineering    2004</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Sue         HR    2014</span></span><br></pre></td></tr></table></figure><p>DataFrame实现了join()方法，可以按照索引进行数据合并。但要求没有重叠的列，或通过lsuffix、rsuffix指定重叠列的后缀。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;value1&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;key&#x27;</span>: [<span class="string">&#x27;B&#x27;</span>, <span class="string">&#x27;C&#x27;</span>, <span class="string">&#x27;D&#x27;</span>],</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;value2&#x27;</span>: [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 合并两个 DataFrame，并处理列名冲突</span></span><br><span class="line"></span><br><span class="line">df1.join(df2,lsuffix=<span class="string">&#x27;_left&#x27;</span>,rsuffix=<span class="string">&#x27;_right&#x27;</span>)</span><br></pre></td></tr></table></figure><p>3）设置数据连接的集合操作规则</p><p>当一个值出现在一列，却没有出现在另一列时，就需要考虑集合操作规则了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Peter&quot;</span>, <span class="string">&quot;Paul&quot;</span>, <span class="string">&quot;Mary&quot;</span>], <span class="string">&quot;food&quot;</span>: [<span class="string">&quot;fish&quot;</span>, <span class="string">&quot;beans&quot;</span>, <span class="string">&quot;bread&quot;</span>]&#125;, columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;food&quot;</span>])</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Mary&quot;</span>, <span class="string">&quot;Joseph&quot;</span>], <span class="string">&quot;drink&quot;</span>: [<span class="string">&quot;wine&quot;</span>, <span class="string">&quot;beer&quot;</span>]&#125;, columns=[<span class="string">&quot;name&quot;</span>, <span class="string">&quot;drink&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  food</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Peter  fish</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Paul  beans</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Mary  bread</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    name drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   Mary  wine</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Joseph  beer</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  food drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Mary  bread  wine</span></span><br></pre></td></tr></table></figure><p>合并两个数据集，在name列中只有一个共同的值Mary。默认情况下，结果中只会包含两个输入集合的交集，这种连接方式被称为内连接（inner join）。</p><p>我们可以通过how参数设置连接方式，默认值为inner。how参数支持的数据连接方式还有outer、left和right。外连接（outer join）返回两个输入列的并集，所有缺失值都用 NaN 填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, how=<span class="string">&quot;outer&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    name  food drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Joseph   NaN  beer</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   Mary  bread  wine</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   Paul  beans  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Peter  fish  NaN</span></span><br><span class="line"></span><br><span class="line">左连接（left join）和右连接（right join）返回的结果分别只包含左列和右列。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, how=<span class="string">&quot;left&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  food drink</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Peter  fish  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Paul  beans  NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Mary  bread  wine</span></span><br></pre></td></tr></table></figure><p>4）重复列名的处理</p><p>可能会遇到两个输入DataFrame有重名列的情况，merge()会自动为其增加后缀_x和_y，也可以通过suffixes参数自定义后缀名。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">df1 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;rank&quot;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]&#125;)</span><br><span class="line"></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&quot;name&quot;</span>: [<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Jake&quot;</span>, <span class="string">&quot;Lisa&quot;</span>, <span class="string">&quot;Sue&quot;</span>], <span class="string">&quot;rank&quot;</span>: [<span class="number">3</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">2</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob   1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa   3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue   4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df2)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob   3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake   1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa   4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue   2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, on=<span class="string">&quot;name&quot;</span>))  <span class="comment"># 不指定后缀名，默认为_x和_y</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank_x  rank_y</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob    1    3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake    2    1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa    3    4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue    4    2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.merge(df1, df2, on=<span class="string">&quot;name&quot;</span>, suffixes=(<span class="string">&quot;_df1&quot;</span>, <span class="string">&quot;_df2&quot;</span>)))  <span class="comment"># 通过suffixes指定后缀名</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   name  rank_df1  rank_df2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  Bob     1     3</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  Jake     2     1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  Lisa     3     4</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  Sue     4     2</span></span><br></pre></td></tr></table></figure><h3 id="1-7-Padas的缺失值处理函数">1.7 Padas的缺失值处理函数</h3><h4 id="1-7-1-pandas中的缺失值">1.7.1 pandas中的缺失值</h4><p>pandas使用浮点值NaN（Not a Number）表示缺失数据，使用NA（Not Available）表示缺失值。可以通过isnull()、isna()或notnull()、notna()方法判断某个值是否为缺失值。</p><p>Nan通常表示一个无效的或未定义的数字值，是浮点数的一种特殊取值，用于表示那些不能表示为正常数字的情况，如 0/0、∞-∞等数学运算的结果。nan与任何值（包括它自身）进行比较的结果都为False。例如在 Python 中，nan == nan返回False。</p><p>NA一般用于表示数据不可用或缺失的情况，它的含义更侧重于数据在某种上下文中是缺失或不存在的，不一定特指数字类型的缺失。</p><p>na和nan都用于表示缺失值，但nan更强调是数值计算中的特殊值，而na更强调数据的可用性或存在性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([np.nan, <span class="literal">None</span>, pd.NA])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   None</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.isnull())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   True</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: bool</span></span><br></pre></td></tr></table></figure><h4 id="1-7-2-加载数据中包含缺失值">1.7.2 加载数据中包含缺失值</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>可以通过keep_default_na参数设置是否将空白值设置为缺失值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>, keep_default_na=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date precipitation temp_max temp_min wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6   12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>可通过na_values参数将指定值设置为缺失值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>, na_values=[<span class="string">&quot;2015-12-31&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.tail(<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       NaN    NaN    NaN  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460     NaN      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><h4 id="1-7-3-查看缺失值">1.7.3 查看缺失值</h4><p>1）通过isnull()查看缺失值数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.isnull().<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># date        0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># precipitation   303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># temp_max     303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># temp_min     303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># wind       303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># weather      303</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: int64</span></span><br></pre></td></tr></table></figure><p>2）通过missingno条形图展示缺失值</p><p>先安装missingno包：pip install missingno</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> missingno <span class="keyword">as</span> msno</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">msno.bar(df)</span><br></pre></td></tr></table></figure><p><img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250728072336765.png" alt="image-20250728072336765"></p><p>​</p><p>3）通过热力图查看缺失值的相关性</p><p>missingno绘制的热力图能够展示数据集中不同列的缺失值之间的相关性。这里的相关性体现的是当某一列出现缺失值时，其他列出现缺失值的可能性。如果两个列的缺失值呈现正相关，意味着当其中一列有缺失值时，另一列也很可能有缺失值；若为负相关，则表示当一列有缺失值时，另一列更倾向于没有缺失值。</p><p>Ø 颜色与数值：热力图中的颜色和数值反映了列之间缺失值的相关性。接近 1 表示正相关，接近 -1 表示负相关，接近 0 则表示缺失值之间没有明显的关联。</p><p>Ø 示例说明：假如 A 列和 B 列在热力图中对应区域颜色较深且数值接近 1，这就表明当 A 列出现缺失值时，B 列也很可能出现缺失值；若数值接近 -1，情况则相反。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msno.heatmap(df)</span><br></pre></td></tr></table></figure><p><img src="./%E5%A4%A7%E6%A8%A1%E5%9E%8B%E6%8A%80%E6%9C%AF%E4%B9%8Bnumpy%E4%B8%8Epandas.assets/image-20250728072411823.png" alt="image-20250728072411823"></p><p>​</p><h4 id="1-7-4-剔除缺失值">1.7.4 剔除缺失值</h4><p>通过dropna()方法来剔除缺失值。</p><p>1）Series剔除缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">s = pd.Series([<span class="number">1</span>, pd.NA, <span class="literal">None</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0    1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1   &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2   None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s.dropna())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0   1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># dtype: object</span></span><br></pre></td></tr></table></figure><p>2）DataFrame剔除缺失值</p><p>无法从DataFrame中单独剔除一个值，只能剔除缺失值所在的整行或整列。默认情况下，dropna()会剔除任何包含缺失值的整行数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [pd.NA, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   2   3  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;   4  6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   0  1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  2  3  5</span></span><br></pre></td></tr></table></figure><p>可以设置按不同的坐标轴剔除缺失值，比如axis=1（或 axis=‘columns’）会剔除任何包含缺失值的整列数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>], [pd.NA, <span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   2   3  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;   4  6</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  6</span></span><br></pre></td></tr></table></figure><p>有时只需要剔除全部是缺失值的行或列，或者绝大多数是缺失值的行或列。这些需求可以通过设置how或thresh参数来满足，它们可以设置剔除行或列缺失值的数量阈值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [pd.NA, pd.NA, <span class="number">5</span>], [pd.NA, pd.NA, pd.NA]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  &lt;NA&gt;  &lt;NA&gt;   5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(how=<span class="string">&quot;all&quot;</span>))  <span class="comment"># 如果所有值都是缺失值,则删除这一行</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  &lt;NA&gt;  &lt;NA&gt;  5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(thresh=<span class="number">2</span>))  <span class="comment"># 如果至少有2个值不是缺失值,则保留这一行</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  1  &lt;NA&gt;  2</span></span><br></pre></td></tr></table></figure><p>可以通过设置subset参数来设置某一列有缺失值则进行剔除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame([[<span class="number">1</span>, pd.NA, <span class="number">2</span>], [pd.NA, pd.NA, <span class="number">5</span>], [pd.NA, pd.NA, pd.NA]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    0   1   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1  &lt;NA&gt;   2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  &lt;NA&gt;  &lt;NA&gt;   5</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  &lt;NA&gt;  &lt;NA&gt;  &lt;NA&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.dropna(subset=[<span class="number">0</span>]))  <span class="comment"># 如果0列有缺失值,则删除这一行</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   0   1  2</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  1  &lt;NA&gt;  2</span></span><br></pre></td></tr></table></figure><h4 id="1-7-5-填充缺失值">1.7.5 填充缺失值</h4><p>1）使用固定值填充</p><p>通过fillna()方法，传入值或字典进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather_withna.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.fillna(<span class="number">0</span>).tail())  <span class="comment"># 使用固定值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       0.0    0.0    0.0  0.0    0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.fillna(&#123;<span class="string">&quot;temp_max&quot;</span>: <span class="number">60</span>, <span class="string">&quot;temp_min&quot;</span>: -<span class="number">60</span>&#125;).tail())  <span class="comment"># 使用字典来填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       NaN    60.0   -60.0  NaN   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>2）使用统计值填充</p><p>通过fillna()方法，传入统计后的值进行填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.fillna(df[[<span class="string">&quot;precipitation&quot;</span>, <span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>, <span class="string">&quot;wind&quot;</span>]].mean()).tail())  <span class="comment"># 使用平均值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation  temp_max  temp_min    wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30    3.052332  15.851468 7.877202  3.242055   NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31    20.600000  12.200000 5.000000  3.800000   rain</span></span><br></pre></td></tr></table></figure><p>3）使用前后的有效值填充</p><p>通过ffill()或bfill()方法使用前面或后面的有效值填充。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.ffill().tail())  <span class="comment"># 使用前面的有效值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30       0.0    11.1    4.4  4.8   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.bfill().tail())  <span class="comment"># 使用后面的有效值填充</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  precipitation temp_max  temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30      20.6    12.2    5.0  3.8   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31      20.6    12.2    5.0  3.8   rain</span></span><br></pre></td></tr></table></figure><p>4）通过线性插值填充</p><p>通过interpolate()方法进行线性插值填充。线性插值操作，就是用于在已知数据点之间估算未知数据点的值。interpolate 方法支持多种插值方法，可通过 method 参数指定，常见的方法有：</p><p>Ø ‘linear’：线性插值，基于两点之间的直线来估算缺失值，适用于数据呈线性变化的情况。</p><p>Ø ‘time’：适用于时间序列数据，会考虑时间间隔进行插值。</p><p>Ø ‘polynomial’：多项式插值，通过拟合多项式曲线来估算缺失值，可通过 order 参数指定多项式的阶数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 创建包含缺失值的 Series</span></span><br><span class="line"></span><br><span class="line">s = pd.Series([<span class="number">1</span>, np.nan, <span class="number">3</span>, <span class="number">4</span>, np.nan, <span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 使用默认的线性插值方法填充缺失值</span></span><br><span class="line"></span><br><span class="line">s_interpolated = s.interpolate()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s_interpolated)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   1.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   2.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   3.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3   4.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4   5.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5   6.0</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><h3 id="1-8-Padas的apply函数">1.8 Padas的apply函数</h3><p>apply()函数可以对DataFrame或Series的数据进行逐行、逐列或逐元素的操作。可以使用自定义函数对数据进行变换、计算或处理，通常用于处理复杂的变换逻辑，或者处理不能通过向量化操作轻松完成的任务。</p><h4 id="1-8-1-Series使用apply">1.8.1 Series使用apply()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;a&quot;</span>].apply(f))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   100</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   200</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   300</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: a, dtype: int64</span></span><br></pre></td></tr></table></figure><p>也可以传入lambda表达式。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;a&quot;</span>].apply(<span class="keyword">lambda</span> x: x * <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   100</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   200</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   300</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: a, dtype: int64</span></span><br></pre></td></tr></table></figure><p>传入带参数的函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y=<span class="number">10</span></span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x * y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;a&quot;</span>].apply(f, y=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   50</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   100</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   150</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: a, dtype: int64</span></span><br></pre></td></tr></table></figure><h4 id="1-8-2-DataFrame使用apply">1.8.2 DataFrame使用apply()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x * <span class="number">10</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.apply(f))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#    a   b</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  100  400</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  200  500</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  300  600</span></span><br></pre></td></tr></table></figure><p>默认axis=0，按行方向进行操作，对列进行统计；</p><p>可以设置axis=1，按照列的方向进行操作，参数设置按行处理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x[<span class="string">&quot;a&quot;</span>] / x[<span class="string">&quot;b&quot;</span>]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">50</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.apply(f, axis=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0   0.25</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   0.40</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   0.50</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtype: float64</span></span><br></pre></td></tr></table></figure><p>注意：df.apply 一次只能处理一个 Series（当 axis=0 时处理列，当 axis=1 时处理行），而你定义的函数 f 接收两个参数，不能直接使用 df.apply(f)</p><h4 id="1-8-3-向量化函数">1.8.3 向量化函数</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> np.nan</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x / y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">0</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(df[<span class="string">&quot;a&quot;</span>], df[<span class="string">&quot;b&quot;</span>]))  <span class="comment"># ValueError</span></span><br></pre></td></tr></table></figure><p>上述代码会报错，因为y==0中，y为向量而0为标量。</p><p>（1）可以通过np.vectorize()将函数向量化来进行计算</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> np.nan</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x / y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">0</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line">f_vec = np.vectorize(f)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f_vec(df[<span class="string">&quot;a&quot;</span>], df[<span class="string">&quot;b&quot;</span>]))  <span class="comment"># [0.25  nan 0.5 ]</span></span><br></pre></td></tr></table></figure><p>（2）也可以使用@np.vectorize装饰器将函数向量化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@np.vectorize</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x, y</span>):</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> y == <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> np.nan</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x / y</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&quot;a&quot;</span>: [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>], <span class="string">&quot;b&quot;</span>: [<span class="number">40</span>, <span class="number">0</span>, <span class="number">60</span>]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(f(df[<span class="string">&quot;a&quot;</span>], df[<span class="string">&quot;b&quot;</span>]))  <span class="comment"># [0.25  nan 0.5 ]</span></span><br></pre></td></tr></table></figure><h3 id="1-9-Padas的数据聚合、转换、过滤函数">1.9 Padas的数据聚合、转换、过滤函数</h3><h4 id="1-9-1-DataFrameGroupBy对象">1.9.1 DataFrameGroupBy对象</h4><p>对DataFrame对象调用groupby()方法后，会返回DataFrameGroupBy对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>))  <span class="comment"># 按department_id分组，返回DataFrameGroupBy对象</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x0000024FCBAFD700&gt;</span></span><br></pre></td></tr></table></figure><p>这个对象可以看成是一种特殊形式的 DataFrame，里面隐藏着若干组数据，但是在没有应用累计函数之前不会计算。GroupBy对象是一种非常灵活的抽象类型。在大多数场景中，可以将它看成是DataFrame的集合。</p><p>1）查看分组</p><p>通过groups属性查看分组结果，返回一个字典，字典的键是分组的标签，值是属于该组的所有索引的列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>).groups)  <span class="comment"># 查看分组结果</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># &#123;10.0: [100], 20.0: [101, 102], 30.0: [14, 15, 16, 17, 18, 19]...</span></span><br></pre></td></tr></table></figure><p>通过get_group()方法获取分组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>).get_group(<span class="number">50</span>))  <span class="comment"># 获取分组为50的数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#   employee_id first_name   last_name   email...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20      120   Matthew     Weiss   MWEISS...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 21      121    Adam     Fripp   AFRIPP...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 22      122    Payam   Kaufling  PKAUFLIN...</span></span><br></pre></td></tr></table></figure><p>2）按列取值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>])  <span class="comment"># 按department_id分组，取salary列</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;pandas.core.groupby.generic.SeriesGroupBy object at 0x0000022456D6F2F0&gt;</span></span><br></pre></td></tr></table></figure><p>这里从原来的DataFrame中取某个列名作为一个Series组。与GroupBy对象一样，直到我们运行累计函数，才会开始计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].mean())  <span class="comment"># 计算每个部门平均薪资</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0    4400.000000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0    9500.000000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0    4150.000000</span></span><br></pre></td></tr></table></figure><p>3）按组迭代</p><p>GroupBy对象支持直接按组进行迭代，返回的每一组都是Series或DataFrame。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> dept_id,group <span class="keyword">in</span> df.groupby(<span class="string">&quot;department_id&quot;</span>):</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">f&quot;当前组为<span class="subst">&#123;dept_id&#125;</span>，组里的数据情况<span class="subst">&#123;group.shape&#125;</span>:&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(group.iloc[:,<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;-------------------&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 当前组为10.0，组里的数据情况(1, 10):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#    employee_id first_name last_name</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 100      200  Jennifer   Whalen</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># -------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 当前组为20.0，组里的数据情况(2, 10):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#    employee_id first_name  last_name</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 101      201   Michael  Hartstein</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 102      202     Pat     Fay</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>4）按多字段分组</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">salary_mean = df.groupby([<span class="string">&quot;department_id&quot;</span>, <span class="string">&quot;job_id&quot;</span>])[</span><br><span class="line"></span><br><span class="line">  [<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>]</span><br><span class="line"></span><br><span class="line">].mean()  <span class="comment"># 按department_id和job_id分组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean.index)  <span class="comment"># 查看分组后的索引</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># MultiIndex([( 10.0,   &#x27;AD_ASST&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 20.0,   &#x27;MK_MAN&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 20.0,   &#x27;MK_REP&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 30.0,  &#x27;PU_CLERK&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ( 30.0,   &#x27;PU_MAN&#x27;),</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       ...</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean.columns)  <span class="comment"># 查看分组后的列</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Index([&#x27;salary&#x27;, &#x27;commission_pct&#x27;], dtype=&#x27;object&#x27;)</span></span><br><span class="line"></span><br><span class="line">按多个字段分组后得到的索引为复合索引。</span><br><span class="line"></span><br><span class="line">可通过reset_index()方法重置索引。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean.reset_index())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   department_id    job_id     salary  commission_pct</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0       10.0   AD_ASST  4400.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1       20.0    MK_MAN 13000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2       20.0    MK_REP  6000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3       30.0   PU_CLERK  2780.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4       30.0    PU_MAN 11000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">也可以在分组的时候通过as_index = <span class="literal">False</span>参数（默认是<span class="literal">True</span>）重置索引。</span><br><span class="line"></span><br><span class="line">salary_mean = df.groupby([<span class="string">&quot;department_id&quot;</span>, <span class="string">&quot;job_id&quot;</span>], as_index=<span class="literal">False</span>)[</span><br><span class="line"></span><br><span class="line">  [<span class="string">&quot;salary&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>]</span><br><span class="line"></span><br><span class="line">].mean()  <span class="comment"># 按department_id和job_id分组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary_mean)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#   department_id    job_id     salary  commission_pct</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0       10.0   AD_ASST  4400.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1       20.0    MK_MAN 13000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2       20.0    MK_REP  6000.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3       30.0   PU_CLERK  2780.000000       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4       30.0    PU_MAN 11000.000000       NaN</span></span><br></pre></td></tr></table></figure><p>5）cut()</p><p>pandas.cut()用于将连续数据（如数值型数据）分割成离散的区间。可以使用cut()来将数据划分为不同的类别或范围，通常用于数据的分箱处理。</p><p>cut()部分参数说明：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>x</strong></td><td>要分箱的数组或Series，通常是数值型数据。</td></tr><tr><td><strong>bins</strong></td><td>切分区间的数值列表或者整数。如果是整数，则表示将数据均匀地分成多少个区间。如果是列表，则需要指定每个区间的边界。</td></tr><tr><td><strong>right</strong></td><td>默认True，表示每个区间的右端点是闭区间，即包含右端点。如果设置为False，则左端点为闭区间。</td></tr><tr><td><strong>labels</strong></td><td>传入一个列表指定每个区间的标签。</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 加载员工数据</span></span><br><span class="line"></span><br><span class="line">salary = pd.cut(df.iloc[<span class="number">9</span>:<span class="number">16</span>][<span class="string">&quot;salary&quot;</span>], <span class="number">3</span>) <span class="comment"># 分成3部分 分为了三个区间</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9    (8366.667, 11000.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13   (5733.333, 8366.667]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14   (8366.667, 11000.0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15    (3092.1, 5733.333]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: salary, dtype: category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Categories (3, interval[float64, right]): [(3092.1, 5733.333] &lt; (5733.333, 8366.667] &lt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#                      (8366.667, 11000.0]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">salary = pd.cut(df.iloc[<span class="number">9</span>:<span class="number">16</span>][<span class="string">&quot;salary&quot;</span>], [<span class="number">0</span>, <span class="number">10000</span>, <span class="number">20000</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14   (10000, 20000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15     (0, 10000]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: salary, dtype: category</span></span><br><span class="line"><span class="comment"># Categories (2, interval[int64, right]): [(0, 10000] &lt; (10000, 20000]]</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">salary = pd.cut(df.iloc[<span class="number">9</span>:<span class="number">16</span>][<span class="string">&quot;salary&quot;</span>], <span class="number">3</span>, labels=[<span class="string">&quot;low&quot;</span>, <span class="string">&quot;medium&quot;</span>, <span class="string">&quot;high&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(salary)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 9    high</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 11   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 12   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 13   medium</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 14    high</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 15    low</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Name: salary, dtype: category</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Categories (3, object): [&#x27;low&#x27; &lt; &#x27;medium&#x27; &lt; &#x27;high&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="1-9-2-分组聚合">1.9.2 分组聚合</h4><p>df.groupby(“分组字段”)[“要聚合的字段”].聚合函数()</p><p>df.groupby([“分组字段”, “分组字段2”, …])[[“要聚合的字段”, “要聚合的字段2”, …]].聚合函数()</p><p>1）常用聚合函数</p><table><thead><tr><th><strong>方法</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>sum()</strong></td><td>求和</td></tr><tr><td><strong>mean()</strong></td><td>平均值</td></tr><tr><td><strong>min()</strong></td><td>最小值</td></tr><tr><td><strong>max()</strong></td><td>最大值</td></tr><tr><td><strong>var()</strong></td><td>方差</td></tr><tr><td><strong>std()</strong></td><td>标准差</td></tr><tr><td><strong>median()</strong></td><td>中位数</td></tr><tr><td><strong>quantile()</strong></td><td>指定位置的分位数，如quantile(0.5)</td></tr><tr><td><strong>describe()</strong></td><td>常见统计信息</td></tr><tr><td><strong>size()</strong></td><td>所有元素的个数</td></tr><tr><td><strong>count()</strong></td><td>非空元素的个数</td></tr><tr><td><strong>first</strong></td><td>第一行</td></tr><tr><td><strong>last</strong></td><td>最后一行</td></tr><tr><td><strong>nth</strong></td><td>第n行</td></tr></tbody></table><p>2）一次计算多个统计值</p><p>可以通过agg()或aggregate()进行更复杂的操作，如一次计算多个统计值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 按department_id分组，计算salary的最小值，中位数，最大值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].agg([<span class="string">&quot;min&quot;</span>, <span class="string">&quot;median&quot;</span>, <span class="string">&quot;max&quot;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment">#           min  median    max</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 10.0       4400.0  4400.0  4400.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 20.0       6000.0  9500.0 13000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 30.0       2500.0  2850.0 11000.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 40.0       6500.0  6500.0  6500.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 50.0       2100.0  3100.0  8200.</span></span><br></pre></td></tr></table></figure><p>3）多个列计算不同的统计值</p><p>也可以在agg()中传入字典，对多个列计算不同的统计值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按department_id分组，统计job_id的种类数，commission_pct的平均值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>).agg(&#123;<span class="string">&quot;job_id&quot;</span>: <span class="string">&quot;nunique&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>: <span class="string">&quot;mean&quot;</span>&#125;))</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         job_id commission_pct</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0         1       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0         2       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0         2       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 40.0         1       NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 50.0         3       NaN</span></span><br></pre></td></tr></table></figure><p>4）重命名统计值</p><p>可以在agg()后通过rename()对统计后的列重命名。</p><p>df = pd.read_csv(“data/employees.csv”)  # 读取员工数据</p><p># 按department_id分组，统计job_id的种类数，commission_pct的平均值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line"></span><br><span class="line">  df.groupby(<span class="string">&quot;department_id&quot;</span>)</span><br><span class="line"></span><br><span class="line">  .agg(</span><br><span class="line"></span><br><span class="line">​    &#123;<span class="string">&quot;job_id&quot;</span>: <span class="string">&quot;nunique&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>: <span class="string">&quot;mean&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">  .rename(</span><br><span class="line"></span><br><span class="line">​    columns=&#123;<span class="string">&quot;job_id&quot;</span>: <span class="string">&quot;工种数&quot;</span>, <span class="string">&quot;commission_pct&quot;</span>: <span class="string">&quot;佣金比例平均值&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         工种数  佣金比例平均值</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0       1    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0       2    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0       2    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 40.0       1    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 50.0       3    NaN</span></span><br></pre></td></tr></table></figure><p>5）自定义函数</p><p>可以向agg()中传入自定义函数进行计算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;统计每个部门员工last_name的首字母&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  result = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line"></span><br><span class="line">​    result.add(i[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;last_name&quot;</span>].agg(f))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># department_id</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10.0                          &#123;W&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 20.0                         &#123;F, H&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 30.0                   &#123;B, T, R, C, K, H&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 40.0                          &#123;M&#125;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 50.0   &#123;O, E, K, S, W, L, P, D, C, V, B, T, M, J, F, ...</span></span><br></pre></td></tr></table></figure><h4 id="1-9-3-分组转换">1.9.3 分组转换</h4><p>聚合操作返回的是对组内全量数据缩减过的结果，而转换操作会返回一个新的全量数据。数据经过转换之后，其形状与原来的输入数据是一样的。</p><p>1）通过transform()将每一组的样本数据减去各组的均值，实现数据标准化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].transform(<span class="keyword">lambda</span> x: x - x.mean()))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0    4666.666667</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1   -2333.333333</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2   -2333.333333</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3    3240.000000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4    240.000000</span></span><br></pre></td></tr></table></figure><p>2）通过transform()按分组使用平均值填充缺失值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/employees.csv&quot;</span>)  <span class="comment"># 读取员工数据</span></span><br><span class="line"></span><br><span class="line">na_index = pd.Series(df.index.tolist()).sample(<span class="number">30</span>)  <span class="comment"># 随机挑选30条数据</span></span><br><span class="line"></span><br><span class="line">df.loc[na_index, <span class="string">&quot;salary&quot;</span>] = pd.NA  <span class="comment"># 将这30条数据的salary设置为缺失值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].agg([<span class="string">&quot;size&quot;</span>, <span class="string">&quot;count&quot;</span>]))  <span class="comment"># 查看每组数据总数与非空数据数</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fill_missing</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  \<span class="comment"># 使用平均值填充，如果平均值也为NaN，用0填充</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> np.isnan(x.mean()):</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> x.fillna(x.mean())</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;salary&quot;</span>] = df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].transform(fill_missing)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.groupby(<span class="string">&quot;department_id&quot;</span>)[<span class="string">&quot;salary&quot;</span>].agg([<span class="string">&quot;size&quot;</span>, <span class="string">&quot;count&quot;</span>]))  <span class="comment"># 查看每组数据总数与非空数据数</span></span><br></pre></td></tr></table></figure><h4 id="1-9-4-分组过滤">1.9.4 分组过滤</h4><p>过滤操作可以让我们按照分组的属性丢弃若干数据。</p><p>例如，我们可能只需要保留commission_pct不包含空值的分组的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">commission_pct_filter = df.groupby(<span class="string">&quot;department_id&quot;</span>).<span class="built_in">filter</span>(</span><br><span class="line"></span><br><span class="line">  <span class="keyword">lambda</span> x: x[<span class="string">&quot;commission_pct&quot;</span>].notnull().<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line">)  <span class="comment"># 按department_id分组，过滤掉commission_pct包含空值的分组</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(commission_pct_filter)</span><br></pre></td></tr></table></figure><h3 id="1-10-Pandas透视表">1.10 Pandas透视表</h3><h4 id="1-10-1-什么是透视表">1.10.1 什么是透视表</h4><p>透视表（pivot table）是各种电子表格程序和其他数据分析软件中一种常见的数据汇总工具。它可以根据多个行分组键和多个列分组键对数据进行聚合，并根据行和列上的分组键将数据分配到各个矩形区域中。</p><h4 id="1-10-2-pivot-table">1.10.2 pivot_table()</h4><p>pandas中提供了DataFrame.pivot_table()和pandas.pivot_table()方法来生成透视表。两者的区别是pandas.pivot_table()需要额外传入一个data参数指定对哪个DataFrame进行处理。</p><p>pivot_table()的参数如下：</p><table><thead><tr><th><strong>参数</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>values</strong></td><td>待聚合的列，默认聚合所有数值列。</td></tr><tr><td><strong>index</strong></td><td>用作透视表行索引的列。即通过哪个（些）行来对数据进行分组，行索引决定了透视表的行维度。</td></tr><tr><td><strong>columns</strong></td><td>用作透视表列索引的列。即通过哪个（些）列来对数据进行分组，列索引决定了透视表的列维度。</td></tr><tr><td><strong>aggfunc</strong></td><td>聚合函数或函数列表，默认为mean。</td></tr><tr><td><strong>fill_value</strong></td><td>用于替换结果表中的缺失值。</td></tr><tr><td><strong>margins</strong></td><td>是否在透视表的边缘添加汇总行和列，显示总计。默认值是 False，如果设置为 True，会添加“总计”行和列，方便查看数据的总体汇总。</td></tr><tr><td><strong>dropna</strong></td><td>是否排除包含缺失值的行和列。默认为 True，即如果某个组合的行列数据中包含缺失值，则会被排除在外。如果设置为 False，则会保留这些含有缺失值的行和列。</td></tr><tr><td><strong>observerd</strong></td><td>是否显示所有组合数据，True:只显示实际存在的组合</td></tr></tbody></table><h4 id="1-10-3-案例：睡眠质量分析透视表">1.10.3 案例：睡眠质量分析透视表</h4><p>使用sleep（睡眠健康和生活方式）数据集，其中包含13个字段：</p><p>Ø person_id：每个人的唯一标识符。</p><p>Ø gender：个人的性别（男/女）。</p><p>Ø age：个人的年龄（以岁为单位）。</p><p>Ø occupation：个人的职业或就业状况（例如办公室职员、体力劳动者、学生）。</p><p>Ø sleep_duration：每天的睡眠总小时数。</p><p>Ø sleep_quality：睡眠质量的主观评分，范围从 1（差）到 10（极好）。</p><p>Ø physical_activity_level：每天花费在体力活动上的时间（以分钟为单位）。</p><p>Ø stress_level：压力水平的主观评级，范围从 1（低）到 10（高）。</p><p>Ø bmi_category：个人的 BMI 分类（体重过轻、正常、超重、肥胖）。</p><p>Ø blood_pressure：血压测量，显示为收缩压与舒张压的数值。</p><p>Ø heart_rate：静息心率，以每分钟心跳次数为单位。</p><p>Ø daily_steps：个人每天行走的步数。</p><p>Ø sleep_disorder：存在睡眠障碍（无、失眠、睡眠呼吸暂停）。</p><p>1）统计不同睡眠时间，不同压力等级下的睡眠质量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/sleep.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">sleep_duration_stage = pd.cut(df[<span class="string">&quot;sleep_duration&quot;</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>])  <span class="comment"># 对睡眠时间进行划分</span></span><br><span class="line"></span><br><span class="line">stress_level_stage = pd.cut(df[<span class="string">&quot;stress_level&quot;</span>], <span class="number">4</span>)  <span class="comment"># 对压力等级进行划分</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># df[&quot;sleep_duration_stage&quot;] = sleep_duration_stage</span></span><br><span class="line"><span class="comment"># df[&quot;stress_level_stage&quot;] = stress_level_stage</span></span><br><span class="line"><span class="comment"># df.groupby([&quot;sleep_duration_stage&quot;,&quot;stress_level_stage&quot;])[&quot;sleep_quality&quot;].mean()</span></span><br><span class="line"><span class="built_in">print</span>(df.pivot_table(values=<span class="string">&quot;sleep_quality&quot;</span>, index=[sleep_duration_stage, stress_level_stage], aggfunc=<span class="string">&quot;mean&quot;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">\<span class="comment">#                sleep_quality</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># sleep_duration stress_level</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (0, 5]     (0.991, 3.25]    6.781818</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]     6.161538</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]     5.677778</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]     6.082353</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (5, 6]     (0.991, 3.25]    5.876923</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]     6.777778</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]     6.058333</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]     6.438462</span></span><br></pre></td></tr></table></figure><p>2）添加职业作为列维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line"></span><br><span class="line">  df.pivot_table(</span><br><span class="line"></span><br><span class="line">​    values=<span class="string">&quot;sleep_quality&quot;</span>, index=[sleep_duration_stage, stress_level_stage], columns=[<span class="string">&quot;occupation&quot;</span>], aggfunc=<span class="string">&quot;mean&quot;</span></span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># occupation           Manual Labor  Office Worker  Retired  Student</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sleep_duration stress_level</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (0, 5]     (0.991, 3.25]    6.900000    6.350000  6.720000  6.750000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (3.25, 5.5]     3.300000    7.966667  6.060000 5.650000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (5.5, 7.75]     4.833333    6.900000  3.200000 6.533333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (7.75, 10.0]    7.200000    5.977778  5.225000 7.150000</span></span><br><span class="line"><span class="comment"># (5, 6]     (0.991, 3.25]    5.220000    6.433333  5.700000  6.533333</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (3.25, 5.5]     5.000000    7.050000  6.900000 9.000000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (5.5, 7.75]     6.050000    5.300000  5.300000 7.200000</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#         (7.75, 10.0]    6.475000    4.050000    NaN 7.10000</span></span><br></pre></td></tr></table></figure><p>3）添加性别作为第二个列维度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line"></span><br><span class="line">  df.pivot_table(</span><br><span class="line"></span><br><span class="line">​    values=<span class="string">&quot;sleep_quality&quot;</span>,</span><br><span class="line"></span><br><span class="line">​    index=[sleep_duration_stage, stress_level_stage],</span><br><span class="line"></span><br><span class="line">​    columns=[<span class="string">&quot;occupation&quot;</span>, <span class="string">&quot;gender&quot;</span>],</span><br><span class="line"></span><br><span class="line">​    aggfunc=<span class="string">&quot;mean&quot;</span>,</span><br><span class="line"></span><br><span class="line">  )</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># occupation          Manual Labor      Office Worker      Retired        Student</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># gender               Female    Male     Female  Male   Female    Male   Female    Male</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># sleep_duration stress_level</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (0, 5]     (0.991, 3.25]     6.75  7.300000    6.700000  6.000    NaN  6.720000  6.100000  7.400000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]      3.30    NaN    7.100000  9.700  4.850000  6.866667  5.300000 6.700000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]      4.55  5.400000    5.900000 7.900    NaN  3.200000  6.850000 5.900000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]      8.40  6.000000    5.180000 6.975  6.600000  4.766667  7.150000    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># (5, 6]     (0.991, 3.25]     5.50  4.800000    8.200000  5.550  5.700000     NaN  8.150000  3.300000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (3.25, 5.5]      5.00    NaN    6.600000  7.500  6.700000  7.100000  9.000000    NaN</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (5.5, 7.75]      6.60  5.500000    4.900000 6.100  4.450000  7.000000  7.066667  7.600000</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         (7.75, 10.0]      6.15  6.800000      NaN  4.050    NaN     NaN 7.266667  6.975000</span></span><br></pre></td></tr></table></figure><h3 id="1-11-Pandas时间序列">1.11 Pandas时间序列</h3><h4 id="1-11-1-Python中的日期与时间工具">1.11.1 Python中的日期与时间工具</h4><p>Python基本的日期与时间功能都在标准库的datetime模块中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">date1 = datetime(year=<span class="number">2000</span>, month=<span class="number">1</span>, day=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">date2 = datetime.now()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1)  <span class="comment"># 2000-01-01 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2)  <span class="comment"># 2025-01-01 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1.year)  <span class="comment"># 2000</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1.month)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date1.day)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2.weekday())  <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2.strftime(<span class="string">&quot;%A&quot;</span>))  <span class="comment"># Saturday</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(date2 - date1)  <span class="comment"># 18263 days, 0:00:00</span></span><br></pre></td></tr></table></figure><h4 id="1-11-2-pandas中的日期与时间">1.11.2 pandas中的日期与时间</h4><p>pandas的日期时间类型默认是datetime64[ns]。</p><p>Ø 针对时间戳数据，pandas提供了Timestamp类型。它本质上是Python原生datetime类型的替代品，但是在性能更好的numpy.datetime64类型的基础上创建。对应的索引数据结构是DatetimeIndex。</p><p>Ø 针对时间周期数据，pandas提供了Period类型。这是利用numpy.datetime64类型将固定频率的时间间隔进行编码。对应的索引数据结构是PeriodIndex。</p><p>Ø 针对时间增量或持续时间，pandas提供了Timedelta类型。Timedelta是一种代替Python原生datetime.timedelta类型的高性能数据结构，同样是基于numpy.timedelta64类型。对应的索引数据结构是TimedeltaIndex。</p><p>1）datetime64</p><p>to_datetime()可以解析许多日期与时间格式。对to_datetime()传递一个日期会返回一个Timestamp类型，传递一个时间序列会返回一个DatetimeIndex类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.to_datetime(<span class="string">&quot;2015-01-01&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-01-01 00:00:00</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.to_datetime([<span class="string">&quot;4th of July, 2015&quot;</span>, <span class="string">&quot;2015-Jul-6&quot;</span>, <span class="string">&quot;07-07-2015&quot;</span>, <span class="string">&quot;20150708&quot;</span>], <span class="built_in">format</span>=<span class="string">&quot;mixed&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-04&#x27;, &#x27;2015-07-06&#x27;, &#x27;2015-07-07&#x27;, &#x27;2015-07-08&#x27;], dtype=&#x27;datetime64[ns]&#x27;, freq=None)</span></span><br></pre></td></tr></table></figure><p>在加载数据时，可以通过to_datetime()将数据中的列解析为datetime64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;date&quot;</span>].tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456   2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457   2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458   2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459   2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460   2015-12-31</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: object</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: datetime64[ns]</span></span><br></pre></td></tr></table></figure><p>在加载数据时也可以通过parse_dates参数将指定列解析为datetime64。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&quot;date&quot;</span>].tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456  2015-12-27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457  2015-12-28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458  2015-12-29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459  2015-12-30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460  2015-12-31</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: datetime64[ns]</span></span><br></pre></td></tr></table></figure><p>2）提取日期的各个部分</p><p>（1）提取Timestamp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">d = pd.Timestamp(<span class="string">&quot;2015-01-01 09:08:07.123456&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.year)  <span class="comment"># 2015</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.month)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.day)  <span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.hour)  <span class="comment"># 9</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.minute)  <span class="comment"># 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.second)  <span class="comment"># 7</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(d.microsecond)  <span class="comment"># 123456</span></span><br></pre></td></tr></table></figure><p>（2）对于Series对象，需要使用dt访问器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df_date = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;year&quot;</span>] = df_date.dt.year</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;month&quot;</span>] = df_date.dt.month</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;day&quot;</span>] = df_date.dt.day</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;date&quot;</span>, <span class="string">&quot;year&quot;</span>, <span class="string">&quot;month&quot;</span>, <span class="string">&quot;day&quot;</span>]].tail())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#       date  year  month  day</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1456 2015-12-27  2015   12  27</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1457 2015-12-28  2015   12  28</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1458 2015-12-29  2015   12  29</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1459 2015-12-30  2015   12  30</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1460 2015-12-31  2015   12  31</span></span><br></pre></td></tr></table></figure><p>3）period</p><p>可以通过to_period()方法和一个频率代码将datetime64类型转换成period类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;quarter&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>]).dt.to_period(<span class="string">&quot;Q&quot;</span>)  <span class="comment"># 将 年-月-日 转换为 年季度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;date&quot;</span>, <span class="string">&quot;quarter&quot;</span>]].head())</span><br><span class="line"></span><br><span class="line">\<span class="comment">#      date quarter</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  2012-01-01  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  2012-01-02  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  2012-01-03  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  2012-01-04  2012Q1</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  2012-01-05  2012Q1</span></span><br></pre></td></tr></table></figure><p>4）timedelta64</p><p>当用一个日期减去另一个日期，返回的结果是timedelta64类型。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df_date = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">timedelta = df_date - df_date[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(timedelta.head())</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  0 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  1 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  2 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  3 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  4 days</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Name: date, dtype: timedelta64[ns]</span></span><br></pre></td></tr></table></figure><h4 id="1-11-3-使用时间作为索引">1.11.3 使用时间作为索引</h4><p>1）DatetimeIndex</p><p>将datetime64类型的数据设置为索引，得到的就是DatetimeIndex。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])  <span class="comment"># 将date列转换为datetime64类型</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;date&quot;</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 将date列设置为索引</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex: 1461 entries, 2012-01-01 to 2015-12-31</span></span><br></pre></td></tr></table></figure><p>将时间作为索引后可以直接使用时间进行切片取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;2013-01&quot;</span>:<span class="string">&quot;2013-06&quot;</span>])  <span class="comment"># 获取2013年1~6月的数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       precipitation  temp_max temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-01-01       0.0    5.0    -2.8  2.7   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-01-02       0.0    6.1    -1.1  3.2   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ...          ...    ...    ...  ...   ...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-06-29       0.0    30.0    18.3  1.7   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-06-30       0.0    33.9    17.2  2.5   sun</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;2015&quot;</span>])  <span class="comment"># 获取2015年所有数据</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#       precipitation  temp_max temp_min  wind weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-01-01       0.0    5.6    -3.2  1.2   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-01-02       1.5    5.6    0.0  2.3   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ...          ...    ...    ...  ...   ...</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-12-30       0.0    5.6    -1.0  3.4   sun</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-12-31       0.0    5.6    -2.1  3.5   sun</span></span><br><span class="line"></span><br><span class="line">也可以通过between_time()和at_time()获取某些时刻的数据。</span><br><span class="line"></span><br><span class="line">df.between_time(<span class="string">&quot;9:00&quot;</span>, <span class="string">&quot;11:00&quot;</span>)  <span class="comment"># 获取9:00到11:00之间的数据</span></span><br><span class="line"></span><br><span class="line">df.at_time(<span class="string">&quot;3:33&quot;</span>)  <span class="comment"># 获取3:33的数据</span></span><br></pre></td></tr></table></figure><p>2）TimedeltaIndex</p><p>将timedelta64类型的数据设置为索引，得到的就是TimedeltaIndex。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>, parse_dates=[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line">df_date = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;timedelta&quot;</span>] = df_date - df_date[<span class="number">0</span>]  <span class="comment"># 得到timedelta64类型的数据</span></span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;timedelta&quot;</span>, inplace=<span class="literal">True</span>)  <span class="comment"># 将timedelta列设置为索引</span></span><br><span class="line"></span><br><span class="line">df.info()</span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># TimedeltaIndex: 1461 entries, 0 days to 1460 days</span></span><br></pre></td></tr></table></figure><p>将时间作为索引后可以直接使用时间进行切片取值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(df.loc[<span class="string">&quot;0 days&quot;</span>:<span class="string">&quot;5 days&quot;</span>])</span><br><span class="line"></span><br><span class="line">\<span class="comment">#         date precipitation  temp_max  temp_min  wind  weather</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># timedelta</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0 days   2012-01-01       0.0    12.8    5.0  4.7  drizzle</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1 days   2012-01-02      10.9    10.6    2.8  4.5   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2 days   2012-01-03       0.8    11.7    7.2  2.3   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3 days   2012-01-04      20.3    12.2    5.6  4.7   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4 days   2012-01-05       1.3    8.9    2.8  6.1   rain</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5 days   2012-01-06       2.5    4.4    2.2  2.2   rain</span></span><br></pre></td></tr></table></figure><h4 id="1-11-4-生成时间序列">1.11.4 生成时间序列</h4><p>为了能更简便地创建有规律的时间序列，pandas提供了date_range()方法。</p><p>1）date_range()</p><p>date_range()通过开始日期、结束日期和频率代码（可选）创建一个有规律的日期序列，默认的频率是天。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, <span class="string">&quot;2015-07-10&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03&#x27;, &#x27;2015-07-04&#x27;, &#x27;2015-07-05&#x27;, &#x27;2015-07-06&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-07&#x27;, &#x27;2015-07-08&#x27;, &#x27;2015-07-09&#x27;, &#x27;2015-07-10&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line">此外，日期范围不一定非是开始时间与结束时间，也可以是开始时间与周期数periods。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">5</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03&#x27;, &#x27;2015-07-04&#x27;, &#x27;2015-07-05&#x27;, &#x27;2015-07-06&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-07&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;D&#x27;)</span></span><br><span class="line"></span><br><span class="line">可以通过freq参数设置时间频率，默认值是D。此处改为h，按小时变化的时间戳。</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">5</span>, freq=<span class="string">&quot;h&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03 00:00:00&#x27;, &#x27;2015-07-03 01:00:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 02:00:00&#x27;, &#x27;2015-07-03 03:00:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 04:00:00&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;h&#x27;)</span></span><br></pre></td></tr></table></figure><p>2）时间频率与偏移量</p><p>（1）可通过freq参数设置时间频率</p><p>下表为常见时间频率代码与说明：</p><table><thead><tr><th><strong>代码</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>D</strong></td><td>天（calendar day，按日历算，含双休日）</td></tr><tr><td><strong>B</strong></td><td>天（business day，仅含工作日）</td></tr><tr><td><strong>W</strong></td><td>周（weekly）</td></tr><tr><td><strong>ME / M</strong></td><td>月末（month end）</td></tr><tr><td><strong>BME</strong></td><td>月末（business month end，仅含工作日）</td></tr><tr><td><strong>MS</strong></td><td>月初（month start）</td></tr><tr><td><strong>BMS</strong></td><td>月初（business month start，仅含工作日）</td></tr><tr><td><strong>QE / Q</strong></td><td>季末（quarter end）</td></tr><tr><td><strong>BQE</strong></td><td>季末（business quarter end，仅含工作日）</td></tr><tr><td><strong>QS</strong></td><td>季初（quarter start）</td></tr><tr><td><strong>BQS</strong></td><td>季初（business quarter start，仅含工作日）</td></tr><tr><td><strong>YE / Y</strong></td><td>年末（year end）</td></tr><tr><td><strong>BYE</strong></td><td>年末（business year end，仅含工作日）</td></tr><tr><td><strong>YS</strong></td><td>年初（year start）</td></tr><tr><td><strong>BYS</strong></td><td>年初（business year start，仅含工作日）</td></tr><tr><td><strong>h</strong></td><td>小时（hours）</td></tr><tr><td><strong>bh</strong></td><td>小时（business hours，工作时间）</td></tr><tr><td><strong>min</strong></td><td>分钟（minutes）</td></tr><tr><td><strong>s</strong></td><td>秒（seconds）</td></tr><tr><td><strong>ms</strong></td><td>毫秒（milliseonds）</td></tr><tr><td><strong>us</strong></td><td>微秒（microseconds）</td></tr><tr><td><strong>ns</strong></td><td>纳秒（nanoseconds）</td></tr></tbody></table><p>（2）偏移量</p><p>可以在频率代码后面加三位月份缩写字母来改变季、年频率的开始时间。</p><p>Ø QE-JAN、BQE-FEB、QS-MAR、BQS-APR等</p><p>Ø YE-JAN、BYE-FEB、YS-MAR、BYS-APR等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">10</span>, freq=<span class="string">&quot;QE-JAN&quot;</span>))  <span class="comment"># 设置1月为季度末</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-31&#x27;, &#x27;2015-10-31&#x27;, &#x27;2016-01-31&#x27;, &#x27;2016-04-30&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2016-07-31&#x27;, &#x27;2016-10-31&#x27;, &#x27;2017-01-31&#x27;, &#x27;2017-04-30&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2017-07-31&#x27;, &#x27;2017-10-31&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;QE-JAN&#x27;)</span></span><br></pre></td></tr></table></figure><p>同理，也可以在后面加三位星期缩写字母来改变一周的开始时间。</p><p>Ø W-SUN、W-MON、W-TUE、W-WED等</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">10</span>, freq=<span class="string">&quot;W-WED&quot;</span>))  <span class="comment"># 设置周三为一周的第一天</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-08&#x27;, &#x27;2015-07-15&#x27;, &#x27;2015-07-22&#x27;, &#x27;2015-07-29&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-08-05&#x27;, &#x27;2015-08-12&#x27;, &#x27;2015-08-19&#x27;, &#x27;2015-08-26&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-09-02&#x27;, &#x27;2015-09-09&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;W-WED&#x27;)</span></span><br></pre></td></tr></table></figure><p>在这些代码的基础上，还可以将频率组合起来创建的新的周期。例如，可以用小时（h）和分钟（min）的组合来实现2小时30分钟。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(pd.date_range(<span class="string">&quot;2015-07-03&quot;</span>, periods=<span class="number">10</span>, freq=<span class="string">&quot;2h30min&quot;</span>))</span><br><span class="line"></span><br><span class="line">\<span class="comment"># DatetimeIndex([&#x27;2015-07-03 00:00:00&#x27;, &#x27;2015-07-03 02:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 05:00:00&#x27;, &#x27;2015-07-03 07:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 10:00:00&#x27;, &#x27;2015-07-03 12:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 15:00:00&#x27;, &#x27;2015-07-03 17:30:00&#x27;,</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#         &#x27;2015-07-03 20:00:00&#x27;, &#x27;2015-07-03 22:30:00&#x27;],</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        dtype=&#x27;datetime64[ns]&#x27;, freq=&#x27;150min&#x27;)</span></span><br></pre></td></tr></table></figure><h4 id="1-11-5-重新采样">1.11.5 重新采样</h4><p>处理时间序列数据时，经常需要按照新的频率（更高频率、更低频率）对数据进行重新采样。可以通过resample()方法解决这个问题。resample()方法以数据累计为基础，会将数据按指定的时间周期进行分组，之后可以对其使用聚合函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df.set_index(<span class="string">&quot;date&quot;</span>, inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&quot;temp_max&quot;</span>, <span class="string">&quot;temp_min&quot;</span>]].resample(<span class="string">&quot;YE&quot;</span>).mean())  <span class="comment"># 将数据按年分组,并计算每年的平均最高最低温度</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#        temp_max  temp_min</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># date</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2012-12-31  15.276776  7.289617</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2013-12-31  16.058904  8.153973</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2014-12-31  16.995890  8.662466</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2015-12-31  17.427945  8.835616</span></span><br></pre></td></tr></table></figure><h3 id="1-12-Matplotlib可视化">1.12 Matplotlib可视化</h3><h4 id="1-12-1-Matplotlib简介">1.12.1 Matplotlib简介</h4><p>1）什么是Matplotlib</p><p>Matplotlib是一个Python绘图库，广泛用于创建各种类型的静态、动态和交互式图表。它是数据科学、机器学习、工程和科学计算领域中常用的绘图工具之一。</p><p>Ø 支持多种图表类型：折线图（Line plots）、散点图（Scatter plots）、柱状图（Bar charts）、直方图（Histograms）、饼图（Pie charts）、热图（Heatmaps）、箱型图（Box plots）、极坐标图（Polar plots）、3D图（3D plots，配合 mpl_toolkits.mplot3d）。</p><p>Ø 高度自定义：允许用户自定义图表的每个部分，包括标题、轴标签、刻度、图例等。    支持多种颜色、字体和线条样式。提供精确的图形渲染控制，如坐标轴范围、图形大小、字体大小等。</p><p>Ø 兼容性：与NumPy、Pandas等库紧密集成，特别适用于绘制基于数据框和数组的数据可视化。可以输出到多种格式（如PNG、PDF、SVG、EPS等）。</p><p>Ø 交互式绘图：在Jupyter Notebook 中，Matplotlib支持交互式绘图，可以动态更新图表。支持图形缩放、平移等交互操作。</p><p>Ø 动态图表：可以生成动画（使用FuncAnimation类），为用户提供动态数据的可视化。</p><p>2）不同开发环境下显示图形</p><p>Ø 在一个脚本文件中使用Matplotlib，那么显示图形的时候必须使用plt.show()。</p><p>Ø 在Notebook中使用Matplotlib，运行命令之后在每一个Notebook的单元中就会直接将PNG格式图形文件嵌入在单元中。</p><h4 id="1-12-2-两种画图接口">1.12.2 两种画图接口</h4><p>Matplotlib有两种画图接口：一个是便捷的MATLAB风格的有状态的接口，另一个是功能更强大的面向对象接口。</p><p>1）状态接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入matplotlib</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 创建x轴的数据</span></span><br><span class="line"></span><br><span class="line">y1 = np.sin(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line">y2 = np.cos(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))  <span class="comment"># 创建画布，并指定画布大小 10*6英寸</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 创建2行1列个子图，并指定第1个子图</span></span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&quot;sin(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;sin&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y1)  <span class="comment"># 绘制曲线</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>)  <span class="comment"># 创建2行1列个子图，并指定第2个子图</span></span><br><span class="line"></span><br><span class="line">plt.xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&quot;cos(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&quot;cos&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line">plt.plot(x, y2)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.show()  <span class="comment"># 显示图像</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2）面向对象接口</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt  <span class="comment"># 导入matplotlib</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">x = np.linspace(<span class="number">0</span>, <span class="number">10</span>, <span class="number">100</span>)  <span class="comment"># 创建x轴的数据</span></span><br><span class="line"></span><br><span class="line">y1 = np.sin(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line">y2 = np.cos(x)  <span class="comment"># 创建y轴的数据</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">fig, ax = plt.subplots(<span class="number">2</span>, figsize=(<span class="number">10</span>, <span class="number">6</span>))  <span class="comment"># 创建画布，并指定画布大小</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_ylabel(<span class="string">&quot;sin(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].set_title(<span class="string">&quot;sin&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">0</span>].plot(x, y1)  <span class="comment"># 绘制曲线</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].plot(x, y2)  <span class="comment"># 绘制曲线</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_xlim(<span class="number">0</span>, <span class="number">10</span>)  <span class="comment"># 设置x轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_ylim(-<span class="number">1</span>, <span class="number">1</span>)  <span class="comment"># 设置y轴的范围</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_xlabel(<span class="string">&quot;x&quot;</span>)  <span class="comment"># 设置x轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_ylabel(<span class="string">&quot;cos(x)&quot;</span>)  <span class="comment"># 设置y轴的标签</span></span><br><span class="line"></span><br><span class="line">ax[<span class="number">1</span>].set_title(<span class="string">&quot;cos&quot;</span>)  <span class="comment"># 设置子图的标题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line">​     </span><br></pre></td></tr></table></figure><h4 id="1-12-3-单变量可视化">1.12.3 单变量可视化</h4><p>使用weather（天气）数据集。其中包含6个字段：</p><p>Ø date：日期，年-月-日格式。</p><p>Ø precipitation：降水量。</p><p>Ø temp_max：最高温度。</p><p>Ø temp_min：最低温度。</p><p>Ø wind：风力。</p><p>Ø weather：天气状况。</p><p>加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号显示问题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.info()  <span class="comment"># 查看数据集信息</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># RangeIndex: 1461 entries, 0 to 1460</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Data columns (total 6 columns):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># #  Column     Non-Null Count  Dtype</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ---  ------     --------------  -----</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  date      1461 non-null  object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  precipitation  1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  temp_max    1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  temp_min    1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  wind      1461 non-null  float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5  weather     1461 non-null  object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtypes: float64(4), object(2)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># memory usage: 68.6+ KB</span></span><br><span class="line"></span><br><span class="line">使用直方图将降水量分组并绘制每组出现频次。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax1.hist(df[<span class="string">&quot;precipitation&quot;</span>], bins=<span class="number">5</span>)  <span class="comment"># 绘制直方图，将降水量均匀分为5组</span></span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;降水量&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;出现频次&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​</p><h4 id="1-12-4-多变量可视化">1.12.4 多变量可视化</h4><p>1）双变量</p><p>使用散点图呈现降水量随最高气温变化的大致趋势。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号显示问题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">ax1.scatter(df[<span class="string">&quot;temp_max&quot;</span>], df[<span class="string">&quot;precipitation&quot;</span>])  <span class="comment"># 绘制散点图，横轴为最高气温，纵轴为降水量</span></span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;最高气温&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;降水量&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​</p><p>2）多变量</p><p>使用散点图呈现降水量随最高气温变化的大致趋势，用不同颜色区分不同年份的数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;axes.unicode_minus&quot;</span>] = <span class="literal">False</span>  <span class="comment"># 解决负号显示问题</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">year_color</span>(<span class="params">x</span>):</span><br><span class="line"></span><br><span class="line">  <span class="string">&quot;&quot;&quot;添加一列，为不同年份的数据添加不同的颜色&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">match</span> x.year:</span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2012</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;r&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2013</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;g&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2014</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;b&quot;</span></span><br><span class="line"></span><br><span class="line">​    <span class="keyword">case</span> <span class="number">2015</span>:</span><br><span class="line"></span><br><span class="line">​      <span class="keyword">return</span> <span class="string">&quot;k&quot;</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/weather.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;date&quot;</span>] = pd.to_datetime(df[<span class="string">&quot;date&quot;</span>])</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;color&quot;</span>] = df[<span class="string">&quot;date&quot;</span>].apply(year_color)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line">ax1 = fig.add_subplot(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 绘制散点图，横轴为最高气温，纵轴为降水量</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># c设置颜色,alpha设置透明度</span></span><br><span class="line"></span><br><span class="line">ax1.scatter(df[<span class="string">&quot;temp_max&quot;</span>], df[<span class="string">&quot;precipitation&quot;</span>], c=df[<span class="string">&quot;color&quot;</span>], alpha=<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_xlabel(<span class="string">&quot;最高气温&quot;</span>)</span><br><span class="line"></span><br><span class="line">ax1.set_ylabel(<span class="string">&quot;降水量&quot;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>​</p><h3 id="1-13-Pandas可视化">1.13 Pandas可视化</h3><p>pandas提供了非常方便的绘图功能，可以直接在DataFrame或Series上调用plot()方法来生成各种类型的图表。底层实现依赖于Matplotlib，pandas的绘图功能集成了许多常见的图形类型，易于使用。</p><h4 id="1-13-1-单变量可视化">1.13.1 单变量可视化</h4><p>使用sleep（睡眠健康和生活方式）数据集，其中包含13个字段：</p><p>Ø person_id：每个人的唯一标识符。</p><p>Ø gender：个人的性别（男/女）。</p><p>Ø age：个人的年龄（以岁为单位）。</p><p>Ø occupation：个人的职业或就业状况（例如办公室职员、体力劳动者、学生）。</p><p>Ø sleep_duration：每天的睡眠总小时数。</p><p>Ø sleep_quality：睡眠质量的主观评分，范围从 1（差）到 10（极好）。</p><p>Ø physical_activity_level：每天花费在体力活动上的时间（以分钟为单位）。</p><p>Ø stress_level：压力水平的主观评级，范围从 1（低）到 10（高）。</p><p>Ø bmi_category：个人的 BMI 分类（体重过轻、正常、超重、肥胖）。</p><p>Ø blood_pressure：血压测量，显示为收缩压与舒张压的数值。</p><p>Ø heart_rate：静息心率，以每分钟心跳次数为单位。</p><p>Ø daily_steps：个人每天行走的步数。</p><p>Ø sleep_disorder：存在睡眠障碍（无、失眠、睡眠呼吸暂停）。</p><p>加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&quot;data/sleep.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">df.info()  <span class="comment"># 查看数据集信息</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># RangeIndex: 400 entries, 0 to 399</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Data columns (total 13 columns):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># #  Column          Non-Null Count  Dtype</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ---  ------          --------------  -----</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  person_id         400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  gender          400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  age            400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  occupation        400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  sleep_duration      400 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5  sleep_quality       400 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 6  physical_activity_level  400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 7  stress_level       400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 8  bmi_category       400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 9  blood_pressure      400 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 10  heart_rate        400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 11  daily_steps        400 non-null   int64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 12  sleep_disorder      110 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtypes: float64(2), int64(6), object(5)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># memory usage: 40.8+ KB</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>1）柱状图</p><p>柱状图用于展示类别数据的分布情况。它通过一系列矩形的高度（或长度）来展示数据值，适合对比不同类别之间的数量或频率。简单直观，容易理解和比较各类别数据。</p><p>使用柱状图展示不同睡眠时长的数量。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">pd.cut(df[<span class="string">&quot;sleep_duration&quot;</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>]).value_counts().plot.bar(</span><br><span class="line"></span><br><span class="line">  color=[<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;blue&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;cyan&quot;</span>, <span class="string">&quot;magenta&quot;</span>, <span class="string">&quot;black&quot;</span>, <span class="string">&quot;purple&quot;</span>]</span><br><span class="line"></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>​</p><p>2）折线图</p><p>折线图通常用于展示连续数据的变化趋势。它通过一系列数据点连接成的线段来表示数据的变化。能够清晰地展示数据的趋势和波动。</p><p>使用折线图展示不同睡眠时长的数量。</p><p>pd.cut(df[“sleep_duration”], [0, 5, 6, 7, 8, 9, 10, 11, 12]).value_counts().sort_index().plot()</p><p>​</p><p>3）面积图</p><p>面积图是折线图的一种变体，线下的区域被填充颜色，用于强调数据的总量或变化。可以更直观地展示数据量的变化，适合用来展示多个分类的累计趋势。</p><p>使用面积图展示不同睡眠时长的数量。</p><p>pd.cut(df[“sleep_duration”], [0, 5, 6, 7, 8, 9, 10, 11, 12]).value_counts().sort_index().plot.area()</p><p>​</p><p>4）直方图</p><p>直方图用于展示数据的分布情况。它将数据范围分成多个区间，并通过矩形的高度显示每个区间内数据的频率或数量。可以揭示数据分布的模式，如偏态、峰度等。</p><p>使用直方图展示不同睡眠时长的数量。</p><p>df[“sleep_duration”].value_counts().plot.hist()</p><p>​</p><p>5）饼状图</p><p>饼状图用于展示一个整体中各个部分所占的比例。它通过一个圆形图形分割成不同的扇形，每个扇形的角度与各部分的比例成正比。能够快速展示各部分之间的比例关系，但不适合用于展示过多的类别或比较数值差异较小的部分。</p><p>使用饼状图展示不同睡眠时长的占比。</p><p>pd.cut(df[“sleep_duration”], [0, 5, 6, 7, 8, 9, 10, 11, 12]).value_counts().sort_index().plot.pie()</p><p>​</p><h4 id="1-13-2-双变量可视化">1.13.2 双变量可视化</h4><p>1）散点图</p><p>散点图通过在二维坐标系中绘制数据点来展示两组数值数据之间的关系。能够揭示两个变量之间的相关性和趋势。</p><p>绘制睡眠时间与睡眠质量的散点图。</p><p>df.plot.scatter(x=“sleep_duration”, y=“sleep_quality”)</p><p>​</p><p>2）蜂窝图</p><p>蜂窝图是散点图的扩展，通常用于表示大量数据点之间的关系。它通过将数据点分布在一个六边形网格中，每个六边形的颜色代表其中的数据密度。适合展示大量数据点，避免了散点图中的过度重叠问题。</p><p>绘制睡眠时间与睡眠质量的蜂窝图。</p><p>df.plot.hexbin(x=“sleep_duration”, y=“sleep_quality”, gridsize=10)</p><p>​</p><p>3）堆叠图</p><p>堆叠图用于展示多个数据系列的累积变化。常见的堆叠图包括堆叠柱状图、堆叠面积图等。它通过将每个数据系列堆叠在前一个系列之上，展示数据的累积情况。能够清晰地展示不同部分的相对贡献，适合多个数据系列的比较。</p><p>绘制睡眠时间与睡眠质量的堆叠图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;sleep_quality_stage&quot;</span>] = pd.cut(df[<span class="string">&quot;sleep_quality&quot;</span>], <span class="built_in">range</span>(<span class="number">11</span>))</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;sleep_duration_stage&quot;</span>] = pd.cut(df[<span class="string">&quot;sleep_duration&quot;</span>], [<span class="number">0</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>])</span><br><span class="line"></span><br><span class="line">df_pivot_table = df.pivot_table(</span><br><span class="line"></span><br><span class="line">  values=<span class="string">&quot;person_id&quot;</span>, index=<span class="string">&quot;sleep_quality_stage&quot;</span>, columns=<span class="string">&quot;sleep_duration_stage&quot;</span>, aggfunc=<span class="string">&quot;count&quot;</span></span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">df_pivot_table.plot.bar()</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">设置stacked=<span class="literal">True</span>，会将柱体堆叠。</span><br><span class="line"></span><br><span class="line">df_pivot_table.plot.bar(stacked=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>4）折线图</p><p>df_pivot_table.plot.line()</p><p>​</p><h3 id="1-14-Seaborn可视化">1.14 Seaborn可视化</h3><h4 id="1-14-1-什么是Seaborn">1.14.1 什么是Seaborn</h4><p>Seaborn是一个基于Matplotlib的Python可视化库，旨在简化数据可视化的过程。它提供了更高级的接口，用于生成漂亮和复杂的统计图表，同时也能保持与Pandas数据结构的良好兼容性。</p><h4 id="1-14-2-单变量可视化">1.14.2 单变量可视化</h4><p>使用penguins（企鹅🐧）数据集，其中包含7个字段：</p><p>Ø species：企鹅种类（Adelie、Gentoo、Chinstrap）。</p><p>Ø island：观测岛屿（Torgersen, Biscoe, Dream）。</p><p>Ø bill_length_mm：喙（嘴）长度（毫米）。</p><p>Ø bill_depth_mm：喙深度（毫米）。</p><p>Ø flipper_length_mm：脚蹼长度（毫米）。</p><p>Ø body_mass_g：体重（克）。</p><p>Ø sex：性别（Male、Female）。</p><p>加载数据：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">plt.rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;KaiTi&quot;</span>]</span><br><span class="line"></span><br><span class="line">penguins = pd.read_csv(<span class="string">&quot;data/penguins.csv&quot;</span>)</span><br><span class="line"></span><br><span class="line">penguins.dropna(inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">penguins.info()</span><br><span class="line"></span><br><span class="line">\<span class="comment"># &lt;class &#x27;pandas.core.frame.DataFrame&#x27;&gt;</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Index: 333 entries, 0 to 343</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># Data columns (total 7 columns):</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># #  Column       Non-Null Count Dtype</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># ---  ------       -------------- -----</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 0  species       333 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 1  island       333 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 2  bill_length_mm   333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 3  bill_depth_mm    333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 4  flipper_length_mm  333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 5  body_mass_g     333 non-null   float64</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># 6  sex         333 non-null   object</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># dtypes: float64(4), object(3)</span></span><br><span class="line"></span><br><span class="line">\<span class="comment"># memory usage: 20.8+ KB</span></span><br></pre></td></tr></table></figure><p>1）直方图</p><p>绘制不同种类企鹅数量的直方图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sns.histplot(data=penguins, x=<span class="string">&quot;species&quot;</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>2）核密度估计图</p><p>核密度估计图（KDE，Kernel Density Estimate Plot）是一种用于显示数据分布的统计图表，它通过平滑直方图的方法来估计数据的概率密度函数，使得分布图看起来更加连续和平滑。核密度估计是一种非参数方法，用于估计随机变量的概率密度函数。其基本思想是，将每个数据点视为一个“核”（通常是高斯分布），然后将这些核的贡献相加以形成平滑的密度曲线。</p><p>绘制喙长度的核密度估计图。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sns.kdeplot(data=penguins, x=<span class="string">&quot;bill_length_mm&quot;</span>)</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">在histplot()中设置kde=<span class="literal">True</span>也可以得到核密度估计图。</span><br><span class="line"></span><br><span class="line">sns.histplot(data=penguins, x=<span class="string">&quot;bill_length_mm&quot;</span>, kde=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>​</p><p>3）计数图</p><p>计数图用于绘制分类变量的计数分布图，显示每个类别在数据集中出现的次数，是分析分类数据非常直观的工具，可以快速了解类别的分布情况。</p><p>绘制不同岛屿企鹅数量的计数图。</p><p>sns.countplot(data=penguins, x=“island”)</p><p>​</p><p>1.14.3 双变量可视化</p><p>1）散点图</p><p>绘制横轴为体重，纵轴为脚蹼长度的散点图。可通过hue参数设置不同组别进行对比。</p><p>sns.scatterplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过regplot()函数绘制散点图，同时会拟合回归曲线。可以通过fit_reg=False关闭拟合。</p><p>sns.regplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>也可以通过lmplot()函数绘制基于hue参数的分组回归图。</p><p>sns.lmplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过jointplot()函数绘制在每个轴上包含单个变量的散点图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>2）蜂窝图</p><p>通过jointplot()函数，设置kind=&quot;hex&quot;来绘制蜂窝图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, kind=“hex”)</p><p>​</p><p>3）二维核密度估计图</p><p>通过kdeplot()函数，同时设置x参数和y参数来绘制二维核密度估计图。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>通过fill=True设置为填充，通过cbar=True设置显示颜色示意条。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, fill=True, cbar=True)</p><p>​</p><p>4）条形图</p><p>条形图会按x分组对y进行聚合，通过estimator参数设置聚合函数，并通过errorbar设置误差条，误差条默认会显示。可以通过误差条显示抽样数据统计结果的可能统计范围，如果数据不是抽样数据, 可以设置为None来关闭误差条。</p><p>sns.barplot(data=penguins, x=“species”, y=“bill_length_mm”, estimator=“mean”, errorbar=None</p><h4 id="1-14-3-双变量可视化">1.14.3 双变量可视化</h4><p>1）散点图</p><p>绘制横轴为体重，纵轴为脚蹼长度的散点图。可通过hue参数设置不同组别进行对比。</p><p>sns.scatterplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过regplot()函数绘制散点图，同时会拟合回归曲线。可以通过fit_reg=False关闭拟合。</p><p>sns.regplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>也可以通过lmplot()函数绘制基于hue参数的分组回归图。</p><p>sns.lmplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, hue=“sex”)</p><p>​</p><p>也可以通过jointplot()函数绘制在每个轴上包含单个变量的散点图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>2）蜂窝图</p><p>通过jointplot()函数，设置kind=&quot;hex&quot;来绘制蜂窝图。</p><p>sns.jointplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, kind=“hex”)</p><p>​</p><p>3）二维核密度估计图</p><p>通过kdeplot()函数，同时设置x参数和y参数来绘制二维核密度估计图。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”)</p><p>​</p><p>通过fill=True设置为填充，通过cbar=True设置显示颜色示意条。</p><p>sns.kdeplot(data=penguins, x=“body_mass_g”, y=“flipper_length_mm”, fill=True, cbar=True)</p><p>​</p><p>4）条形图</p><p>条形图会按x分组对y进行聚合，通过estimator参数设置聚合函数，并通过errorbar设置误差条，误差条默认会显示。可以通过误差条显示抽样数据统计结果的可能统计范围，如果数据不是抽样数据, 可以设置为None来关闭误差条。</p><p>sns.barplot(data=penguins, x=“species”, y=“bill_length_mm”, estimator=“mean”, errorbar=None)</p><p>​</p><p>5）箱线图</p><p>箱线图是一种用于展示数据分布、集中趋势、散布情况以及异常值的统计图表。它通过五个关键的统计量（最小值、第一四分位数、中位数、第三四分位数、最大值）来展示数据的分布情况。</p><p>箱线图通过箱体和须来表现数据的分布，能够有效地显示数据的偏斜、分散性以及异常值。箱线图的组成部分：</p><p>Ø 箱体（Box）：</p><p>Ø 下四分位数（Q1）：数据集下 25% 的位置，箱体的下边缘。</p><p>Ø 上四分位数（Q3）：数据集下 75% 的位置，箱体的上边缘。</p><p>Ø 四分位间距（IQR, Interquartile Range）：Q3 和 Q1 之间的距离，用来衡量数据的离散程度。</p><p>Ø 中位数（Median）：箱体内部的水平线，表示数据集的中位数。</p><p>Ø 须（Whiskers）：</p><p>Ø 下须：从 Q1 向下延伸，通常是数据集中最小值与 Q1 的距离，直到没有超过1.5倍 IQR 的数据点为止。</p><p>Ø 上须：从 Q3 向上延伸，通常是数据集中最大值与 Q3 的距离，直到没有超过1.5倍 IQR 的数据点为止。</p><p>Ø 异常值（Outliers）：</p><p>Ø 超过1.5倍 IQR 的数据被认为是异常值，通常用点标记出来。异常值是数据中相对于其他数据点而言“非常大”或“非常小”的值。</p><p>sns.boxplot(data=penguins, x=“species”, y=“bill_length_mm”)</p><p>​</p><p>6）小提琴图</p><p>小提琴图（Violin Plot） 是一种结合了箱线图和核密度估计图（KDE）的可视化图表，用于展示数据的分布情况、集中趋势、散布情况以及异常值。小提琴图不仅可以显示数据的基本统计量（如中位数和四分位数），还可以展示数据的概率密度，提供比箱线图更丰富的信息。</p><p>sns.violinplot(data=penguins, x=“species”, y=“bill_length_mm”)</p><p>​</p><p>7）成对关系图</p><p>成对关系图是一种用于显示多个变量之间关系的可视化工具。它可以展示各个变量之间的成对关系，并且通过不同的图表形式帮助我们理解数据中各个变量之间的相互作用。</p><p>对角线上的图通常显示每个变量的分布（如直方图或核密度估计图），帮助观察每个变量的单变量特性。其他位置展示所有变量的两两关系，用散点图表示。</p><p>sns.pairplot(data=penguins, hue=“species”)</p><p>​</p><p>通常情况下成对关系图左上和右下对应位置的图的信息是相同的，可以通过PairGrid()为每个区域设置不同的图类型。</p><p>pair_grid = sns.PairGrid(data=penguins, hue=“species”)</p><p># 通过 map 方法在网格上绘制不同的图形</p><p>pair_grid.map_upper(sns.scatterplot)  # 上三角部分使用散点图</p><p>pair_grid.map_lower(sns.kdeplot)  # 下三角部分使用核密度估计图</p><p>pair_grid.map_diag(sns.histplot)  # 对角线部分使用直方图</p><p>​</p><h4 id="1-1-2-多变量可视化">1.1.2 多变量可视化</h4><p>多数绘图函数都支持使用hue参数设置一个类别变量，统计时按此类别分组统计并在绘图时使用颜色区分。</p><p>例如对小提琴图设置hue参数添加性别类别：</p><p>sns.violinplot(data=penguins, x=“species”, y=“bill_length_mm”, hue=“sex”, split=True)</p><p>​</p><h4 id="1-1-3-Seaborn样式">1.1.3 Seaborn样式</h4><p>在Seaborn中，样式（style）控制了图表的整体外观，包括背景色、网格线、刻度线等元素。Seaborn提供了一些内置的样式选项，可以通过seaborn.set_style()来设置当前图表的样式。常见的样式有以下几种：</p><p>Ø white：纯白背景，没有网格线。</p><p>Ø dark：深色背景，带有网格线。</p><p>Ø whitegrid：白色背景，带有网格线。</p><p>Ø darkgrid：深色背景，带有网格线（默认样式）。</p><p>sns.set_style(“darkgrid”)</p><p>sns.histplot(data=penguins, x=“island”, kde=True)</p><p>​</p><h2 id="第-4-章-综合案例：房地产市场洞察与价值评估">第 4 章 综合案例：房地产市场洞察与价值评估</h2><h3 id="2-1-业务背景">2.1 业务背景</h3><p>在房地产市场中，准确的房价预测和深入的市场分析对于房产开发商、投资者以及购房者都至关重要。房产开发商需要根据市场趋势和不同因素对房价的影响来制定合理的定价策略，优化项目规划；投资者需要评估房产的潜在价值和投资回报率，做出明智的投资决策；购房者则希望了解市场行情，找到性价比高的房产。</p><p>某大型房地产数据研究机构收集了大量不同地区的房屋销售数据，这些数据包含了房屋的各种属性信息以及销售相关信息。为了更好地服务于市场参与者，该机构计划对这些数据进行全面深入的分析，挖掘数据背后的规律和价值。具体目标包括：</p><p>Ø 探究不同房屋特征（如卧室数量、浴室数量、居住面积等）对房价的影响程度，以便为房价预测模型提供依据。</p><p>Ø 分析不同地区（以邮政编码划分）的房地产市场差异，了解各地区的房价水平、市场活跃度等情况。</p><p>Ø 研究房屋的建造年份、翻新年份等时间因素对房价的影响，以及不同时间段的市场趋势变化。</p><p>Ø 通过可视化手段直观展示数据的分布和关系，为决策提供清晰的参考。</p><h3 id="2-2-数据源介绍">2.2 数据源介绍</h3><table><thead><tr><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>id</strong></td><td>房屋销售记录的唯一标识符</td><td>整数</td><td>用于唯一标识每一条房屋销售记录</td></tr><tr><td><strong>date</strong></td><td>房屋销售日期</td><td>日期时间类型</td><td>记录房屋实际完成销售的日期，可用于时间序列分析，观察不同时间段的市场趋势</td></tr><tr><td><strong>price</strong></td><td>房屋销售价格</td><td>数值型</td><td>反映房屋在销售时的成交金额，是分析的核心指标之一，受多种房屋特征和市场因素影响</td></tr><tr><td><strong>bedrooms</strong></td><td>卧室数量</td><td>整数</td><td>体现房屋的居住功能布局，卧室数量的多少会影响房屋的整体实用性和市场需求</td></tr><tr><td><strong>bathrooms</strong></td><td>浴室数量</td><td>整数</td><td>同样是影响房屋舒适度和实用性的重要因素，与卧室数量共同影响房屋的居住体验</td></tr><tr><td><strong>sqft_living</strong></td><td>居住面积（平方英尺）</td><td>数值型</td><td>指房屋内部可供居住使用的实际面积，是影响房价的关键因素之一</td></tr><tr><td><strong>sqft_lot</strong></td><td>土地面积（平方米）</td><td>数值型</td><td>包括房屋所在土地的总面积，土地面积大小会影响房屋的整体价值和使用空间</td></tr><tr><td><strong>floors</strong></td><td>楼层数</td><td>整数</td><td>房屋的楼层数量会影响房屋的视野、采光、私密性等方面，进而对房价产生影响</td></tr><tr><td><strong>waterfront</strong></td><td>是否临水</td><td>整数（0 或 1）</td><td>0 表示房屋不临水，1 表示房屋临水，临水房屋通常具有更高的景观价值和市场价格</td></tr><tr><td><strong>view</strong></td><td>景观评分</td><td>整数（0 - 4）</td><td>对房屋周边景观的评分，评分越高表示景观越好，景观质量会影响房屋的吸引力和价格</td></tr><tr><td><strong>condition</strong></td><td>房屋状况评分</td><td>整数（1 - 5）</td><td>反映房屋的整体状况，包括房屋的结构、装修、设施等方面的维护情况</td></tr><tr><td><strong>grade</strong></td><td>房屋整体质量评分</td><td>整数（1 - 13）</td><td>综合评估房屋的建筑质量、设计水平等因素，是衡量房屋价值的重要指标</td></tr><tr><td><strong>sqft_above</strong></td><td>地上面积（平方米）</td><td>数值型</td><td>指房屋地面以上部分的建筑面积，不包括地下室面积</td></tr><tr><td><strong>sqft_basement</strong></td><td>地下室面积（平方米）</td><td>数值型</td><td>地下室面积可作为额外的存储空间或功能区域，对房屋的实用性和价值有一定影响</td></tr><tr><td><strong>yr_built</strong></td><td>建造年份</td><td>整数</td><td>记录房屋的建成时间，房屋的建造年份会影响房屋的折旧程度、建筑风格和市场竞争力</td></tr><tr><td><strong>yr_renovated</strong></td><td>翻新年份</td><td>整数</td><td>0 表示房屋未进行过翻新，非 0 值表示房屋进行翻新的具体年份，翻新可以提升房屋的价值和居住体验</td></tr><tr><td><strong>zipcode</strong></td><td>邮政编码</td><td>整数</td><td>用于标识房屋所在的地理位置区域，不同的邮政编码区域可能具有不同的市场特征和房价水平</td></tr><tr><td><strong>lat</strong></td><td>纬度</td><td>数值型</td><td>房屋所在位置的纬度坐标，结合经度可确定房屋的具体地理位置</td></tr><tr><td><strong>long</strong></td><td>经度</td><td>数值型</td><td>房屋所在位置的经度坐标，与纬度共同用于地理空间分析</td></tr></tbody></table><h3 id="2-3-待统计指标及说明">2.3 待统计指标及说明</h3><h4 id="2-3-1-数值型列的描述性统计指标">2.3.1 <strong>数值型列的描述性统计指标</strong></h4><p>Ø **均值（**Mean）：一组数据的平均值，反映数据的集中趋势。例如，房价的均值可以让我们了解该地区房屋的平均销售价格水平。</p><p>Ø **中位数（****Median）：将数据按升序或降序排列后，位于中间位置的数值。当数据存在极端值时，中位数比均值更能代表数据的一般水平。</p><p>Ø <strong>标准差（<strong><strong>Standard Deviation</strong></strong>）</strong>：衡量数据相对于均值的离散程度。标准差越大，说明数据越分散；反之，则越集中。比如房价的标准差可以反映该地区房价的波动情况。</p><p>Ø <strong>最小值（<strong><strong>Minimum</strong></strong>）</strong>：数据集中的最小数值，可用于了解数据的下限。</p><p>Ø <strong>最大值（<strong><strong>Maximum</strong></strong>）</strong>：数据集中的最大数值，可用于了解数据的上限。</p><p>Ø 四分位数（Quartiles）：包括第一四分位数（Q1，25% 分位数）、第二四分位数（Q2，即中位数，50% 分位数）和第三四分位数（Q3，75% 分位数），能帮助了解数据的分布情况。</p><p><strong>2.3.2</strong> <strong>不同特征与房价的相关性</strong></p><p>Ø 使用皮尔逊相关系数衡量特征与房价之间的线性关系强度和方向，系数绝对值越接近 1，相关性越强；正系数表示正相关，负系数表示负相关。</p><p><strong>2.3.3</strong> <strong>按邮政编码、是否翻新、房龄分组的统计指标</strong></p><p>Ø 平均房价：各邮政编码区域内房屋的平均销售价格，用于对比不同区域的房价水平。</p><p>Ø 平均居住面积：各区域内房屋居住面积的平均值，反映区域房屋规模情况。</p><p>Ø 平均卧室数量：各区域内房屋卧室数量的平均值，体现区域房屋居住功能布局。</p><p><strong>2.3.4</strong> <strong>时间序列分析指标</strong></p><p>Ø <strong>每年平均房价（<strong><strong>Average Price per Year</strong></strong>）</strong>：按销售年份分组计算的房屋平均销售价格，可用于观察房价随时间的变化趋势。</p><h3 id="2-4-代码实现步骤">2.4 代码实现步骤</h3><h4 id="2-4-1-数据读取">2.4.1 数据读取</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;E:data\\house_sales.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据基本信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data.info()</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 pandas 的 read_csv 函数读取 house_sales.csv 文件，将数据存储在 DataFrame 对象 data 中，方便后续处理，并查看数据基本信息。</p><h4 id="2-4-2-数据清洗">2.4.2 数据清洗</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line"></span><br><span class="line">missing_values = data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各列缺失值数量：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(missing_values)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值，这里简单地删除包含缺失值的行</span></span><br><span class="line"></span><br><span class="line">data = data.dropna()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查异常值，以房价为例，使用 IQR 方法</span></span><br><span class="line"></span><br><span class="line">Q1 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">Q3 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">lower_bound = Q1 - <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">upper_bound = Q3 + <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">data = data[(data[<span class="string">&#x27;price&#x27;</span>] &gt;= lower_bound) &amp; (data[<span class="string">&#x27;price&#x27;</span>] &lt;= upper_bound)]</span><br></pre></td></tr></table></figure><blockquote><p>在统计学中，0.25（25%）和0.75（75%）的分位数分别被称为<strong>第一四分位数（Q1）**和**第三四分位数（Q3）</strong>。它们与**四分位距（IQR, Interquartile Range）**一起被广泛用于识别数据中的异常值（outliers）。以下是选择这两个特定值的原因：</p><h3 id="1-四分位数的统计意义">1. <strong>四分位数的统计意义</strong></h3><ul><li><strong>Q1（25%分位数）</strong>：数据中25%的值小于或等于Q1，它代表了数据的“较低部分”的分界线。</li><li><strong>Q3（75%分位数）</strong>：数据中75%的值小于或等于Q3，它代表了数据的“较高部分”的分界线。</li><li><strong>IQR = Q3 - Q1</strong>：表示中间50%数据的范围，反映了数据的离散程度（排除极端值的影响）。</li></ul><h3 id="2-为什么用1-5-×-IQR定义异常值边界？">2. <strong>为什么用1.5 × IQR定义异常值边界？</strong></h3><ul><li><p>历史与经验规则</p><p>：1.5 × IQR 是统计学家John Tukey提出的经验法则，基于正态分布的假设。在正态分布中：</p><ul><li>大约99.3%的数据会落在 <code>[Q1 - 1.5×IQR, Q3 + 1.5×IQR]</code> 范围内。</li><li>超出此范围的值极有可能是异常值（仅约0.7%的概率）。</li></ul></li><li><p><strong>稳健性</strong>：IQR对异常值不敏感（不像标准差受极端值影响大），因此用IQR定义的边界更可靠。</p></li></ul><h3 id="3-上下界的计算逻辑">3. <strong>上下界的计算逻辑</strong></h3><ul><li><strong>下界（Lower Bound）</strong>：<code>Q1 - 1.5 × IQR</code> 低于此值的数据点可能异常小（如输入错误或极端情况）。</li><li><strong>上界（Upper Bound）</strong>：<code>Q3 + 1.5 × IQR</code> 高于此值的数据点可能异常大。</li></ul><h3 id="4-为什么不用其他分位数（如0-1-0-9）？">4. <strong>为什么不用其他分位数（如0.1/0.9）？</strong></h3><ul><li><strong>平衡敏感性与实用性</strong>：0.25和0.75的选择能覆盖数据的中间50%，既不过于严格（如用0.1/0.9会漏掉更多潜在异常值），也不过于宽松（如用0.01/0.99可能保留太多异常值）。</li><li><strong>行业标准</strong>：IQR法是被广泛接受的异常值检测方法，尤其在箱线图（Boxplot）中直观体现。</li></ul><h3 id="5-你的代码在做什么？">5. <strong>你的代码在做什么？</strong></h3><p>通过以下步骤过滤数据中的“非典型”价格：</p><ol><li>计算Q1、Q3和IQR。</li><li>定义合理价格的上下界（<code>lower_bound</code>和<code>upper_bound</code>）。</li><li>保留落在该区间内的数据，剔除可能的异常值。</li></ol><h3 id="注意事项">注意事项</h3><ul><li><strong>非对称分布</strong>：如果数据分布严重偏斜（如房价通常右偏），IQR法可能误判一些真实数据为异常值。此时可考虑调整倍数（如用3×IQR）或使用其他方法（如对数变换+Z-Score）。</li><li><strong>领域知识</strong>：最终是否剔除异常值需结合业务背景。例如，奢侈品价格可能天然超出IQR边界，但属于合理数据。</li></ul><p>总之，选择0.25和0.75是基于统计学的稳健性和通用性，而1.5×IQR是经验性的平衡点。</p></blockquote><p>2）代码说明</p><p>缺失值处理：使用 isnull().sum() 统计各列缺失值数量，然后用 dropna() 删除包含缺失值的行。</p><p>异常值处理：使用 IQR（Inter - Quartile Range，四分位距）方法来检测和处理房价数据中的异常值。以房价为例，通过计算第一四分位数 Q1、第三四分位数 Q3 和四分位距 IQR，确定上下限，筛选出合理范围内的数据。</p><p>Ø data[‘price’].quantile(0.25)：quantile 是 pandas 中用于计算分位数的方法。这里 0.25 表示计算 25% 分位数，也就是第一四分位数 Q1。第一四分位数意味着有 25% 的数据小于这个值。</p><p>Ø data[‘price’].quantile(0.75)：同理，0.75 表示计算 75% 分位数，即第三四分位数 Q3。有 75% 的数据小于这个值。</p><p>Ø 四分位距 IQR 是第三四分位数 Q3 与第一四分位数 Q1 的差值。它衡量了数据中间 50% 的数据的分散程度。</p><p>Ø lower_bound：通过 Q1 - 1.5 * IQR 计算出异常值的下限。如果某个数据点小于这个下限，就可能被视为异常值。</p><p>Ø upper_bound：通过 Q3 + 1.5 * IQR 计算出异常值的上限。如果某个数据点大于这个上限，也可能被视为异常值。</p><p>Ø 这里的 1.5 是一个常用的系数，在很多情况下可以有效地识别出大部分异常值，但在某些特殊场景下可能需要调整。</p><p>Ø 使用布尔索引来筛选数据。(data[‘price’] &gt;= lower_bound) &amp; (data[‘price’] &lt;= upper_bound) 表示筛选出 price 列中值大于等于下限且小于等于上限的数据，将这些数据重新赋值给 data，从而去除了可能的异常值。</p><h4 id="2-4-3-数据类型转换">2.4.3 数据类型转换</h4><p>1）代码</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将日期列转换为日期类型</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;date&#x27;</span>])</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 pandas 的 to_datetime 函数将 date 列转换为日期类型，便于进行时间序列分析。</p><h4 id="2-4-4-创建新的特征">2.4.4 创建新的特征</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算房屋的使用年限</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age&#x27;</span>] = data[<span class="string">&#x27;date&#x27;</span>].dt.year - data[<span class="string">&#x27;yr_built&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建新特征：是否翻新</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;is_renovated&#x27;</span>] = data[<span class="string">&#x27;yr_renovated&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>计算房屋使用年限：通过销售日期的年份减去建造年份，得到房屋的使用年限，存储在新列 age 中，这个特征可能会对房价产生影响。</p><p>创建是否翻新特征：使用 apply 方法和 lambda 函数对 yr_renovated 列进行判断，若值大于 0 则表示房屋已翻新，将 is_renovated 列对应的值设为 1，否则设为 0，以便后续分析翻新因素对房价的影响。</p><h4 id="2-4-5-数据探索性分析-描述性统计">2.4.5 数据探索性分析-描述性统计</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 选择数值型列</span></span><br><span class="line"></span><br><span class="line">numeric_columns = data.select_dtypes(include=[np.number]).columns</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算描述性统计信息</span></span><br><span class="line"></span><br><span class="line">description = data[numeric_columns].describe(percentiles=[<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数值型列的描述性统计：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(description)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>data.select_dtypes(include=[np.number]) 选择数据集中的数值型列，并获取其列名存储在 numeric_columns 中。</p><p>data[numeric_columns].describe(percentiles=[0.25, 0.5, 0.75]) 计算数值型列的描述性统计信息，包括均值、中位数、标准差、最小值、最大值、四分位数等，并将结果存储在 description 中，帮助我们了解各数值特征的分布情况。</p><h4 id="2-4-6-数据探索性分析-相关性统计">2.4.6 数据探索性分析-相关性统计</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算不同特征与房价的相关性</span></span><br><span class="line"></span><br><span class="line">correlation = data[numeric_columns].corr()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各特征与房价的相关性：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(correlation[<span class="string">&#x27;price&#x27;</span>])</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>对数值型列使用 corr 方法计算相关系数矩阵，提取 price 列得到各特征与房价的相关性。</p><h4 id="2-4-7-按照邮政编码分组分析">2.4.7 按照邮政编码分组分析</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按邮政编码分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">zipcode_stats = data.groupby(<span class="string">&#x27;zipcode&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">zipcode_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不同邮政编码区域的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(zipcode_stats)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 data.groupby(‘zipcode’) 按邮政编码对数据进行分组。</p><p>agg 方法对分组后的数据进行聚合操作，分别计算每组的平均房价、平均居住面积和平均卧室数量。</p><p>对结果的列名进行重命名，使其更具可读性，并打印输出，可对比不同邮政编码区域的房屋特征情况。</p><h4 id="2-4-8-按照是否翻新分组分析">2.4.8 按照是否翻新分组分析</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按是否翻新分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">renovation_stats = data.groupby(<span class="string">&#x27;is_renovated&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">renovation_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否翻新分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(renovation_stats)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>按 is_renovated 特征对数据进行分组，分析翻新和未翻新房屋在房价、居住面积和卧室数量等方面的差异。同样使用 agg 方法进行聚合计算，得到相应的统计信息并打印。</p><h4 id="2-4-9-按照房龄分组分析">2.4.9 按照房龄分组分析</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>）代码</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按房屋使用年限分组（简单分为 5 个区间）</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age_group&#x27;</span>] = pd.cut(data[<span class="string">&#x27;age&#x27;</span>], bins=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">age_stats = data.groupby(<span class="string">&#x27;age_group&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;按房屋使用年限分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(age_stats)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 pd.cut 函数将房屋使用年限 age 划分为 5 个区间，创建新列 age_group。</p><p>按 age_group 分组，计算每组的平均房价、平均居住面积和平均卧室数量，了解不同使用年限房屋的特征差异。</p><h4 id="2-4-10-时间序列分析-每年平均房价">2.4.10 时间序列分析-每年平均房价</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按年份分组，计算每年的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_avg_price = data.groupby(data[<span class="string">&#x27;date&#x27;</span>].dt.year)[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_avg_price)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>使用 data.groupby(data[‘date’].dt.year) 按销售日期的年份对数据进行分组。</p><p>对每组的 price 列计算均值，得到每年的平均房价，并存储在 yearly_avg_price 中进行打印输出，可观察房价随时间的变化趋势。</p><h4 id="2-4-11-时间序列分析-不同翻新情况平均房价">2.4.11 时间序列分析-不同翻新情况平均房价</h4><p>1）代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 按年份和是否翻新分组，计算每年不同翻新情况的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_renovation_avg_price = data.groupby([data[<span class="string">&#x27;date&#x27;</span>].dt.year, <span class="string">&#x27;is_renovated&#x27;</span>])[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年不同翻新情况的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_renovation_avg_price)</span><br></pre></td></tr></table></figure><p>2）代码说明</p><p>按销售年份和是否翻新进行分组，计算每年翻新和未翻新房屋的平均房价，能让我们看到在不同年份，翻新因素对房价的影响变化。</p><h4 id="2-4-12-可视化">2.4.12 可视化</h4><p>1）房价分布直方图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 房价分布直方图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.hist(data[<span class="string">&#x27;price&#x27;</span>], bins=<span class="number">30</span>, edgecolor=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房价分布直方图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;频数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.hist 函数绘制房价的分布直方图，bins=30 控制柱子的数量，edgecolor=‘k’ 为柱子添加黑色边框。添加标题和坐标轴标签，使图形更易理解，最后使用 plt.show() 显示图形。</p><p>2）卧室数量与房价的散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 卧室数量与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;bedrooms&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;卧室数量与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;卧室数量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.scatter 函数绘制卧室数量与房价的散点图，直观展示两者之间的关系。</p><p>3）各特征与房价的相关性热力图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 各特征与房价的相关性热力图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">plt.imshow(correlation, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns, rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;各特征与房价的相关性热力图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.imshow 函数绘制相关性热力图，cmap=‘coolwarm’ 设置颜色映射，interpolation=‘nearest’ 控制插值方式。添加颜色条和坐标轴标签，显示各特征与房价的相关性，最后显示图形。</p><p>4）不同邮政编码区域平均房价的柱状图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不同邮政编码区域平均房价的柱状图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(zipcode_stats.index.astype(<span class="built_in">str</span>), zipcode_stats[<span class="string">&#x27;avg_price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同邮政编码区域的平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;邮政编码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.bar 函数绘制不同邮政编码区域平均房价的柱状图，将 zipcode 转换为字符串类型。设置图形标题和坐标轴标签，旋转 x 轴标签避免重叠后显示图形。</p><p>5）每年平均房价的折线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 每年平均房价的折线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(yearly_avg_price.index, yearly_avg_price)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;每年平均房价趋势&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;年份&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.plot 函数绘制每年平均房价的折线图，展示房价随时间的变化趋势。</p><p>6）不同翻新情况的房价箱线图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不同翻新情况的房价箱线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">data.boxplot(column=<span class="string">&#x27;price&#x27;</span>, by=<span class="string">&#x27;is_renovated&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同翻新情况的房价箱线图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;是否翻新&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&#x27;未翻新&#x27;</span>, <span class="string">&#x27;已翻新&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 去掉默认的标题</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 data.boxplot 方法绘制不同翻新情况的房价箱线图，展示翻新和未翻新房屋房价的分布情况</p><p>7）房屋使用年限与房价的散点图</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 房屋使用年限与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;age&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房屋使用年限与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房屋使用年限&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p>使用 plt.scatter 函数绘制房屋使用年限与房价的散点图，观察两者之间的关系。</p><h3 id="2-4-13-完整代码">2.4.13 完整代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> rcParams</span><br><span class="line"></span><br><span class="line">rcParams[<span class="string">&quot;font.sans-serif&quot;</span>] = [<span class="string">&quot;SimHei&quot;</span>]  <span class="comment"># 指定中文字体</span></span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"><span class="comment"># 读取 CSV 文件</span></span><br><span class="line"></span><br><span class="line">data = pd.read_csv(<span class="string">&#x27;E:\\大模型课程\\05_尚硅谷大模型技术之Numpy&amp;Pandas\\2.资料\\data\\house_sales.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数据基本信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">data.info()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 检查缺失值</span></span><br><span class="line"></span><br><span class="line">missing_values = data.isnull().<span class="built_in">sum</span>()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各列缺失值数量：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(missing_values)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 处理缺失值，这里简单地删除包含缺失值的行</span></span><br><span class="line"></span><br><span class="line">data = data.dropna()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 检查异常值，以房价为例，使用 IQR 方法</span></span><br><span class="line"></span><br><span class="line">Q1 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.25</span>)</span><br><span class="line"></span><br><span class="line">Q3 = data[<span class="string">&#x27;price&#x27;</span>].quantile(<span class="number">0.75</span>)</span><br><span class="line"></span><br><span class="line">IQR = Q3 - Q1</span><br><span class="line"></span><br><span class="line">lower_bound = Q1 - <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">upper_bound = Q3 + <span class="number">1.5</span> * IQR</span><br><span class="line"></span><br><span class="line">data = data[(data[<span class="string">&#x27;price&#x27;</span>] &gt;= lower_bound) &amp; (data[<span class="string">&#x27;price&#x27;</span>] &lt;= upper_bound)]</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 将日期列转换为日期类型</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;date&#x27;</span>] = pd.to_datetime(data[<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算房屋的使用年限</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age&#x27;</span>] = data[<span class="string">&#x27;date&#x27;</span>].dt.year - data[<span class="string">&#x27;yr_built&#x27;</span>]</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 创建新特征：是否翻新</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;is_renovated&#x27;</span>] = data[<span class="string">&#x27;yr_renovated&#x27;</span>].apply(<span class="keyword">lambda</span> x: <span class="number">1</span> <span class="keyword">if</span> x &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 选择数值型列</span></span><br><span class="line"></span><br><span class="line">numeric_columns = data.select_dtypes(include=[np.number]).columns</span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算描述性统计信息</span></span><br><span class="line"></span><br><span class="line">description = data[numeric_columns].describe(percentiles=[<span class="number">0.25</span>, <span class="number">0.5</span>, <span class="number">0.75</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;数值型列的描述性统计：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(description)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 计算不同特征与房价的相关性</span></span><br><span class="line"></span><br><span class="line">correlation = data[numeric_columns].corr()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;各特征与房价的相关性：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(correlation[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按邮政编码分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">zipcode_stats = data.groupby(<span class="string">&#x27;zipcode&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">zipcode_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;不同邮政编码区域的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(zipcode_stats)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按是否翻新分组，计算每组的平均房价、平均居住面积、平均卧室数量</span></span><br><span class="line"></span><br><span class="line">renovation_stats = data.groupby(<span class="string">&#x27;is_renovated&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">renovation_stats.columns = [<span class="string">&#x27;avg_price&#x27;</span>, <span class="string">&#x27;avg_sqft_living&#x27;</span>, <span class="string">&#x27;avg_bedrooms&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;是否翻新分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(renovation_stats)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按房屋使用年限分组（简单分为 5 个区间）</span></span><br><span class="line"></span><br><span class="line">data[<span class="string">&#x27;age_group&#x27;</span>] = pd.cut(data[<span class="string">&#x27;age&#x27;</span>], bins=<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">age_stats = data.groupby(<span class="string">&#x27;age_group&#x27;</span>).agg(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;price&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;sqft_living&#x27;</span>: <span class="string">&#x27;mean&#x27;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="string">&#x27;bedrooms&#x27;</span>: <span class="string">&#x27;mean&#x27;</span></span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;按房屋使用年限分组的统计信息：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(age_stats)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按年份分组，计算每年的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_avg_price = data.groupby(data[<span class="string">&#x27;date&#x27;</span>].dt.year)[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_avg_price)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 按年份和是否翻新分组，计算每年不同翻新情况的平均房价</span></span><br><span class="line"></span><br><span class="line">yearly_renovation_avg_price = data.groupby([data[<span class="string">&#x27;date&#x27;</span>].dt.year, <span class="string">&#x27;is_renovated&#x27;</span>])[<span class="string">&#x27;price&#x27;</span>].mean()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;每年不同翻新情况的平均房价：&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(yearly_renovation_avg_price)</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 房价分布直方图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.hist(data[<span class="string">&#x27;price&#x27;</span>], bins=<span class="number">30</span>, edgecolor=<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房价分布直方图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;频数&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 卧室数量与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;bedrooms&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;卧室数量与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;卧室数量&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 各特征与房价的相关性热力图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line"></span><br><span class="line">plt.imshow(correlation, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, interpolation=<span class="string">&#x27;nearest&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.colorbar()</span><br><span class="line"></span><br><span class="line">plt.xticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns, rotation=<span class="number">90</span>)</span><br><span class="line"></span><br><span class="line">plt.yticks(<span class="built_in">range</span>(<span class="built_in">len</span>(correlation.columns)), correlation.columns)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;各特征与房价的相关性热力图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 不同邮政编码区域平均房价的柱状图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.bar(zipcode_stats.index.astype(<span class="built_in">str</span>), zipcode_stats[<span class="string">&#x27;avg_price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同邮政编码区域的平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;邮政编码&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 每年平均房价的折线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.plot(yearly_avg_price.index, yearly_avg_price)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;每年平均房价趋势&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;年份&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 不同翻新情况的房价箱线图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">data.boxplot(column=<span class="string">&#x27;price&#x27;</span>, by=<span class="string">&#x27;is_renovated&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;不同翻新情况的房价箱线图&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;是否翻新&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xticks([<span class="number">1</span>, <span class="number">2</span>], [<span class="string">&#x27;未翻新&#x27;</span>, <span class="string">&#x27;已翻新&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.suptitle(<span class="string">&#x27;&#x27;</span>)  <span class="comment"># 去掉默认的标题</span></span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">\<span class="comment"># 房屋使用年限与房价的散点图</span></span><br><span class="line"></span><br><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line"></span><br><span class="line">plt.scatter(data[<span class="string">&#x27;age&#x27;</span>], data[<span class="string">&#x27;price&#x27;</span>])</span><br><span class="line"></span><br><span class="line">plt.title(<span class="string">&#x27;房屋使用年限与房价的关系&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.xlabel(<span class="string">&#x27;房屋使用年限&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.ylabel(<span class="string">&#x27;房价&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"> </span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">机器学习基础</summary>
    
    
    
    <category term="机器学习基础" scheme="https://yjyrichard.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
    
    <category term="机器学习基础" scheme="https://yjyrichard.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>CompletableFuture</title>
    <link href="https://yjyrichard.github.io/posts/227b7dd1.html"/>
    <id>https://yjyrichard.github.io/posts/227b7dd1.html</id>
    <published>2025-07-25T12:37:33.746Z</published>
    <updated>2025-07-25T12:39:17.050Z</updated>
    
    <content type="html"><![CDATA[<h2 id="告别阻塞：从-Future-到-CompletableFuture，全面掌握-Java-异步编程精髓">告别阻塞：从 Future 到 CompletableFuture，全面掌握 Java 异步编程精髓</h2><p>在现代软件开发中，性能是永恒的追求。为了榨干多核CPU的性能，我们不可避免地要和异步与多线程打交道。Java 5 引入的 <code>Future</code> 接口，为我们打开了异步编程的大门。然而，这扇门只开了一半。直到 Java 8 的 <code>CompletableFuture</code> 横空出世，我们才真正拥有了优雅、强大的异步编排能力。</p><p>这篇文章将带你从 <code>Future</code> 的局限性出发，一步步深入 <code>CompletableFuture</code> 的世界，通过一个生动的电商比价案例，让你不仅“会用”，更能“讲透”，在面试中脱颖而出。</p><h3 id="1-温故知新：Future-的“初心”与“窘境”">1. 温故知新：Future 的“初心”与“窘境”</h3><p>在深入 <code>CompletableFuture</code> 之前，我们必须先理解它的前辈 <code>Future</code> 解决了什么问题，又留下了哪些遗憾。</p><h4 id="1-1-Future-的核心价值">1.1 Future 的核心价值</h4><p><code>Future</code> 的核心思想很简单：<strong>将一个耗时的任务提交到另一个线程去执行，并给你一个“未来的凭证”（即 Future 对象），让主线程可以继续做其他事情。</strong> 当主线程需要任务结果时，再用这个凭证去获取。</p><p>这就像老师在上课（主线程），突然想喝水，他不会停止讲课，而是让班长（子线程）去小卖部买水（耗时任务）。老师继续上课，过了一会课间休息时，再问班长水买回来了没有。</p><p><code>Future</code> 接口定义了几个核心操作：</p><ul><li><code>get()</code>: 获取任务结果，如果任务没执行完，就一直<strong>阻塞</strong>等待。</li><li><code>isDone()</code>: 判断任务是否执行完毕。</li><li><code>cancel()</code>: 尝试取消任务。</li><li><code>isCancelled()</code>: 判断任务是否被取消。</li></ul><p><code>FutureTask</code> 是 <code>Future</code> 和 <code>Runnable</code> 的一个经典实现，它既可以作为任务被线程执行，又能管理任务状态和结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Callable;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutionException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.FutureTask;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyThread</span> <span class="keyword">implements</span> <span class="title class_">Callable</span>&lt;String&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName() + <span class="string">&quot; ---- come in call()&quot;</span>);</span><br><span class="line">        <span class="comment">// 模拟耗时操作</span></span><br><span class="line">        Thread.sleep(<span class="number">2000</span>); </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Callable&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FutureDemo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">        FutureTask&lt;String&gt; futureTask = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">MyThread</span>());</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Thread</span>(futureTask, <span class="string">&quot;T1&quot;</span>).start();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;主线程干点别的事...&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要结果时，调用get()</span></span><br><span class="line">        <span class="comment">// 这里会阻塞，直到T1线程执行完毕返回结果</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> futureTask.get(); </span><br><span class="line">        System.out.println(<span class="string">&quot;获取到异步结果: &quot;</span> + result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2-Future-的两大“窘境”">1.2 Future 的两大“窘境”</h4><p><code>Future</code> 模式虽然实现了异步，但在获取结果时却显得非常“笨拙”，主要体现在：</p><ol><li><p><strong>阻塞式 <code>get()</code></strong><br>一旦调用 <code>future.get()</code>，你的主线程就会被无情地阻塞，直到异步任务完成。这与异步编程“不等待”的核心理念背道而驰。如果任务耗时很长，整个应用的吞吐量都会下降。我们称之为“不见不散”的阻塞。</p></li><li><p><strong>轮询式 <code>isDone()</code></strong><br>为了避免 <code>get()</code> 的阻塞，我们可能会写出这样的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!future.isDone()) &#123;</span><br><span class="line">    <span class="comment">// 等待，或者干点别的，但CPU在空转</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">String</span> <span class="variable">result</span> <span class="operator">=</span> future.get();</span><br></pre></td></tr></table></figure><p>这种轮询（Busy-Wait）的方式会持续消耗CPU资源，非常低效，而且无法保证实时性。</p></li></ol><p><strong>结论</strong>：<code>Future</code> 解决了“有没有”的问题，但没有解决“如何优雅地处理结果”的问题。对于复杂的业务场景，比如<strong>任务A完成后自动触发任务B</strong>，或者<strong>多个任务结果需要合并</strong>，<code>Future</code> 提供的API就显得力不从心了。</p><h3 id="2-王者登场：CompletableFuture-的革命性改进">2. 王者登场：CompletableFuture 的革命性改进</h3><p>为了解决 <code>Future</code> 的窘境，Java 8 带来了 <code>CompletableFuture</code>。它不仅实现了 <code>Future</code> 接口，还实现了 <code>CompletionStage</code> 接口，这赋予了它强大的<strong>回调</strong>和<strong>编排</strong>能力。</p><p><code>CompletionStage</code> 接口代表了异步计算中的一个阶段，一个阶段完成后可以触发下一个阶段。<code>CompletableFuture</code> 正是利用这种机制，构建了一个<strong>响应式、非阻塞</strong>的异步编程模型。</p><p><strong>核心优势</strong>：</p><ul><li><strong>回调机制</strong>：当异步任务完成或异常时，自动调用你传入的回调函数，主线程彻底解放。</li><li><strong>异步任务编排</strong>：可以像流水线一样，将多个异步任务串联、并联或组合。</li><li><strong>优雅的异常处理</strong>：提供了专门的机制来处理异步链中的异常。</li></ul><h4 id="2-1-创建一个-CompletableFuture-任务">2.1 创建一个 CompletableFuture 任务</h4><p><code>CompletableFuture</code> 提供了四个核心的静态工厂方法来启动异步任务：</p><ol><li><code>runAsync(Runnable runnable)</code>: 执行一个没有返回值的异步任务。</li><li><code>runAsync(Runnable runnable, Executor executor)</code>: 使用自定义线程池执行。</li><li><code>supplyAsync(Supplier&lt;U&gt; supplier)</code>: 执行一个有返回值的异步任务。</li><li><code>supplyAsync(Supplier&lt;U&gt; supplier, Executor executor)</code>: 使用自定义线程池执行。</li></ol><blockquote><p><strong>面试要点</strong>：如果没有指定 <code>Executor</code>，<code>CompletableFuture</code> 默认使用 <code>ForkJoinPool.commonPool()</code> 这个公共线程池。在CPU密集型计算中它表现很好，但如果是IO密集型任务，建议使用自定义线程池，以避免公共池中的线程被长时间阻塞。</p></blockquote><h3 id="3-实战演练：用-CompletableFuture-实现电商比价">3. 实战演练：用 CompletableFuture 实现电商比价</h3><p>让我们通过一个常见的业务需求，来感受 <code>CompletableFuture</code> 的威力。</p><p><strong>需求</strong>：开发一个商品比价服务。当用户搜索“MySQL从入门到跑路”这本书时，需要同时从京东、淘宝、当当等多个电商平台查询价格，然后汇总成一个价格列表返回。</p><h4 id="3-1-传统方案的痛点">3.1 传统方案的痛点</h4><ul><li><strong>串行查询</strong>：查完京东，再查淘宝，再查当当。如果每个平台查询耗时2秒，3个平台就需要6秒，用户体验极差。</li><li><strong>手动创建线程</strong>：为每个查询创建一个 <code>Thread</code> 或使用 <code>Future</code>，代码繁琐，且结果合并处理起来很麻烦。</li></ul><h4 id="3-2-CompletableFuture-的优雅解法">3.2 CompletableFuture 的优雅解法</h4><p>我们可以为每个平台的查询创建一个 <code>supplyAsync</code> 任务，让它们并发执行。然后使用 <code>allOf</code> 等待所有任务完成，最后统一处理结果。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ThreadLocalRandom;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NetMall</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mallName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">NetMall</span><span class="params">(String mallName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.mallName = mallName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPrice</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟网络延迟</span></span><br><span class="line">            Thread.sleep(ThreadLocalRandom.current().nextInt(<span class="number">1000</span>, <span class="number">3000</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">double</span> <span class="variable">price</span> <span class="operator">=</span> ThreadLocalRandom.current().nextDouble() * <span class="number">100</span> + <span class="number">50</span>;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;《%s》 in %s price is %.2f&quot;</span>, productName, mallName, price);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PriceComparatorDemo</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> List&lt;NetMall&gt; malls = Arrays.asList(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;京东&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;淘宝&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;当当网&quot;</span>),</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">NetMall</span>(<span class="string">&quot;拼多多&quot;</span>)</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title function_">findPrices</span><span class="params">(String productName)</span> &#123;</span><br><span class="line">        <span class="comment">// 使用自定义线程池</span></span><br><span class="line">        <span class="type">ExecutorService</span> <span class="variable">executor</span> <span class="operator">=</span> Executors.newFixedThreadPool(malls.size());</span><br><span class="line"></span><br><span class="line">        List&lt;CompletableFuture&lt;String&gt;&gt; priceFutures = malls.stream()</span><br><span class="line">                .map(mall -&gt; CompletableFuture.supplyAsync(() -&gt; mall.getPrice(productName), executor))</span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等待所有任务完成，并收集结果</span></span><br><span class="line">        <span class="keyword">return</span> priceFutures.stream()</span><br><span class="line">                .map(CompletableFuture::join) <span class="comment">// join() 和 get() 类似，但它不抛出受检异常</span></span><br><span class="line">                .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        List&lt;String&gt; prices = findPrices(<span class="string">&quot;MySQL从入门到跑路&quot;</span>);</span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        prices.forEach(System.out::println);</span><br><span class="line">        System.out.println(<span class="string">&quot;---- Cost: &quot;</span> + (endTime - startTime) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 淘宝 price <span class="keyword">is</span> <span class="number">105.43</span></span><br><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 当当网 price <span class="keyword">is</span> <span class="number">88.91</span></span><br><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 京东 price <span class="keyword">is</span> <span class="number">120.77</span></span><br><span class="line">《MySQL从入门到跑路》 <span class="keyword">in</span> 拼多多 price <span class="keyword">is</span> <span class="number">95.20</span></span><br><span class="line"><span class="comment">---- Cost: 2987 ms</span></span><br></pre></td></tr></table></figure><p>可以看到，总耗时约等于最慢的那个网络请求的耗时，而不是所有请求耗时的总和。这就是异步并行的魅力！代码也极其简洁，充满了函数式编程的优雅。</p><h3 id="4-面试高频：CompletableFuture-核心-API-梳理">4. 面试高频：CompletableFuture 核心 API 梳理</h3><p>掌握了基本用法，我们再来系统梳理一下面试中常被问到的核心API。</p><h4 id="4-1-结果处理与消费-then…系列">4.1 结果处理与消费 (then…系列)</h4><p>这是 <code>CompletableFuture</code> 的精髓，用于构建任务流水线。</p><ul><li><code>thenApply(Function fn)</code>: <strong>串行依赖，有返回值</strong>。当上一个任务完成时，将其结果作为输入，执行 <code>fn</code> 函数，并返回一个新的 <code>CompletableFuture</code>。如果上一步出错，<code>thenApply</code> 不会执行。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; <span class="number">1024</span>)</span><br><span class="line">    .thenApply(r -&gt; r * <span class="number">2</span>)</span><br><span class="line">    .thenAccept(System.out::println); <span class="comment">// 输出 2048</span></span><br></pre></td></tr></table></figure></li><li><code>thenAccept(Consumer action)</code>: <strong>串行依赖，无返回值</strong>。消费上一个任务的结果，但自身不产生新值。</li><li><code>thenRun(Runnable action)</code>: <strong>不依赖上一步结果，无返回值</strong>。只关心上一步任务是否完成，完成后就执行 <code>action</code>。</li><li><code>handle(BiFunction fn)</code>: <strong>强大的异常处理</strong>。无论上一步是正常完成还是异常，<code>handle</code> 都会执行。它接收两个参数：结果和异常（有结果时异常为null，反之亦然）。这给了你一个恢复现场的机会。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture.supplyAsync(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="literal">true</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;计算出错!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1024</span>;</span><br><span class="line">&#125;).handle((result, exception) -&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (exception != <span class="literal">null</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;发生异常: &quot;</span> + exception.getMessage());</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>; <span class="comment">// 返回一个默认值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;).thenAccept(System.out::println); <span class="comment">// 输出 -1</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p><strong>面试要点</strong>：<code>thenApply</code> vs <code>handle</code>？<code>thenApply</code> 是“一帆风顺”时的处理，一旦出错，链条就断了。<code>handle</code> 则是“无论风雨”都能处理，提供了更强的容错能力。</p></blockquote><h4 id="4-2-任务组合-combine-either-系列">4.2 任务组合 (combine/either 系列)</h4><ul><li><code>thenCombine(other, BiFunction fn)</code>: <strong>合并两个任务</strong>。等待当前任务和 <code>other</code> 任务都完成后，将两个结果作为参数传给 <code>fn</code> 函数进行处理。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;Integer&gt; cf1 = CompletableFuture.supplyAsync(() -&gt; <span class="number">10</span>);</span><br><span class="line">CompletableFuture&lt;Integer&gt; cf2 = CompletableFuture.supplyAsync(() -&gt; <span class="number">20</span>);</span><br><span class="line">cf1.thenCombine(cf2, (r1, r2) -&gt; r1 + r2).thenAccept(System.out::println); <span class="comment">// 输出 30</span></span><br></pre></td></tr></table></figure></li><li><code>applyToEither(other, Function fn)</code>: <strong>竞速</strong>。两个任务赛跑，谁先完成就用谁的结果来执行 <code>fn</code> 函数。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CompletableFuture&lt;String&gt; taskA = CompletableFuture.supplyAsync(() -&gt; &#123; sleep(<span class="number">1</span>); <span class="keyword">return</span> <span class="string">&quot;TaskA&quot;</span>; &#125;);</span><br><span class="line">CompletableFuture&lt;String&gt; taskB = CompletableFuture.supplyAsync(() -&gt; &#123; sleep(<span class="number">2</span>); <span class="keyword">return</span> <span class="string">&quot;TaskB&quot;</span>; &#125;);</span><br><span class="line">taskA.applyToEither(taskB, result -&gt; result + <span class="string">&quot; is the winner&quot;</span>)</span><br><span class="line">     .thenAccept(System.out::println); <span class="comment">// 输出 TaskA is the winner</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-线程池说明-…Async-后缀">4.3 线程池说明 (…Async 后缀)</h4><p><code>thenApply</code>, <code>thenAccept</code>, <code>thenRun</code> 等方法都有一个对应的 <code>...Async</code> 版本，例如 <code>thenApplyAsync</code>。</p><ul><li><strong>不带 <code>Async</code></strong>: 下一步任务可能由上一步任务的线程执行，也可能由主线程（调用 <code>join</code>/<code>get</code> 的线程）执行，取决于上一步任务完成时，下一步任务是否已经注册。</li><li><strong>带 <code>Async</code></strong>: 始终会将下一步任务提交到线程池中异步执行。可以传入自定义线程池，否则使用默认的 <code>ForkJoinPool</code>。这能确保后续任务不会阻塞上一步任务的线程，是更推荐的做法。</li></ul><h3 id="5-总结">5. 总结</h3><p><code>CompletableFuture</code> 是 Java 异步编程的“瑞士军刀”，它彻底解决了 <code>Future</code> 模型的痛点，将我们从阻塞和轮询的泥潭中解放出来。</p><p><strong>面试核心要点回顾</strong>：</p><ol><li><strong>Why CompletableFuture?</strong> -&gt; 为了解决 <code>Future.get()</code> 阻塞和 <code>isDone()</code> 轮询的弊端，提供了基于回调的非阻塞模型。</li><li><strong>How to create?</strong> -&gt; <code>supplyAsync</code> (有返回) 和 <code>runAsync</code> (无返回)，并注意其对默认线程池 <code>ForkJoinPool</code> 的使用。</li><li><strong>How to chain tasks?</strong> -&gt; <code>thenApply</code> (转换), <code>thenAccept</code> (消费), <code>thenRun</code> (执行)，以及它们的 <code>...Async</code> 版本。</li><li><strong>How to handle errors?</strong> -&gt; <code>handle</code> (全能处理) 和 <code>exceptionally</code> (专门处理异常)。</li><li><strong>How to combine tasks?</strong> -&gt; <code>thenCombine</code> (合并结果) 和 <code>applyToEither</code> (竞速)。</li></ol><p>掌握了这些，你不仅能写出高性能、高可读性的异步代码，更能向面试官清晰地展示你对现代Java并发编程的深刻理解。希望这篇文章能成为你技术武器库中的一件利器！</p>]]></content>
    
    
    <summary type="html">CompletableFuture</summary>
    
    
    
    <category term="juc" scheme="https://yjyrichard.github.io/categories/juc/"/>
    
    
    <category term="juc" scheme="https://yjyrichard.github.io/tags/juc/"/>
    
  </entry>
  
  <entry>
    <title>前端工程化开篇</title>
    <link href="https://yjyrichard.github.io/posts/8ad6401d.html"/>
    <id>https://yjyrichard.github.io/posts/8ad6401d.html</id>
    <published>2025-07-25T12:35:35.289Z</published>
    <updated>2025-07-25T12:39:17.032Z</updated>
    
    <content type="html"><![CDATA[<h1>第1章 前端工程化开篇</h1><h2 id="1-1-什么是前端工程化">1.1 什么是前端工程化</h2><blockquote><p>**<code>前端工程化</code><strong>是使用</strong><code>软件工程的方法</code><strong>来</strong><code>单独</code><strong>解决</strong><code>前端</code><strong>的开发流程中</strong><code>模块化、组件化、规范化、自动化</code>**的问题，以提高效率和降低成本。</p></blockquote><h2 id="1-2-前端工程化实现技术栈">1.2 前端工程化实现技术栈</h2><blockquote><p>前端工程化实现的技术栈有很多，我们采用ES6+Nodejs +npm+Vite+VUE3+Router+Pinia+Axios+Element-plus组合来实现。</p></blockquote><ul><li>ECMAScript6       VUE3中大量使用ES6语法；</li><li>Nodejs                前端项目运行环境；</li><li>npm                    依赖下载工具；</li><li>Vite                      前端项目构建工具；</li><li>Vue3                   优秀的渐进式前端框架；</li><li>Router                 通过路由实现页面切换；</li><li>Pinia                   通过状态管理实现组件数据传递；</li><li>Axios                   ajax异步请求封装技术实现前后端数据交互；</li><li>Element Plus     可以提供丰富的快速构建网页的组件仓库；</li></ul><h1>第2章 ECMA6Script</h1><h2 id="2-1-ES6的介绍">2.1 ES6的介绍</h2><blockquote><p>ECMAScript 6，简称ES6，是<strong>JavaScript</strong>语言的一次重大更新。它于<strong>2015</strong>年发布，是原来的ECMAScript标准的第六个版本。ES6带来了大量的新特性，包括箭头函数、模板字符串、let和const关键字、解构、默认参数值、模块系统等等，大大提升了JavaScript的开发体验。<code>由于VUE3中大量使用了ES6的语法,所以ES6成为了学习VUE3的门槛之一</code>。ES6对JavaScript的改进在以下几个方面：</p></blockquote><ol><li>更加简洁：ES6引入了一些新的语法，如箭头函数、模板字符串等，使代码更加简洁易懂；</li><li>更强大的功能：ES6引入了一些新的API、解构语法和迭代器等功能，从而使得JavaScript更加强大；</li><li>更好的适用性：ES6引入的模块化功能为JavaScript代码的组织和管理提供了更好的方式，不仅提高了程序的可维护性，还让JavaScript更方便地应用于大型的应用程序；</li></ol><blockquote><p>总的来说，ES6在提高JavaScript的核心语言特性和功能方面取得了很大的进展。由于ES6已经成为了JavaScript的标准，它的大多数新特性都已被现在浏览器所支持，因此现在可以放心地使用ES6来开发前端应用程序。</p></blockquote><p><strong>历史版本：</strong></p><table><thead><tr><th>标准版本</th><th>发布时间</th><th>新特性</th></tr></thead><tbody><tr><td>ES1</td><td>1997年</td><td>第一版 ECMAScript</td></tr><tr><td>ES2</td><td>1998年</td><td>引入setter和getter函数，增加了try/catch，switch语句允许字符串</td></tr><tr><td>ES3</td><td>1999年</td><td>引入了正则表达式和更好的字符串处理</td></tr><tr><td>ES4</td><td>取消</td><td>取消，部分特性被ES3.1和ES5继承</td></tr><tr><td>ES5</td><td>2009年</td><td>Object.defineProperty，JSON，严格模式，数组新增方法等</td></tr><tr><td>ES5.1</td><td>2011年</td><td>对ES5做了一些勘误和例行修订</td></tr><tr><td><code>ES6</code></td><td><code>2015年</code></td><td><code>箭头函数、模板字符串、解构、let和const关键字、类、模块系统等</code></td></tr><tr><td>ES2016</td><td>2016年</td><td>数组.includes，指数操作符（**），Array.prototype.fill等</td></tr><tr><td>ES2017</td><td>2017年</td><td>异步函数async/await，Object.values/Object.entries，字符串填充</td></tr><tr><td>ES2018</td><td>2018年</td><td>正则表达式命名捕获组，几个有用的对象方法，异步迭代器等</td></tr><tr><td>ES2019</td><td>2019年</td><td>Array.prototype.{flat，flatMap}，Object.fromEntries等</td></tr><tr><td>ES2020</td><td>2020年</td><td>BigInt、动态导入、可选链操作符、空位合并操作符</td></tr><tr><td>ES2021</td><td>2021年</td><td>String.prototype.replaceAll，逻辑赋值运算符，Promise.any等</td></tr><tr><td>… …</td><td></td><td></td></tr></tbody></table><h2 id="2-2-es6的变量和模板字符串">2.2 es6的变量和模板字符串</h2><blockquote><p>ES6 新增了<code>let</code>和<code>const</code>，用来声明变量，使用的细节上也存在诸多差异。</p></blockquote><ul><li><p>let 和var的差别：</p><p>1、let 不能重复声明；</p><p>2、let有块级作用域，非函数的花括号遇见let会有块级作用域，也就是只能在花括号里面访问；</p><p>3、let不会预解析进行变量提升；</p><p>4、let 定义的全局变量不会作为window的属性；</p><p>5、let在es6中推荐优先使用；</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1. 基本语法(let)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     let a = 1;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(a); //1</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //console.log(a); //a is not defined</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //2. 代码块内有效</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     let a = 0;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     var b = 1;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(a); //a is not defined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(b); //1 </span></span></span><br><span class="line"><span class="language-javascript">        </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// //3. 不能重复声明</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var b = 3;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// var b = 4;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let a = 1;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// let a = 2;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//4. 循环+定时任务使用let</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//js单线程模型,如果循环包裹了定时任务,定时任务会在遍历结束后执行!</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (var i = 0; i &lt; 10; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setTimeout(function()&#123;//省略了window.setTimeout</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(i);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// // 输出十个 10 </span></span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">            </span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// for (let j = 0; j &lt; 10; j++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// setTimeout(function()&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     console.log(j);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125; //输出0-9</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//5. 不存在变量提升</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">//ReferenceError: a is not defined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> a = <span class="string">&quot;apple&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">//undefined</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> b = <span class="string">&quot;banana&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>const和var的差异：</p><p>1、新增const和let类似，只是const定义的变量不能修改，声明一个只读变量</p><p>2、并不是变量的值不能改动，而是变量指向的那个内存地址所保存的数据不能改动；</p><blockquote><p>其实 const 保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。此时，你可能已经想到，简单类型和复合类型保存值的方式是不同的。是的，对于简单类型（数值 number、字符串 string 、布尔值 boolean）,值就保存在变量指向的那个内存地址，因此 const 声明的简单类型变量等同于常量。而复杂类型（对象 object，数组 array，函数 function），变量指向的内存地址其实是保存了一个指向实际数据的指针，所以 const 只能保证指针是固定的，至于指针指向的数据结构变不变就无法控制了</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1声明常量</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.1415926</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">PI</span>=<span class="number">3.14</span> <span class="comment">//报错</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.对应数组和对象元素修改，不算常量修改，修改值，不修改地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="variable constant_">TEAM</span> = [<span class="string">&#x27;刘德华&#x27;</span>,<span class="string">&#x27;张学友&#x27;</span>,<span class="string">&#x27;郭富城&#x27;</span>];</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>.<span class="title function_">push</span>(<span class="string">&#x27;黎明&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="variable constant_">TEAM</span>=[] <span class="comment">// 报错</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">TEAM</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>模板字符串（template string）是增强版的字符串，用飘号，也叫反引号（`）标识  。</p></blockquote><p>1、字符串中可以出现换行符；</p><p>2、可以使用 ${xxx} 形式输出变量和拼接变量；</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1 多行普通字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr =</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;ul&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;JAVA&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;html&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;li&gt;VUE&lt;/li&gt;&#x27;</span>+</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;&lt;/ul&gt;&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr)    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2 多行模板字符串</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> ulStr2 = <span class="string">`</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;ul&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;JAVA&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;html&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;li&gt;VUE&lt;/li&gt;</span></span></span><br><span class="line"><span class="string"><span class="language-javascript">        &lt;/ul&gt;`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ulStr2)        </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3  普通字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> name =<span class="string">&#x27;张小明&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr =name+<span class="string">&#x27;被评为本年级优秀学员&#x27;</span>  </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 4  模板字符串拼接</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> infoStr2 =<span class="string">`<span class="subst">$&#123;name&#125;</span>被评为本年级优秀学员`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(infoStr2)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-es6的解构表达式">2.3 es6的解构表达式</h2><blockquote><p>ES6 的解构赋值是一种方便的语法，可以快速将数组或对象中的值拆分并赋值给变量。解构赋值的语法使用花括号 <code>&#123;&#125;</code> 表示对象，方括号 <code>[]</code> 表示数组。通过解构赋值，函数更方便进行参数接受等！</p></blockquote><blockquote><p><strong>数组解构赋值</strong>：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.数组模型的解构(快速获取数组数据)</span></span><br><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//2.可嵌套数组处理</span></span><br><span class="line"><span class="keyword">let</span> [d,[f],g] = [<span class="number">1</span>,[<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(g);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//3.可忽略数组处理</span></span><br><span class="line"><span class="keyword">let</span> [h,i] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(h);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="keyword">let</span> [j,,k] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(j);<span class="comment">//1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(k);<span class="comment">//3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//4.解构默认值</span></span><br><span class="line"><span class="keyword">let</span> [l,m = <span class="number">2</span>] = [<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(l);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//5.剩余运算符</span></span><br><span class="line"><span class="comment">//...只能在最后</span></span><br><span class="line"><span class="keyword">let</span> [n,...o] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(o); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//6.字符串解构</span></span><br><span class="line"><span class="comment">//在数组的解构中，解构的目标若为可遍历对象，皆可进行解构赋值</span></span><br><span class="line"><span class="keyword">let</span> [aa,bb,cc,dd] = <span class="string">&#x27;abcdf&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(aa);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(bb);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cc);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(dd);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p><strong>对象解构赋值</strong>：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//7.对象模型解构</span></span><br><span class="line"><span class="comment">//解构的属性名必须等于对象属性名,否则无法对应</span></span><br><span class="line"><span class="keyword">let</span> &#123;name,age&#125; = &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(age);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//可以利用:起别名</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>:ne,<span class="attr">age</span>:ae&#125; = &#123;<span class="attr">name</span>:<span class="string">&quot;aaa&quot;</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ne);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(ae);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------------&quot;</span>)</span><br><span class="line"><span class="comment">//8.对象解构嵌套和忽略</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">p</span>:[<span class="string">&#x27;hello&#x27;</span>,&#123;<span class="attr">y</span>:<span class="string">&#x27;world&#x27;</span>&#125;]&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>:[ff,&#123;<span class="attr">y</span>:yy&#125;]&#125; = obj;</span><br><span class="line"><span class="keyword">let</span> obj1 = &#123;<span class="attr">p</span>: [<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="attr">y</span>: <span class="string">&#x27;world&#x27;</span>&#125;] &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">p</span>: [x, &#123;  &#125;] &#125; = obj1;</span><br><span class="line"><span class="comment">//9.对象还剩余运算符</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:aaa, <span class="attr">b</span>:bbb, ...rest&#125; = &#123;<span class="attr">a</span>: <span class="number">10</span>, <span class="attr">b</span>: <span class="number">20</span>, <span class="attr">c</span>: <span class="number">30</span>, <span class="attr">d</span>: <span class="number">40</span>&#125;;</span><br><span class="line"><span class="comment">// aaa = 10</span></span><br><span class="line"><span class="comment">// bbb = 20</span></span><br><span class="line"><span class="comment">// rest = &#123;c: 30, d: 40&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p><strong>函数参数解构赋值</strong>：</p></blockquote><ul><li>解构赋值也可以用于函数参数，例如：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">[x, y]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">add</span>([<span class="number">1</span>, <span class="number">2</span>]);</span><br></pre></td></tr></table></figure><ul><li><p>该函数接受一个数组作为参数，将其中的第一个值赋给 x，第二个值赋给 y，然后返回它们的和；</p></li><li><p>ES6 解构赋值让变量的初始化更加简单和便捷。通过解构赋值，我们可以访问到对象中的属性，并将其赋值给对应的变量，从而提高代码的可读性和可维护性；</p></li></ul><h2 id="2-4-es6的箭头函数">2.4 es6的箭头函数</h2><blockquote><p>ES6 允许使用“箭头” 函数。语法类似Java中的Lambda表达式。</p></blockquote><h3 id="2-4-1-声明">2.4.1 声明</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//ES6 允许使用“箭头”（=&gt;）定义函数。</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1. 函数声明</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式一</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//方式二：</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun1 = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//针对方式二可以使用箭头函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun2</span> = (<span class="params"></span>)=&gt;&#123;&#125; <span class="comment">//箭头函数,此处不需要书写function关键字</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun3</span> = x =&gt;&#123;&#125; <span class="comment">//单参数可以省略(),多参数无参数不可以!</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun4</span> = x =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(x) <span class="comment">//只有一行方法体可以省略&#123;&#125;;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun5</span> = x =&gt; x + <span class="number">1</span> <span class="comment">//当函数体只有一句返回值时，可以省略花括号和 return 语句</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-2-参数默认值">2.4.2 参数默认值</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明一个求和的函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">sum</span> = (<span class="params">a,b</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a + b</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result = <span class="title function_">sum</span>(<span class="number">1</span>,<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//少传一个参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result1 = <span class="title function_">sum</span>(<span class="number">1</span>) </span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result1); <span class="comment">//NaN</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明函数时设置默认值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">sum1</span> = (<span class="params">a,b=<span class="number">1</span></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> a + b</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result2 = <span class="title function_">sum1</span>(<span class="number">1</span>,<span class="number">2</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result2); <span class="comment">//3</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> result3 = <span class="title function_">sum1</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result3); <span class="comment">//2</span></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-4-3-三个点扩展运算符">2.4.3 三个点扩展运算符</h3><blockquote><p>用法一：作为可变参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ... 作为参数列表,称之为rest参数 普通函数和箭头函数中都支持</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> fun = <span class="keyword">function</span> (<span class="params">a,...args</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params">a,...args</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) <span class="comment">//1赋值给a，2和3作为一个数组赋值给args</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>) <span class="comment">//1赋值给a，2、3、4作为一个数组赋值给args</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// rest参数在一个参数列表中的最后一个值,这也就无形之中要求一个参数列表中只能有一个rest参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// let fun2 =  (...args,...args2) =&gt;&#123;&#125; // 这里报错</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>用法二：复制数组和对象的属性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//使用... 复制数组和对象的属性称为spread语法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景1 合并数组</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr2=[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> arr3=[...arr,...arr2]</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//应用场景2 合并对象属性</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p1=&#123;<span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p2=&#123;<span class="attr">age</span>:<span class="number">10</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> p3=&#123;<span class="attr">gender</span>:<span class="string">&quot;boy&quot;</span>&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person =&#123;...p1,...p2,...p3&#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(person)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-5-链判断">2.5 链判断</h2><blockquote><p>如果读取对象内部的某个属性，往往需要判断一下，属性的上层对象是否存在。</p><p>比如，读取emp.dept.name这个属性，安全的写法是写成下面这样:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  emp = <span class="literal">null</span></span><br><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="comment">//const  empName = emp.dept.name|| &#x27;default&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">const</span> empName = (emp</span><br><span class="line">                   &amp;&amp; emp.<span class="property">dept</span></span><br><span class="line">                   &amp;&amp; emp.<span class="property">dept</span>.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(empName)</span><br></pre></td></tr></table></figure><blockquote><p>这样的层层判断非常麻烦，因此 <a href="https://github.com/tc39/proposal-optional-chaining">ES2020</a> 引入了“链判断运算符”（optional chaining operator）<strong>?.</strong>，简化上面的写法:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let emp = null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> emp = &#123;</span><br><span class="line">    <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">dept</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;教学部&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> empName = emp?.<span class="property">dept</span>?.<span class="property">name</span> || <span class="string">&#x27;default&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-es6的模块化处理">2.6 es6的模块化处理</h2><h3 id="2-6-1模块化介绍">2.6.1模块化介绍</h3><blockquote><p>模块化是一种组织和管理前端代码的方式，将代码拆分成小的模块单元，使得代码更易于维护、扩展和复用。它包括了定义、导出、导入以及管理模块的方法和规范。前端模块化的主要优势如下：</p></blockquote><ol><li>提高代码可维护性：通过将代码拆分为小的模块单元，使得代码结构更为清晰，可读性更高，便于开发者阅读和维护；</li><li>提高代码可复用性：通过将重复使用的代码变成可复用的模块，减少代码重复率，降低开发成本；</li><li>提高代码可扩展性：通过模块化来实现代码的松耦合，便于更改和替换模块，从而方便地扩展功能；</li></ol><blockquote><p>目前，前端模块化有多种规范和实现，包括 CommonJS、AMD 和 ES6 模块化。ES6 模块化是 JavaScript 语言的模块标准，使用 import 和 export 关键字来实现模块的导入和导出。现在，大部分浏览器都已经原生支持 ES6 模块化，因此它成为了最为广泛使用的前端模块化标准.。</p></blockquote><ul><li>ES6模块化的几种暴露和导入方式：<ol><li>分别导出；</li><li>统一导出；</li><li>默认导出；</li></ol></li><li><code>ES6中无论以何种方式导出,导出的都是一个对象,导出的内容都可以理解为是向这个对象中添加属性或者方法</code>！！！</li></ul><h3 id="2-6-2-分别导出">2.6.2 分别导出</h3><p><img src="images/01.png" alt="1684461046181"></p><ul><li>module.js 向外分别暴露成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.分别暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,添加export关键字即可!</span></span><br><span class="line"><span class="comment">// 导出一个变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js 导入module.js中的成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(m1.<span class="property">PI</span>)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure><ul><li>index.html作为程序启动的入口 ，导入 app.js  ：</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入JS文件 添加type=&#x27;module&#x27; 属性,否则不支持ES6的模块化 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./app.js&quot;</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span> /&gt;</span> </span><br></pre></td></tr></table></figure><h3 id="2-6-3-统一导出">2.6.3 统一导出</h3><p><img src="images/02.png" alt="1684461701620"></p><ul><li>module.js向外统一导出成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.统一暴露</span></span><br><span class="line"><span class="comment">// 模块想对外导出,export统一暴露想暴露的内容!</span></span><br><span class="line"><span class="comment">// 定义一个常量</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 定义一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 统一对外导出(暴露)</span></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line"><span class="variable constant_">PI</span>,</span><br><span class="line">    sum</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>app.js导入module.js中的成员：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入要使用的来自于module.js中的成员</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入的名称要和module.js中导出的一致,也可以在此处起别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中如果定义了别名,那么在当前模块中就只能使用别名</span></span><br><span class="line"><span class="comment">    &#123;&#125;中导入成员的顺序可以不是暴露的顺序</span></span><br><span class="line"><span class="comment">    一个模块中可以同时有多个import</span></span><br><span class="line"><span class="comment">    多个import可以导入多个不同的模块,也可以是同一个模块</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span> ,sum &#125;  <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span> <span class="keyword">as</span> pi,sum <span class="keyword">as</span> add&#125;  <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi)</span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result1 =<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result1)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br></pre></td></tr></table></figure><h3 id="2-6-4-默认导出">2.6.4 默认导出</h3><p><img src="images/03.png" alt="1684463528680"></p><ul><li>module.js中混合向外导出：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 3.默认和混合暴露</span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    默认暴露语法  export default sum</span></span><br><span class="line"><span class="comment">    默认导出在一个模块中只能使用一次</span></span><br><span class="line"><span class="comment">    默认暴露相当于是在暴露的对象中增加了一个名字为default的属性</span></span><br><span class="line"><span class="comment">    三种暴露方式可以在一个module中混合使用</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="variable constant_">PI</span> = <span class="number">3.14</span></span><br><span class="line"><span class="comment">// 导出一个函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 导出默认</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</span><br></pre></td></tr></table></figure><ul><li>app.js 的default和其他导入写法混用：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    *代表module.js中的所有成员</span></span><br><span class="line"><span class="comment">    m1代表所有成员所属的对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> m1 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="keyword">default</span> <span class="keyword">as</span> add&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 用的少</span></span><br><span class="line"><span class="keyword">import</span> add2 <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span> <span class="comment">// 等效于 import &#123;default as add2&#125; from &#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 调用暴露的方法</span></span><br><span class="line"><span class="keyword">let</span> result =m1.<span class="title function_">default</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line"><span class="keyword">let</span> result2 =<span class="title function_">add</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"><span class="keyword">let</span> result3 =<span class="title function_">add2</span>(<span class="number">10</span>,<span class="number">20</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入其他方式暴露的内容</span></span><br><span class="line"><span class="keyword">import</span> &#123;<span class="variable constant_">PI</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./module.js&#x27;</span></span><br><span class="line"><span class="comment">// 使用暴露的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable constant_">PI</span>)</span><br></pre></td></tr></table></figure><h1>第3章 前端工程化环境搭建</h1><h2 id="3-1-Nodejs的介绍与安装">3.1 Nodejs的介绍与安装</h2><h3 id="3-1-1-什么是Nodejs">3.1.1 什么是Nodejs</h3><img src="images/04.png" alt="1684487715655" style="zoom: 33%;" /><blockquote><p>Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行时环境，可以使 JavaScript 运行在服务器端。使用 Node.js，可以方便地开发服务器端应用程序，如 Web 应用、API、后端服务，还可以通过 Node.js 构建命令行工具等。相比于传统的服务器端语言（如 PHP、Java、Python 等），Node.js 具有以下特点：</p></blockquote><ul><li>单线程，但是采用了事件驱动、异步 I/O 模型，可以处理高并发请求；</li><li>轻量级，使用 C++ 编写的 V8 引擎让 Node.js 的运行速度很快；</li><li>模块化，Node.js 内置了大量模块，同时也可以通过第三方模块扩展功能；</li><li>跨平台，可以在 Windows、Linux、Mac 等多种平台下运行；</li></ul><blockquote><p>Node.js 的核心是其管理事件和异步 I/O 的能力。Node.js 的异步 I/O 使其能够处理大量并发请求，并且能够避免在等待 I/O 资源时造成的阻塞。此外，Node.js 还拥有高性能网络库和文件系统库，可用于搭建 WebSocket 服务器、上传文件等。<code>在 Node.js 中，我们可以使用 JavaScript 来编写服务器端程序，这也使得前端开发人员可以利用自己已经熟悉的技能来开发服务器端程序，同时也让 JavaScript 成为一种全栈语言。</code>Node.js 受到了广泛的应用，包括了大型企业级应用、云计算、物联网、游戏开发等领域。常用的 Node.js 框架包括 Express、Koa、Egg.js 等，它们能够显著提高开发效率和代码质量。</p></blockquote><h3 id="3-1-2-如何安装Nodejs">3.1.2 如何安装Nodejs</h3><ol><li>打开官网https://nodejs.org/en下载对应操作系统的 LTS 版本。</li><li>双击安装包进行安装，安装过程中遵循默认选项即可(或者参照https://www.runoob.com/nodejs/nodejs-install-setup.html )。安装完成后，可以在命令行终端输入 <code>node -v</code> 和 <code>npm -v</code> 查看 Node.js 和 npm 的版本号。</li></ol><img src="images/05.png" alt="1687765256680" style="zoom:50%;" /><ol start="3"><li>定义一个app.js文件，文件内定义如下代码。cmd到该文件所在目录，然后在dos上通过<code>node app.js</code>命令即可运行。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;测试Nodejs&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="3-2-npm-配置和使用">3.2 npm 配置和使用</h2><h3 id="3-2-1-npm介绍">3.2.1 npm介绍</h3><img src="images/06.png" alt="1684487779164" style="zoom:50%;" /><blockquote><p>NPM全称Node Package Manager，是Node.js包管理工具，是全球最大的模块生态系统，里面所有的模块都是开源免费的；也是Node.js的包管理工具，相当于后端的Maven的部分功能 。</p></blockquote><h3 id="3-2-2-npm-安装和配置">3.2.2 npm 安装和配置</h3><blockquote><p>1、安装 ：安装Nodejs，自动安装npm包管理工具！</p></blockquote><blockquote><p>2、配置依赖下载使用阿里镜像：</p></blockquote><ul><li>npm 安装依赖包时默认使用的是官方源，由于国内网络环境的原因，有时会出现下载速度过慢的情况。为了解决这个问题，可以配置使用阿里镜像来加速 npm 的下载速度，打开命令行终端，执行以下命令，配置使用阿里镜像：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><ul><li>验证配置，查看当前 registry 的配置：如果输出结果为 <code>https://registry.npmmirror.com</code>，说明配置已成功生效。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config get registry</span><br><span class="line">npm config list</span><br></pre></td></tr></table></figure><ul><li>如果需要恢复默认的官方源，可以执行以下命令：</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry <span class="attr">https</span>:<span class="comment">//registry.npmjs.org/</span></span><br></pre></td></tr></table></figure><blockquote><p>3、配置全局依赖下载后存储位置：</p></blockquote><ul><li><p>在 Windows 系统上，npm 的全局依赖默认安装在 <code>&lt;用户目录&gt;\AppData\Roaming\npm</code> 目录下。</p></li><li><p>如果需要修改全局依赖的安装路径，可以按照以下步骤操作：</p><ol><li><p>创建一个新的全局依赖存储目录，例如 <code>D:\GlobalNodeModules</code>。</p></li><li><p>打开命令行终端，执行以下命令来配置新的全局依赖存储路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set prefix &quot;D:\GlobalNodeModules&quot;</span><br></pre></td></tr></table></figure></li><li><p>确认配置已生效，可以使用以下命令查看当前的全局依赖存储路径：</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br></pre></td></tr></table></figure></li></ol></li></ul><blockquote><p>4、升级npm版本：</p></blockquote><ul><li>cmd 输入npm -v 查看版本，如果node中自带的npm版本过低！则需要升级至9.6.6！</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm@9.6.6</span><br></pre></td></tr></table></figure><h3 id="3-2-3-npm-常用命令">3.2.3 npm 常用命令</h3><blockquote><p>1、项目初始化：</p></blockquote><ul><li>npm init<ul><li>进入一个vscode创建好的项目中，执行 npm init 命令后，npm 会引导您在命令行界面上回答一些问题，例如项目名称、版本号、作者、许可证等信息，并最终生成一个package.json 文件。package.json信息会包含项目基本信息！类似maven的pom.xml。</li></ul></li><li>npm init -y<ul><li>执行，-y yes的意思，所有信息使用当前文件夹的默认值！不用挨个填写！</li></ul></li></ul><blockquote><p>2、安装依赖  (查看所有依赖地址  <a href="https://www.npmjs.com">https://www.npmjs.com</a> )：</p></blockquote><ul><li>npm install 包名 或者 npm install 包名@版本号<ul><li>安装包或者指定版本的依赖包(安装到当前项目中)。</li></ul></li><li>npm install -g 包名<ul><li>安装全局依赖包(安装到d:/GlobalNodeModules)则可以在任何项目中使用它，而无需在每个项目中独立安装该包。</li></ul></li><li>npm install<ul><li>安装package.json中的所有记录的依赖。</li></ul></li></ul><blockquote><p>3、升级依赖：</p></blockquote><ul><li>npm update 包名<ul><li>将依赖升级到最新版本。</li></ul></li></ul><blockquote><p>4、卸载依赖：</p></blockquote><ul><li>npm uninstall 包名</li></ul><blockquote><p>5、查看依赖：</p></blockquote><ul><li><p>npm ls</p><ul><li>查看项目依赖。</li></ul></li><li><p>npm list -g</p><ul><li>查看全局依赖。</li></ul></li></ul><blockquote><p>6、运行命令：</p></blockquote><ul><li><p>npm run 命令是在执行 npm 脚本时使用的命令。npm 脚本是一组在 package.json 文件中定义的可执行命令。npm 脚本可用于启动应用程序，运行测试，生成文档等，还可以自定义命令以及配置需要运行的脚本。</p></li><li><p>在 package.json 文件中，scripts 字段是一个对象，其中包含一组键值对，键是要运行的脚本的名称，值是要执行的命令。例如，以下是一个简单的 package.json 文件：</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line">package.json 是每个 npm 项目的基础配置文件，它定义了项目的依赖关系、版本号、入口脚本、包的元数据等信息。</span><br><span class="line">一个基本的 package.json 文件包含以下字段：</span><br><span class="line">name<span class="punctuation">:</span> 包名</span><br><span class="line">version<span class="punctuation">:</span> 版本号，遵循语义化版本控制（Semantic Versioning）</span><br><span class="line">description<span class="punctuation">:</span> 包的描述</span><br><span class="line">main<span class="punctuation">:</span> 入口点脚本文件，通常是启动时加载的文件</span><br><span class="line">scripts<span class="punctuation">:</span> 定义运行脚本的脚本命令</span><br><span class="line">dependencies<span class="punctuation">:</span> 生产环境依赖</span><br><span class="line">devDependencies<span class="punctuation">:</span> 开发环境依赖</span><br><span class="line">repository<span class="punctuation">:</span> 代码仓库地址</span><br><span class="line">keywords<span class="punctuation">:</span> 关键词数组，有助于 npm 搜索</span><br><span class="line">author<span class="punctuation">:</span> 作者信息</span><br><span class="line">license<span class="punctuation">:</span> 许可证</span><br><span class="line"></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;example-package&quot;</span><span class="punctuation">,</span>  <span class="comment">//软件名</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span>         <span class="comment">//定义版本</span></span><br><span class="line">    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;A sample npm package&quot;</span><span class="punctuation">,</span> <span class="comment">//软件描述</span></span><br><span class="line">    <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span>  <span class="comment">//启动执行的js文件</span></span><br><span class="line">    <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>  <span class="comment">//指定运行脚本</span></span><br><span class="line">        <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span> <span class="comment">// npm run test 执行内部的测试输出命令</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        maven / 依赖 / scope / compile 全程需要 | runtime 写代码时候无法使用<span class="punctuation">,</span>运行才会有 mysql | provided main test 打包以后不使用 <span class="punctuation">[</span><span class="punctuation">[</span>servlet<span class="punctuation">]</span><span class="punctuation">]</span> | test  junit</span><br><span class="line">    <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> (compile) <span class="punctuation">&#123;</span>  <span class="comment">//生产环境依赖</span></span><br><span class="line">        <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.17.1&quot;</span><span class="punctuation">,</span> #准确版本</span><br><span class="line">        <span class="attr">&quot;express&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.1&quot;</span> #大版本必须<span class="number">4</span> 锁住大版本</span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span>(provided) <span class="punctuation">&#123;</span> <span class="comment">//开发环境依赖 </span></span><br><span class="line">        <span class="attr">&quot;nodemon&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.7&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">//git仓库</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/username/example-package.git&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;example&quot;</span><span class="punctuation">,</span> <span class="string">&quot;npm&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span> <span class="comment">//npm搜索关键字</span></span><br><span class="line">    <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Your Name&quot;</span><span class="punctuation">,</span> <span class="comment">//作者名字</span></span><br><span class="line">    <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span> <span class="comment">//许可证</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">### 环境依赖配置</span><br><span class="line">    dependencies 生产环境依赖 (compile)</span><br><span class="line">    devDependencies 开发环境依赖  (provided)</span><br><span class="line">当你执行 npm install（没有额外参数时）时，dependencies 会被自动安装。</span><br><span class="line">    当你执行 npm install --production 或者设置环境变量为 NODE_ENV=production 时，devDependencies 会被忽略，只会安装 dependencies 中的依赖。</span><br><span class="line">### name</span><br><span class="line"></span><br><span class="line">    name 是指软件包名。</span><br><span class="line">    命名规则：</span><br><span class="line">    名称必须小于或等于 <span class="number">214</span> 个字符。这包括范围软件包的范围。</span><br><span class="line">    作用域软件包的名称可以以点或下划线开头。如果没有作用域，则不允许这样做。</span><br><span class="line">    新软件包名称中不能有大写字母。</span><br><span class="line">    名称最终会成为 URL、命令行参数和文件夹名称的一部分。因此，名称中不能包含任何非 URL 安全字符。</span><br><span class="line">    名称可选择以作用域作为前缀，例如 @myorg/mypackage。</span><br><span class="line">    提示：</span><br><span class="line">    不要使用与 Node 核心模块相同的名称。</span><br><span class="line">    不要在名称中使用 <span class="string">&quot;js &quot;</span>或 “node”。因为你编写的是 package.json 文件，所以我们假定它是 js，你可以使用 <span class="string">&quot;引擎 &quot;</span>字段指定引擎。(见下文）。</span><br><span class="line">    该名称可能会作为参数传递给 require()，因此应该简短，但也要有合理的描述性。</span><br><span class="line">    你可能需要检查一下 npm 注册表，看看是否已经有使用该名称的软件，以免过于依赖它。https<span class="punctuation">:</span><span class="comment">//www.npmjs.com/</span></span><br><span class="line">    这是发布包的注意事项，如果你的项目不准备分享发布，则无所谓，建议和你项目相同。</span><br><span class="line"></span><br><span class="line">### version</span><br><span class="line"></span><br><span class="line">    指发布包版本号<span class="punctuation">,</span>x.x.x的形式。</span><br><span class="line">    版本必须能被 node-semver 解析，node-semver 作为依赖项与 npm 捆绑。(npm install semver 可自行使用）。</span><br><span class="line">    命名版本号建议遵循版本语义规范<span class="punctuation">,</span>：</span><br><span class="line"></span><br><span class="line">### description</span><br><span class="line"></span><br><span class="line">    项目描述。</span><br><span class="line">    这是一个字符串。这有助于人们发现你的软件包，因为它会在 npm 搜索中列出。</span><br><span class="line"></span><br><span class="line">### keywords</span><br><span class="line"></span><br><span class="line">    项目关键字。</span><br><span class="line">    这是一个字符串数组。这有助于人们在 npm 搜索中发现你的软件包。</span><br><span class="line"></span><br><span class="line">### scripts</span><br><span class="line"></span><br><span class="line">    运行命令集合（字典）</span><br><span class="line">    脚本 <span class="string">&quot;属性是一个字典，包含在软件包生命周期的不同时间运行的脚本命令。键是生命周期事件，值是在该时刻运行的命令。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    package.json 文件的 &quot;</span>scripts <span class="string">&quot;属性支持大量内置脚本、预设生命周期事件以及任意脚本。这些脚本都可以通过运行 npm run-script 或 npm run 来执行。名称匹配的前置和后置命令也会被执行（例如 premyscript、myscript、postmyscript）。使用 npm explore – npm run 可以运行来自依赖项的脚本。</span></span><br><span class="line"><span class="string">    例如：</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">        &quot;</span>scripts<span class="string">&quot;: &#123;</span></span><br><span class="line"><span class="string">            &quot;</span>precompress<span class="string">&quot;: &quot;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span> executes BEFORE the `compress` script <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &quot;</span>compress<span class="string">&quot;: &quot;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span> run command to compress files <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;,</span></span><br><span class="line"><span class="string">            &quot;</span>postcompress<span class="string">&quot;: &quot;</span><span class="punctuation">&#123;</span><span class="punctuation">&#123;</span> executes AFTER `compress` script <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    npm run compress 就会执行compress后面对应的命令!</span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure><ul><li>scripts 对象包含 start、test 和 build 三个脚本。当您运行 npm run start 时，将运行 node index.js，并启动应用程序。同样，运行 npm run test 时，将运行 Jest 测试套件，而 npm run build 将运行 webpack 命令以生成最终的构建输出。</li><li>总之，npm run 命令为您提供了一种在 package.json 文件中定义和管理一组指令的方法，可以在项目中快速且灵活地运行各种操作。</li></ul><h1>第4章 Vue3框架</h1><h2 id="4-1-Vue3简介">4.1 Vue3简介</h2><h3 id="4-1-1-Vue3介绍">4.1.1 Vue3介绍</h3><img src="images/07.png" alt="1684487637025" style="zoom:50%;" /><blockquote><p>Vue (发音为 /vjuː/，类似 <strong>view</strong>) 是一款用于构建用户界面的 JavaScript 框架。它基于标准 HTML、CSS 和 JavaScript 构建，并提供了一套声明式的、组件化的编程模型，帮助你高效地开发用户界面。无论是简单还是复杂的界面，Vue 都可以胜任。官网为:<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a></p></blockquote><p><strong>Vue的两个核心功能：</strong></p><ul><li><strong>声明式渲染</strong>：Vue 基于标准 HTML 拓展了一套模板语法，使得我们可以声明式地描述最终输出的 HTML 和 JavaScript 状态之间的关系；</li><li><strong>响应性</strong>：Vue 会自动跟踪 JavaScript 状态并在其发生变化时响应式地更新 DOM  ；</li></ul><blockquote><p>VUE作者:尤雨溪</p></blockquote><img src="images/08.png" alt="1684487839928" style="zoom:50%;" /><ul><li><p>尤雨溪（Evan You），毕业于科尔盖特大学，前端框架Vue.js的作者、HTML5版Clear的打造人、独立开源开发者。曾就职于Google Creative Labs和Meteor Development Group。由于工作中大量接触开源的JavaScript项目，最后自己也走上了开源之路，现全职开发和维护Vue.js；</p></li><li><p>尤雨溪毕业于上海复旦附中，在美国完成大学学业，本科毕业于Colgate University，后在Parsons设计学院获得Design &amp; Technology艺术硕士学位，任职于纽约Google Creative Lab；</p></li><li><p>尤雨溪大学专业并非是计算机专业，在大学期间他学习专业是室内艺术和艺术史，后来读了美术设计和技术的硕士，正是在读硕士期间，他偶然接触到了JavaScript，从此被这门编程语言深深吸引，开启了自己的前端生涯；</p></li></ul><h3 id="4-1-2-Vue3快速体验-非工程化方式">4.1.2 Vue3快速体验(非工程化方式)</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue3初体验（非工程化方式）<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//1.初始化</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">setup</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> message = <span class="string">&quot;Hello Vue3&quot;</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    message</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.挂载</span></span></span><br><span class="line"><span class="language-javascript">        app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更完整的例子：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;Vue3完整流程&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;!-- 第一步：准备HTML模板 --&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h1&gt;&#123;&#123; title &#125;&#125;&lt;/h1&gt;</span><br><span class="line">        &lt;p&gt;计数器: &#123;&#123; count &#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button @click=&quot;increment&quot;&gt;点击+1&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 第二步：引入Vue --&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/vue@3/dist/vue.global.js&quot;&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        // 第三步：创建Vue应用</span><br><span class="line">        const app = Vue.createApp(&#123;</span><br><span class="line">            setup() &#123;</span><br><span class="line">                // 数据</span><br><span class="line">                let count = 0</span><br><span class="line">                let title = &quot;我的Vue应用&quot;</span><br><span class="line">                </span><br><span class="line">                // 方法</span><br><span class="line">                function increment() &#123;</span><br><span class="line">                    count++</span><br><span class="line">                &#125;</span><br><span class="line">                </span><br><span class="line">                // 返回给模板使用</span><br><span class="line">                return &#123;</span><br><span class="line">                    count,</span><br><span class="line">                    title,</span><br><span class="line">                    increment</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line"></span><br><span class="line">        // 第四步：挂载到DOM</span><br><span class="line">        app.mount(&quot;#app&quot;)</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="4-2-Vue3通过Vite实现工程化">4.2 Vue3通过Vite实现工程化</h2><h3 id="4-2-1-Vite的介绍">4.2.1 Vite的介绍</h3><img src="images/09.png"/><blockquote><p>在浏览器支持 ES 模块之前，JavaScript 并没有提供原生机制让开发者以模块化的方式进行开发。这也正是我们对 “打包” 这个概念熟悉的原因：使用工具抓取、处理并将我们的源码模块串联成可以在浏览器中运行的文件。时过境迁，我们见证了诸如 <a href="https://webpack.js.org/" title="webpack">webpack</a>、<a href="https://rollupjs.org/" title="Rollup">Rollup</a> 和 <a href="https://parceljs.org/" title="Parcel">Parcel</a> 等工具的变迁，它们极大地改善了前端开发者的开发体验。</p></blockquote><ul><li>当我们开始构建越来越大型的应用时，需要处理的 JavaScript 代码量也呈指数级增长；</li><li>包含数千个模块的大型项目相当普遍。基于 JavaScript 开发的工具就会开始遇到性能瓶颈：通常需要很长时间（甚至是几分钟！）才能启动开发服务器，即使使用模块热替换（HMR），文件修改后的效果也需要几秒钟才能在浏览器中反映出来。如此循环往复，迟钝的反馈会极大地影响开发者的开发效率和幸福感；</li></ul><blockquote><p>Vite 旨在利用生态系统中的新进展解决上述问题：浏览器开始原生支持 ES 模块，且越来越多 JavaScript 工具使用编译型语言编写。<a href="https://cn.vitejs.dev/guide/why.html%E3%80%82%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96%E7%9A%84%E4%BD%9C%E7%94%A8%E5%8C%85%E6%8B%AC%E4%BD%86%E4%B8%8D%E9%99%90%E4%BA%8E%E4%BB%A5%E4%B8%8B%E5%87%A0%E4%B8%AA%E6%96%B9%E9%9D%A2%EF%BC%9A">https://cn.vitejs.dev/guide/why.html。前端工程化的作用包括但不限于以下几个方面：</a></p></blockquote><ol><li>快速创建项目：使用脚手架可以快速搭建项目基本框架，避免从零开始搭建项目的重复劳动和繁琐操作，从而节省时间和精力；</li><li>统一的工程化规范：前端脚手架可以预设项目目录结构、代码规范、git提交规范等统一的工程化规范，让不同开发者在同一个项目上编写出风格一致的代码，提高协作效率和质量；</li><li>代码模板和组件库：前端脚手架可以包含一些常用的代码模板和组件库，使开发者在实现常见功能时不再重复造轮子，避免因为轮子质量不高带来的麻烦，能够更加专注于项目的业务逻辑；</li><li>自动化构建和部署：前端脚手架可以自动进行代码打包、压缩、合并、编译等常见的构建工作，可以通过集成自动化部署脚本，自动将代码部署到测试、生产环境等；</li></ol><h3 id="4-2-2-Vite创建Vue3工程化项目">4.2.2 Vite创建Vue3工程化项目</h3><h4 id="1、Vite-Vue3项目的创建、启动、停止">1、Vite+Vue3项目的创建、启动、停止</h4><blockquote><p>1 使用命令行创建工程。</p></blockquote><ul><li>在磁盘的合适位置上，创建一个空目录用于存储多个前端项目；</li><li>用vscode打开该目录；</li><li>在vscode中打开命令行运行如下命令；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br></pre></td></tr></table></figure><ul><li>第一次使用Vite时会提示下载vite，输入y回车即可，下次使用Vite就不会出现了；</li></ul><img src="images/10.png" alt="1687769339457" style="zoom: 80%;" /><ul><li>注意： 输入项目名称vue3-demo，选择Vue+JavaScript选项即可；</li></ul><blockquote><p>2 安装项目所需依赖：</p></blockquote><ul><li>cd进入刚刚创建的项目目录；</li><li>npm install命令安装基础依赖；</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ./vue3-demo</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><blockquote><p>3 启动项目：</p></blockquote><ul><li>查看项目下的package.json</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3-demo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;module&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;bootstrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sass&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.62.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.2.47&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@vitejs/plugin-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;vite&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.2&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><img src="images/11.png" style="zoom: 33%;" /><blockquote><p>5 停止项目：</p></blockquote><ul><li>命令行上 ctrl+c</li></ul><h4 id="2、Vite-Vue3项目的目录结构">2、Vite+Vue3项目的目录结构</h4><blockquote><p>1.下面是 Vite 项目结构和入口的详细说明：</p></blockquote><img src="images/12.png" alt="1684489112904" style="zoom:67%;" /><ul><li>public/ 目录：用于存放一些公共资源，如 HTML 文件、图像、字体等，这些资源会被直接复制到构建出的目标目录中。</li><li>src/ 目录：存放项目的源代码，包括 JavaScript、CSS、Vue 组件、图像和字体等资源。在开发过程中，这些文件会被 Vite 实时编译和处理，并在浏览器中进行实时预览和调试。以下是src内部划分建议：<ol><li><code>assets/</code> 目录：用于存放一些项目中用到的静态资源，如图片、字体、样式文件等。</li><li><code>components/</code> 目录：用于存放组件相关的文件。组件是代码复用的一种方式，用于抽象出一个可复用的 UI 部件，方便在不同的场景中进行重复使用。</li><li><code>layouts/</code> 目录：用于存放布局组件的文件。布局组件通常负责整个应用程序的整体布局，如头部、底部、导航菜单等。</li><li><code>pages/</code> 目录：用于存放页面级别的组件文件，通常是路由对应的组件文件。在这个目录下，可以创建对应的文件夹，用于存储不同的页面组件。</li><li><code>plugins/</code> 目录：用于存放 Vite 插件相关的文件，可以按需加载不同的插件来实现不同的功能，如自动化测试、代码压缩等。</li><li><code>router/</code> 目录：用于存放 Vue.js 的路由配置文件，负责管理视图和 URL 之间的映射关系，方便实现页面之间的跳转和数据传递。</li><li><code>store/</code> 目录：用于存放 Vuex 状态管理相关的文件，负责管理应用程序中的数据和状态，方便统一管理和共享数据，提高开发效率。</li><li><code>utils/</code> 目录：用于存放一些通用的工具函数，如日期处理函数、字符串操作函数等。</li></ol></li><li>vite.config.js 文件：Vite 的配置文件，可以通过该文件配置项目的参数、插件、打包优化等。该文件可以使用 CommonJS 或 ES6 模块的语法进行配置。</li><li>package.json 文件：标准的 Node.js 项目配置文件，包含了项目的基本信息和依赖关系。其中可以通过 scripts 字段定义几个命令，如 dev、build、serve 等，用于启动开发、构建和启动本地服务器等操作。</li><li>Vite 项目的入口为 src/main.js 文件，这是 Vue.js 应用程序的启动文件，也是整个前端应用程序的入口文件。在该文件中，通常会引入 Vue.js 及其相关插件和组件，同时会创建 Vue 实例，挂载到 HTML 页面上指定的 DOM 元素中。</li></ul><blockquote><p>2.vite的运行界面：</p></blockquote><ul><li>在安装了 Vite 的项目中，可以在 npm scripts 中使用 <code>vite</code> 可执行文件，或者直接使用 <code>npx vite</code> 运行它。下面是通过脚手架创建的 Vite 项目中默认的 npm scripts：(package.json)。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite&quot;</span><span class="punctuation">,</span> <span class="comment">// 启动开发服务器，别名：`vite dev`，`vite serve`</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite build&quot;</span><span class="punctuation">,</span> <span class="comment">// 为生产环境构建产物</span></span><br><span class="line">    <span class="attr">&quot;preview&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vite preview&quot;</span> <span class="comment">// 本地预览生产构建产物</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>运行设置端口号：(vite.config.js)。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//修改vite项目配置文件 vite.config.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>:&#123;</span><br><span class="line">    <span class="attr">port</span>:<span class="number">3000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="3、Vite-Vue3项目组件-SFC入门">3、Vite+Vue3项目组件(SFC入门)</h4><blockquote><p>什么是VUE的组件?</p></blockquote><ul><li>一个页面作为整体，是由多个部分组成的，每个部分在这里就可以理解为一个组件；</li><li>每个.vue文件就可以理解为一个组件，多个.vue文件可以构成一个整体页面；</li><li>组件化给我们带来的另一个好处就是组件的复用和维护非常的方便；</li></ul><img src="images/13.png"  /><blockquote><p>什么是.vue文件?</p></blockquote><ul><li><p>传统的页面有html文件css文件和js文件三个文件组成(多文件组件) ；</p></li><li><p>vue将这文件合并成一个vue文件(Single-File Component，简称 SFC，单文件组件)； 整个项目叫SPA（single page application）</p></li><li><p>vue文件对js/css/html统一封装，这是VUE中的概念，该文件由三个部分组成    <code>&lt;script&gt; &lt;template&gt; &lt;style&gt;</code>；我们主要写的是<code>&lt;script&gt;</code>  html部分Elementplus可以解决如果不会问ai嘛</p><ul><li>template标签     代表组件的html部分代码，代替传统的html文件；</li><li>script标签           代表组件的js代码，代替传统的js文件；</li><li>style标签            代表组件的css样式代码，代替传统的css文件；</li></ul></li></ul><blockquote><p>工程化vue项目如何组织这些组件?</p></blockquote><ul><li>index.html是项目的入口，其中 <code>&lt;div id ='app'&gt;&lt;/div&gt;</code>是用于挂载所有组建的元素；</li><li>index.html中的script标签引入了一个main.js文件，具体的挂载过程在main.js中执行；</li><li>main.js是vue工程中非常重要的文件，他决定这项目使用哪些依赖，导入的第一个组件；（控制布局）</li><li>App.vue是vue中的核心组件，所有的其他组件都要通过该组件进行导入，该组件通过路由可以控制页面的切换；</li></ul><img src="images/14.png" alt="1684912274904" style="zoom: 50%;" /><h4 id="4、Vite-Vue3响应式入门和setup函数">4、Vite+Vue3响应式入门和setup函数</h4><blockquote><p>1 删除App.vue中自带的内容</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 页面的样式的是html代码  至少需要一个元素不然会报错--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    /** 存储的是css代码! <span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span> 是 Vue.js 单文件组件中用于设置组件样式的一种方式。</span></span><br><span class="line"><span class="language-xml">    它的含义是将样式局限在当前组件中，不对全局样式造成影响。 */</span></span><br><span class="line"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>2 Vue3响应式数据入门：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//存储vue页面逻辑js代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">setup</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//非响应式数据: 修改后VUE不会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//响应式数据:   修改后VUE会更新DOM</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE2中数据默认是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//VUE3中数据要经过ref或者reactive处理后才是响应式的</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref是VUE3框架提供的一个函数,需要导入</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//let counter = 1</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref处理的响应式数据在js编码修改的时候需要通过.value操作</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//ref响应式数据在绑定到html上时不需要.value</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> counter = <span class="title function_">ref</span>(<span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">increase</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 通过.value修改响应式数据</span></span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span> <span class="title function_">decrease</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                counter.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                counter,</span></span><br><span class="line"><span class="language-javascript">                increase,</span></span><br><span class="line"><span class="language-javascript">                decrease</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;decrease()&quot;</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increase()&quot;</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">button</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>3 Vue3 setup函数和语法糖：</p></blockquote><ul><li>位置：src/App.vue。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 组合式API编程模板--&gt;</span><br><span class="line">&lt;script type=&quot;module&quot; setup&gt;   </span><br><span class="line">/* 通过setup关键字，可以省略 export default &#123;setup()&#123;   return&#123;&#125;&#125;&#125;这些冗余的语法结构 */</span><br><span class="line">    import &#123;ref&#125; from &#x27;vue&#x27;</span><br><span class="line">    // 定义响应式数据</span><br><span class="line">    let counter = ref(1)</span><br><span class="line">    // 定义函数</span><br><span class="line">    function increase()&#123;</span><br><span class="line">        counter.value++ //如果使用ref()声明响应式变量 js代码注意必须要加.value  指令或者插值表达式不用加</span><br><span class="line">    &#125;</span><br><span class="line">    function decrease()&#123;</span><br><span class="line">        counter.value--</span><br><span class="line">    &#125;  </span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">      &lt;button @click=&quot;decrease()&quot;&gt;-&lt;/button&gt;</span><br><span class="line">      &#123;&#123; counter &#125;&#125;</span><br><span class="line">      &lt;button @click=&quot;increase()&quot;&gt;+&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">    button&#123;</span><br><span class="line">        border: 1px solid red;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">// 导入ref函数 响应式变量</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">//let counter = 1;//不是响应式的</span><br><span class="line">let counter = ref(1);</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;button @click=&quot;counter--&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    ==========&#123;&#123; counter &#125;&#125;==========</span><br><span class="line">    &lt;button @click=&quot;counter++&quot;&gt;+&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">button &#123;</span><br><span class="line">  border: 1px solid red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5、Vite-Vue3关于样式的导入方式">5、Vite+Vue3关于样式的导入方式</h4><ol><li>全局引入main.js；针对所有的vue页面生效<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span> <span class="comment">//书写引入的资源的相对路径即可！</span></span><br></pre></td></tr></table></figure></li><li>vue文件script代码引入；<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span></span><br></pre></td></tr></table></figure></li><li>Vue文件style代码引入；[不推荐]<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;./style/reset.css&#x27;</span>;</span><br></pre></td></tr></table></figure></li></ol><h4 id="6、vscode中创建vue3SFC模版">6、vscode中创建vue3SFC模版</h4><ol><li><p>vscode点击设置</p><p><img src="assets/image-20241021154904344.png" alt="image-20241021154904344"></p></li><li><p>搜索vue.json配置参数</p><p><img src="assets/image-20241021155020009.png" alt="image-20241021155020009"></p></li><li><p>添加vue3 SFC模板代码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;Print to console&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;prefix&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sfc&quot;</span><span class="punctuation">,</span>  <span class="comment">//键入该值，按tab快捷产生</span></span><br><span class="line"><span class="attr">&quot;body&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line"><span class="string">&quot;&lt;script setup&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/script&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  &lt;div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;  &lt;/div&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/template&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;style scoped&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="string">&quot;&lt;/style&gt;&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue3的sfc模板&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>使用vue3模板</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">vue</span> -&gt;</span> sfc + tab即可</span><br></pre></td></tr></table></figure></li></ol><h2 id="4-3-Vue3视图渲染技术">4.3 Vue3视图渲染技术</h2><h3 id="4-3-1-模版语法">4.3.1 模版语法</h3><blockquote><p>Vue 使用一种基于 HTML 的模板语法，使我们能够声明式地将其组件实例的数据绑定到呈现的 DOM 上。所有的 Vue 模板都是语法层面合法的 HTML，可以被符合规范的浏览器和 HTML 解析器解析。在底层机制中，Vue 会将模板编译成高度优化的 JavaScript 代码。结合响应式系统，当应用状态变更时，Vue 能够智能地推导出需要重新渲染的组件的最少数量，并应用最少的 DOM 操作。</p></blockquote><h4 id="1、插值表达式和文本渲染">1、插值表达式和文本渲染</h4><blockquote><p>插值表达式：最基本的数据绑定形式是文本插值，它使用的是“Mustache”语法 ，即双大括号<code>&#123;&#123;&#125;&#125;</code>：</p></blockquote><ul><li>插值表达式是将数据渲染到元素的指定位置的手段之一；</li><li>插值表达式不绝对依赖标签，其位置相对自由；</li><li>插值表达式中支持javascript的运算表达式；</li><li>插值表达式中也支持函数的调用；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> age = <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> message = <span class="string">&quot;测试插值表达式&quot;</span></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">//声明一个函数</span></span></span><br><span class="line"><span class="language-javascript">   <span class="keyword">let</span> <span class="title function_">getAddress</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="string">&quot;宏福苑小区&quot;</span></span></span><br><span class="line"><span class="language-javascript">   &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你成年了吗：&#123;&#123; age&gt;=18?&quot;已成年&quot;:&quot;未成年&quot;&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">h1</span>&gt;</span>你的居住地：&#123;&#123; getAddress() &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> message = <span class="string">&#x27;永远不停止与这个世界对抗!&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="number">15</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">getAddress</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">return</span> <span class="string">&#x27;中国&#x27;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; age &gt;= 18 ? &#x27;成年啦！&#x27; : &quot;未成年&quot; &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span>&gt;</span>&#123;&#123; getAddress() &#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>为了渲染双标中的文本，我们也可以选择使用<code>v-text</code>和<code>v-html</code>命令：</p></blockquote><ul><li>v-*** 这种写法的方式使用的是vue的命令；</li><li>v-***的命令必须依赖元素，并且要写在元素的开始标签中；</li><li>v-***指令支持ES6中的模板字符串；</li><li>插值表达式中支持javascript的运算表达式；</li><li>插值表达式中也支持函数的调用；</li><li>v-text可以将数据渲染成双标签中间的文本，但是不识别html元素结构的文本；</li><li>v-html可以将数据渲染成双标签中间的文本，识别html元素结构的文本；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message = <span class="string">&quot;测试文本渲染&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> msg = <span class="string">&quot;&lt;font color=&#x27;red&#x27;&gt;我要红&lt;/font&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-html</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;color: red;&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 测试v-text和v-html的区别 --&gt;</span>8</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、Attribute属性渲染">2、Attribute属性渲染</h4><blockquote><p>想要渲染一个元素的 attribute，应该使用 <code>v-bind</code>指令。</p></blockquote><ul><li>由于插值表达式不能直接放在标签的属性中，要渲染元素的属性就应该使用v-bind；</li><li>v-bind可以用于渲染任何元素的属性，语法为 <code>v-bind:属性名='数据名'</code>， 可以简写为 <code>:属性名='数据名'</code>；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> data = <span class="string">&quot;测试属性渲染&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> link = <span class="string">&quot;http://www.yutao.com&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 完整写法 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 简写 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>=<span class="string">&quot;data&quot;</span>&gt;</span>我是div标签，我的id属性是通过Vue渲染的<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">&quot;link&quot;</span>&gt;</span>点我有惊喜<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 3.4+新特性 如果 attribute 的名称与绑定的 JavaScript 值的名称相同，那么可以进一步简化语法，省略 attribute 值：--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 与 :id=&quot;id&quot; 相同 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这也同样有效 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:id</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、事件的绑定">3、事件的绑定</h4><blockquote><p>我们可以使用 <code>v-on</code> 来监听 DOM 事件，并在事件触发时执行对应的 Vue的JavaScript代码。</p></blockquote><ul><li>用法：<code>v-on:click=&quot;handler&quot;</code> 或简写为 <code>@click=&quot;handler&quot;</code>；</li><li>vue中的事件名=原生事件名去掉<code>on</code> 前缀   如:<code>onClick --&gt; click</code>；</li><li>handler的值可以是方法事件处理器，也可以是内联事件处理器；</li><li>绑定事件时，可以通过一些绑定的修饰符，常见的事件修饰符如下：<ul><li><code>.once：只触发一次事件。[重点]</code>；</li><li><code>.prevent：阻止默认事件。[重点]，例如：a标签添加阻止默认事件，就不触发href属性对应的地址了</code>；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//add函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">add</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对count加1</span></span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//sub函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">sub</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//对count加1</span></span></span><br><span class="line"><span class="language-javascript">    count.<span class="property">value</span>--</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//changeData函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">changeData</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文本框中的内容发生了变化&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//blurF函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">blurF</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文本框中失去了焦点&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建一个取消默认行为的函数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">stopDef</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//阻止事件（取消默认行为）</span></span></span><br><span class="line"><span class="language-javascript">    event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">&quot;add&quot;</span>&gt;</span>➕<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  &#123;&#123; count &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sub&quot;</span>&gt;</span>➖<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 文本框改变事件 --&gt;</span></span><br><span class="line">  给文本框绑定内容改变的事件：<span class="tag">&lt;<span class="name">input</span> @<span class="attr">change</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  给文本框绑定失去焦点的事件：<span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur</span>=<span class="string">&quot;blurF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 让单击事件只执行一次 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>count只会被加一次<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 阻止事件（取消默认行为） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.u.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;&quot;</span>&gt;</span>官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用原生JS代码阻止事件（取消默认行为） --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www..com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;stopDef($event)&quot;</span>&gt;</span>官网<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;请输入姓名&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeData</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  message.<span class="property">value</span> = data</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">blurInput</span> = (<span class="params">event</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">  message.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    姓名:&#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;changeData($event.target.value)&quot;</span>&gt;</span> <span class="comment">&lt;!-- 输入完得按一下回车 --&gt;</span></span><br><span class="line"></span><br><span class="line">    《输入框失去焦点时触发》</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;message&quot;</span> @<span class="attr">blur</span>=<span class="string">&quot;blurInput&quot;</span>&gt;</span> &#123;&#123; message &#125;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    只能触发一次</span><br><span class="line">    抽奖的场景可以使用</span><br><span class="line"></span><br><span class="line">    阻止链接跳转</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;padding: 20px;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Vue3 事件处理详解<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 1. 文本框改变事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文本框事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的值：&#123;&#123; inputValue &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- @change 事件：内容改变且失去焦点时触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>change事件（失去焦点才触发）：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">change</span>=<span class="string">&quot;handleChange&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;输入后点击别处&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- @blur 事件：失去焦点时触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>blur事件（失去焦点就触发）：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">blur</span>=<span class="string">&quot;handleBlur&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;失去焦点时触发&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- @input 事件：实时输入触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">label</span>&gt;</span>input事件（实时触发）：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">input</span>=<span class="string">&quot;handleInput&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;实时输入触发&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2. 按钮点击事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>按钮事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>计数器：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 普通点击事件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>普通点击（每次+1）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .once 修饰符：只执行一次 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.once</span>=<span class="string">&quot;count++&quot;</span>&gt;</span>只执行一次（只会+1一次）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .stop 修饰符：阻止事件冒泡 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">&quot;parentClick&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background: lightblue; padding: 20px;&quot;</span>&gt;</span></span><br><span class="line">        父级容器（点击我）</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;childClick&quot;</span>&gt;</span>子级按钮（点击我）<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;childClickStop&quot;</span>&gt;</span>阻止冒泡的按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3. 链接事件处理 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>链接事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .prevent 修饰符：阻止默认行为 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click.prevent</span>=<span class="string">&quot;handleLink&quot;</span>&gt;</span>阻止跳转的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 不阻止默认行为 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleLinkWithDefault&quot;</span>&gt;</span>正常跳转的链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 使用原生JS阻止默认行为 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.baidu.com&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;stopDefault($event)&quot;</span>&gt;</span>JS阻止跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4. 键盘事件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;margin: 20px 0; padding: 10px; border: 1px solid #ccc;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span>&gt;</span>键盘事件<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>按下的键：&#123;&#123; pressedKey &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- .enter 修饰符：只在回车键时触发 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">&quot;handleEnter&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按回车键试试&quot;</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment">&lt;!-- 监听所有按键 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup</span>=<span class="string">&quot;handleKeyup&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;按任意键试试&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 响应式数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> inputValue = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> pressedKey = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 文本框事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleChange</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;change事件触发:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  inputValue.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;change事件：内容改变了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleBlur</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;blur事件触发:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;blur事件：失去焦点了！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleInput</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;input事件触发:&#x27;</span>, event.<span class="property">target</span>.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">  inputValue.<span class="property">value</span> = event.<span class="property">target</span>.<span class="property">value</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 按钮事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;计数器:&#x27;</span>, count.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">parentClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;父级被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;父级容器被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">childClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;子级被点击了&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;子级按钮被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">childClickStop</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;阻止冒泡的按钮被点击&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;这个按钮点击不会冒泡到父级&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 链接事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleLink</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接被点击，但被阻止了跳转&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;链接被点击，但不会跳转！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleLinkWithDefault</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;链接被点击，会正常跳转&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;链接被点击，即将跳转！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">stopDefault</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;使用JS阻止默认行为&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  event.<span class="title function_">preventDefault</span>() <span class="comment">// 阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;使用JS阻止了跳转！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 键盘事件处理函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleEnter</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下了回车键&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">alert</span>(<span class="string">&#x27;你按下了回车键！&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">function</span> <span class="title function_">handleKeyup</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">  pressedKey.<span class="property">value</span> = event.<span class="property">key</span></span></span><br><span class="line"><span class="language-javascript">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;按下的键:&#x27;</span>, event.<span class="property">key</span>)</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">input</span>, <span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#42b983</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-tag">button</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">  <span class="attribute">background</span>: <span class="number">#369870</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-2-响应式基础">4.3.2 响应式基础</h3><blockquote><p>此处的响应式是指  ： 数据模型（自定义的变量、对象）发生变化时，自动更新DOM树内容，页面上显示的内容会进行同步变化。vue3的数据模型不是自动响应式的，需要我们做一些特殊的处理。</p></blockquote><h4 id="1、如何实现响应式">1、如何实现响应式</h4><blockquote><p>使用<code>ref</code>或<code>reactive</code>函数就可以将基本类型的数据（如字符串，数字等）和引用类型的数据（如对象）转换为一个响应式对象。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">/*</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  响应式概念：在 Vue.js 中，响应式是一个核心概念，旨在实现数据和视图的自动同步。当你更改数据时，视图会自动更新，而不需要手动操作 DOM。这种机制使得开发者能够更加专注于业务逻辑，而不必关注视图的更新。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  vue版本区别：Vue2中所有的数据默认是响应式、在Vue3中JS中声明的数据默认不是响应式的，需要使用ref或reactive函数包装一下就变成了响应式的，包装之后就变成了ref对象或reactive对象.</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">  ref函数和reactive函数的区别：</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      1.ref函数可以包装基本类型（字符串、数字,对象）和引入类型（数组、对象）；reactive只能包装引用类型</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      2.使用ref包装的数据在JS中修改或获取的时候需要加.value，在DOM中不用添加.value（template可以直接操作）；</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        用reactive包装的数据在JS和DOM中都不需要添加.value</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">      3.使用ref包装的对象，对象和对象的属性都是响应式的；使用reactive包装的对象，对象不是响应式的，对象的属性是响应式的（不能做对象替换）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">*/</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//包装基本类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> count = <span class="title function_">ref</span>(<span class="number">56</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> totalCount = <span class="title function_">reactive</span>(<span class="number">566</span>) <span class="comment">//不推荐 </span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//包装引用类型</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> obj = <span class="title function_">ref</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&quot;蔡徐坤&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>:<span class="number">33</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> obj2 = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">name</span>:<span class="string">&quot;吴亦凡&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">  <span class="attr">age</span>:<span class="number">38</span></span></span><br><span class="line"><span class="language-javascript">&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeCount</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  count.<span class="property">value</span> = <span class="number">58</span>   <span class="comment">//修改值 可以响应式回显数据</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeTotalCount</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  totalCount = <span class="number">588</span>   <span class="comment">//值修改 不能响应式更改数据</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObj</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj.<span class="property">value</span> = &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;李易峰&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">35</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObj2</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj2 = &#123;     <span class="comment">// reactive声明对象引用，可以修改对象属性值 但是不能更改对象本身的地址</span></span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>:<span class="string">&quot;PGOne&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">age</span>:<span class="number">32</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObjAttr</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj.<span class="property">value</span>.<span class="property">name</span> = <span class="string">&quot;蔡大使&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeObj2Attr</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  obj2.<span class="property">name</span> = <span class="string">&quot;吴签&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>班级总人数：&#123;&#123; count &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>全校总人数：&#123;&#123; totalCount &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用ref函数包装的对象：&#123;&#123; obj &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>使用reactive函数包装的对象：&#123;&#123; obj2 &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeCount&quot;</span>&gt;</span>改变ref包装的基本类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeTotalCount&quot;</span>&gt;</span>改变reactive包装的基本类型<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObj&quot;</span>&gt;</span>改变ref包装的对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObj2&quot;</span>&gt;</span>改变reactive包装的对象<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObjAttr&quot;</span>&gt;</span>改变ref包装的对象的属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeObj2Attr&quot;</span>&gt;</span>改变reactive包装的对象的属性值<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、ref与reactive的区别">2、ref与reactive的区别</h4><ol><li>ref函数可以包装基本类型（字符串、数字）和引用类型（数组、对象）；reactive只能包装引用类型</li><li>使用ref包装的数据在JS中修改或获取的时候需要加.value，在DOM（template标签内）中不用添加.value；用reactive包装的数据在JS和DOM中都不需要添加.value</li><li>使用ref包装的对象，对象和对象的属性都是响应式的；使用reactive包装的对象，对象不是响应式的，对象的属性是响应式的</li></ol><h3 id="4-3-2-条件和列表渲染">4.3.2 条件和列表渲染</h3><h4 id="1、条件渲染">1、条件渲染</h4><blockquote><p><code>v-if</code> 条件渲染：</p></blockquote><ul><li><p><code>v-if='表达式' </code>只会在指令的表达式返回真值时才被渲染</p></li><li><p>也可以使用 <code>v-else</code> 为 <code>v-if</code> 添加一个“else 区块”。</p></li><li><p>一个 <code>v-else</code> 元素必须跟在一个 <code>v-if</code> 元素后面，否则它将不会被识别。</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="number">16</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>已成年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>小屁孩儿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-show</code>条件渲染扩展：</p></blockquote><ul><li><p>另一个可以用来按条件显示一个元素的指令是 <code>v-show</code>。其用法基本一样；</p></li><li><p>不同之处在于 <code>v-show</code> 会在 DOM 渲染中保留该元素；<code>v-show</code> 仅切换了该元素上名为 <code>display</code> 的 CSS 属性；</p></li><li><p><code>v-show</code> 不支持在 <code>&lt;template&gt;</code> 元素上使用，也不能和 <code>v-else</code> 搭配使用；</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> age = <span class="number">16</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>已成年<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span>小屁孩儿<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;age &gt;= 18&quot;</span>&gt;</span>成年人<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;age &lt; 18&quot;</span>&gt;</span>儿童<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="images/15.png" alt="1684565503347" style="zoom: 80%;" /><blockquote><p><strong><code>v-if</code></strong>    <strong>vs</strong> <strong><code>v-show</code></strong>：</p></blockquote><ul><li><p><code>v-if</code> 是“真实的”按条件渲染，因为它确保了在切换时，条件区块内的事件监听器和子组件都会被销毁与重建；</p></li><li><p><code>v-if</code> 也是<strong>惰性</strong>的：如果在初次渲染时条件值为 false，则不会做任何事。条件区块只有当条件首次变为 true 时才被渲染；</p></li><li><p>相比之下，<code>v-show</code> 简单许多，元素无论初始条件如何，始终会被渲染，只有 CSS <code>display</code> 属性会被切换；</p></li><li><p>总的来说，<code>v-if</code> 有更高的切换开销，而 <code>v-show</code> 有更高的初始渲染开销。因此，如果需要频繁切换，则使用 <code>v-show</code> 较好；如果在运行时绑定条件很少改变，则 <code>v-if</code> 会更合适；</p></li></ul><h4 id="2、列表渲染">2、列表渲染</h4><blockquote><p>我们可以使用 <code>v-for</code> 指令基于一个数组来渲染一个列表：</p></blockquote><ul><li><p><code>v-for</code> 指令的值需要使用 <code>item in items</code> 形式的特殊语法，其中 <code>items</code> 是源数据的数组，而 <code>item</code> 是迭代项的别名；</p></li><li><p>在 <code>v-for</code> 块中可以完整地访问父作用域内的属性和变量。<code>v-for</code> 也支持使用可选的第二个参数表示当前项的位置索引；</p></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> userArray = []</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> userArray2 = [</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;迪丽热巴&quot;</span>,<span class="attr">age</span>:<span class="number">30</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">2</span>,<span class="attr">name</span>:<span class="string">&quot;古力娜扎&quot;</span>,<span class="attr">age</span>:<span class="number">28</span>&#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">4</span>,<span class="attr">name</span>:<span class="string">&quot;马蓉&quot;</span>,<span class="attr">age</span>:<span class="number">40</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">5</span>,<span class="attr">name</span>:<span class="string">&quot;李小璐&quot;</span>,<span class="attr">age</span>:<span class="number">33</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">  &#123;<span class="attr">id</span>:<span class="number">6</span>,<span class="attr">name</span>:<span class="string">&quot;杨颖&quot;</span>,<span class="attr">age</span>:<span class="number">34</span>&#125;</span></span><br><span class="line"><span class="language-javascript">]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&quot;userArray2.length==0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>没有任何用户<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>用户列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span> <span class="attr">cellpadding</span>=<span class="string">&quot;20&quot;</span> <span class="attr">cellspacing</span>=<span class="string">&quot;0&quot;</span> &gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>序号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>编号<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>操作<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tr</span> <span class="attr">v-for</span>=<span class="string">&quot;(user,index) in userArray2&quot;</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; index &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span> </span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span> <span class="attr">v-text</span>=<span class="string">&quot;user.id&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.name &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span>&#123;&#123; user.age &#125;&#125;<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>编辑<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>删除<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-3-双向绑定">4.3.3 双向绑定</h3><blockquote><p>单项绑定和双向绑定：</p></blockquote><ul><li>单向绑定：响应式数据的变化会更新dom树，但是dom树上用户的操作造成的数据改变<code>不会同步更新到响应式数据</code>；</li><li>双向绑定：响应式数据的变化会更新dom树，但是dom树上用户的操作造成的数据改变<code>会同步更新到响应式数据</code>；<ul><li>用户通过表单标签才能够输入数据，所以双向绑定都是应用到表单标签上的，其他标签不行；</li><li>v-model专门用于双向绑定表单标签的value属性，语法为 <code>v-model:value=''</code>，可以简写为 <code>v-model=''</code>；</li><li>v-model还可以用于各种不同类型的输入，<code>&lt;textarea&gt;</code>、<code>&lt;select&gt;</code> 元素；</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"><span class="comment">//声明数据</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> data = <span class="title function_">ref</span>(<span class="string">&quot;测试双向的数据绑定&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"><span class="comment">//修改JS中的data的函数</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">let</span> <span class="title function_">changeData</span> = (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">  data.<span class="property">value</span> = <span class="string">&quot;新值&quot;</span></span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; data &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 单向数据绑定 --&gt;</span></span><br><span class="line">  测试单向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 双向的数据绑定 --&gt;</span></span><br><span class="line">  测试双向数据绑定：<span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">&quot;data&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeData&quot;</span>&gt;</span>点击修改JS中的数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-4-Vue生命周期">4.3.4 Vue生命周期</h3><h4 id="1、生命周期简介">1、生命周期简介</h4><blockquote><p>每个 Vue 组件实例在创建时都需要经历一系列的初始化步骤，比如设置好数据侦听，编译模板，挂载实例到 DOM，以及在数据改变时更新 DOM。在此过程中，它也会运行被称为<code>生命周期钩子的函数</code>，让开发者有机会在特定阶段运行自己的代码!</p></blockquote><ul><li>周期图解：</li></ul><img src="images/16.png" style="zoom: 50%;" /><ul><li>常见钩子函数：<ul><li>onMounted()              注册一个回调函数，在组件挂载完成后执行；</li><li>onUpdated()               注册一个回调函数，在组件因为响应式状态变更而更新其 DOM 树之后调用；</li><li>onUnmounted()         注册一个回调函数，在组件实例被卸载之后调用；</li><li>onBeforeMount()       注册一个钩子，在组件被挂载之前被调用；</li><li>onBeforeUpdate()      注册一个钩子，在组件即将因为响应式状态变更而更新其 DOM 树之前调用；</li><li>onBeforeUnmount()  注册一个钩子，在组件实例被卸载之前调用；</li></ul></li></ul><h4 id="2、生命周期案例">2、生命周期案例</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,onUpdated,onMounted,onBeforeUpdate&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> message =<span class="title function_">ref</span>(<span class="string">&#x27;hello&#x27;</span>)   </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 挂载完毕生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onMounted---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新前生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onBeforeUpdate</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onBeforeUpdate---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 更新完成生命周期</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onUpdated</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;-----------onUpdated---------&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> span1 =<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;span1&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(span1.<span class="property">innerText</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;span1&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;message&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-5-Vue组件基础">4.3.5 Vue组件基础</h3><blockquote><p>组件允许我们将 UI 划分为独立的、可重用的部分，并且可以对每个部分进行单独的思考。组件就是实现应用中局部功能代码和资源的集合！在实际应用中，组件常常被组织成层层嵌套的树状结构：</p></blockquote><img src="images/17.png" style="zoom:50%;" /><ul><li>这和我们嵌套 HTML 元素的方式类似，Vue 实现了自己的组件模型，使我们可以在每个组件内封装自定义内容与逻辑。</li></ul><blockquote><p>传统方式编写应用：</p></blockquote><img src="images/18.png" style="zoom: 35%;" /><blockquote><p>组件方式编写应用：</p></blockquote><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/posts/images/13.png"  /><ul><li><p>组件化：对js/css/html统一封装，这是Vue中的概念；</p></li><li><p>模块化：对js的统一封装,这是ES6中的概念；</p></li><li><p>组件化中，对js部分代码的处理使用ES6中的模块化；</p></li></ul><h3 id="4-3-6-Vue组件之间传递数据（了解）">4.3.6 Vue组件之间传递数据（了解）</h3><h4 id="1、父传子">1、父传子</h4><blockquote><p>Vue3 中父组件向子组件传值可以通过 props 进行，具体操作如下：</p></blockquote><ol><li><p>需要在子组件定义要接收的数据和参数</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 语法1: 数组方案声明</span></span><br><span class="line">defineProps([<span class="string">&#x27;foo&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语法2: 对象形式声明</span></span><br><span class="line"><span class="regexp">//</span> 使用 &lt;script setup&gt;</span><br><span class="line">defineProps(&#123;</span><br><span class="line">  title: <span class="built_in">String</span>,</span><br><span class="line">  likes: <span class="built_in">Number</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment"># 对于以对象形式声明的每个属性，key 是 prop 的名称，而值则是该 prop 预期类型的构造函数。比如，如果要求一个 prop 的值是 number 类型，则可使用 Number 构造函数作为其声明的值。</span></span><br><span class="line"><span class="comment"># 对象形式声明可以添加参数校验 https://cn.vuejs.org/guide/components/props.html#prop-validation</span></span><br><span class="line"><span class="comment"># 校验选项中的 type 可以是下列这些原生构造函数：</span></span><br><span class="line"><span class="built_in">String</span></span><br><span class="line"><span class="built_in">Number</span></span><br><span class="line"><span class="built_in">Boolean</span></span><br><span class="line"><span class="built_in">Array</span></span><br><span class="line"><span class="built_in">Object</span></span><br><span class="line"><span class="built_in">Date</span></span><br><span class="line"><span class="built_in">Function</span></span><br><span class="line"><span class="built_in">Symbol</span></span><br><span class="line"><span class="built_in">Error</span></span><br><span class="line"></span><br><span class="line">获取数据：</span><br><span class="line">  方案<span class="number">1</span>：defineProps([<span class="string">&#x27;foo&#x27;</span>]) ｜ defineProps(&#123;title: <span class="built_in">String</span>&#125;)  直接使用声明属性名即可 &#123;&#123;foo | title&#125;&#125;</span><br><span class="line">  方案<span class="number">2</span>：let pops = defineProps([<span class="string">&#x27;foo&#x27;</span>])｜let pops =  defineProps(&#123;title: <span class="built_in">String</span>&#125;) 直接使用声明属性名即可 &#123;&#123;pops.foo | pops.title&#125;&#125;</span><br><span class="line">  方案<span class="number">3</span>：let &#123;foo&#125; = defineProps([<span class="string">&#x27;foo&#x27;</span>])｜let &#123;title&#125; =  defineProps(&#123;title: <span class="built_in">String</span>&#125;) 直接使用声明属性名即可 &#123;&#123;foo | title&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>父组件使用子组件时进行赋值即可</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="language-xml">静态传参：</span></span><br><span class="line"><span class="language-xml">声明接收</span></span><br><span class="line"><span class="language-xml">defineProps(</span><span class="template-variable">&#123;</span></span><br><span class="line"><span class="template-variable">  greetingMessage: String</span></span><br><span class="line"><span class="template-variable">&#125;</span><span class="language-xml">)</span></span><br><span class="line"><span class="language-xml">参数传递</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">MyComponent</span> <span class="attr">greeting-message</span>=<span class="string">&quot;hello&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">理论上你也可以在向子组件传递 props 时使用 camelCase 形式，但实际上为了和 HTML attribute 对齐，通常会将其写为 kebab-case 形式！</span></span><br><span class="line"><span class="language-xml">动态参数：</span></span><br><span class="line"><span class="language-xml">  相应地，还有使用 v-bind 或缩写 : 来进行动态绑定的 props</span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 根据一个变量的值动态传入 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="comment">&lt;!-- 根据一个更复杂表达式的值动态传入 --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">BlogPost</span> <span class="attr">:title</span>=<span class="string">&quot;post.title + &#x27; by &#x27; + post.author.name&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure></li></ol><ul><li>父组件代码：App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref,reactive,toRefs&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> message = <span class="title function_">ref</span>(<span class="string">&#x27;parent data!&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> title = <span class="title function_">ref</span>(<span class="number">42</span>)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">changeMessage</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">    message.<span class="property">value</span> = <span class="string">&#x27;修改数据！&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    title.<span class="property">value</span>++</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用子组件，并且传递数据！ --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Son</span> <span class="attr">:message</span>=<span class="string">&quot;message&quot;</span> <span class="attr">:title</span>=<span class="string">&quot;title&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMessage&quot;</span>&gt;</span>点击更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件代码：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,isRef,defineProps&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//声明父组件传递属性值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span> ,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>:<span class="title class_">Number</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、子传父">2、子传父</h4><blockquote><p>Vue3 中子组件向父组件传值可以通过 defineEmits 进行，具体操作如下：</p></blockquote><ol><li><p><strong>在子组件中定义事件</strong>：使用 <code>defineEmits</code> 定义事件。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;ref,defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//1.定义要发送给父组件的方法，可以1或者多个</span></span><br><span class="line"><span class="keyword">let</span> emites = defineEmits([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;sub&#x27;</span>]);</span><br></pre></td></tr></table></figure></li><li><p><strong>触发事件并传递参数</strong>：在子组件适当的事件处理程序中调用 emit 函数以发射事件。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//2.触发父组件对应的方法，调用defineEmites对应的属性</span></span><br><span class="line"><span class="function"><span class="title">emites</span><span class="params">(<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;add data!&#x27;</span>+data.value)</span></span></span><br><span class="line"><span class="function"><span class="title">emites</span><span class="params">(<span class="string">&#x27;sub&#x27;</span>,<span class="string">&#x27;sub data!&#x27;</span>+data.value)</span></span></span><br></pre></td></tr></table></figure></li><li><p><strong>在父组件中监听事件</strong>：使用 <code>v-on</code> 或简写 <code>@</code> 语法在父组件中监听子组件的事件。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 声明@事件名应该等于子模块对应事件名！调用方法可以是当前自定义！--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Son</span> @<span class="attr">add</span>=<span class="string">&quot;padd&quot;</span> @<span class="attr">sub</span>=<span class="string">&quot;psub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>父组件： App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">Son</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Son.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> pdata = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">padd</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;2222&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> =data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//自定义接收，子组件传递数据方法！ 参数为数据！</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">psub</span> = (<span class="params">data</span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;11111&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        pdata.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明@事件名应该等于子模块对应事件名！调用方法可以是当前自定义！--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Son</span> @<span class="attr">add</span>=<span class="string">&quot;padd&quot;</span> @<span class="attr">sub</span>=<span class="string">&quot;psub&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Son</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; pdata &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>子组件：Son.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref,defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//1.定义要发送给父组件的方法，可以1或者多个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> emites = <span class="title function_">defineEmits</span>([<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;sub&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> data = <span class="title function_">ref</span>(<span class="number">1</span>);</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">sendMsgToParent</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//2.触发父组件对应的方法，调用defineEmites对应的属性</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;add&#x27;</span>,<span class="string">&#x27;add data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emites</span>(<span class="string">&#x27;sub&#x27;</span>,<span class="string">&#x27;sub data!&#x27;</span>+data.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        data.<span class="property">value</span> ++;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;sendMsgToParent&quot;</span>&gt;</span>发送消息给父组件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3、兄弟传参">3、兄弟传参</h4><img src="images/19.png" style="zoom: 33%;" /><ul><li>Navigator.vue: 发送数据到App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;defineEmits&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> emits = <span class="title function_">defineEmits</span>([<span class="string">&#x27;sendMenu&#x27;</span>]);</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//触发事件，向父容器发送数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">send</span>(<span class="params">data</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">emits</span>(<span class="string">&#x27;sendMenu&#x27;</span>,data);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 推荐写一个根标签--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;学员管理&#x27;)&quot;</span>&gt;</span>学员管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;图书管理&#x27;)&quot;</span>&gt;</span>图书管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;请假管理&#x27;)&quot;</span>&gt;</span>请假管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;考试管理&#x27;)&quot;</span>&gt;</span>考试管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> @<span class="attr">click</span>=<span class="string">&quot;send(&#x27;讲师管理&#x27;)&quot;</span>&gt;</span>讲师管理<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue: 发送数据到Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Header</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Header.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Navigator</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Navigator.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> <span class="title class_">Content</span>  <span class="keyword">from</span> <span class="string">&#x27;./components/Content.vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//定义接受navigator传递参数</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> navigator_menu = <span class="title function_">ref</span>(<span class="string">&#x27;ceshi&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">const</span> <span class="title function_">receiver</span> = (<span class="params">data</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    navigator_menu.<span class="property">value</span> = data;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      &#123;&#123; navigator_menu &#125;&#125;</span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Header</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Navigator</span> @<span class="attr">sendMenu</span>=<span class="string">&quot;receiver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;navigator&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Navigator</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 向子组件传递数据--&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">Content</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:message</span>=<span class="string">&quot;navigator_menu&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">Content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.header</span>&#123;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">       <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navigator</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">15%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> blue solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.content</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">83%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> goldenrod solid;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Content.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">defineProps</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">message</span>:<span class="title class_">String</span></span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        展示的主要内容！</span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        &#123;&#123; message &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第5章 Vue3官方库</h1><h2 id="5-1-路由机制Router">5.1 路由机制Router</h2><h3 id="5-1-1-路由简介">5.1.1 路由简介</h3><blockquote><p>1 什么是路由？</p></blockquote><ul><li>定义：路由就是根据不同的 URL 地址展示不同的内容或页面；</li><li>通俗理解：路由就像是一个地图，我们要去不同的地方，需要通过不同的路线进行导航；</li></ul><blockquote><p>2 路由的作用：</p></blockquote><ul><li>单页应用程序（SPA）中，路由可以实现不同视图之间的无刷新切换，提升用户体验；</li><li>路由还可以实现页面的认证和权限控制，保护用户的隐私和安全；</li><li>路由还可以利用浏览器的前进与后退，帮助用户更好地回到之前访问过的页面；</li></ul><h3 id="5-1-2-路由入门案例">5.1.2 路由入门案例</h3><blockquote><p>1 案例需求分析：</p></blockquote><img src="images/20.png" style="zoom: 33%;" /><blockquote><p>2 创建项目和导入路由依赖：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite //创建项目cd 项目文件夹 //进入项目文件夹</span><br><span class="line">npm install //安装项目需求依赖</span><br><span class="line">npm install vue-router@4 --save //安装全局的vue-router 4版本， --save表示添加依赖到package.json,默认可省略。--save-dev表示增加开发依赖配置。</span><br></pre></td></tr></table></figure><blockquote><p>3 准备页面和组件    ：</p></blockquote><ul><li>components/Home.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/List.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/Add.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Add页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>components/Update.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Update页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>4 准备路由配置：</p></blockquote><ul><li>src/routers/router.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span> <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Add</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Add.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Update</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Update.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="comment">//createWebHashHistory() 是 Vue.js 基于 hash 模式创建路由的工厂函数。在使用这种模式下，路由信息保存在 URL 的 hash 中，</span></span><br><span class="line">    <span class="comment">//使用 createWebHistory() 方法，可以创建一个路由历史记录对象，用于管理应用程序的路由。在 Vue.js 应用中，</span></span><br><span class="line">    <span class="comment">//通常使用该方法来创建路由的历史记录对象。</span></span><br><span class="line">    <span class="comment">//就是路由中缓存历史记录的对象，vue-router提供</span></span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">                component指定组件在默认的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:Home</span></span><br><span class="line"><span class="comment">                components指定组件在name为某个值的路由视图位置展示</span></span><br><span class="line"><span class="comment">                components:&#123;</span></span><br><span class="line"><span class="comment">                    default:Home,// 默认路由视图位置</span></span><br><span class="line"><span class="comment">                    homeView:Home// name为homeView的路由视图位置</span></span><br><span class="line"><span class="comment">                &#125;   </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">default</span>:<span class="title class_">Home</span>,</span><br><span class="line">                <span class="attr">homeView</span>:<span class="title class_">Home</span></span><br><span class="line">            &#125;      </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                listView : <span class="title class_">List</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/add&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">addView</span>:<span class="title class_">Add</span></span><br><span class="line">            &#125; </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/update&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">updateView</span>:<span class="title class_">Update</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>5 main.js引入Router配置：</p></blockquote><ul><li>修改文件：main.js (入口文件)</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./style.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="comment">//导入router模块</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="comment">//绑定路由对象</span></span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">//挂载视图</span></span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>6 启动测试：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>内容解释： <a href="https://router.vuejs.org/zh/guide/">https://router.vuejs.org/zh/guide/</a></p></blockquote><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. <span class="type">RouterLink</span> 用来渲染一个链接的组件，该链接在被点击时会触发导航<span class="operator">。</span> </span><br><span class="line">    <span class="operator">&lt;</span>router<span class="operator">-</span>link to<span class="operator">=</span><span class="string">&quot;/list&quot;</span><span class="operator">&gt;</span>list页<span class="operator">&lt;/</span>router<span class="operator">-</span>link<span class="operator">&gt;</span> <span class="operator">&lt;</span>br<span class="operator">&gt;</span> to属性指的是触发路径跳转到对应组件</span><br><span class="line"><span class="number">2</span>. <span class="type">RouterView</span> <span class="type">RouterView</span> 组件可以使 <span class="type">Vue</span> <span class="type">Router</span> 知道你想要在哪里渲染当前 <span class="type">URL</span> 路径对应的路由组件<span class="operator">。</span>它不一定要在 <span class="type">App</span>.vue 中，你可以把它放在任何地方！</span><br><span class="line">   可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口<span class="operator">。</span>如果 router<span class="operator">-</span>view 没有设置名字，那么默认为<span class="keyword">default</span></span><br><span class="line">   <span class="operator">&lt;</span>router<span class="operator">-</span>view <span class="keyword">class</span><span class="operator">=</span><span class="string">&quot;view left-sidebar&quot;</span> name<span class="operator">=</span><span class="string">&quot;LeftSidebar&quot;</span> <span class="operator">/&gt;</span></span><br><span class="line"><span class="number">3</span>. createRouter()函数</span><br><span class="line">   路由器实例是通过调用 createRouter() 函数创建的</span><br><span class="line">   const router <span class="operator">=</span> createRouter(&#123;</span><br><span class="line">   history: createMemoryHistory(), <span class="comment">//记录历史记录模式！ </span></span><br><span class="line">   routes:[</span><br><span class="line">   path: <span class="string">&quot;/对应地址&quot;</span>,component: 默认routerView显示组件,</span><br><span class="line">        path: <span class="string">&quot;/对应路径&quot;</span>,components:&#123;命名视图名:显示组件,命名视图名:显示组件&#125;</span><br><span class="line">   ]  <span class="comment">//路由规则</span></span><br><span class="line">  &#125;)</span><br><span class="line"> 路径：动态路径设置，路径传惨</span><br><span class="line"> <span class="regexp">/users/</span>:username              <span class="regexp">/users/</span>eduardo</span><br><span class="line">     <span class="regexp">/users/</span>:username<span class="regexp">/posts/</span>:postId  <span class="regexp">/users/</span>eduardo<span class="regexp">/posts/</span><span class="number">123</span></span><br><span class="line">     &#123;&#123; <span class="variable">$route</span>.params.username &#125;&#125; 获取参数</span><br><span class="line"><span class="number">4</span>. 注册路由器插件</span><br><span class="line">   createApp(<span class="type">App</span>)</span><br><span class="line">   .use(router)</span><br><span class="line">   .mount(&#x27;#app&#x27;)</span><br><span class="line">   注册路由作用：</span><br><span class="line">  全局注册 <span class="type">RouterView</span> 和 <span class="type">RouterLink</span> 组件<span class="operator">。</span></span><br><span class="line">  添加全局 <span class="variable">$router</span> 和 <span class="variable">$route</span> 属性<span class="operator">。</span></span><br><span class="line">  启用 useRouter() 和 useRoute() 组合式函数<span class="operator">。</span></span><br><span class="line">  触发路由器解析初始路由<span class="operator">。</span></span><br></pre></td></tr></table></figure><h3 id="5-1-3-路由重定向">5.1.3 路由重定向</h3><blockquote><p>重定向的作用：将一个路由重定向到另一个路由上。</p></blockquote><ul><li>修改案例：访问/list和/showAll都定向到List.vue.</li><li>router.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">path</span>:<span class="string">&#x27;/showAll&#x27;</span>,</span><br><span class="line">   <span class="comment">// 重定向</span></span><br><span class="line">   redirect :<span class="string">&#x27;/list&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showAll&quot;</span>&gt;</span>showAll页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/add&quot;</span>&gt;</span>add页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/update&quot;</span>&gt;</span>update页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Add视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;addView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Update视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;updateView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-4-编程式路由-useRouter">5.1.4 编程式路由(useRouter)</h3><blockquote><p>声明式路由：</p></blockquote><ul><li><code>&lt;router-link to=&quot;/list&quot;&gt;list页&lt;/router-link&gt;  </code>这种路由，点击后只能切换/list对应组件，是固定的。</li></ul><blockquote><p>编程式路由：</p></blockquote><ul><li><p>通过useRouter，动态决定向那个组件切换的路由；</p></li><li><p>在 Vue 3 和 Vue Router 4 中，你可以使用 <code>useRouter</code> 来实现动态路由(编程式路由)；</p></li><li><p>这里的 <code>useRouter</code> 方法返回的是一个 router 对象，你可以用它来做如导航到新页面、返回上一页面等操作；</p><table><thead><tr><th style="text-align:left">声明式</th><th style="text-align:left">编程式</th></tr></thead><tbody><tr><td style="text-align:left"><code>&lt;router-link :to=&quot;...&quot;&gt;</code></td><td style="text-align:left"><code>router.push(...)</code></td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串路径</span></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">&#x27;/users/eduardo&#x27;</span>)</span><br><span class="line"><span class="comment">// 带有路径的对象</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/users/eduardo&#x27;</span> &#125;)</span><br><span class="line"><span class="comment">// 带查询参数，结果是 /register?plan=private</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/register&#x27;</span>, <span class="attr">query</span>: &#123; <span class="attr">plan</span>: <span class="string">&#x27;private&#x27;</span> &#125; </span><br><span class="line"></span><br><span class="line">router.<span class="title function_">push</span>(<span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span>) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// 同样</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">`/user/<span class="subst">$&#123;username&#125;</span>`</span> &#125;) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// 如果可能的话，使用 `name` 和 `params` 从自动 URL 编码中获益</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">// -&gt; /user/eduardo</span></span><br><span class="line"><span class="comment">// `params` 不能与 `path` 一起使用</span></span><br><span class="line">router.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/user&#x27;</span>, <span class="attr">params</span>: &#123; username &#125; &#125;) <span class="comment">// -&gt; /user</span></span><br></pre></td></tr></table></figure></li></ul><blockquote><p>案例需求：通过普通按钮配合事件绑定实现路由页面跳转，不直接使用router-link标签。</p></blockquote><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span>  <span class="title function_">showList</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 编程式路由</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 直接push一个路径</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// router.push(&#x27;/list&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// push一个带有path属性的对象</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 路由的连接 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/&quot;</span>&gt;</span>home页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>list页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span> </span><br><span class="line">        <span class="comment">&lt;!-- 动态输入路径,点击按钮,触发单击事件的函数,在函数中通过编程是路由切换页面 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showList()&quot;</span>&gt;</span>showList<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路由连接对应视图的展示位置 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> 默认展示位置:<span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> Home视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;homeView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> List视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;listView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-5-路由传参-useRoute">5.1.5 路由传参(useRoute)</h3><blockquote><p>路径参数：</p></blockquote><ul><li>在路径中使用一个动态字段来实现，我们称之为 <strong>路径参数</strong>：<ul><li>例如： 查看数据详情  <code>/showDetail/1</code>  ，<code>1</code>就是要查看详情的id，可以动态添值。</li></ul></li></ul><blockquote><p>键值对参数：</p></blockquote><ul><li><p>类似与get请求通过url传参，数据是键值对形式的：</p><ul><li>例如:  查看数据详情<code>/showDetail?hid=1</code>，<code>hid=1</code>就是要传递的键值对参数。</li></ul></li></ul><blockquote><p>读取参数：</p></blockquote><ul><li>在 Vue 3 和 Vue Router 4 中，你可以使用  <code>useRoute</code> 这个函数从 Vue 的组合式 API 中获取路由对象；</li><li><code>useRoute</code> 方法返回的是当前的 route 对象，你可以用它来获取关于当前路由的信息，如当前的路径、键值对参数等；</li></ul><blockquote><p>案例需求 : 切换到ShowDetail.vue组件时，向该组件通过路由传递参数。</p></blockquote><ul><li>修改App.vue文件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//创建动态路由对象</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">//动态路由路径传参方法</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 尝试使用拼接字符串方式传递路径参数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//router.push(`showDetail/$&#123;id&#125;/$&#123;languange&#125;`)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*路径参数,需要使用params  */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">name</span>:<span class="string">&quot;showDetail&quot;</span>,<span class="attr">params</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">showDetail2</span>= (<span class="params">id,language</span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">/*uri键值对参数,需要使用query */</span></span></span><br><span class="line"><span class="language-javascript">      router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&quot;/showDetail2&quot;</span>,<span class="attr">query</span>:&#123;<span class="attr">id</span>:id,<span class="attr">language</span>:language&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 路径参数   --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/showDetail/1/JAVA&quot;</span>&gt;</span>路径传参JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>编程式路由路径传参显示JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 键值对参数 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">&quot;&#123;path:&#x27;/showDetail2&#x27;,query:&#123;id:1,language:&#x27;Java&#x27;&#125;&#125;&quot;</span>&gt;</span>键值对传参JAVA<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> </span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;showDetail2(1,&#x27;JAVA&#x27;)&quot;</span>&gt;</span>编程式路由键值对传参JAVA<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> showDetail视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span> showDetail2视图展示:<span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">&quot;showDetailView2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>修改router.js增加路径参数占位符</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ShowDetail2</span> <span class="keyword">from</span> <span class="string">&#x27;../components/ShowDetail2.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[    </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">/* 此处:id  :language作为路径的占位符 */</span></span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail/:id/:language&#x27;</span>,</span><br><span class="line">            <span class="comment">/* 动态路由传参时,根据该名字找到该路由 */</span></span><br><span class="line">            <span class="attr">name</span>:<span class="string">&#x27;showDetail&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView</span>:<span class="title class_">ShowDetail</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/showDetail2&#x27;</span>,</span><br><span class="line">            <span class="attr">components</span>:&#123;</span><br><span class="line">                <span class="attr">showDetailView2</span>:<span class="title class_">ShowDetail2</span></span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>ShowDetail.vue 通过useRoute获取路径参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span> (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数</span></span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">params</span>.<span class="property">language</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.params.id&#125;&#125;:&#123;&#123;route.params.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>ShowDetail2.vue通过useRoute获取键值对参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span>&#123;useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; onMounted,ref &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取当前的route对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageId = <span class="title function_">ref</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> languageName = <span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//  借助更新时生命周期,将数据更新进入响应式对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">onMounted</span> (<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 获取对象中的参数(通过query获取参数,此时参数是key-value形式的)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(route.<span class="property">query</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageId.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(languageName.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        languageId.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">id</span></span></span><br><span class="line"><span class="language-javascript">        languageName.<span class="property">value</span>=route.<span class="property">query</span>.<span class="property">language</span>       </span></span><br><span class="line"><span class="language-javascript">    &#125;)    </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>ShowDetail2页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;route.query.id&#125;&#125;:&#123;&#123;route.query.language&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>编号&#123;&#123;languageId&#125;&#125;:&#123;&#123;languageName&#125;&#125;是世界上最好的语言<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-1-6-路由守卫">5.1.6 路由守卫</h3><blockquote><p>在 Vue 3 中，路由守卫是用于在路由切换期间进行一些特定任务的回调函数。路由守卫可以用于许多任务，例如验证用户是否已登录、在路由切换前提供确认提示、请求数据等。Vue 3 为路由守卫提供了全面的支持，并提供了以下几种类型的路由守卫：</p></blockquote><ol><li><strong>全局前置守卫</strong>：在路由切换前被调用，可以用于验证用户是否已登录、中断导航、请求数据等；</li><li><strong>全局后置守卫</strong>：在路由切换之后被调用，可以用于处理数据、操作 DOM 、记录日志等；</li><li><strong>守卫代码的位置</strong>: 在router.js中</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//全局前置路由守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>( <span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//to 是目标地包装对象  .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//from 是来源地包装对象 .path属性可以获取地址</span></span><br><span class="line">    <span class="comment">//next是方法,不调用默认拦截！ next() 放行,直接到达目标组件</span></span><br><span class="line">    <span class="comment">//next(&#x27;/地址&#x27;)可以转发到其他地址,到达目标组件前会再次经过前置路由守卫</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(to.<span class="property">path</span>,<span class="keyword">from</span>.<span class="property">path</span>,next)</span><br><span class="line">    <span class="comment">//需要判断，注意避免无限重定向</span></span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/index&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="string">&#x27;/index&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125; )</span><br><span class="line"><span class="comment">//全局后置路由守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Navigate from <span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span> to <span class="subst">$&#123;to.path&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>登录案例，登录以后才可以进入home，否则必须进入login。</p></blockquote><ul><li>定义Login.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123;useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> username =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> password =<span class="title function_">ref</span>(<span class="string">&#x27;&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> router = <span class="title function_">useRouter</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">login</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(username.<span class="property">value</span>,password.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(username.<span class="property">value</span> == <span class="string">&#x27;root&#x27;</span> &amp; password.<span class="property">value</span> == <span class="string">&#x27;123456&#x27;</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            router.<span class="title function_">push</span>(&#123;<span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,<span class="attr">query</span>:&#123;<span class="string">&#x27;username&#x27;</span>:username.<span class="property">value</span>&#125;&#125;)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//登录成功利用前端存储机制，存储账号！</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&#x27;username&#x27;</span>,username.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//sessionStorage.setItem(&#x27;username&#x27;,username)</span></span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">alert</span>(<span class="string">&#x27;登录失败，账号或者密码错误！&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span>   </span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        账号： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入账号！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        密码： <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码！&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;login()&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义Home.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;ref&#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">import</span> &#123;useRoute,useRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> route =<span class="title function_">useRoute</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> router = <span class="title function_">useRouter</span>()</span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//  并不是每次进入home页时,都有用户名参数传入</span></span></span><br><span class="line"><span class="language-javascript"> <span class="comment">//let username = route.query.username</span></span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span></span><br><span class="line"><span class="language-javascript"> <span class="keyword">let</span> <span class="title function_">logout</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 清除localStorge中的username</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//window.sessionStorage.removeItem(&#x27;username&#x27;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&#x27;username&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 动态路由到登录页</span></span></span><br><span class="line"><span class="language-javascript">    router.<span class="title function_">push</span>(<span class="string">&quot;/login&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"> &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Home页面<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span>&gt;</span>欢迎&#123;&#123;username&#125;&#125;登录<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;logout&quot;</span>&gt;</span>退出登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>     </span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>定义routers.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Home</span> <span class="keyword">from</span> <span class="string">&#x27;../components/Home.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Login</span> <span class="keyword">from</span> <span class="string">&#x27;../components/login.vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Home</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">            <span class="attr">redirect</span>:<span class="string">&quot;/home&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Login</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置路由的全局前置守卫</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span>,next</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">    to 要去那</span></span><br><span class="line"><span class="comment">    from 从哪里来</span></span><br><span class="line"><span class="comment">    next 放行路由时需要调用的方法,不调用则不放行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span>(to.<span class="property">path</span> == <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        <span class="comment">//放行路由  注意放行不要形成循环  </span></span><br><span class="line">        <span class="title function_">next</span>()</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//let username =window.sessionStorage.getItem(&#x27;username&#x27;); </span></span><br><span class="line">        <span class="keyword">let</span> username =<span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>); </span><br><span class="line">        <span class="keyword">if</span>(<span class="literal">null</span> != username)&#123;</span><br><span class="line">            <span class="title function_">next</span>()</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="title function_">next</span>(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 设置路由的全局后置守卫</span></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to,<span class="keyword">from</span></span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`从哪里来:<span class="subst">$&#123;<span class="keyword">from</span>.path&#125;</span>,到哪里去:<span class="subst">$&#123;to.path&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><ul><li>启动测试</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><h2 id="5-2-状态管理Pinia">5.2 状态管理Pinia</h2><h3 id="5-2-1-Pinia介绍">5.2.1 Pinia介绍</h3><blockquote><p>如何实现多个组件之间的数据传递?</p></blockquote><ul><li><p>方式1 组件传参 ；</p></li><li><p>方式2 路由传参 ；</p></li><li><p>方式3 通过pinia状态管理定义共享数据；</p></li></ul><blockquote><p>当我们有<code>多个组件共享一个共同的状态(数据源)</code>时，多个视图可能都依赖于同一份状态。来自不同视图的交互也可能需要更改同一份状态。虽然我们的手动状态管理解决方案（props，组件间通信，模块化）在简单的场景中已经足够了，但是在大规模的生产应用中还有很多其他事项需要考虑：</p></blockquote><ul><li>更强的团队协作约定；</li><li>与 Vue DevTools 集成，包括时间轴、组件内部审查和时间旅行调试；</li><li>模块热更新 (HMR)；</li><li>服务端渲染支持；</li></ul><blockquote><p><a href="https://pinia.vuejs.org/zh/" title="Pinia">Pinia</a> 就是一个实现了上述需求的状态管理库，由 Vue 核心团队维护，对 Vue 2 和 Vue 3 都可用。</p><p>官网：<a href="https://pinia.vuejs.org/zh">https://pinia.vuejs.org/zh</a></p></blockquote><h3 id="5-2-2-Pinia基本用法">5.2.2 Pinia基本用法</h3><blockquote><p>1 准备Vite项目：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br><span class="line">npm install vue-router@<span class="number">4</span> --save</span><br></pre></td></tr></table></figure><blockquote><p>2 安装Pinia：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pinia</span><br></pre></td></tr></table></figure><blockquote><p>3 定义pinia store对象 src/store/store.js （推荐这么命名不是强制）：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">//定义数据并且对外暴露</span></span><br><span class="line"><span class="comment">// store就是定义共享状态的包装对象</span></span><br><span class="line"><span class="comment">// 内部包含四个属性： id 唯一标识 state 完整类型推理，推荐使用箭头函数 存放的数据 getters 类似属性计算，获取存储数据</span></span><br><span class="line"><span class="comment">// 操作的方法  actions 存储数据的复杂业务逻辑方法</span></span><br><span class="line"><span class="comment">// 理解： store类似Java中的实体类， id就是类名， state 就是装数据值的属性  getters就是get方法，actions就是对数据操作的其他方法</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> definedPerson = <span class="title function_">defineStore</span>(<span class="string">&#x27;personPinia&#x27;</span>,<span class="comment">//必须唯一</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">state</span>:<span class="function">()=&gt;</span>&#123; <span class="comment">// state中用于定义数据</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">username</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">                <span class="attr">age</span>:<span class="number">0</span>,</span><br><span class="line">                <span class="attr">hobbies</span>:[<span class="string">&#x27;唱歌&#x27;</span>,<span class="string">&#x27;跳舞&#x27;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">getters</span>:&#123;<span class="comment">// 用于定义一些通过数据计算而得到结果的一些方法 一般在此处不做对数据的修改操作</span></span><br><span class="line">                 <span class="comment">// getters中的方法可以当做属性值方式使用</span></span><br><span class="line">            <span class="title function_">getHobbiesCount</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">hobbies</span>.<span class="property">length</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="title function_">getAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">age</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">actions</span>:&#123; <span class="comment">// 用于定义一些对数据修改的方法</span></span><br><span class="line">            <span class="title function_">doubleAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">age</span>=<span class="variable language_">this</span>.<span class="property">age</span>*<span class="number">2</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><blockquote><p>4 在main.js配置Pinia组件到Vue中 ：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./routers/router.js&#x27;</span></span><br><span class="line"><span class="comment">// 导pinia</span></span><br><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="comment">// 创建pinia对象</span></span><br><span class="line"><span class="keyword">let</span> pinia= <span class="title function_">createPinia</span>()</span><br><span class="line"><span class="keyword">let</span> app =<span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line">app.<span class="title function_">use</span>(router)</span><br><span class="line"><span class="comment">// app中使用pinia功能</span></span><br><span class="line">app.<span class="title function_">use</span>(pinia) </span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>5 Operate.vue 中操作Pinia数据：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//import  definedPerson  from &#x27;../store/store&#x27;;//如果采用默认导出，请使用该行导入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>operate视图,用户操作Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        请输入姓名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.username&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请输入年龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;person.age&quot;</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        请增加爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;吃饭&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 吃饭</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;睡觉&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 睡觉</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;打豆豆&quot;</span>  <span class="attr">v-model</span>=<span class="string">&quot;person.hobbies&quot;</span>&gt;</span> 打豆豆 <span class="tag">&lt;<span class="name">br</span>&gt;</span>        </span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用person的doubleAge()方法 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.doubleAge()&quot;</span>&gt;</span>年龄加倍<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用pinia提供的$reset()方法恢复数据的默认值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$reset()&quot;</span>&gt;</span>恢复默认值<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事件中调用$patch方法一次性修改多个属性值 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;person.$patch(&#123;username:&#x27;奥特曼&#x27;,age:100,hobbies:[&#x27;晒太阳&#x27;,&#x27;打怪兽&#x27;]&#125;)&quot;</span>&gt;</span>变身奥特曼<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">显示pinia中的person数据:&#123;&#123;person&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>6 List.vue中展示Pinia数据：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> &#123; definedPerson &#125; <span class="keyword">from</span> <span class="string">&#x27;../store/store&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//import  definedPerson  from &#x27;../store/store&#x27;;//如果采用默认导出，请使用该行导入</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 读取存储的数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> person= <span class="title function_">definedPerson</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>List页面,展示Pinia中的数据<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        读取姓名:&#123;&#123;person.username&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        读取年龄:&#123;&#123;person.age&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        通过get年龄:&#123;&#123;person.getAge&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        爱好数量:&#123;&#123;person.getHobbiesCount&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        所有的爱好:</span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&#x27;(hobby,index) in person.hobbies&#x27;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-text</span>=<span class="string">&quot;hobby&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>7 定义组件路由router.js：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 导入路由创建的相关方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;createRouter,createWebHashHistory&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="comment">// 导入vue组件</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">List</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/List.vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Operate</span>  <span class="keyword">from</span> <span class="string">&#x27;../components/Operate.vue&#x27;</span></span><br><span class="line"><span class="comment">// 创建路由对象,声明路由规则</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="title function_">createRouter</span>(&#123;</span><br><span class="line">    <span class="attr">history</span>: <span class="title function_">createWebHashHistory</span>(),</span><br><span class="line">    <span class="attr">routes</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/operate&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">Operate</span></span><br><span class="line">        &#125;,</span><br><span class="line">        </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">path</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">            <span class="attr">component</span>:<span class="title class_">List</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 对外暴露路由对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router;</span><br></pre></td></tr></table></figure><blockquote><p>8 App.vue中通过路由切换组件：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/operate&quot;</span>&gt;</span>显示操作页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/list&quot;</span>&gt;</span>显示展示页<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span> <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>9 启动测试：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src=".%5Cassets%5C1740920109115.png" alt="1740920109115"></p><p><img src=".%5Cassets%5C1740920162887.png" alt="1740920162887"></p><h1>第6章 Axios</h1><h2 id="6-1-预讲知识-Promise">6.1 预讲知识-Promise</h2><h3 id="6-1-1-普通函数和回调函数">6.1.1 普通函数和回调函数</h3><blockquote><p>普通函数：正常调用的函数，一般函数执行完毕后才会继续执行下一行代码。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> <span class="title function_">fun1</span> = (<span class="params"></span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fun1 invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 调用函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 函数执行完毕,继续执行后续代码</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>回调函数： 一些特殊的函数，表示未来才会执行的一些功能，后续代码不会等待该函数执行完毕就开始执行了。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置一个2000毫秒后会执行一次的定时任务</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout invoked&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,<span class="number">2000</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;other code processon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-2-Promise-简介">6.1.2 Promise 简介</h3><blockquote><p>前端中的异步编程技术，类似Java中的多线程+线程结果回调！</p></blockquote><ul><li><p>Promise 是异步编程的一种解决方案，比传统的解决方案回调函数和事件更合理和更强大。它由社区最早提出和实现，ES6将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象；</p></li><li><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，Promise 是一个对象，从它可以获取异步操作的消息。Promise 提供统一的 API，各种异步操作都可以用同样的方法进行处理；</p></li></ul><blockquote><p><code>Promise</code>对象有以下两个特点：</p></blockquote><ol><li><p>Promise对象代表一个异步操作，有三种状态：<code>Pending</code>（进行中）、<code>Resolved</code>（已完成，又称 Fulfilled）和<code>Rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变；</p></li><li><p>一旦状态改变，就不会再变，任何时候都可以得到这个结果。Promise对象的状态改变，只有两种可能：从<code>Pending</code>变为<code>Resolved</code>和从<code>Pending</code>变为<code>Rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果；</p></li></ol><h3 id="6-1-3-Promise-基本用法">6.1.3 Promise 基本用法</h3><blockquote><p>ES6规定，Promise对象是一个构造函数，用来生成Promise实例。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">   <span class="comment">/*  </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    1.实例化promise对象,并且执行(类似Java创建线程对象,并且start)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject随意命名,但是一般这么叫!</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: resolve,reject分别处理成功和失败的两个函数! 成功resolve(结果)  失败reject(结果)</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在function中调用这里两个方法,那么promise会处于两个不同的状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    状态: promise有三个状态</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            pending   正在运行</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            resolved  内部调用了resolve方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">            rejected  内部调用了reject方法</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    参数: 在第二步回调函数中就可以获取对应的结果 </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">    */</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>) 100s</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//resolve(&quot;promise success&quot;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">reject</span>(<span class="string">&quot;promise fail&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//2.获取回调函数结果  then在这里会等待promise中的运行结果,但是不会阻塞代码继续运行</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">value</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;value&#125;</span>`</span>)&#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了reject:<span class="subst">$&#123;error&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3 其他代码执行   </span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-1-4-Promise-catch">6.1.4 Promise catch()</h3><blockquote><p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>的别名，用于指定发生错误时的回调函数。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> promise =<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve,reject</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise do some code ... ...&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 故意响应一个异常对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error message&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code1111 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject()的对应方法可以在产生异常时执行,接收到的就是异常中的提示信息</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中可以只留一个resolve()的对应方法,reject()方法可以用后续的catch替换</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        then中的reject对应的回调函数被后续的catch替换后,catch中接收的数据是一个异常对象</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">        */</span></span></span><br><span class="line"><span class="language-javascript">    promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">resolveValue</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`promise中执行了resolve:<span class="subst">$&#123;resolveValue&#125;</span>`</span>)&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//function(rejectValue)&#123;console.log(`promise中执行了reject:$&#123;rejectValue&#125;`)&#125;</span></span></span><br><span class="line"><span class="language-javascript">    ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span>(<span class="params">error</span>)&#123;<span class="variable language_">console</span>.<span class="title function_">log</span>(error)&#125; </span></span><br><span class="line"><span class="language-javascript">    )</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;other code2222 invoked&#x27;</span>)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>综合代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script setup &gt;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++111&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> promis = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一个异步 API 请求</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> userData = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;Alice&#x27;</span>,</span><br><span class="line">                    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="title function_">resolve</span>(userData);</span><br><span class="line">            &#125;, <span class="number">2000</span>); <span class="comment">// 模拟延迟2秒</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve:&quot;</span>+data.<span class="property">name</span>)</span><br><span class="line">    &#125;,<span class="function"><span class="params">failData</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reject:&quot;</span>+failData.<span class="property">name</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++222&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> promis1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// 模拟一个异步 API 请求</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> userData1 = &#123;</span><br><span class="line">                    <span class="attr">id</span>: <span class="number">1</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;heheh&#x27;</span>,</span><br><span class="line">                    <span class="attr">age</span>: <span class="number">30</span>,</span><br><span class="line">                &#125;;</span><br><span class="line">                <span class="comment">//throw new Error(&quot;异常信息&quot;)</span></span><br><span class="line">                <span class="title function_">reject</span>(userData1);</span><br><span class="line">            &#125;, <span class="number">2000</span>); <span class="comment">// 模拟延迟2秒</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">data1</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve:&quot;</span>+data1.<span class="property">name</span>)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">failData1</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="comment">//console.log(&quot;reject:&quot;+failData1.name)</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;reject:&quot;</span>+failData1)</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;+++++++++++++++++333&quot;</span>)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="6-1-5-async和await的使用">6.1.5 async和await的使用</h3><blockquote><p> async和await是ES6中用于处理异步操作的新特性。通常，异步操作会涉及到Promise对象，而async/await则是在Promise基础上提供了更加直观和易于使用的语法。</p></blockquote><blockquote><p>async 用于标识函数的：</p></blockquote><ol><li>async标识函数后，async函数的返回值会变成一个Promise对象；</li><li>如果函数内部返回的数据是一个非Promise对象，async函数的结果会返回一个成功状态 Promise对象；</li><li>如果函数内部返回的是一个Promise对象，则async函数返回的状态与结果由该对象决定；</li><li>如果函数内部抛出的是一个异常，则async函数返回的是一个失败的Promise对象；</li><li>async其实就是给我们提供了一个快捷声明回调函数的语法，有了它无需编写 new Promise(… …) 这样的代码了；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//return 10</span></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">//throw new Error(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> promise = <span class="title class_">Promise</span>.<span class="title function_">reject</span>(<span class="string">&quot;something wrong&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> promise</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> promise =<span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">        promise.<span class="title function_">then</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;success:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        ).<span class="title function_">catch</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">function</span>(<span class="params">value</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fail:&quot;</span>+value)</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        )</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>await：</p></blockquote><ol><li>await右侧的表达式一般为一个Promise对象，但是也可以是一个其他值；</li><li>如果表达式是Promise对象，await返回的是Promise成功的值；</li><li>如果表达式是其他值，则直接返回该值；</li><li>await会等右边的Promise对象执行结束，然后再获取结果，所在方法的后续代码也会等待await的执行；</li><li>await必须在async函数中，但是async函数中可以没有await；</li><li>如果await右边的Promise失败了，就会抛出异常，可以通过 try … catch捕获处理；</li><li>await其实就是给我们提供了一个快捷获得Promise对象成功状态的语法，无需编写promise.then(… …)这样的代码了；</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun1</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> <span class="number">10</span>        </span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fun2</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">let</span> res = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">try</span>&#123;                </span></span><br><span class="line"><span class="language-javascript">                res = <span class="keyword">await</span> <span class="title function_">fun1</span>()</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//res = await Promise.reject(&quot;something wrong&quot;)</span></span></span><br><span class="line"><span class="language-javascript">            &#125;<span class="keyword">catch</span>(e)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch got:&quot;</span>+e)   </span></span><br><span class="line"><span class="language-javascript">            &#125;          </span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;await got:&quot;</span>+res)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">fun2</span>()</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>综合案例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟一个异步函数，获取用户数据</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">fetchUserData</span>(<span class="params">userId</span>) &#123;</span><br><span class="line">    <span class="comment">// 模拟网络请求的延迟</span></span><br><span class="line">    <span class="keyword">const</span> response = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 模拟返回的用户数据</span></span><br><span class="line">            <span class="title function_">resolve</span>(&#123;</span><br><span class="line">                <span class="attr">id</span>: userId,</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&quot;John Doe&quot;</span>,</span><br><span class="line">                <span class="attr">age</span>: <span class="number">30</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;, <span class="number">2000</span>); <span class="comment">// 模拟 2 秒的网络延迟</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> response; <span class="comment">// 返回响应的数据</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 主执行函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">displayUser</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Fetching user data...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 等待 fetchUserData 的结果</span></span><br><span class="line">    <span class="keyword">const</span> user = <span class="keyword">await</span> <span class="title function_">fetchUserData</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 打印用户信息</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;User Data:&quot;</span>, user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用主执行函数</span></span><br><span class="line"><span class="title function_">displayUser</span>();</span><br></pre></td></tr></table></figure><ol><li><strong>fetchUserData 函数</strong>：<ul><li>使用 <code>async</code> 修饰符定义一个异步函数 <code>fetchUserData</code>。</li><li>使用 <code>await</code> 关键字等待一个 Promise 的结果。在这个例子中，我们模拟了一个异步操作（网络请求），使用 <code>setTimeout</code> 来延迟响应。</li><li>一旦 Promise 被解决，我们返回用户数据。</li></ul></li><li><strong>displayUser 函数</strong>：<ul><li>这是主执行函数，同样使用 <code>async</code> 关键字。</li><li>在函数内部，我们调用 <code>fetchUserData</code>，并使用 <code>await</code> 等待它的结果。</li><li>一旦获取到用户数据，我们将其打印到控制台。</li></ul></li><li><strong>调用 displayUser</strong>：<ul><li>最后，我们调用 <code>displayUser</code> 函数，开始整个过程。</li></ul></li></ol><h2 id="6-2-Axios介绍">6.2 Axios介绍</h2><blockquote><p>AJAX ：</p></blockquote><ul><li><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）；</p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法；</p></li><li><p>AJAX 最大的优点是在不重新加载整个页面的情况下，可以与服务器交换数据并更新部分网页内容；</p></li><li><p>AJAX 不需要任何浏览器插件，但需要用户允许 JavaScript 在浏览器上执行；</p></li><li><p>XMLHttpRequest 只是实现 Ajax 的一种方式，本次我们使用Vue Axios方式实现；</p></li></ul><blockquote><p>什么是axios  官网介绍:<a href="https://axios-http.com/zh/docs/intro">https://axios-http.com/zh/docs/intro</a></p></blockquote><ul><li>Axios 是一个基于 Promise网络请求库，作用于<a href="https://nodejs.org/" title="node.js">node.js</a> 和浏览器中。 它是 <a href="https://www.lullabot.com/articles/what-is-an-isomorphic-application" title="isomorphic"><em>isomorphic</em></a> 的(即同一套代码可以运行在浏览器和node.js中)。在服务端它使用原生 node.js <code>http</code> 模块，而在客户端 (浏览端) 则使用 XMLHttpRequests。它有如下特性：<ul><li>从浏览器创建 <a href="https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest" title="XMLHttpRequests">XMLHttpRequest</a></li><li>从 node.js 创建 <a href="http://nodejs.org/api/http.html" title="http">http</a> 请求</li><li>支持 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" title="Promise">Promise</a> API</li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换JSON数据</li><li>客户端支持防御[XSRF]</li></ul></li></ul><h2 id="6-3-Axios-入门案例">6.3 Axios 入门案例</h2><blockquote><p>1 案例需求：请求后台获取随机土味情话。</p></blockquote><ul><li>请求的url</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://api.uomg.com/api/rand.qinghua?format=json</span><br></pre></td></tr></table></figure><ul><li>请求的方式</li></ul><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET/POST</span><br></pre></td></tr></table></figure><ul><li>数据返回的格式</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;code&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span><span class="attr">&quot;content&quot;</span><span class="punctuation">:</span><span class="string">&quot;我努力不是为了你而是因为你。&quot;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>2 准备项目：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><blockquote><p>3 安装Axios：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install axios</span><br></pre></td></tr></table></figure><blockquote><p>4 设计页面（App.Vue）：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>, <span class="comment">// 请求方式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,  <span class="comment">// 请求的url</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// params: &#123;//get请求传递参数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   username: &#x27;zhangsan&#x27;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123; <span class="comment">// 当请求方式为post时,data下的数据以JSON串放入请求体</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">then</span>( <span class="keyword">function</span> (<span class="params">response</span>)&#123;<span class="comment">//响应成功时要执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span></span><br><span class="line"><span class="language-javascript">      <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,response.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;).<span class="title function_">catch</span>(<span class="keyword">function</span> (<span class="params">error</span>)&#123;<span class="comment">// 响应失败时要执行的函数</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>5 启动测试：</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><blockquote><p>异步响应的数据结构：</p></blockquote><ul><li>响应的数据是经过包装返回的！一个请求的响应包含以下信息。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// `data` 由服务器提供的响应</span></span><br><span class="line">  data<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `status` 来自服务器响应的 HTTP 状态码</span></span><br><span class="line">  status<span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `statusText` 来自服务器响应的 HTTP 状态信息</span></span><br><span class="line">  statusText<span class="punctuation">:</span> &#x27;OK&#x27;<span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `headers` 是服务器响应头</span></span><br><span class="line">  <span class="comment">// 所有的 header 名称都是小写，而且可以使用方括号语法访问</span></span><br><span class="line">  <span class="comment">// 例如: `response.headers[&#x27;content-type&#x27;]`</span></span><br><span class="line">  headers<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `config` 是 `axios` 请求的配置信息</span></span><br><span class="line">  config<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// `request` 是生成此响应的请求</span></span><br><span class="line">  <span class="comment">// 在node.js中它是最后一个ClientRequest实例 (in redirects)，</span></span><br><span class="line">  <span class="comment">// 在浏览器中则是 XMLHttpRequest 实例</span></span><br><span class="line">  request<span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>then取值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">data</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">status</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">statusText</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">headers</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(response.<span class="property">config</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>6 通过async和await处理异步请求：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,reactive &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> <span class="keyword">await</span> <span class="title function_">axios</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">method</span>:<span class="string">&quot;post&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">url</span>:<span class="string">&quot;https://api.uomg.com/api/rand.qinghua?format=json&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">username</span>:<span class="string">&quot;123456&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>axios在发送异步请求时的可选配置：</p></blockquote><p>详情见 <a href="https://axios-http.com/zh/docs/req_config">https://axios-http.com/zh/docs/req_config</a></p><p><img src=".%5Cassets%5C1740927632433.png" alt="1740927632433"></p><h2 id="6-4-Axios-get和post方法">6.4 Axios get和post方法</h2><blockquote><p>配置添加语法：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">axios.<span class="title function_">get</span>(url[, config])</span><br><span class="line">axios.<span class="title function_">get</span>(url,&#123;</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(url[, data[, config]])</span><br><span class="line">axios.<span class="title function_">post</span>(url,&#123;<span class="attr">key</span>:value <span class="comment">//此位置数据，没有空对象即可&#123;&#125;&#125;,&#123;</span></span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值,</span><br><span class="line">   上面指定配置<span class="attr">key</span>:配置值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>测试axios.get(… … )：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> axios.<span class="title function_">get</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;<span class="comment">// 向url后添加的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> = <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//jsonData = data; //行 才怪呢</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//BeanUtils.copyProperties(源,目标);</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//jsonData.code = data.code;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="comment">//jsonData.content = data.content;</span></span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)<span class="comment">// 将第二个属性拷贝到第一个属性的各个属性上</span></span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>测试 axios.post(… …)：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#123;<span class="comment">// 其他参数</span></span></span><br><span class="line"><span class="language-javascript">         <span class="attr">params</span>:&#123;<span class="comment">// url上拼接的键值对参数</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">headers</span>:&#123;<span class="comment">// 请求头</span></span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;Accept&#x27;</span> : <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="string">&#x27;X-Requested-With&#x27;</span>: <span class="string">&#x27;XMLHttpRequest&#x27;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =<span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">     <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src=".%5Cassets%5C1740928122658.png" alt="1740928122658"></p><p>前面的测试可能出现跨域问题。不要测试过多次数，可以过会再测试试。或在vite.config.js中配置代理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://vite.dev/config/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>()],</span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&#x27;https://api.uomg.com/api/rand.qinghua?format=json&#x27;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="6-5-Axios-拦截器">6.5 Axios 拦截器</h2><blockquote><p>如果想在axios发送请求之前，或者是数据响应回来在执行then方法之前做一些额外的工作，可以通过拦截器完成：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 添加请求拦截器 请求发送之前</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="comment">// 在发送请求之前做些什么</span></span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 对请求错误做些什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// 添加响应拦截器 数据响应回来</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="keyword">function</span> (<span class="params">response</span>) &#123;</span><br><span class="line">    <span class="comment">// 2xx 范围内的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应数据做点什么</span></span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="keyword">function</span> (<span class="params">error</span>) &#123;</span><br><span class="line">    <span class="comment">// 超出 2xx 范围的状态码都会触发该函数。</span></span><br><span class="line">    <span class="comment">// 对响应错误做点什么</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><ul><li>定义src/axios.js提取拦截器和配置语法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">//  创建instance实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;https://api.uomg.com&#x27;</span>,</span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">10000</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//  添加请求拦截</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置请求头配置信息</span></span><br><span class="line">    <span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//处理指定的请求头</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;before request&quot;</span>)</span><br><span class="line">        config.<span class="property">headers</span>.<span class="property">Accept</span> = <span class="string">&#x27;application/json, text/plain, text/html,*/*&#x27;</span></span><br><span class="line">        <span class="keyword">return</span> config</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置请求错误处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;request error&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 添加响应拦截器</span></span><br><span class="line">instance.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">    <span class="comment">// 设置响应正确时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after success response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(response)</span><br><span class="line">        <span class="keyword">return</span> response</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 设置响应异常时的处理函数</span></span><br><span class="line">    <span class="function"><span class="params">error</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;after fail response&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(error)</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 默认导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> instance</span><br></pre></td></tr></table></figure><ul><li>App.vue</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">type</span>=<span class="string">&quot;module&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 导入自己定义的axios.js文件,而不是导入axios依赖  </span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;./axios.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> &#123; onMounted,ref,reactive,toRaw &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> jsonData =<span class="title function_">reactive</span>(&#123;<span class="attr">code</span>:<span class="number">1</span>,<span class="attr">content</span>:<span class="string">&#x27;我努力不是为了你而是因为你&#x27;</span>&#125;)</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveWords</span>= <span class="keyword">async</span> (<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">try</span>&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> axios.<span class="title function_">post</span>(</span></span><br><span class="line"><span class="language-javascript">        <span class="string">&#x27;api/rand.qinghua&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">username</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">password</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,<span class="comment">//请求体中的JSON数据</span></span></span><br><span class="line"><span class="language-javascript">        &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">params</span>:&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">format</span>:<span class="string">&#x27;json&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;<span class="comment">// 其他键值对参数</span></span></span><br><span class="line"><span class="language-javascript">      )</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//出现跨域问题临时解决办法。</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//let json = &#123;data: &#123; code: 1, content: &#x27;别嫌弃我什么都不会，但是我只会娶你。&#x27; &#125;&#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//return Promise.resolve(json)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;<span class="keyword">catch</span> (e)&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> e</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> <span class="title function_">getLoveMessage</span> =<span class="keyword">async</span>(<span class="params"></span>)=&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> &#123;data&#125;  = <span class="keyword">await</span> <span class="title function_">getLoveWords</span>()</span></span><br><span class="line"><span class="language-javascript">     <span class="title class_">Object</span>.<span class="title function_">assign</span>(jsonData,data)</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript">  <span class="comment">/* 通过onMounted生命周期,自动加载一次 */</span></span></span><br><span class="line"><span class="language-javascript">  <span class="title function_">onMounted</span>(<span class="function">()=&gt;</span>&#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">getLoveMessage</span>()</span></span><br><span class="line"><span class="language-javascript">  &#125;)</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>今日土味情话:&#123;&#123;jsonData.content&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>  @<span class="attr">click</span>=<span class="string">&quot;getLoveMessage&quot;</span>&gt;</span>获取今日土味情话<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h1>第7章 Element-plus组件库</h1><h2 id="7-1-Element-plus介绍">7.1 Element-plus介绍</h2><blockquote><p>Element Plus 是一套基于 Vue 3 的开源 UI 组件库，是由饿了么前端团队开发的升级版本 Element UI。Element Plus 提供了丰富的 UI 组件、易于使用的 API 接口和灵活的主题定制功能，可以帮助开发者快速构建高质量的 Web 应用程序。</p></blockquote><ul><li><p>Element Plus 支持按需加载，且不依赖于任何第三方 CSS 库，它可以轻松地集成到任何 Vue.js 项目中。Element Plus 的文档十分清晰，提供了各种组件的使用方法和示例代码，方便开发者快速上手。</p></li><li><p>Element Plus 目前已经推出了大量的常用 UI 组件，如按钮、表单、表格、对话框、选项卡等，此外还提供了一些高级组件，如日期选择器、时间选择器、级联选择器、滑块、颜色选择器等。这些组件具有一致的设计和可靠的代码质量，可以为开发者提供稳定的使用体验。</p></li><li><p>与 Element UI 相比，Element Plus 采用了现代化的技术架构和更加先进的设计理念，同时具备更好的性能和更好的兼容性。Element Plus 的更新迭代也更加频繁，可以为开发者提供更好的使用体验和更多的功能特性。</p></li><li><p>Element Plus 可以在支持 <a href="https://caniuse.com/?feats=mdn-javascript_builtins_regexp_dotall,mdn-javascript_builtins_regexp_lookbehind_assertion,mdn-javascript_builtins_regexp_named_capture_groups,mdn-javascript_builtins_regexp_property_escapes,mdn-javascript_builtins_symbol_asynciterator,mdn-javascript_functions_method_definitions_async_generator_methods,mdn-javascript_grammar_template_literals_template_literal_revision,mdn-javascript_operators_destructuring_rest_in_objects,mdn-javascript_operators_spread_spread_in_destructuring,promise-finally" title="ES2018">ES2018</a> 和 <a href="https://caniuse.com/resizeobserver" title="ResizeObserver">ResizeObserver</a> 的浏览器上运行。 如果您确实需要支持旧版本的浏览器，请自行添加 <a href="https://babeljs.io/" title="Babel">Babel</a> 和相应的 Polyfill</p></li><li><p>官网<a href="https://element-plus.org/zh-CN/">一个 Vue 3 UI 框架 | Element Plus (element-plus.org)</a></p></li><li><p>由于 Vue 3 不再支持 IE11，Element Plus 也不再支持 IE 浏览器。</p></li></ul><p><img src="images/21.png" alt=""></p><h2 id="7-2-Element-plus环境搭建">7.2 Element-plus环境搭建</h2><blockquote><p>1 准备vite项目</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm create vite</span><br><span class="line">进入项目</span><br><span class="line">npm install </span><br></pre></td></tr></table></figure><blockquote><p>2 安装element-plus</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-plus</span><br></pre></td></tr></table></figure><blockquote><p>3 完整引入element-plus</p></blockquote><ul><li>main.js</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="comment">//导入element-plus相关内容</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementPlus</span> <span class="keyword">from</span> <span class="string">&#x27;element-plus&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-plus/dist/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">ElementPlus</span>)</span><br><span class="line">app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure><h2 id="7-3-Element-plus常用组件">7.3  Element-plus常用组件</h2><blockquote><p>结合官网演示以下组件</p><p><a href="https://element-plus.org/zh-CN">https://element-plus.org/zh-CN</a></p><p><a href="https://element-plus-docs.bklab.cn/zh-CN/">https://element-plus-docs.bklab.cn/zh-CN/</a></p></blockquote><ul><li>Button组件和Card组件</li><li>Table组件和Pagination组件</li><li>Form组件和表单数据校验</li><li>Message、Message Box及Popconfirm弹框组件</li></ul><h1>TypeScript</h1><p><a href="https://www.runoob.com/typescript/ts-tutorial.html">TypeScript 教程 | 菜鸟教程</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> hello : <span class="built_in">string</span> = <span class="string">&quot;Yangjiayu!&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(hello)</span><br></pre></td></tr></table></figure><h2 id="项目开发">项目开发</h2>]]></content>
    
    
    <summary type="html">前端工程化开篇</summary>
    
    
    
    <category term="前端" scheme="https://yjyrichard.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="前端" scheme="https://yjyrichard.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>深入剖析：`Lazy`为何能破解Spring的“循环依赖”魔咒？</title>
    <link href="https://yjyrichard.github.io/posts/86afc630.html"/>
    <id>https://yjyrichard.github.io/posts/86afc630.html</id>
    <published>2025-07-23T14:14:18.830Z</published>
    <updated>2025-07-25T12:39:17.057Z</updated>
    
    <content type="html"><![CDATA[<h2 id="深入剖析：-Lazy为何能破解Spring的“循环依赖”魔咒？">深入剖析：<code>@Lazy</code>为何能破解Spring的“循环依赖”魔咒？</h2><p><strong><code>@Lazy</code>之所以能解决循环依赖问题，是因为它改变了Bean的注入时机。它不再是在容器启动和创建Bean时就立即注入依赖的完整实例，而是注入一个“代理对象”。只有当你第一次真正使用这个依赖对象（即调用它的方法）时，Spring才会去创建并初始化那个真正的Bean实例。</strong></p><p>这个“延迟”操作，就像给了Spring一个喘息的机会，从而打破了“你等我，我等你”的死循环僵局。</p><p>为了彻底理解这一点，我们需要先搞清楚两个概念：什么是循环依赖，以及Spring默认是如何处理它的。</p><h3 id="一、什么是循环依赖？">一、什么是循环依赖？</h3><p>循环依赖（Circular Dependency）很简单，就是两个或多个Bean之间相互依赖，形成了一个闭环。</p><p>最常见的形式是两个Bean互相依赖：</p><ul><li><code>ServiceA</code> 依赖 <code>ServiceB</code></li><li><code>ServiceB</code> 又反过来依赖 <code>ServiceA</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceA</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceA</span><span class="params">(ServiceB serviceB)</span> &#123; <span class="comment">// A的构造函数需要B</span></span><br><span class="line">        <span class="built_in">this</span>.serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceA serviceA;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceB</span><span class="params">(ServiceA serviceA)</span> &#123; <span class="comment">// B的构造函数需要A</span></span><br><span class="line">        <span class="built_in">this</span>.serviceA = serviceA;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、Spring的困境与默认解决方案">二、Spring的困境与默认解决方案</h3><p>当Spring容器启动时，它会按照顺序创建这些Bean。让我们模拟一下上面这个例子的创建过程：</p><ol><li><strong>创建<code>ServiceA</code></strong>：Spring尝试实例化<code>ServiceA</code>。</li><li><strong>发现依赖<code>ServiceB</code></strong>：<code>ServiceA</code>的构造函数需要一个<code>ServiceB</code>的实例。</li><li><strong>查找<code>ServiceB</code></strong>：Spring去容器里找<code>ServiceB</code>。发现还没有，于是准备创建<code>ServiceB</code>。</li><li><strong>创建<code>ServiceB</code></strong>：Spring尝试实例化<code>ServiceB</code>。</li><li><strong>发现依赖<code>ServiceA</code></strong>：<code>ServiceB</code>的构造函数需要一个<code>ServiceA</code>的实例。</li><li><strong>查找<code>ServiceA</code></strong>：Spring去容器里找<code>ServiceA</code>。发现<code>ServiceA</code>也正在创建中，还没创建完成。</li><li><strong>陷入死锁</strong>：A等B，B等A，谁也无法先完成实例化。程序卡住，最终Spring会抛出 <code>BeanCurrentlyInCreationException</code> 异常。</li></ol><p>这个问题看起来无解，但Spring其实内置了一套非常精妙的机制来解决 <strong>一部分</strong> 循环依赖问题，这套机制就是大名鼎鼎的 <strong>“三级缓存”</strong>。</p><blockquote><p><strong>注意</strong>：Spring的“三级缓存”机制<strong>只能解决setter注入和字段注入（<code>@Autowired</code>在字段上）的循环依赖</strong>。它无法解决我们上面示例中的<strong>构造器注入</strong>的循环依赖。因为构造器注入要求在对象实例化（调用<code>new</code>）时，所有参数都必须是现成的、完整的实例，无法中途插入一个“半成品”。</p></blockquote><h3 id="三、救世主登场：-Lazy-的魔法">三、救世主登场：<code>@Lazy</code> 的魔法</h3><p>现在，我们来看 <code>@Lazy</code> 如何解决上面那个棘手的 <strong>构造器注入</strong> 循环依赖。</p><p>我们只需要在其中一个依赖注入点加上 <code>@Lazy</code> 注解即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceA</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceB serviceB;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在A的构造函数中，对B的注入使用@Lazy</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceA</span><span class="params">(<span class="meta">@Lazy</span> ServiceB serviceB)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serviceB = serviceB;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doAStuff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceA is doing stuff...&quot;</span>);</span><br><span class="line">        <span class="comment">// 当这行代码第一次被执行时，真正的ServiceB才会被创建</span></span><br><span class="line">        serviceB.doBStuff(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServiceB</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServiceA serviceA;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ServiceB</span><span class="params">(ServiceA serviceA)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serviceA = serviceA;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doBStuff</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ServiceB is doing stuff...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>加上 <code>@Lazy</code> 之后，Spring的创建流程发生了奇妙的变化：</p><ol><li><strong>创建<code>ServiceA</code></strong>：Spring尝试实例化<code>ServiceA</code>。</li><li><strong>发现依赖<code>ServiceB</code>（标记为<code>@Lazy</code>）</strong>：<code>ServiceA</code>的构造函数需要<code>ServiceB</code>。但由于有 <code>@Lazy</code> 注解，Spring知道它<strong>不需要一个完整的<code>ServiceB</code>实例</strong>。</li><li><strong>注入代理对象</strong>：Spring会立即创建一个<code>ServiceB</code>的<strong>代理对象（Proxy）</strong>。这个代理对象不是真正的<code>ServiceB</code>，它只是一个“占位符”，看起来像<code>ServiceB</code>，但内部是空的。然后，Spring将这个代理对象注入到<code>ServiceA</code>的构造函数中。</li><li><strong><code>ServiceA</code>创建成功</strong>：由于代理对象满足了构造函数的要求，<code>ServiceA</code>顺利地被实例化并初始化完成，然后被放入了Spring容器的缓存中。</li><li><strong>创建<code>ServiceB</code></strong>：现在轮到创建<code>ServiceB</code>了。</li><li><strong>发现依赖<code>ServiceA</code></strong>：<code>ServiceB</code>的构造函数需要<code>ServiceA</code>。</li><li><strong>查找<code>ServiceA</code></strong>：Spring去容器里找<code>ServiceA</code>，此时<code>ServiceA</code>已经是一个完整的、现成的Bean了。</li><li><strong><code>ServiceB</code>创建成功</strong>：Spring将完整的<code>ServiceA</code>实例注入到<code>ServiceB</code>中，<code>ServiceB</code>也顺利创建完成。</li></ol><p><strong>循环被打破了！</strong></p><p>整个过程中，<code>ServiceA</code>持有的其实是一个<code>ServiceB</code>的代理。只有当未来某个时刻，代码第一次调用 <code>serviceB.doBStuff()</code> 时，这个代理对象才会真正地去向Spring容器请求一个完整的<code>ServiceB</code>实例，并把调用委托给它。</p><h3 id="总结与最佳实践">总结与最佳实践</h3><h4 id="Lazy-注解的作用："><code>@Lazy</code> 注解的作用：</h4><ul><li><strong>Bean的懒加载</strong>：如果<code>@Lazy</code>放在 <code>@Component</code> 或 <code>@Bean</code> 定义上，这个Bean默认不会在容器启动时就创建，而是在第一次被其他Bean引用时才创建。</li><li><strong>依赖的懒注入</strong>：如果<code>@Lazy</code>放在 <code>@Autowired</code> 或构造函数参数上（如我们的例子），它会注入一个代理对象，延迟真实依赖的获取和创建，从而<strong>打破构造器注入的循环依赖</strong>。</li></ul><h4 id="最佳实践与思考：">最佳实践与思考：</h4><p>虽然 <code>@Lazy</code> 能解决问题，但<strong>出现循环依赖通常是代码设计不良的信号</strong>。它暗示着类之间的职责划分可能不清晰，耦合度过高。</p><p>因此，当你不得不使用 <code>@Lazy</code> 来解决循环依赖时，应该优先思考：</p><ol><li><strong>能否重构代码？</strong> 是不是可以把公共逻辑抽离到第三个服务中，让A和B都去依赖C，从而打破A和B之间的直接循环？</li><li><strong>是否真的需要构造器注入？</strong> 如果业务场景允许，改为setter注入，利用Spring的三级缓存自动解决循环依赖。不过，构造器注入能保证依赖的不可变性，是更推荐的方式。</li></ol><p>总而言之，<code>@Lazy</code> 是一个强大的工具，是解决构造器循环依赖的“银弹”，但它更像是一个“创可贴”。最好的做法还是通过优秀的设计从根本上避免循环依赖的产生。</p>]]></content>
    
    
    <summary type="html">Lazy</summary>
    
    
    
    <category term="spring框架" scheme="https://yjyrichard.github.io/categories/spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring框架" scheme="https://yjyrichard.github.io/tags/spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Transaction失效的场景</title>
    <link href="https://yjyrichard.github.io/posts/87a11fe.html"/>
    <id>https://yjyrichard.github.io/posts/87a11fe.html</id>
    <published>2025-07-23T14:10:47.094Z</published>
    <updated>2025-07-23T22:55:14.647Z</updated>
    
    <content type="html"><![CDATA[<h2 id="避坑指南：为什么你的-Transactional突然不工作了？">避坑指南：为什么你的@Transactional突然不工作了？</h2><p>日常开发中，我们绝大多数情况下都是使用 <code>@Transactional</code> 注解来开启和管理事务的。它通过声明式的方式，极大地简化了事务编程，让我们能从繁琐的 <code>try-catch-finally</code> 和手动 <code>commit/rollback</code> 中解放出来，专注于业务逻辑。这正是Spring AOP（面向切面编程）的魅力所在。</p><p>然而，正是因为 <code>@Transactional</code> 如此方便，我们有时会忽略其背后的工作原理，从而在不经意间踩到一些“坑”，导致事务“悄无声息”地失效了。</p><p>今天，我们来聊一个老生常谈但又总有人踩坑的话题——Spring的 <code>@Transactional</code> 事务。</p><p><code>@Transactional</code> 注解就像一把瑞士军刀，轻巧、方便、功能强大。我们只需要在方法上轻轻一标，就能享受到事务带来的数据一致性保障。但你是否遇到过这样的场景：明明加了注解，代码也看似没问题，可数据库里的数据却“我行我素”，事务压根没生效？</p><p>别慌，这通常不是Spring的Bug，而是我们不小心绕过了它的“游戏规则”。下面，我们就来盘点一下导致事务失效的五大元凶，帮你彻底搞懂它，告别踩坑！</p><h3 id="背后原理速览：AOP代理">背后原理速览：AOP代理</h3><p>在开始之前，我们必须先理解 <code>@Transactional</code> 的核心魔法：<strong>AOP代理</strong>。</p><p>当你为一个Bean（通常是 <code>@Service</code> 注解的类）的<code>public</code>方法标注了 <code>@Transactional</code> 后，Spring并不会直接把这个Bean给你，而是会为它创建一个<strong>代理对象</strong>。当你调用这个方法时，实际上是调用了代理对象的方法。这个代理对象就像一个“保安”，它会在你的业务方法执行前，开启事务；在方法执行后，根据执行情况（是否抛出异常）来决定是提交（Commit）还是回滚（Rollback）事务。</p><p><strong>核心：事务的生效与否，关键在于你是否通过代理对象调用了方法。</strong> 记住这一点，我们就能轻松理解下面的所有失效场景。</p><hr><h3 id="元凶一：方法内部调用（自调用）">元凶一：方法内部调用（自调用）</h3><p>这是最常见也最隐蔽的失效场景。</p><p><strong>场景描述：</strong> 在同一个类中，一个没有事务注解的方法A，调用了另一个有事务注解的方法B。</p><p><strong>失效原因：</strong> 当你调用方法A时，你操作的是真实的<code>this</code>对象，而不是Spring的代理对象。因此，<code>this.方法B()</code> 的调用，本质上是<strong>对象内部的普通方法调用</strong>，完全绕过了代理对象的“保安”，AOP切面自然无法介入，事务也就失效了。</p><p><strong>错误示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部调用这个方法，它没有事务注解</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// ... 一些前置处理 ...</span></span><br><span class="line">        System.out.println(<span class="string">&quot;准备创建订单...&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 内部通过 this 调用了有事务的方法</span></span><br><span class="line">        <span class="comment">// 这是导致事务失效的罪魁祸首！</span></span><br><span class="line">        <span class="built_in">this</span>.insertOrder(order); </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        <span class="comment">// 假设这里抛出运行时异常，我们期望它回滚</span></span><br><span class="line">        <span class="keyword">if</span> (order.getAmount() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;订单金额过大，模拟异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的例子中，即使 <code>insertOrder</code> 执行时抛出异常，数据库中的订单数据也<strong>不会回滚</strong>。</p><p><strong>解决方案：</strong></p><p>让调用方从 <code>this</code> 变成 <strong>代理对象</strong>。</p><ol><li><p><strong>【推荐】注入自己，通过代理对象调用：</strong><br>在类中注入自身的代理对象，然后用这个代理对象去调用事务方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注入自己的代理对象</span></span><br><span class="line">    <span class="comment">// @Lazy可以解决循环依赖问题</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Lazy</span> </span><br><span class="line">    <span class="keyword">private</span> OrderService self; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备创建订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 使用代理对象调用，事务生效！</span></span><br><span class="line">        self.insertOrder(order);</span><br><span class="line">        <span class="comment">// 或者 ((OrderService)AopContext.currentProxy()).insertOrder(order);</span></span><br><span class="line">        <span class="comment">// 后者需要额外配置 @EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">if</span> (order.getAmount() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;订单金额过大，模拟异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>【更推荐】重构代码，拆分到不同的Service：</strong><br>这是更符合单一职责原则的做法。将需要事务控制的方法拆分到另一个Service中，通过注入该Service来调用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// OrderCreatorService.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCreatorService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderMapper orderMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        orderMapper.insert(order);</span><br><span class="line">        <span class="keyword">if</span> (order.getAmount() &gt; <span class="number">1000</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;订单金额过大，模拟异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// OrderServiceImpl.java</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> OrderCreatorService orderCreatorService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;准备创建订单...&quot;</span>);</span><br><span class="line">        <span class="comment">// 通过注入的Bean调用，事务生效！</span></span><br><span class="line">        orderCreatorService.insertOrder(order);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="元凶二：方法访问权限不是public">元凶二：方法访问权限不是<code>public</code></h3><p><strong>场景描述：</strong> 将 <code>@Transactional</code> 注解加在了 <code>private</code>、<code>protected</code> 或 <code>default</code> 权限的方法上。</p><p><strong>失效原因：</strong> Spring AOP的默认实现（无论是基于JDK动态代理还是CGLIB）都要求被代理的方法是 <code>public</code> 的。对于非 <code>public</code> 方法，AOP无法进行拦截，也就无法织入事务逻辑。</p><p><strong>错误示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// private方法，@Transactional 将会失效！</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">registerUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// public方法，作为入口</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">processRegistration</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.registerUser(user); <span class="comment">// 即使这里用代理对象调用，registerUser本身也无法被代理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong> 非常简单，将方法的访问权限修改为 <code>public</code>。</p><hr><h3 id="元凶三：数据库引擎不支持事务">元凶三：数据库引擎不支持事务</h3><p><strong>场景描述：</strong> 项目底层使用的数据库存储引擎本身就不支持事务。</p><p><strong>失效原因：</strong> Spring的事务管理是建立在数据库本身支持事务的基础之上的。如果数据库引擎都不支持，Spring再怎么努力也是“巧妇难为无米之炊”。最典型的例子就是MySQL的 <strong>MyISAM</strong> 引擎。</p><p><strong>检查与解决方案：</strong></p><ol><li>检查你的数据库表所使用的引擎。在MySQL中，可以使用 <code>SHOW TABLE STATUS LIKE 'your_table_name';</code> 查看。</li><li>确保使用支持事务的引擎，如 <strong>InnoDB</strong>。</li><li>如果使用的是旧表，可以通过 <code>ALTER TABLE your_table_name ENGINE=InnoDB;</code> 来修改。</li></ol><hr><h3 id="元凶四：Bean没有被Spring容器管理">元凶四：Bean没有被Spring容器管理</h3><p><strong>场景描述：</strong> 在一个没有被 <code>@Component</code>、<code>@Service</code> 等注解标记的类中使用了 <code>@Transactional</code>。</p><p><strong>失效原因：</strong> <code>@Transactional</code> 的生效前提是，这个类的实例（Bean）必须是由Spring容器创建和管理的。只有这样，Spring才能为它创建代理对象。如果你自己 <code>new</code> 了一个对象，Spring对它一无所知，自然无法提供事务管理能力。</p><p><strong>错误示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ManualService</span> &#123; <span class="comment">// 注意：没有 @Service 或 @Component 注解</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper; <span class="comment">// 假设通过某种方式手动注入了</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span> <span class="comment">// 这个注解完全是“自娱自乐”，不会有任何效果</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doSomething</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;模拟异常&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在某个Controller中</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 手动new对象，Spring无法管理它</span></span><br><span class="line">        <span class="type">ManualService</span> <span class="variable">manualService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ManualService</span>();</span><br><span class="line">        manualService.doSomething(); <span class="comment">// 调用此方法，事务100%不生效</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong><br>将这个类交给Spring管理，添加 <code>@Service</code>、<code>@Component</code> 等注解，并通过 <code>@Autowired</code> 注入使用。</p><hr><h3 id="元凶五：异常被“吃掉”或异常类型不匹配">元凶五：异常被“吃掉”或异常类型不匹配</h3><p><strong>场景描述：</strong></p><ol><li>在事务方法内部使用了 <code>try-catch</code> 块，捕获了异常但没有重新抛出。</li><li>抛出的异常类型不被Spring默认的回滚策略覆盖。</li></ol><p><strong>失效原因：</strong><br>Spring判断事务是否回滚的默认依据是：方法在执行过程中，<strong>是否抛出了 <code>RuntimeException</code> 或 <code>Error</code></strong>。</p><ul><li>如果你用 <code>try-catch</code> 捕获了异常并没有再往外抛，那么在Spring看来，这个方法是“正常执行”完成的，它自然会选择提交事务。</li><li>如果你抛出的是一个受检异常（Checked Exception，如 <code>IOException</code> 或自定义的 <code>Exception</code>），Spring默认<strong>不会</strong>回滚事务。</li></ul><p><strong>错误示例1：异常被“吃掉”</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Long productId)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            productMapper.deductStock(productId); <span class="comment">// 减库存</span></span><br><span class="line">            <span class="comment">// 模拟发生异常</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;网络波动，更新失败！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// 异常被捕获了，但没有抛出去，事务会认为一切正常并提交！</span></span><br><span class="line">            System.out.println(<span class="string">&quot;发生了一个小问题，但我们已经处理了：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>错误示例2：异常类型不匹配</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProductMapper productMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 默认只对RuntimeException回滚，MyCustomException是Exception子类，不会回滚</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> MyCustomException &#123;</span><br><span class="line">        productMapper.deductStock(productId);</span><br><span class="line">        <span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyCustomException</span>(<span class="string">&quot;自定义的业务异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyCustomException</span> <span class="keyword">extends</span> <span class="title class_">Exception</span> &#123; <span class="comment">// 注意，它继承自Exception</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MyCustomException</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><ol><li><p><strong>对于被“吃掉”的异常：</strong> 在 <code>catch</code> 块中处理完必要逻辑后，将异常重新抛出。<code>throw new RuntimeException(e);</code></p></li><li><p><strong>对于异常类型不匹配：</strong></p><ul><li><strong>方法一（推荐）：</strong> 在业务代码中尽量使用或封装为 <code>RuntimeException</code>。</li><li><strong>方法二（明确指定）：</strong> 在 <code>@Transactional</code> 注解中通过 <code>rollbackFor</code> 属性，明确指定需要回滚的异常类型。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 明确告诉Spring，遇到任何Exception都给我回滚！</span></span><br><span class="line"><span class="meta">@Transactional(rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateStock</span><span class="params">(Long productId)</span> <span class="keyword">throws</span> MyCustomException &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MyCustomException</span>(<span class="string">&quot;自定义的业务异常！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="总结">总结</h3><p>让我们再次回顾这五大“元凶”：</p><ol><li><strong>方法自调用</strong>：<code>this</code>调用绕过了代理。</li><li><strong>非<code>public</code>方法</strong>：AOP无法拦截。</li><li><strong>数据库不支持</strong>：底层基础不具备。</li><li><strong>非Spring Bean</strong>：对象未被Spring管理。</li><li><strong>异常处理不当</strong>：异常被“吃掉”或类型不匹配。</li></ol><p>掌握了这些，相信你对Spring事务的理解又上了一个台阶。记住，技术用得爽，原理不能忘。理解了AOP代理这个核心，很多问题都会迎刃而解。</p><p>希望这篇博客能帮你扫清知识盲区，在未来的开发中，让 <code>@Transactional</code> 成为你手中真正稳定可靠的神器！</p>]]></content>
    
    
    <summary type="html">spring框架</summary>
    
    
    
    <category term="spring框架" scheme="https://yjyrichard.github.io/categories/spring%E6%A1%86%E6%9E%B6/"/>
    
    
    <category term="spring框架" scheme="https://yjyrichard.github.io/tags/spring%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>管理信息系统</title>
    <link href="https://yjyrichard.github.io/posts/769fdc1b.html"/>
    <id>https://yjyrichard.github.io/posts/769fdc1b.html</id>
    <published>2025-06-26T08:45:17.547Z</published>
    <updated>2025-06-26T08:46:45.692Z</updated>
    
    <content type="html"><![CDATA[<h1>管理信息系统期末复习</h1><p>题型：</p><ul><li><p>选择题</p></li><li><p>名词解释</p></li><li><p>简答题</p></li><li><p>设计题 （数据库）</p></li><li><p>综合应用题（两种题型）</p><ul><li>信息系统的开发</li><li>案例分析</li></ul></li></ul><p>ER图跟关系模型：注意是实体Entity是长方形，属性Attribute是圆角矩形，联系Relation是菱形（也有属性).</p><p>要标明1对1，1对多，多对多</p><p>画关系模型的时候注意当1对多的时候，多的哪一方要多增加1的主键作为外键。如果是多对多的话要新建一张表。</p><p>主键是<code>_____</code> 即可，外键<code>~~~~~~</code>  用波浪线。新建的表要两个属性共同作为新建表的主键，分别用波浪线作为外键</p><p>信息系统：从技术角度定义为若干相互连接的部件组成的。对组织中的信息进行收集，处理，存储和发布的系统,用以支持企业作决策和管理控制。</p><p>组织有几层？</p><blockquote><ol><li><strong>战略层（高层管理）</strong><ul><li>负责组织的长期规划和决策，制定总体目标和政策。</li><li>关注外部环境（如市场竞争、法律法规）和战略方向（如企业并购、市场拓展）。</li><li>典型角色：CEO、董事会、高层管理者。</li></ul></li><li><strong>战术层（中层管理）</strong><ul><li>负责将战略目标转化为可执行的计划，协调和监督基层活动。</li><li>关注部门级资源配置、绩效控制和中期决策（如预算分配、项目审批）。</li><li>典型角色：部门经理、项目主管。</li></ul></li><li><strong>操作层（基层管理）</strong><ul><li>负责日常业务活动的执行和短期任务管理。</li><li>关注具体流程、效率和质量控制（如生产调度、客户服务）。</li><li>典型角色：班组长、一线主管。</li></ul></li></ol><h3 id="补充说明：">补充说明：</h3><ul><li><strong>信息系统的作用</strong>：不同层次需要不同类型的信息系统支持。例如，战略层依赖<strong>决策支持系统（DSS）</strong>，战术层使用<strong>管理信息系统（MIS）</strong>，操作层则依赖<strong>事务处理系统（TPS）</strong>。</li><li><strong>扁平化趋势</strong>：现代组织可能减少中层（战术层），使结构更扁平，以提高决策效率。</li></ul><p>这一分层反映了信息流动和决策权在组织中的分布，是管理信息系统设计的基础框架。</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">信息发展经历了那些阶段？ IT基础设施有哪些构成要素 基础设施的构成要素。</span><br></pre></td></tr></table></figure><blockquote><h3 id="信息发展的阶段（信息技术演进历程）">信息发展的阶段（信息技术演进历程）</h3><p>信息发展可以划分为以下几个阶段，每个阶段的标志性技术和特征如下：</p><h4 id="1-主机时代（1950s-1970s）"><strong>1. 主机时代（1950s-1970s）</strong></h4><ul><li><strong>技术</strong>：大型计算机（Mainframe）、批处理系统。</li><li><strong>特点</strong>：集中式计算，用户通过终端访问主机，处理能力有限，主要用于科学计算和大规模数据处理（如银行交易）。</li><li><strong>代表</strong>：IBM System/360。</li></ul><h4 id="2-小型机与微机时代（1970s-1980s）"><strong>2. 小型机与微机时代（1970s-1980s）</strong></h4><ul><li><strong>技术</strong>：小型机（Mini Computer）、个人计算机（PC）。</li><li><strong>特点</strong>：计算能力分散化，企业开始使用小型机，个人计算机（如Apple II、IBM PC）普及。</li><li><strong>影响</strong>：办公自动化（如WordStar、Lotus 1-2-3）。</li></ul><h4 id="3-客户端-服务器时代（1980s-1990s）"><strong>3. 客户端/服务器时代（1980s-1990s）</strong></h4><ul><li><strong>技术</strong>：局域网（LAN）、客户端/服务器（C/S）架构。</li><li><strong>特点</strong>：企业采用服务器集中管理数据，客户端（PC）负责用户界面和部分计算。</li><li><strong>代表</strong>：Oracle数据库、Windows NT服务器。</li></ul><h4 id="4-互联网时代（1990s-2000s）"><strong>4. 互联网时代（1990s-2000s）</strong></h4><ul><li><strong>技术</strong>：万维网（WWW）、浏览器/服务器（B/S）架构。</li><li><strong>特点</strong>：信息全球化，电子商务（如Amazon）、搜索引擎（如Google）兴起。</li><li><strong>关键协议</strong>：HTTP、TCP/IP。</li></ul><h4 id="5-移动互联网与云计算时代（2000s-2010s）"><strong>5. 移动互联网与云计算时代（2000s-2010s）</strong></h4><ul><li><strong>技术</strong>：智能手机（iPhone/Android）、云计算（AWS、Azure）。</li><li><strong>特点</strong>：随时随地上网，数据存储和计算迁移至云端，SaaS（如Salesforce）普及。</li></ul><h4 id="6-人工智能与物联网时代（2010s-至今）"><strong>6. 人工智能与物联网时代（2010s-至今）</strong></h4><ul><li><strong>技术</strong>：大数据、AI（深度学习）、物联网（IoT）、5G。</li><li><strong>特点</strong>：智能设备互联（如智能家居）、自动化决策（如推荐系统）、边缘计算。</li></ul><h3 id="IT基础设施的构成要素"><strong>IT基础设施的构成要素</strong></h3><p>IT基础设施是支撑企业信息系统的技术基础，主要包括以下<strong>5大核心要素</strong>：</p><h4 id="1-计算机硬件"><strong>1. 计算机硬件</strong></h4><ul><li><strong>包括</strong>：服务器、存储设备（如NAS、SAN）、终端设备（PC、移动设备）。</li><li><strong>作用</strong>：提供计算能力、数据存储和用户交互界面。</li></ul><h4 id="2-系统软件"><strong>2. 系统软件</strong></h4><ul><li>包括：<ul><li><strong>操作系统</strong>（如Windows Server、Linux）。</li><li><strong>数据库管理系统</strong>（如MySQL、Oracle）。</li><li><strong>中间件</strong>（如消息队列、API网关）。</li></ul></li><li><strong>作用</strong>：管理硬件资源，提供基础运行环境。</li></ul><h4 id="3-网络与通信技术"><strong>3. 网络与通信技术</strong></h4><ul><li>包括：<ul><li><strong>网络设备</strong>（路由器、交换机、防火墙）。</li><li><strong>通信协议</strong>（TCP/IP、HTTP、5G）。</li><li><strong>互联网接入</strong>（光纤、Wi-Fi、移动网络）。</li></ul></li><li><strong>作用</strong>：实现数据交换和系统互联。</li></ul><h4 id="4-数据管理与存储"><strong>4. 数据管理与存储</strong></h4><ul><li>包括：<ul><li><strong>数据库</strong>（关系型如SQL Server，非关系型如MongoDB）。</li><li><strong>大数据平台</strong>（如Hadoop、Spark）。</li><li><strong>云存储</strong>（如AWS S3、Google Cloud Storage）。</li></ul></li><li><strong>作用</strong>：存储、处理和分析企业数据。</li></ul><h4 id="5-企业应用软件"><strong>5. 企业应用软件</strong></h4><ul><li>包括：<ul><li><strong>ERP</strong>（如SAP、Oracle ERP）。</li><li><strong>CRM</strong>（如Salesforce）。</li><li><strong>协作工具</strong>（如Microsoft Teams、Slack）。</li></ul></li><li><strong>作用</strong>：支持业务流程和决策。</li></ul><h3 id="记忆技巧"><strong>记忆技巧</strong></h3><ol><li><strong>信息发展阶段</strong>：按时间轴记忆，从“大型机→PC→互联网→移动/云→AI/IoT”，对应“集中→分散→全球→智能”的逻辑。</li><li>IT基础设施：用**“硬软网数用”**五字口诀：<ul><li><strong>硬</strong>（硬件）</li><li><strong>软</strong>（系统软件）</li><li><strong>网</strong>（网络）</li><li><strong>数</strong>（数据管理）</li><li><strong>用</strong>（应用软件）</li></ul></li></ol><p>这样分类后，既能理解技术演进脉络，又能系统掌握IT基础设施的组成。</p></blockquote><blockquote><h3 id="第六章：数据库与商务智能核心概念"><strong>第六章：数据库与商务智能核心概念</strong></h3><h2 id="一、数据库基础概念"><strong>一、数据库基础概念</strong></h2><h3 id="1-数据库（Database-DB）"><strong>1. 数据库（Database, DB）</strong></h3><ul><li><strong>定义</strong>：结构化数据的集合，用于高效存储、检索和管理数据。</li><li>特点：<ul><li>减少数据冗余（避免重复存储）。</li><li>支持多用户并发访问。</li><li>提供数据安全性和完整性约束（如权限控制、外键约束）。</li></ul></li></ul><h3 id="2-数据库管理系统（DBMS-Database-Management-System）"><strong>2. 数据库管理系统（DBMS, Database Management System）</strong></h3><ul><li><p><strong>定义</strong>：管理数据库的软件系统，充当用户与数据库之间的接口。</p></li><li><p><strong>核心功能</strong>：</p><table><thead><tr><th><strong>功能</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td><strong>数据定义</strong></td><td>创建/修改数据库结构（如表、字段）。</td></tr><tr><td><strong>数据操作</strong></td><td>增删改查（CRUD：Create, Read, Update, Delete）。</td></tr><tr><td><strong>数据安全</strong></td><td>用户权限管理、数据加密。</td></tr><tr><td><strong>数据完整性</strong></td><td>约束规则（如主键唯一性、外键关联）。</td></tr><tr><td><strong>并发控制</strong></td><td>避免多用户同时修改数据时的冲突（如锁机制）。</td></tr><tr><td><strong>备份与恢复</strong></td><td>防止数据丢失（如事务日志、定期备份）。</td></tr></tbody></table></li><li><p><strong>常见DBMS</strong>：</p><ul><li><strong>关系型</strong>：MySQL、Oracle、SQL Server。</li><li><strong>非关系型（NoSQL）</strong>：MongoDB（文档型）、Redis（键值型）。</li></ul></li></ul><h2 id="二、商务智能（Business-Intelligence-BI）"><strong>二、商务智能（Business Intelligence, BI）</strong></h2><h3 id="1-商务智能的定义"><strong>1. 商务智能的定义</strong></h3><ul><li><strong>核心目标</strong>：将企业数据转化为可操作的洞察，辅助决策。</li><li><strong>关键组成</strong>：</li></ul><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">数据源</span><br><span class="line">      -&gt; 数据仓库</span><br><span class="line">-&gt; 数据分析工具</span><br><span class="line">-&gt;可视化仪表盘</span><br><span class="line">-&gt;决策支持</span><br></pre></td></tr></table></figure><h3 id="2-BI的核心技术"><strong>2. BI的核心技术</strong></h3><table><thead><tr><th><strong>技术</strong></th><th><strong>作用</strong></th><th><strong>工具示例</strong></th></tr></thead><tbody><tr><td><strong>数据仓库</strong></td><td>集成多个数据源的历史数据，优化分析查询。</td><td>Snowflake、Amazon Redshift</td></tr><tr><td><strong>ETL</strong></td><td>数据抽取（Extract）、转换（Transform）、加载（Load）。</td><td>Informatica、Talend</td></tr><tr><td><strong>OLAP</strong></td><td>在线分析处理，支持多维数据查询（如时间、地区、产品维度）。</td><td>Microsoft Analysis Services</td></tr><tr><td><strong>数据可视化</strong></td><td>通过图表、仪表盘直观展示数据趋势。</td><td>Tableau、Power BI</td></tr><tr><td><strong>报表系统</strong></td><td>定期生成标准化报告（如销售月报）。</td><td>Crystal Reports</td></tr></tbody></table><h3 id="3-BI的应用场景"><strong>3. BI的应用场景</strong></h3><ul><li><strong>销售分析</strong>：识别高利润产品和客户群体。</li><li><strong>库存优化</strong>：预测需求，减少库存积压。</li><li><strong>风险监控</strong>：检测异常交易（如金融反欺诈）。</li></ul><h2 id="三、数据挖掘（Data-Mining）"><strong>三、数据挖掘（Data Mining）</strong></h2><h3 id="1-数据挖掘的定义"><strong>1. 数据挖掘的定义</strong></h3><ul><li><strong>本质</strong>：从大规模数据中自动发现隐藏模式（如关联规则、分类模型）。</li><li>与BI的关系：<ul><li>BI侧重“描述性分析”（发生了什么）。</li><li>数据挖掘侧重“预测性分析”（未来可能发生什么）。</li></ul></li></ul><h3 id="2-数据挖掘的主要方法"><strong>2. 数据挖掘的主要方法</strong></h3><table><thead><tr><th><strong>方法</strong></th><th><strong>用途</strong></th><th><strong>案例</strong></th></tr></thead><tbody><tr><td><strong>分类</strong></td><td>预测类别（如客户是否流失）。</td><td>决策树、逻辑回归</td></tr><tr><td><strong>聚类</strong></td><td>无监督分组（如市场细分）。</td><td>K-means</td></tr><tr><td><strong>关联规则</strong></td><td>发现数据项间的关系（如“啤酒与尿布”）。</td><td>Apriori算法</td></tr><tr><td><strong>时序模式</strong></td><td>预测时间序列趋势（如股票价格）。</td><td>ARIMA模型</td></tr></tbody></table><h3 id="3-典型应用"><strong>3. 典型应用</strong></h3><ul><li><strong>推荐系统</strong>：Amazon的商品推荐、Netflix的影片推荐。</li><li><strong>信用评分</strong>：银行评估贷款风险。</li><li><strong>医疗诊断</strong>：基于病历预测疾病风险。</li></ul><h2 id="四、关键概念对比"><strong>四、关键概念对比</strong></h2><table><thead><tr><th><strong>概念</strong></th><th><strong>核心重点</strong></th><th><strong>典型工具/技术</strong></th></tr></thead><tbody><tr><td><strong>DBMS</strong></td><td>数据的存储与管理</td><td>MySQL、Oracle</td></tr><tr><td><strong>商务智能（BI）</strong></td><td>数据→洞察→决策</td><td>Tableau、Power BI</td></tr><tr><td><strong>数据挖掘</strong></td><td>自动发现数据中的隐藏模式</td><td>Python（Scikit-learn）、R</td></tr></tbody></table><h2 id="记忆技巧-2"><strong>记忆技巧</strong></h2><ol><li><strong>数据库三要素</strong>：<ul><li><strong>结构</strong>（表、字段）</li><li><strong>操作</strong>（CRUD）</li><li><strong>管理</strong>（安全、备份）。</li></ul></li><li><strong>BI流程口诀</strong>： <strong>“取数据（ETL）→存数据（数据仓库）→分析数据（OLAP）→看数据（可视化）”</strong>。</li><li><strong>数据挖掘方法</strong>：<ul><li><strong>分类</strong>（预测类别）</li><li><strong>聚类</strong>（自动分组）</li><li><strong>关联</strong>（发现规则）</li><li><strong>时序</strong>（预测趋势）。</li></ul></li></ol><p>通过这种结构化梳理，可以系统掌握数据库、BI与数据挖掘的核心逻辑！</p></blockquote><p>商务智能：是一个现代术语，包括一系列用来组织，分析和提供数据访问的数据与软件工具，以帮助管理者和其他企业用户做出更明智的决策。</p><blockquote><h3 id="第七章：计算机网络分类（按不同参照标准）"><strong>第七章：计算机网络分类（按不同参照标准）</strong></h3><p>计算机网络可以按照<strong>覆盖范围、拓扑结构、传输技术、使用权限</strong>等多个标准进行分类。以下是系统化的分类框架：</p><h2 id="一、按覆盖范围（地理尺度）"><strong>一、按覆盖范围（地理尺度）</strong></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>范围</strong></th><th><strong>特点</strong></th><th><strong>典型应用</strong></th></tr></thead><tbody><tr><td><strong>个人局域网</strong></td><td>10米以内</td><td>连接个人设备（如蓝牙耳机、智能手表）。</td><td>蓝牙、ZigBee</td></tr><tr><td><strong>(PAN)</strong></td><td></td><td></td><td></td></tr><tr><td><strong>局域网</strong></td><td>1公里以内</td><td>高速、低延迟，私有管理（如企业、学校）。</td><td>企业内网、Wi-Fi</td></tr><tr><td><strong>(LAN)</strong></td><td>（一栋楼或园区）</td><td></td><td></td></tr><tr><td><strong>城域网</strong></td><td>10-100公里</td><td>覆盖城市，连接多个LAN。</td><td>城市政务网、ISP骨干网</td></tr><tr><td><strong>(MAN)</strong></td><td></td><td></td><td></td></tr><tr><td><strong>广域网</strong></td><td>全球范围</td><td>低速高延迟，依赖公共基础设施（如光纤、卫星）。</td><td>互联网、跨国企业专线</td></tr><tr><td><strong>(WAN)</strong></td><td></td><td></td><td></td></tr></tbody></table><p><strong>记忆口诀</strong>： <strong>“人(PAN)小局(LAN)大城(MAN)广(WAN)”</strong>（从个人到全球的扩展）。</p><h2 id="二、按拓扑结构（物理连接方式）"><strong>二、按拓扑结构（物理连接方式）</strong></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>图示</strong></th><th><strong>特点</strong></th><th><strong>优缺点</strong></th></tr></thead><tbody><tr><td><strong>总线型</strong></td><td>───[PC1]──[PC2]───</td><td>所有设备共享一条主干电缆。</td><td>✅成本低 ❌单点故障影响全网</td></tr><tr><td><strong>星型</strong></td><td>●（中心节点）</td><td>所有设备连接至中央节点（如交换机）。</td><td>✅易维护 ❌中心节点故障则瘫痪</td></tr><tr><td><strong>环型</strong></td><td>○→○→○→○（闭环）</td><td>数据沿环路单向/双向传输。</td><td>✅公平访问 ❌断环则全网失效</td></tr><tr><td><strong>网状型</strong></td><td>多设备互联成网</td><td>每个节点至少两条路径，冗余高。</td><td>✅高可靠性 ❌布线复杂、成本高</td></tr><tr><td><strong>混合型</strong></td><td>星型+总线等组合</td><td>结合多种拓扑优势。</td><td>✅灵活性强 ❌设计复杂</td></tr></tbody></table><p><strong>关键点</strong>：</p><ul><li><strong>星型</strong>是现代LAN的主流（如以太网）。</li><li><strong>网状型</strong>用于关键设施（如军事网络、数据中心）。</li></ul><h2 id="三、按传输技术"><strong>三、按传输技术</strong></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>原理</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>广播式网络</strong></td><td>所有节点接收数据，但只有目标节点处理（如广播电台）。</td><td>传统以太网、Wi-Fi</td></tr><tr><td><strong>点对点网络</strong></td><td>数据通过专用链路在两个节点间传输。</td><td>VPN、电话拨号</td></tr></tbody></table><p><strong>对比</strong>：</p><ul><li>广播式网络适合小型LAN，点对点网络适合远距离通信。</li></ul><h2 id="四、按使用权限"><strong>四、按使用权限</strong></h2><table><thead><tr><th><strong>类型</strong></th><th><strong>特点</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>公有网络</strong></td><td>向公众开放，安全性较低。</td><td>互联网、4G/5G</td></tr><tr><td><strong>私有网络</strong></td><td>组织内部专用，安全性高。</td><td>企业内网、政府专网</td></tr><tr><td><strong>虚拟私有网络</strong></td><td>通过加密技术在公有网上构建私有通道。</td><td>VPN（如企业远程办公）</td></tr></tbody></table><h2 id="五、其他分类标准"><strong>五、其他分类标准</strong></h2><ol><li>按传输介质：<ul><li><strong>有线网络</strong>：光纤、双绞线（如Cat6）。</li><li><strong>无线网络</strong>：Wi-Fi、5G、卫星通信。</li></ul></li><li>按协议标准：<ul><li><strong>TCP/IP网络</strong>（互联网标准）。</li><li><strong>OSI模型网络</strong>（理论参考模型）。</li></ul></li></ol><h2 id="记忆技巧-3"><strong>记忆技巧</strong></h2><ol><li><strong>地理范围分类</strong>：按“个人→局部→城市→全球”递进记忆。</li><li>拓扑结构:联想实物：<ul><li><strong>总线型</strong>：像一根串起灯泡的电线。</li><li><strong>星型</strong>：像自行车轮辐条。</li></ul></li><li><strong>公有 vs 私有</strong>：公有=“马路”，私有=“私家车道”。</li></ol><p>通过这种结构化分类，可以清晰掌握计算机网络的多样化划分逻辑！</p></blockquote><blockquote><h3 id="第八章：信息系统安全核心概念">第八章：信息系统安全核心概念</h3><h2 id="一、恶意软件（Malware）"><strong>一、恶意软件（Malware）</strong></h2><p><strong>定义</strong>：恶意软件（Malicious Software）是任何设计用于破坏、窃取数据或未经授权访问系统的软件。</p><h3 id="常见类型及特点"><strong>常见类型及特点</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>传播方式</strong></th><th><strong>危害</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>病毒（Virus）</strong></td><td>依附于合法文件/程序</td><td>感染文件，自我复制，破坏数据。</td><td>CIH病毒、Melissa病毒</td></tr><tr><td><strong>蠕虫（Worm）</strong></td><td>通过网络自动传播</td><td>消耗带宽，导致系统瘫痪（无需用户操作）。</td><td>WannaCry、Conficker</td></tr><tr><td><strong>木马（Trojan）</strong></td><td>伪装成正常软件</td><td>窃取数据、远程控制设备（如键盘记录）。</td><td>Zeus木马、Emotet</td></tr><tr><td><strong>勒索软件（Ransomware）</strong></td><td>加密用户文件</td><td>勒索赎金解密（通常要求比特币支付）。</td><td>LockBit、REvil</td></tr><tr><td><strong>间谍软件（Spyware）</strong></td><td>捆绑下载/钓鱼</td><td>监控用户行为（如浏览记录、密码）。</td><td>Pegasus（飞马间谍软件）</td></tr><tr><td><strong>广告软件（Adware）</strong></td><td>捆绑免费软件安装</td><td>弹窗广告、降低系统性能。</td><td>Superfish</td></tr></tbody></table><p><strong>防护措施</strong>：</p><ul><li>安装杀毒软件（如卡巴斯基、火绒）。</li><li>定期更新系统补丁。</li><li>不打开可疑邮件/链接。</li></ul><h2 id="二、黑客（Hacker）"><strong>二、黑客（Hacker）</strong></h2><p><strong>定义</strong>：黑客是指利用技术手段突破系统安全限制的人，可分为<strong>白帽、黑帽、灰帽</strong>三类。</p><h3 id="黑客分类"><strong>黑客分类</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>动机</strong></th><th><strong>行为</strong></th><th><strong>典型例子</strong></th></tr></thead><tbody><tr><td><strong>白帽黑客</strong></td><td>合法测试漏洞</td><td>受雇于企业进行渗透测试（Ethical Hacking）。</td><td>网络安全公司研究员</td></tr><tr><td><strong>黑帽黑客</strong></td><td>非法牟利/破坏</td><td>窃取数据、发动攻击（如DDoS）。</td><td>Anonymous组织成员</td></tr><tr><td><strong>灰帽黑客</strong></td><td>介于合法与非法之间</td><td>发现漏洞后可能公开或私下出售。</td><td>独立安全研究员</td></tr></tbody></table><p><strong>黑客常用技术</strong>：</p><ul><li><strong>社会工程学</strong>（如钓鱼邮件、假冒客服）。</li><li><strong>漏洞利用</strong>（如SQL注入、零日攻击）。</li><li><strong>密码破解</strong>（暴力破解、彩虹表）。</li></ul><h2 id="三、其他安全威胁"><strong>三、其他安全威胁</strong></h2><h3 id="1-拒绝服务攻击（DDoS）"><strong>1. 拒绝服务攻击（DDoS）</strong></h3><ul><li><strong>原理</strong>：通过海量请求淹没目标服务器，使其瘫痪。</li><li><strong>案例</strong>：2016年Dyn公司攻击导致Twitter、Netflix宕机。</li></ul><h3 id="2-中间人攻击（MITM）"><strong>2. 中间人攻击（MITM）</strong></h3><ul><li><strong>原理</strong>：黑客截获通信双方的数据（如公共Wi-Fi窃取密码）。</li><li><strong>防御</strong>：使用HTTPS、VPN加密。</li></ul><h3 id="3-SQL注入"><strong>3. SQL注入</strong></h3><ul><li><strong>原理</strong>：通过输入恶意SQL代码篡改数据库查询。</li><li><strong>案例</strong>：2017年Equifax数据泄露（1.4亿用户信息被盗）。</li></ul><h2 id="四、安全防护措施"><strong>四、安全防护措施</strong></h2><h3 id="1-技术层面"><strong>1. 技术层面</strong></h3><ul><li><strong>防火墙（Firewall）</strong>：过滤非法流量。</li><li><strong>加密技术</strong>：SSL/TLS（用于HTTPS）、AES加密算法。</li><li><strong>多因素认证（MFA）</strong>：密码+短信验证码+指纹。</li></ul><h3 id="2-管理层面"><strong>2. 管理层面</strong></h3><ul><li><strong>安全策略</strong>：定期更换密码、最小权限原则。</li><li><strong>员工培训</strong>：防范社会工程学攻击。</li></ul><h3 id="3-法律与标准"><strong>3. 法律与标准</strong></h3><ul><li><strong>GDPR</strong>（欧盟通用数据保护条例）：违规罚款可达全球营收4%。</li><li><strong>等保2.0</strong>（中国）：分五级保护关键信息基础设施。</li></ul><h2 id="五、关键概念对比"><strong>五、关键概念对比</strong></h2><table><thead><tr><th><strong>概念</strong></th><th><strong>核心特点</strong></th><th><strong>关联威胁</strong></th></tr></thead><tbody><tr><td><strong>恶意软件</strong></td><td>软件形式的攻击载体</td><td>病毒、勒索软件</td></tr><tr><td><strong>黑客</strong></td><td>实施攻击的主体</td><td>黑帽/白帽行为差异</td></tr><tr><td><strong>DDoS</strong></td><td>通过流量压垮目标</td><td>网络带宽攻击</td></tr><tr><td><strong>社会工程学</strong></td><td>利用人性弱点（如信任）</td><td>钓鱼、假冒身份</td></tr></tbody></table><h2 id="记忆技巧-4"><strong>记忆技巧</strong></h2><ol><li><p>恶意软件类型</p><p>：按危害方式记忆：</p><ul><li><strong>病毒</strong>→感染；<strong>蠕虫</strong>→传播；<strong>木马</strong>→潜伏；<strong>勒索</strong>→加密勒索。</li></ul></li><li><p>黑客三类：用“帽子颜色”区分：</p><ul><li><strong>白帽</strong>（合法）、<strong>黑帽</strong>（犯罪）、<strong>灰帽</strong>（游走边缘）。</li></ul></li><li><p>防护三层次：</p><ul><li><strong>技术</strong>（防火墙）、<strong>管理</strong>（培训）、<strong>法律</strong>（GDPR）。</li></ul></li></ol><p>通过结构化分类和案例联想，可以系统掌握信息安全的核心威胁与防御逻辑！</p></blockquote><blockquote><h3 id="第九章：运营优化核心概念与策略"><strong>第九章：运营优化核心概念与策略</strong></h3><h2 id="一、企业应用（Enterprise-Applications）"><strong>一、企业应用（Enterprise Applications）</strong></h2><p><strong>定义</strong>：集成化的软件系统，用于支持企业核心业务流程，提升运营效率与跨部门协作。</p><h3 id="主要类型与功能"><strong>主要类型与功能</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>核心功能</strong></th><th><strong>典型系统</strong></th></tr></thead><tbody><tr><td><strong>ERP</strong>（企业资源计划）</td><td>整合财务、HR、生产、供应链等模块，实现数据统一管理。</td><td>SAP、Oracle ERP</td></tr><tr><td><strong>CRM</strong>（客户关系管理）</td><td>管理客户交互、销售漏斗、售后服务，提升客户满意度。</td><td>Salesforce、HubSpot</td></tr><tr><td><strong>SCM</strong>（供应链管理）</td><td>优化采购、物流、库存，协调供应商与分销商。</td><td>JDA、Kinaxis</td></tr><tr><td><strong>HRM</strong>（人力资源管理）</td><td>覆盖招聘、考勤、薪酬、培训等全周期员工管理。</td><td>Workday、北森</td></tr></tbody></table><p><strong>关键价值</strong>：</p><ul><li><strong>消除信息孤岛</strong>：各部门数据实时共享（如销售数据自动同步至财务系统）。</li><li><strong>流程自动化</strong>：减少人工操作（如ERP自动生成采购订单）。</li></ul><h2 id="二、供应链管理（SCM-Supply-Chain-Management）"><strong>二、供应链管理（SCM, Supply Chain Management）</strong></h2><p><strong>定义</strong>：对从原材料采购到产品交付终端的全链条进行计划、协调与优化。</p><h3 id="供应链核心环节"><strong>供应链核心环节</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">供应商</span><br><span class="line">生产商</span><br><span class="line">仓储</span><br><span class="line">分销商</span><br><span class="line">零售商</span><br><span class="line">消费者</span><br></pre></td></tr></table></figure><h3 id="优化策略"><strong>优化策略</strong></h3><ol><li><strong>精益供应链</strong>：减少浪费（如丰田JIT“准时制”生产）。</li><li><strong>敏捷供应链</strong>：快速响应需求变化（如Zara的快速时尚模式）。</li><li>数字化供应链：<ul><li><strong>IoT</strong>：实时追踪货物位置（如RFID标签）。</li><li><strong>区块链</strong>：提高供应链透明度（如沃尔玛食品溯源）。</li></ul></li></ol><p><strong>挑战</strong>：牛鞭效应（需求信号逐级放大导致库存失衡）。</p><h2 id="三、客户关系管理（CRM-Customer-Relationship-Management）"><strong>三、客户关系管理（CRM, Customer Relationship Management）</strong></h2><p><strong>定义</strong>：通过数据分析与流程优化，提升客户生命周期价值（LTV）。</p><h3 id="CRM核心功能"><strong>CRM核心功能</strong></h3><table><thead><tr><th><strong>模块</strong></th><th><strong>作用</strong></th><th><strong>技术工具</strong></th></tr></thead><tbody><tr><td><strong>销售自动化</strong></td><td>管理线索、商机、合同（如预测销售额）。</td><td>Pipedrive、Zoho CRM</td></tr><tr><td><strong>营销自动化</strong></td><td>精准投放广告、邮件营销（如细分客户群体）。</td><td>Marketo、HubSpot</td></tr><tr><td><strong>客户服务</strong></td><td>工单系统、知识库、呼叫中心（如7×24在线客服）。</td><td>Zendesk、Freshdesk</td></tr><tr><td><strong>数据分析</strong></td><td>客户画像、流失预警、交叉销售建议。</td><td>Power BI、Tableau</td></tr></tbody></table><h3 id="CRM策略"><strong>CRM策略</strong></h3><ol><li><strong>个性化服务</strong>：基于行为数据推荐产品（如亚马逊的“猜你喜欢”）。</li><li><strong>全渠道整合</strong>：统一线上线下客户数据（如星巴克APP积分互通）。</li><li><strong>客户细分</strong>：RFM模型（最近购买时间、频率、金额）。</li></ol><h2 id="四、运营优化策略总结"><strong>四、运营优化策略总结</strong></h2><h3 id="1-技术驱动优化"><strong>1. 技术驱动优化</strong></h3><ul><li><strong>AI预测</strong>：需求预测（如阿里供应链大脑）。</li><li><strong>RPA</strong>（机器人流程自动化）：处理重复任务（如发票录入）。</li></ul><h3 id="2-流程再造"><strong>2. 流程再造</strong></h3><ul><li><strong>BPM</strong>（业务流程管理）：重新设计低效流程（如缩短订单审批链）。</li><li><strong>六西格玛</strong>：减少缺陷（如摩托罗拉的质量控制）。</li></ul><h3 id="3-数据决策"><strong>3. 数据决策</strong></h3><ul><li><strong>KPI监控</strong>：实时仪表盘追踪库存周转率、客户留存率等。</li><li><strong>A/B测试</strong>：优化网页转化率（如淘宝页面布局调整）。</li></ul><h2 id="本章小结记忆框架"><strong>本章小结记忆框架</strong></h2><h3 id="1-三大核心系统"><strong>1. 三大核心系统</strong></h3><ul><li><strong>ERP</strong>：企业“中枢神经”，整合资源。</li><li><strong>SCM</strong>：物流“血管”，高效流通。</li><li><strong>CRM</strong>：客户“心脏”，驱动增长。</li></ul><h3 id="2-优化逻辑链"><strong>2. 优化逻辑链</strong></h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    <span class="selector-tag">A</span><span class="selector-attr">[数据集成]</span> --&gt; <span class="selector-tag">B</span><span class="selector-attr">[流程自动化]</span></span><br><span class="line">    <span class="selector-tag">B</span> --&gt; C<span class="selector-attr">[跨部门协作]</span></span><br><span class="line">    C --&gt; D<span class="selector-attr">[成本降低/效率提升]</span></span><br><span class="line">    D --&gt; E<span class="selector-attr">[客户满意度↑]</span></span><br></pre></td></tr></table></figure><h3 id="3-关键词口诀"><strong>3. 关键词口诀</strong></h3><ul><li><strong>“ERP管资源，SCM管物流，CRM管人心”</strong></li><li><strong>“精益省成本，敏捷快响应，数据做决策”</strong></li></ul><p>通过系统化梳理，可掌握运营优化的核心逻辑与落地方法！</p></blockquote><blockquote><h3 id="第十章：电子商务-vs-传统商务-类型、商业模式与盈利模式"><strong>第十章：电子商务 vs 传统商务 | 类型、商业模式与盈利模式</strong></h3><h2 id="一、电子商务与传统商务的区别"><strong>一、电子商务与传统商务的区别</strong></h2><table><thead><tr><th><strong>维度</strong></th><th><strong>电子商务</strong></th><th><strong>传统商务</strong></th></tr></thead><tbody><tr><td><strong>交易场景</strong></td><td>线上平台（网站、APP）</td><td>实体门店、面对面交易</td></tr><tr><td><strong>时间限制</strong></td><td>24/7营业</td><td>固定营业时间</td></tr><tr><td><strong>成本结构</strong></td><td>✅ 低房租、少人力❌ 高物流/营销成本</td><td>✅ 即时体验❌ 高租金、库存压力</td></tr><tr><td><strong>客户覆盖</strong></td><td>全球市场</td><td>地域性市场</td></tr><tr><td><strong>数据能力</strong></td><td>实时追踪用户行为，精准营销</td><td>依赖人工统计，反馈滞后</td></tr><tr><td><strong>供应链</strong></td><td>依赖第三方物流（如京东物流）</td><td>自建仓储/本地供应商</td></tr></tbody></table><p><strong>典型案例</strong>：</p><ul><li><strong>电商</strong>：亚马逊（无实体店）、淘宝（平台模式）。</li><li><strong>传统商务</strong>：沃尔玛（线下超市）、星巴克（门店体验）。</li></ul><h2 id="二、电子商务的类型"><strong>二、电子商务的类型</strong></h2><h3 id="1-按交易对象分类"><strong>1. 按交易对象分类</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>参与者</strong></th><th><strong>案例</strong></th></tr></thead><tbody><tr><td><strong>B2B</strong>（企业对企业）</td><td>企业间交易（如原材料采购）</td><td>阿里巴巴1688、慧聪网</td></tr><tr><td><strong>B2C</strong>（企业对消费者）</td><td>企业直接销售给个人</td><td>京东自营、天猫品牌旗舰店</td></tr><tr><td><strong>C2C</strong>（消费者对消费者）</td><td>个人间二手交易</td><td>闲鱼、eBay</td></tr><tr><td><strong>B2G</strong>（企业对政府）</td><td>企业向政府投标或供应</td><td>政府采购网</td></tr><tr><td><strong>O2O</strong>（线上到线下）</td><td>线上引流，线下消费</td><td>美团、滴滴出行</td></tr></tbody></table><h3 id="2-按技术形式分类"><strong>2. 按技术形式分类</strong></h3><ul><li><strong>移动电商</strong>：通过APP/小程序交易（如拼多多）。</li><li><strong>社交电商</strong>：依托社交平台（如微信朋友圈、抖音直播带货）。</li><li><strong>跨境电商</strong>：跨国交易（如SHEIN、亚马逊全球站）。</li></ul><h2 id="三、电子商务的商业模式"><strong>三、电子商务的商业模式</strong></h2><h3 id="1-平台型模式"><strong>1. 平台型模式</strong></h3><ul><li><strong>特点</strong>：搭建交易平台，连接买卖双方（收取佣金/广告费）。</li><li><strong>案例</strong>：淘宝（C2C）、天猫（B2C）。</li></ul><h3 id="2-自营型模式"><strong>2. 自营型模式</strong></h3><ul><li><strong>特点</strong>：企业自主采购、销售（控制供应链）。</li><li><strong>案例</strong>：京东自营、亚马逊直营。</li></ul><h3 id="3-订阅型模式"><strong>3. 订阅型模式</strong></h3><ul><li><strong>特点</strong>：定期付费获取服务或商品（如会员制）。</li><li><strong>案例</strong>：Netflix（视频）、盒马X会员（生鲜）。</li></ul><h3 id="4-共享经济模式"><strong>4. 共享经济模式</strong></h3><ul><li><strong>特点</strong>：闲置资源再利用（平台抽成）。</li><li><strong>案例</strong>：Airbnb（住宿）、滴滴（出行）。</li></ul><h2 id="四、电子商务的盈利模式"><strong>四、电子商务的盈利模式</strong></h2><table><thead><tr><th><strong>盈利方式</strong></th><th><strong>说明</strong></th><th><strong>案例</strong></th></tr></thead><tbody><tr><td><strong>商品差价</strong></td><td>低价采购，高价销售</td><td>京东自营3C产品</td></tr><tr><td><strong>平台佣金</strong></td><td>向卖家收取交易额比例费用</td><td>淘宝每笔订单抽成1%-5%</td></tr><tr><td><strong>广告收入</strong></td><td>展示位竞价排名（如首页横幅）</td><td>亚马逊Sponsored Products</td></tr><tr><td><strong>会员服务</strong></td><td>付费会员特权（如免运费、折扣）</td><td>京东PLUS、Costco会员制</td></tr><tr><td><strong>数据变现</strong></td><td>分析用户行为并出售洞察（需合规）</td><td>阿里妈妈精准广告投放</td></tr><tr><td><strong>物流服务</strong></td><td>自建物流对外收费</td><td>京东物流第三方配送</td></tr></tbody></table><h2 id="五、关键对比与趋势"><strong>五、关键对比与趋势</strong></h2><h3 id="1-电商-vs-传统商务的核心优势"><strong>1. 电商 vs 传统商务的核心优势</strong></h3><ul><li><strong>成本</strong>：电商节省实体成本，但需投入物流/流量。</li><li><strong>体验</strong>：传统商务即时满足，电商胜在便捷与长尾商品。</li></ul><h3 id="2-未来趋势"><strong>2. 未来趋势</strong></h3><ul><li><strong>社交电商</strong>：直播带货（如抖音、快手）。</li><li><strong>全渠道融合</strong>：线上线下一体化（如优衣库“线上下单，门店自提”）。</li><li><strong>可持续电商</strong>：绿色包装、碳足迹追踪（如Patagonia）。</li></ul><h2 id="记忆技巧-5"><strong>记忆技巧</strong></h2><ol><li>电商类型口诀：<ul><li><strong>“B2B供原料，B2C卖货忙，C2C闲鱼转，O2O美团香”</strong>。</li></ul></li><li><strong>盈利模式</strong>：联想“淘宝怎么赚钱？”→ <strong>佣金+广告+会员+物流</strong>。</li><li>商业模式：<ul><li><strong>平台</strong>是“收租婆”（如淘宝），<strong>自营</strong>是“大超市”（如京东）。</li></ul></li></ol><p>通过结构化对比与案例联想，可快速掌握电子商务的核心逻辑！</p></blockquote><blockquote><h3 id="第十四章：项目管理核心概念与风险控制"><strong>第十四章：项目管理核心概念与风险控制</strong></h3><h2 id="一、项目失败的主要表现"><strong>一、项目失败的主要表现</strong></h2><p>项目失败通常体现在以下<strong>6个方面</strong>，可通过“<strong>TQRDCE</strong>”模型记忆：</p><table><thead><tr><th><strong>维度</strong></th><th><strong>表现</strong></th><th><strong>典型案例</strong></th></tr></thead><tbody><tr><td><strong>时间（Time）</strong></td><td>严重延期，错过市场窗口期</td><td>波音787梦想飞机延期3年交付</td></tr><tr><td><strong>质量（Quality）</strong></td><td>交付成果不符合需求（如软件bug频发）</td><td>英国医疗系统IT项目因漏洞被迫废弃</td></tr><tr><td><strong>成本（Cost）</strong></td><td>预算超支（如悉尼歌剧院超支14倍）</td><td>加州高铁项目预算从330亿涨至1000亿</td></tr><tr><td><strong>范围（Scope）</strong></td><td>需求蔓延（不断追加新功能）</td><td>某ERP系统因客户频繁改需求而烂尾</td></tr><tr><td><strong>沟通（Communication）</strong></td><td>团队协作混乱，信息不透明</td><td>NASA火星气候探测器因单位换算错误坠毁</td></tr><tr><td><strong>收益（ROI）</strong></td><td>项目成果无法产生预期价值（如共享单车过度投放导致亏损）</td><td>ofo小黄车资金链断裂</td></tr></tbody></table><p><strong>关键点</strong>：</p><ul><li>75%的IT项目失败与需求管理不当相关（Standish Group报告）。</li><li><strong>隐性失败</strong>：项目虽交付但用户拒绝使用（如政府强制推广的办公系统）。</li></ul><h2 id="二、项目管理（Project-Management）的定义与核心"><strong>二、项目管理（Project Management）的定义与核心</strong></h2><h3 id="1-定义"><strong>1. 定义</strong></h3><p>通过<strong>知识、工具、技术</strong>对项目全生命周期（启动→规划→执行→监控→收尾）进行系统化管理，以实现目标。</p><h3 id="2-项目管理五大过程组"><strong>2. 项目管理五大过程组</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">启动</span><br><span class="line">规划</span><br><span class="line">执行</span><br><span class="line">监控</span><br><span class="line">收尾</span><br></pre></td></tr></table></figure><h3 id="3-十大知识领域（PMBOK指南）"><strong>3. 十大知识领域（PMBOK指南）</strong></h3><ol><li><strong>范围管理</strong>：明确项目边界（如用WBS分解任务）。</li><li><strong>时间管理</strong>：制定甘特图/关键路径法（CPM）。</li><li><strong>成本管理</strong>：预算控制与挣值分析（EVA）。</li><li><strong>质量管理</strong>：PDCA循环（计划-执行-检查-改进）。</li><li><strong>风险管理</strong>：识别-评估-应对（见下文）。</li><li><strong>沟通管理</strong>：建立信息分发规则（如Scrum每日站会）。</li><li><strong>人力资源管理</strong>：团队组建与冲突解决。</li><li><strong>采购管理</strong>：供应商选择与合同管理。</li><li><strong>干系人管理</strong>：平衡各方利益（如客户、高管、团队）。</li><li><strong>整合管理</strong>：协调所有领域，确保整体成功。</li></ol><h2 id="三、项目风险维护（风险管理流程）"><strong>三、项目风险维护（风险管理流程）</strong></h2><h3 id="1-风险识别"><strong>1. 风险识别</strong></h3><ul><li>方法：<ul><li>头脑风暴</li><li>德尔菲法（专家匿名评估）</li><li>SWOT分析（优势、劣势、机会、威胁）</li></ul></li><li>常见风险类型：<ul><li><strong>技术风险</strong>：新技术不成熟（如AI项目算法失效）。</li><li><strong>市场风险</strong>：政策变化或竞争加剧（如教培行业“双减”）。</li><li><strong>运营风险</strong>：关键人员离职或供应链中断。</li></ul></li></ul><h3 id="2-风险评估"><strong>2. 风险评估</strong></h3><ul><li><p>风险矩阵：按发生概率和影响程度分级（高/中/低）。</p><table><thead><tr><th></th><th><strong>高影响</strong></th><th><strong>中影响</strong></th><th><strong>低影响</strong></th></tr></thead><tbody><tr><td><strong>高概率</strong></td><td>优先处理（如供应商违约）</td><td>制定预案（如工期延误）</td><td>监控（如轻微超支）</td></tr><tr><td><strong>低概率</strong></td><td>应急计划（如地震）</td><td>忽略或转移</td><td>忽略</td></tr></tbody></table></li></ul><h3 id="3-风险应对策略"><strong>3. 风险应对策略</strong></h3><table><thead><tr><th><strong>策略</strong></th><th><strong>适用场景</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>规避</strong></td><td>高风险且不可接受（如取消采用未经验证的技术）。</td><td>某银行暂停区块链支付试点项目</td></tr><tr><td><strong>转移</strong></td><td>通过外包/保险转移风险（如云计算数据安全交给AWS负责）。</td><td>购买项目延误保险</td></tr><tr><td><strong>减轻</strong></td><td>降低概率或影响（如增加测试环节减少软件缺陷）。</td><td>关键岗位设置AB角</td></tr><tr><td><strong>接受</strong></td><td>低影响或应对成本高于风险本身（如小型项目轻微超支）。</td><td>容忍10%以内的预算浮动</td></tr></tbody></table><h3 id="4-风险监控"><strong>4. 风险监控</strong></h3><ul><li><strong>工具</strong>：风险登记表（定期更新状态）。</li><li>方法：<ul><li>每月风险评审会</li><li>关键节点风险再评估（如产品发布前）</li></ul></li></ul><h2 id="四、本章小结与记忆技巧"><strong>四、本章小结与记忆技巧</strong></h2><h3 id="1-项目失败口诀"><strong>1. 项目失败口诀</strong></h3><p><strong>“时间不够，质量太差，预算花光，需求乱加，沟通翻车，收益白搭”</strong></p><h3 id="2-项目管理核心逻辑"><strong>2. 项目管理核心逻辑</strong></h3><ul><li><strong>目标</strong>：平衡<strong>时间、成本、质量</strong>铁三角。</li><li>关键动作：<ul><li><strong>规划阶段</strong>：明确范围、拆分任务（WBS）。</li><li><strong>执行阶段</strong>：紧盯关键路径，定期同步进展。</li></ul></li></ul><h3 id="3-风险管理四步法"><strong>3. 风险管理四步法</strong></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">识别风险</span><br><span class="line">评估等级</span><br><span class="line">选择策略</span><br><span class="line">监控更新</span><br></pre></td></tr></table></figure><p>通过系统化梳理，可掌握项目管理的核心框架与风险控制方法！</p></blockquote><blockquote><p>**数据、信息、知识、智慧（DIKW金字塔）**的层次关系如下：</p><h3 id="1-数据（Data）">1. <strong>数据（Data）</strong></h3><ul><li><strong>定义</strong>：原始的、未经处理的<strong>事实或符号</strong>，表现为数字、文字、图像等。</li><li>特点：<ul><li>本身无明确意义（如“25℃”、“销量1000件”）。</li><li>是信息的“原材料”，需经过处理才能产生价值。</li></ul></li></ul><h3 id="2-信息（Information）">2. <strong>信息（Information）</strong></h3><ul><li><strong>定义</strong>：<strong>经过处理的数据</strong>，具有上下文和目的，能回答“谁、什么、何时、何地”等问题。</li><li>特点：<ul><li>通过<strong>清洗、分类、计算</strong>等加工（如将“25℃”转化为“今日平均温度比昨日高5℃”）。</li><li>对接收者有用，能支持决策或行动。</li></ul></li><li><strong>举例</strong>：月度报表中的销售额对比分析。</li></ul><h3 id="3-知识（Knowledge）">3. <strong>知识（Knowledge）</strong></h3><ul><li><strong>定义</strong>：对信息的<strong>理解、关联和应用</strong>，能回答“如何、为什么”的问题。</li><li>特点：<ul><li>依赖经验、规则和模式（如“气温升高导致冰淇淋销量增加”）。</li><li>可指导行动（如制定夏季促销策略）。</li></ul></li><li><strong>形式</strong>：手册、流程、专家经验等。</li></ul><h3 id="4-智慧（Wisdom）">4. <strong>智慧（Wisdom）</strong></h3><ul><li><strong>定义</strong>：综合知识后的<strong>洞察与判断力</strong>，解决复杂问题或预测未来。</li><li>特点：<ul><li>结合伦理、价值观和长期视角（如“平衡利润与环保，选择可持续商业模式”）。</li><li>最高层级，依赖人类直觉和创造力。</li></ul></li></ul><h3 id="四者关系图示：">四者关系图示：</h3><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> 智慧（Wisdom）  </span><br><span class="line">↑  </span><br><span class="line">知识（Knowledge）  </span><br><span class="line">↑  </span><br><span class="line">信息（Information）  </span><br><span class="line">↑  </span><br><span class="line">数据（<span class="meta">Data</span>）  </span><br></pre></td></tr></table></figure></blockquote><blockquote><p>企业通过信息管理系统（MIS）实现的<strong>战略目标</strong>通常与提升竞争力、优化资源利用和适应环境变化相关。以下是《信息管理系统》中常见的战略目标分类及具体实现方式：</p><h3 id="1-运营效率提升">1. <strong>运营效率提升</strong></h3><ul><li><p><strong>目标</strong>：降低成本、缩短流程时间、提高生产率。</p></li><li><p>实现方式：</p><ul><li>部署<strong>ERP系统</strong>整合财务、供应链等流程，减少冗余。</li></ul></li><li><p>使用<strong>自动化工具</strong>（如RPA）替代人工操作。</p></li><li><p>通过**物联网（IoT）**实时监控设备效率。</p></li></ul><h3 id="2-竞争优势强化">2. <strong>竞争优势强化</strong></h3><ul><li><p><strong>目标</strong>：差异化产品或服务，抢占市场份额。</p></li><li><p>实现方式：</p><ul><li><strong>客户关系管理（CRM）系统</strong>分析用户行为，精准营销。</li></ul></li><li><p><strong>大数据分析</strong>预测市场趋势，快速响应需求（如Zara的快速时尚供应链）。</p></li><li><p><strong>电子商务平台</strong>拓展线上渠道（如亚马逊的个性化推荐）。</p></li></ul><h3 id="3-数据驱动决策">3. <strong>数据驱动决策</strong></h3><ul><li><p><strong>目标</strong>：减少决策不确定性，基于事实制定战略。</p></li><li><p>实现方式：</p><ul><li><strong>商业智能（BI）工具</strong>生成可视化报表（如Power BI）。</li></ul></li><li><p><strong>预测分析模型</strong>优化库存或定价（如沃尔玛的动态补货系统）。</p></li></ul><h3 id="4-风险管理与合规">4. <strong>风险管理与合规</strong></h3><ul><li><p><strong>目标</strong>：规避法律或财务风险，确保可持续经营。</p></li><li><p>实现方式：</p><ul><li><strong>区块链技术</strong>保证数据不可篡改（如金融交易审计）。</li></ul></li><li><p><strong>合规管理软件</strong>自动跟踪法规变化（如GDPR数据保护）。</p></li></ul><h3 id="5-创新与数字化转型">5. <strong>创新与数字化转型</strong></h3><ul><li><p><strong>目标</strong>：开拓新业务模式或市场。</p></li><li><p>实现方式：</p><ul><li><strong>云计算平台</strong>支持灵活创新（如Netflix的云端流媒体）。</li></ul></li><li><p>**人工智能（AI）**开发智能产品（如特斯拉的自动驾驶）。</p></li></ul><h3 id="6-客户与员工体验优化">6. <strong>客户与员工体验优化</strong></h3><ul><li><p><strong>目标</strong>：增强忠诚度，吸引人才。</p></li><li><p>实现方式：</p></li><li><p><strong>自助服务门户</strong>（如银行APP）提升客户满意度。</p></li><li><p><strong>协同工具</strong>（如Microsoft Teams）改善远程办公效率。</p></li></ul><h3 id="典型案例：">典型案例：</h3><ul><li><strong>亚马逊</strong>：通过AWS云计算和AI推荐系统实现<strong>成本领先+差异化</strong>。</li><li><strong>丰田</strong>：利用JIT（准时制生产）和MES系统达成<strong>零库存战略</strong>。</li></ul><p>这些战略目标的实现依赖于信息管理系统对<strong>数据→信息→知识→智慧</strong>的逐层转化，最终支撑企业长期发展。</p></blockquote><p>商务智能：是一个现代术语，包括一系列用来组织，分析和提供数据访问的数据与软件工具，以帮助管理者和其他企业用户做出更明智的决策。</p><p>以下四类主要的企业应用：即企业系统，供应链管理系统，客户关系管理系统和知识管理系统，都集成了一些系列相关的职能和业务流程，帮助企业增强组织的整体绩效。</p><p>企业系统  企业系统（enterprise system）也被称作企业资源计划 （enterprise resource planning,ERP），通过实施企业系统，将制造和生产，财务和会计，销售和市场，人力资源职能领域的业务流程整合到一个统一的软件系统中。</p><p>供应链管理系统 （supply chain management,SCM） 系统管理供应商的关系。</p><p>客户关系管理系统 （customer relationship mangement,CRM）系统管理客户的关系</p><p>知识管理系统 （Knowledge management systems,KMS）</p><p>电子商业：是指企业应用数字技术和互联网执行主要的业务流程。电子商业涵盖了电子商务。</p><p>电子商务：电子商业中设计通过互联网买卖商品以及服务的部分。</p><p>协作：是指与他人一起工作达到共同而明确的目标。</p><p>组织：是指一个稳定的，正式的社会结构。它能从环境中获取并处理资源，从而输出产品。</p><p>知识产权（intellectual property）：是指由个人或者公司创造出来的无形资产</p><blockquote><p>根据《信息管理系统》的分类，信息系统（Information Systems, IS）通常按照<strong>功能层级</strong>和<strong>应用领域</strong>划分为以下主要类型，每种类型服务于不同的组织需求和管理层次：</p><h3 id="1-按组织层次划分"><strong>1. 按组织层次划分</strong></h3><h4 id="（1）事务处理系统（TPS-Transaction-Processing-System）">（1）<strong>事务处理系统（TPS, Transaction Processing System）</strong></h4><ul><li><strong>功能</strong>：处理组织<strong>日常业务操作</strong>（如销售、支付、库存更新）。</li><li>特点：<ul><li>高频率、高速度、高可靠性。</li><li>支持结构化任务（如超市POS机、银行ATM交易）。</li></ul></li><li><strong>用户</strong>：基层操作人员。</li></ul><h4 id="（2）管理信息系统（MIS-Management-Information-System）">（2）<strong>管理信息系统（MIS, Management Information System）</strong></h4><ul><li><strong>功能</strong>：将TPS数据汇总为<strong>结构化报表</strong>，支持中层管理决策。</li><li>特点：<ul><li>定期生成销售报告、预算对比等（如月度部门绩效报表）。</li><li>关注“发生了什么”。</li></ul></li><li><strong>用户</strong>：中层管理者。</li></ul><h4 id="（3）决策支持系统（DSS-Decision-Support-System）">（3）<strong>决策支持系统（DSS, Decision Support System）</strong></h4><ul><li><strong>功能</strong>：通过模型和数据分析支持<strong>半结构化或非结构化决策</strong>。</li><li>特点：<ul><li>使用预测模型、假设分析（如供应链优化、投资风险评估）。</li><li>关注“如果…会怎样”。</li></ul></li><li><strong>用户</strong>：中高层管理者。</li></ul><h4 id="（4）高管支持系统（ESS-Executive-Support-System）">（4）<strong>高管支持系统（ESS, Executive Support System）</strong></h4><ul><li><strong>功能</strong>：为高层提供<strong>战略级综合信息</strong>（如市场趋势、竞争对手分析）。</li><li>特点：<ul><li>可视化仪表盘、关键绩效指标（KPI）监控。</li><li>关注“未来方向”。</li></ul></li><li><strong>用户</strong>：高层管理者（CEO、董事会）。</li></ul><h3 id="2-按专业领域划分"><strong>2. 按专业领域划分</strong></h3><h4 id="（5）客户关系管理系统（CRM-Customer-Relationship-Management）">（5）<strong>客户关系管理系统（CRM, Customer Relationship Management）</strong></h4><ul><li><strong>功能</strong>：管理客户交互、销售 pipeline、售后服务（如Salesforce）。</li></ul><h4 id="（6）供应链管理系统（SCM-Supply-Chain-Management）">（6）<strong>供应链管理系统（SCM, Supply Chain Management）</strong></h4><ul><li><strong>功能</strong>：优化采购、生产、物流（如SAP SCM）。</li></ul><h4 id="（7）企业资源计划系统（ERP-Enterprise-Resource-Planning）">（7）<strong>企业资源计划系统（ERP, Enterprise Resource Planning）</strong></h4><ul><li><strong>功能</strong>：整合财务、人力资源、制造等核心流程（如Oracle ERP）。</li></ul><h4 id="（8）知识管理系统（KMS-Knowledge-Management-System）">（8）<strong>知识管理系统（KMS, Knowledge Management System）</strong></h4><ul><li><strong>功能</strong>：存储和共享组织知识（如内部Wiki、专家系统）。</li></ul><h3 id="3-按技术类型划分"><strong>3. 按技术类型划分</strong></h3><h4 id="（9）办公自动化系统（OAS-Office-Automation-System）">（9）<strong>办公自动化系统（OAS, Office Automation System）</strong></h4><ul><li><strong>功能</strong>：支持文档处理、邮件、日程管理（如Microsoft 365）。</li></ul><h4 id="（10）地理信息系统（GIS-Geographic-Information-System）">（10）<strong>地理信息系统（GIS, Geographic Information System）</strong></h4><ul><li><strong>功能</strong>：空间数据分析和可视化（如ArcGIS）。</li></ul><h4 id="（11）人工智能系统（AI-based-Systems）">（11）<strong>人工智能系统（AI-based Systems）</strong></h4><ul><li><strong>功能</strong>：机器学习、自然语言处理（如ChatGPT、智能客服）。</li></ul><h3 id="4-新兴类型"><strong>4. 新兴类型</strong></h3><ul><li><strong>大数据分析系统</strong>：处理海量非结构化数据（如Hadoop平台）。</li><li><strong>物联网系统（IoT）</strong>：连接物理设备数据（如智能工厂传感器网络）。</li><li><strong>区块链系统</strong>：确保交易透明与安全（如供应链溯源）。</li></ul><h3 id="关键总结"><strong>关键总结</strong></h3><table><thead><tr><th><strong>类型</strong></th><th><strong>主要用户</strong></th><th><strong>核心功能</strong></th></tr></thead><tbody><tr><td>TPS</td><td>基层员工</td><td>日常事务处理</td></tr><tr><td>MIS/DSS</td><td>中层管理者</td><td>报表生成与决策支持</td></tr><tr><td>ESS</td><td>高层管理者</td><td>战略规划</td></tr><tr><td>ERP/CRM/SCM</td><td>跨部门</td><td>业务流程整合</td></tr></tbody></table><p>信息系统的选择需匹配组织层级和业务目标，现代企业往往通过<strong>系统集成</strong>（如ERP整合CRM和SCM）实现全面数字化管理。</p></blockquote><h3 id="波特竞争力模型与信息系统的作用"><strong>波特竞争力模型与信息系统的作用</strong></h3><p>迈克尔·波特的<strong>五力模型</strong>（Five Forces Model）分析了行业竞争的五大力量，而信息系统（IS）可以通过以下方式提升企业竞争力：</p><table><thead><tr><th><strong>竞争力维度</strong></th><th><strong>信息系统的赋能作用</strong></th></tr></thead><tbody><tr><td><strong>1. 现有竞争者 rivalry</strong></td><td>- <strong>CRM系统</strong>分析客户行为，实现精准营销，提高市场份额。- <strong>大数据分析</strong>优化定价策略（如动态定价）。</td></tr><tr><td><strong>2. 新进入者威胁 threat of new entrants</strong></td><td>- <strong>ERP系统</strong>整合资源，形成规模效应，提高进入壁垒。- <strong>专利管理系统</strong>保护核心技术。</td></tr><tr><td><strong>3. 替代品威胁 threat of substitutes</strong></td><td>- <strong>创新管理系统</strong>（如AI、IoT）开发差异化产品（如特斯拉的自动驾驶）。</td></tr><tr><td><strong>4. 供应商议价能力 bargaining power of suppliers</strong></td><td>- <strong>SCM系统</strong>实现供应链透明化，降低依赖（如丰田的JIT库存管理）。</td></tr><tr><td><strong>5. 客户议价能力 bargaining power of buyers</strong></td><td>- <strong>会员系统</strong>增强客户粘性（如亚马逊Prime）。- <strong>自助服务门户</strong>降低服务成本。</td></tr></tbody></table><h3 id="信息系统在价值链模型中的应用"><strong>信息系统在价值链模型中的应用</strong></h3><p>波特的价值链模型将企业活动分为<strong>主要活动</strong>（直接创造价值）和<strong>支持活动</strong>（辅助价值创造），信息系统可优化各个环节：</p><h4 id="1-主要活动"><strong>1. 主要活动</strong></h4><table><thead><tr><th><strong>环节</strong></th><th><strong>信息系统的优化作用</strong></th></tr></thead><tbody><tr><td>inbound logistics（进货物流）</td><td>- <strong>RFID和IoT</strong>实时跟踪库存，降低仓储成本。- <strong>供应商协同平台</strong>优化采购流程。</td></tr><tr><td>operations（生产）</td><td>- **MES（制造执行系统）**自动化生产调度（如富士康智能工厂）。</td></tr><tr><td>outbound logistics（出货物流）</td><td>- **TMS（运输管理系统）**优化配送路线（如顺丰智能物流）。</td></tr><tr><td>marketing &amp; sales（营销与销售）</td><td>- <strong>CRM系统</strong>个性化推荐（如Netflix的算法）。- <strong>社交媒体分析工具</strong>精准投放广告。</td></tr><tr><td>service（售后服务）</td><td>- **智能客服（Chatbot）**24/7响应客户问题（如阿里小蜜）。</td></tr></tbody></table><h4 id="2-支持活动"><strong>2. 支持活动</strong></h4><table><thead><tr><th><strong>环节</strong></th><th><strong>信息系统的优化作用</strong></th></tr></thead><tbody><tr><td>procurement（采购）</td><td>- <strong>电子采购系统</strong>自动化比价和供应商评估（如阿里巴巴1688）。</td></tr><tr><td>technology development（技术研发）</td><td>- **PLM（产品生命周期管理）**加速新品开发（如华为的协同研发平台）。</td></tr><tr><td>HRM（人力资源管理）</td><td>- <strong>e-HR系统</strong>自动化招聘、培训（如北森HR SaaS）。</td></tr><tr><td>firm infrastructure（企业基础设施）</td><td>- <strong>ERP系统</strong>整合财务、法务等后台流程，提升管理效率。</td></tr></tbody></table><h3 id="关键结论"><strong>关键结论</strong></h3><ol><li><strong>竞争力模型</strong>：信息系统通过<strong>数据驱动决策</strong>和<strong>流程自动化</strong>，帮助企业抵御五力威胁，尤其是差异化（如AI产品）和成本领先（如供应链优化）。</li><li><strong>价值链模型</strong>：信息系统渗透到价值链的每个环节，通过<strong>消除低效</strong>和<strong>增强协同</strong>，实现价值最大化。</li></ol><p><strong>案例</strong>：</p><ul><li><strong>沃尔玛</strong>通过全球供应链系统（SCM）和RFID技术，实现<strong>低成本战略</strong>。</li><li><strong>Zara</strong>利用快速响应信息系统（MIS+CRM），缩短设计到上架周期，应对<strong>时尚行业的竞争压力</strong>。</li></ul><p>掌握这两个模型，能系统化分析信息系统如何成为企业战略的核心工具。</p><h3 id="增强决策能力：决策类型与结构化程度"><strong>增强决策能力：决策类型与结构化程度</strong></h3><p>决策是企业管理的关键环节，信息系统（IS）通过提供数据支持和分析工具，帮助管理者做出更科学的决策。根据<strong>结构化程度</strong>，决策可分为三类：<strong>结构化决策、半结构化决策、非结构化决策</strong>。此外，<strong>大数据分析</strong>和**群体决策支持系统（GDSS）**也在现代决策中扮演重要角色。</p><h2 id="1-决策的三种类型（按结构化程度划分）"><strong>1. 决策的三种类型（按结构化程度划分）</strong></h2><h3 id="1-结构化决策（Structured-Decisions）"><strong>(1) 结构化决策（Structured Decisions）</strong></h3><ul><li><p><strong>定义</strong>：决策问题明确，有固定规则和流程，可通过算法或程序自动化处理。</p></li><li><p>特点：</p><ul><li>重复性高，可预测性强。</li><li>依赖明确的输入和逻辑（如数学公式、业务规则）。</li></ul></li><li><p>示例：</p><ul><li><strong>库存补货</strong>（ERP系统自动计算再订货点）。</li><li><strong>信用卡审批</strong>（基于信用评分的自动化决策）。</li><li><strong>工资计算</strong>（HR系统按固定规则生成薪资）。</li></ul></li><li><p>信息系统支持：</p><ul><li><strong>TPS（事务处理系统）</strong>、<strong>规则引擎</strong>（如银行风控系统）。</li></ul></li></ul><h3 id="2-半结构化决策（Semi-Structured-Decisions）"><strong>(2) 半结构化决策（Semi-Structured Decisions）</strong></h3><ul><li><p><strong>定义</strong>：部分问题可程序化，但仍需人工判断，决策规则不完全固定。</p></li><li><p>特点：</p><ul><li>既有结构化数据，也有非结构化因素（如市场趋势、管理者经验）。</li><li>通常需要<strong>数据分析+专家经验</strong>结合。</li></ul></li><li><p>示例：</p><ul><li><strong>市场营销预算分配</strong>（数据分析+市场经理经验）。</li><li><strong>供应链优化</strong>（历史数据+人工调整运输路线）。</li><li><strong>招聘决策</strong>（简历筛选+面试评估）。</li></ul></li><li><p>信息系统支持：</p><ul><li><strong>DSS（决策支持系统）</strong>、<strong>BI（商业智能）工具</strong>（如Tableau、Power BI）。</li></ul></li></ul><h3 id="3-非结构化决策（Unstructured-Decisions）"><strong>(3) 非结构化决策（Unstructured Decisions）</strong></h3><ul><li><p><strong>定义</strong>：问题复杂、无固定规则，依赖直觉、经验和创造力。</p></li><li><p>特点：</p><ul><li>不确定性高，难以用算法完全解决。</li><li>通常涉及战略层决策。</li></ul></li><li><p>示例：</p><ul><li><strong>企业并购决策</strong>（需评估市场、文化、法律等多因素）。</li><li><strong>新产品创新</strong>（如苹果开发iPhone时的战略选择）。</li><li><strong>危机管理</strong>（如疫情突发时的企业应对策略）。</li></ul></li><li><p>信息系统支持：</p><ul><li><strong>ESS（高管支持系统）</strong>、<strong>专家系统</strong>、<strong>AI预测模型</strong>。</li></ul></li></ul><h2 id="2-大数据分析如何增强决策能力？"><strong>2. 大数据分析如何增强决策能力？</strong></h2><p>大数据分析（Big Data Analytics）通过处理海量、多样化数据，提升决策的科学性，适用于<strong>半结构化和非结构化决策</strong>：</p><table><thead><tr><th><strong>大数据分析类型</strong></th><th><strong>应用场景</strong></th><th><strong>决策支持作用</strong></th></tr></thead><tbody><tr><td><strong>描述性分析</strong>（过去发生了什么？）</td><td>销售报告、KPI看板</td><td>提供历史数据，帮助理解现状。</td></tr><tr><td><strong>诊断性分析</strong>（为什么发生？）</td><td>客户流失分析</td><td>识别问题根源（如服务质量下降）。</td></tr><tr><td><strong>预测性分析</strong>（未来可能发生什么？）</td><td>需求预测、风险评估</td><td>基于机器学习预测趋势（如库存需求）。</td></tr><tr><td><strong>规范性分析</strong>（应该怎么做？）</td><td>动态定价、最优路径规划</td><td>提供决策建议（如Uber的实时定价算法）。</td></tr></tbody></table><p><strong>案例</strong>：</p><ul><li><strong>Netflix</strong> 利用用户行为大数据优化推荐算法（半结构化决策）。</li><li><strong>特斯拉</strong> 通过自动驾驶数据训练AI模型（非结构化决策）。</li></ul><h2 id="3-群体决策支持系统（GDSS-Group-Decision-Support-System）"><strong>3. 群体决策支持系统（GDSS, Group Decision Support System）</strong></h2><ul><li><p><strong>定义</strong>：帮助团队协作决策的信息系统，结合<strong>DSS+协同工具</strong>。</p></li><li><p>功能：</p><ul><li>支持头脑风暴、投票、共识达成（如在线会议系统+数据分析）。</li><li>适用于<strong>复杂、多利益相关者</strong>的决策（如战略规划、政策制定）。</li></ul></li><li><p>示例：</p><ul><li><strong>Microsoft Teams + Power BI</strong>（团队数据协作）。</li></ul></li><li><p><strong>专家德尔菲法（Delphi Method）</strong>（匿名多轮决策）。</p></li></ul><h2 id="4-关键总结"><strong>4. 关键总结</strong></h2><table><thead><tr><th><strong>决策类型</strong></th><th><strong>结构化程度</strong></th><th><strong>适用信息系统</strong></th><th><strong>示例</strong></th></tr></thead><tbody><tr><td><strong>结构化决策</strong></td><td>高（规则明确）</td><td>TPS、规则引擎</td><td>自动库存补货</td></tr><tr><td><strong>半结构化决策</strong></td><td>中（部分规则）</td><td>DSS、BI工具</td><td>市场营销预算分配</td></tr><tr><td><strong>非结构化决策</strong></td><td>低（依赖经验）</td><td>ESS、AI模型、专家系统</td><td>企业并购决策</td></tr></tbody></table><p><strong>增强决策的关键技术</strong>：</p><ul><li><strong>大数据分析</strong> → 提供数据洞察。</li><li><strong>GDSS</strong> → 提升团队决策效率。</li><li><strong>AI与机器学习</strong> → 处理非结构化问题（如自然语言处理、图像识别）。</li></ul><p>通过合理运用信息系统，企业可以在不同层级的决策中提高<strong>速度、准确性和战略适应性</strong>。</p><h3 id="知识管理（Knowledge-Management-KM）"><strong>知识管理（Knowledge Management, KM）</strong></h3><p><strong>定义</strong>：知识管理是指组织通过系统化的方法，对<strong>内部知识</strong>（如员工经验、最佳实践）和<strong>外部知识</strong>（如市场情报、客户反馈）进行<strong>获取、存储、共享、应用和创新</strong>，以提高决策质量、促进创新和增强竞争力。</p><h4 id="知识管理的核心要素"><strong>知识管理的核心要素</strong></h4><ol><li><strong>显性知识（Explicit Knowledge）</strong><ul><li>可编码、易传播的知识，如文档、报告、数据库、操作手册。</li><li><strong>管理工具</strong>：知识库（Wiki）、文档管理系统（如SharePoint）。</li></ul></li><li><strong>隐性知识（Tacit Knowledge）</strong><ul><li>难以文字化的个人经验、直觉或技能，如专家经验、企业文化。</li><li><strong>管理方法</strong>：师徒制、社区实践（CoP）、案例讨论。</li></ul></li><li><strong>知识管理流程</strong><ul><li><strong>获取</strong>（从内部/外部收集知识）→ <strong>存储</strong>（结构化归档）→ <strong>共享</strong>（协作平台）→ <strong>应用</strong>（解决问题）→ <strong>创新</strong>（生成新知识）。</li></ul></li></ol><h4 id="知识管理系统的应用"><strong>知识管理系统的应用</strong></h4><ul><li><strong>企业Wiki</strong>（如Confluence）：存储标准化流程。</li><li><strong>专家系统</strong>：将专家经验转化为可复用的规则（如医疗诊断AI）。</li><li><strong>客户知识库</strong>：整合客户反馈改进产品（如Zendesk）。</li></ul><p><strong>案例</strong>：</p><ul><li><strong>丰田</strong>通过“精益制造”社区共享生产经验，持续优化流程。</li><li><strong>麦肯锡</strong>建立全球知识库，供顾问快速调用行业分析模板。</li></ul><h3 id="智能技术（Intelligent-Technologies）"><strong>智能技术（Intelligent Technologies）</strong></h3><p><strong>定义</strong>：指能模拟人类认知能力（如学习、推理、感知）的技术，通过<strong>数据驱动</strong>和<strong>算法自动化</strong>提升决策效率。核心包括：</p><h4 id="1-人工智能（AI）"><strong>1. 人工智能（AI）</strong></h4><ul><li><strong>机器学习（ML）</strong>：从数据中自动发现规律（如推荐系统、欺诈检测）。</li><li><strong>自然语言处理（NLP）</strong>：理解并生成人类语言（如ChatGPT、智能客服）。</li><li><strong>计算机视觉</strong>：图像/视频识别（如人脸识别、自动驾驶）。</li></ul><h4 id="2-大数据分析（Big-Data-Analytics）"><strong>2. 大数据分析（Big Data Analytics）</strong></h4><ul><li>处理海量、多源数据（如社交媒体、传感器数据），提供实时洞察。</li><li><strong>应用</strong>：预测性维护（工业）、精准营销（零售）。</li></ul><h4 id="3-物联网（IoT）"><strong>3. 物联网（IoT）</strong></h4><ul><li>通过联网设备采集物理世界数据（如智能工厂的设备监控）。</li><li><strong>应用</strong>：智慧城市、供应链实时追踪。</li></ul><h4 id="4-区块链（Blockchain）"><strong>4. 区块链（Blockchain）</strong></h4><ul><li>分布式账本技术，确保数据透明与不可篡改。</li><li><strong>应用</strong>：供应链溯源、智能合约。</li></ul><h4 id="5-机器人流程自动化（RPA）"><strong>5. 机器人流程自动化（RPA）</strong></h4><ul><li>自动化重复性规则任务（如财务对账、数据录入）。</li></ul><h3 id="知识管理与智能技术的关系"><strong>知识管理与智能技术的关系</strong></h3><table><thead><tr><th><strong>维度</strong></th><th><strong>知识管理（KM）</strong></th><th><strong>智能技术</strong></th></tr></thead><tbody><tr><td><strong>核心目标</strong></td><td>知识的沉淀与共享</td><td>数据的智能处理与决策自动化</td></tr><tr><td><strong>技术依赖</strong></td><td>知识库、协作工具</td><td>AI、大数据、IoT、区块链</td></tr><tr><td><strong>典型应用</strong></td><td>企业Wiki、专家社区</td><td>智能推荐、预测分析、自动化流程</td></tr><tr><td><strong>结合场景</strong></td><td>用AI分析知识库，自动回答员工问题</td><td>用区块链确保知识共享的可信度</td></tr></tbody></table><p><strong>案例</strong>：</p><ul><li><strong>IBM Watson</strong>：AI系统分析医学文献（显性知识）辅助医生诊断（隐性知识）。</li><li><strong>亚马逊</strong>：用机器学习优化库存（智能技术），同时通过内部知识库培训员工（知识管理）。</li></ul><h3 id="总结"><strong>总结</strong></h3><ul><li><strong>知识管理</strong>聚焦“人的经验”和“组织记忆”，解决“如何让知识不流失”；</li><li><strong>智能技术</strong>聚焦“机器智能”，解决“如何让数据变决策”。</li><li><strong>未来趋势</strong>：两者融合，如AI驱动的知识推荐系统、自动化知识挖掘工具。</li></ul><h3 id="重点学习：第十三章-建设信息系统">重点学习：第十三章-建设信息系统</h3><h3 id="一、信息系统建设与组织变革的关系"><strong>一、信息系统建设与组织变革的关系</strong></h3><p><strong>核心逻辑</strong>：新系统的建设本质是推动组织变革的工具，变革深度与风险/收益成正比。</p><ol><li><strong>四种变革类型</strong>（由浅入深）：<ul><li><strong>自动化</strong>（最基础）：用技术替代人工（如会计软件替代手工记账）。</li><li><strong>程序合理化</strong>：优化现有流程（如简化审批层级）。</li><li><strong>业务流程再造（BPR）</strong>：彻底重新设计流程（如亚马逊的自动化仓储系统）。</li><li><strong>范式转移</strong>：改变业务模式（如Netflix从DVD租赁转向流媒体）。 <em>注</em>：后两者风险高但可能带来战略级收益。</li></ul></li><li><strong>管理工具</strong>：<ul><li><strong>业务流程管理（BPM）</strong>：持续优化流程，支持TQM、六西格玛等渐进式改进。</li></ul></li></ol><h3 id="二、系统开发的核心活动（生命周期）"><strong>二、系统开发的核心活动（生命周期）</strong></h3><p><strong>逻辑顺序</strong>：从问题分析到系统落地维护的完整流程。</p><ol><li><strong>系统分析</strong>：识别问题与需求（如调研现有系统的瓶颈）。</li><li><strong>系统设计</strong>：技术方案设计（如数据库结构、界面布局）。</li><li><strong>编程</strong>：代码实现。</li><li><strong>测试</strong>：验证功能与稳定性。</li><li><strong>切换</strong>：部署方式（直接切换、并行运行、试点等）。</li><li><strong>运行与维护</strong>：持续优化与故障修复。</li></ol><h3 id="三、系统建模与设计方法"><strong>三、系统建模与设计方法</strong></h3><p><strong>两类主流方法</strong>：</p><ol><li><strong>结构化方法</strong>：<ul><li><strong>特点</strong>：分离处理逻辑与数据（如数据流图描述流程，结构表描述模块）。</li><li><strong>适用场景</strong>：流程清晰、需求稳定的系统（如银行交易系统）。</li></ul></li><li><strong>面向对象方法</strong>：<ul><li><strong>特点</strong>：以“对象”为核心（如“订单”对象包含数据和方法）。</li><li><strong>工具</strong>：UML图（类图、用例图等）。</li><li><strong>优势</strong>：更灵活，适合复杂系统（如电商平台）。</li></ul></li></ol><h3 id="四、系统建设方法对比"><strong>四、系统建设方法对比</strong></h3><p><strong>逻辑维度</strong>：根据项目规模、灵活性需求、成本选择方法。</p><table><thead><tr><th><strong>方法</strong></th><th><strong>特点</strong></th><th><strong>适用场景</strong></th><th><strong>风险</strong></th></tr></thead><tbody><tr><td><strong>系统生命周期法</strong></td><td>严格分阶段，文档齐全，成本高</td><td>大型复杂项目（如ERP）</td><td>灵活性差，周期长</td></tr><tr><td><strong>原型法</strong></td><td>快速迭代，用户参与</td><td>需求不明确（如创新产品）</td><td>原型可能被误用为最终系统</td></tr><tr><td><strong>软件包开发</strong></td><td>直接购买现成系统（如SAP）</td><td>通用需求（如HR系统）</td><td>定制化成本高</td></tr><tr><td><strong>终端用户开发</strong></td><td>用户自主开发（如Excel宏）</td><td>小型部门级工具</td><td>缺乏标准化，难维护</td></tr><tr><td><strong>外包</strong></td><td>委托第三方开发</td><td>缺乏技术团队或降低成本</td><td>控制权丧失，隐性成本（如沟通问题）</td></tr></tbody></table><h3 id="五、数字化时代的新方法"><strong>五、数字化时代的新方法</strong></h3><p><strong>逻辑演进</strong>：响应快速变化的需求，提升开发效率。</p><ol><li>快速开发技术：<ul><li><strong>RAD/JAD</strong>：通过协作工具加速需求收集与设计。</li><li><strong>敏捷开发</strong>：小周期迭代（如Scrum），适应需求变化。</li></ul></li><li>技术驱动方法：<ul><li><strong>组件化开发</strong>：复用现有模块（如支付接口集成）。</li><li><strong>DevOps</strong>：开发与运维协同，实现持续交付。</li></ul></li><li>新兴场景适配：<ul><li><strong>移动应用开发</strong>：专注简洁性与小屏幕优化。</li><li><strong>Web服务</strong>：标准化接口整合异构系统（如API调用）。</li></ul></li></ol><h3 id="记忆技巧-6"><strong>记忆技巧</strong></h3><ol><li><strong>变革四阶段</strong>：按“自动化→合理化→再造→范式”记忆，对应“从易到难，风险递增”。</li><li><strong>开发活动</strong>：按“分析→设计→编程→测试→切换→维护”顺序联想“盖房子”流程。</li><li><strong>方法对比</strong>：用表格对比“成本、灵活性、适用场景”三个维度。</li><li><strong>数字化方法</strong>：聚焦“速度”（敏捷、RAD）和“复用”（组件化、Web服务）。</li></ol>]]></content>
    
    
    <summary type="html">管理信息系统期末复习</summary>
    
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>HashMap</title>
    <link href="https://yjyrichard.github.io/posts/3d614825.html"/>
    <id>https://yjyrichard.github.io/posts/3d614825.html</id>
    <published>2025-06-08T06:27:13.222Z</published>
    <updated>2025-06-08T07:00:41.805Z</updated>
    
    <content type="html"><![CDATA[<h1>HashMap集合</h1><h2 id="1-HashMap集合简介">1.HashMap集合简介</h2><p>​HashMap基于哈希表的Map接口实现，是以key-value存储形式存在，即主要用来存放键值对。HashMap 的实现不是同步的，这意味着它不是线程安全的。它的key、value都可以为null。此外，HashMap中的映射不是有序的。</p><p>​JDK1.8 之前 HashMap 由 数组+链表 组成的，数组是 HashMap 的主体，链表则是主要为了解决哈希冲突**(两个对象调用的hashCode方法计算的哈希码值一致导致计算的数组索引值相同)**而存在的（“拉链法”解决冲突）.JDK1.8 以后在解决哈希冲突时有了较大的变化，<strong>当链表长度大于阈值（或者红黑树的边界值，默认为 8）并且当前数组的长度大于64时，此时此索引位置上的所有数据改为使用红黑树存储。</strong></p><p>补充：将链表转换成红黑树前会判断，即使阈值大于8，但是数组长度小于64，此时并不会将链表变为红黑树。而是选择进行数组扩容。</p><p>这样做的目的是因为数组比较小，尽量避开红黑树结构，这种情况下变为红黑树结构，反而会降低效率，因为红黑树需要进行左旋，右旋，变色这些操作来保持平衡 。同时数组长度小于64时，搜索时间相对要快些。所以综上所述为了提高性能和减少搜索时间，底层在阈值大于8并且数组长度大于64时，链表才转换为红黑树。具体可以参考 <code>treeifyBin</code>方法。</p><p>当然虽然增了红黑树作为底层数据结构，结构变得复杂了，但是阈值大于8并且数组长度大于64时，链表转换为红黑树时，效率也变的更高效。</p><p>小结：</p><p>特点：</p><p>1.存取无序的</p><p>2.键和值位置都可以是null，但是键位置只能是一个null</p><p>3.键位置是唯一的，底层的数据结构控制键的</p><p>4.jdk1.8前数据结构是：链表 + 数组  jdk1.8之后是 ： 链表 + 数组  + 红黑树</p><p>5.阈值(边界值) &gt; 8 并且数组长度大于64，才将链表转换为红黑树，变为红黑树的目的是为了高效的查询。</p><h2 id="2-HashMap集合底层的数据结构">2.HashMap集合底层的数据结构</h2><h3 id="2-1数据结构概念">2.1数据结构概念</h3><p><a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE/5947370">数据</a>结构是<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA/140338">计算机</a>存储、组织<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE">数据</a>的方式。数据结构是指相互之间存在一种或多种特定关系的<a href="https://baike.baidu.com/item/%E6%95%B0%E6%8D%AE%E5%85%83%E7%B4%A0/715313">数据元素</a>的集合。通常情况下，精心选择的数据结构可以带来更高的运行或者存储<a href="https://baike.baidu.com/item/%E6%95%88%E7%8E%87/868847">效率</a>。数据结构往往同高效的检索<a href="https://baike.baidu.com/item/%E7%AE%97%E6%B3%95/209025">算法</a>和<a href="https://baike.baidu.com/item/%E7%B4%A2%E5%BC%95/5716853">索引</a>技术有关。</p><p>数据结构：就是存储数据的一种方式。ArrayList LinkedList</p><p>在JDK1.8 之前 HashMap 由 <strong>数组+链表</strong> 数据结构组成的。</p><p>在JDK1.8 之后 HashMap 由 <strong>数组+链表 +红黑树</strong>数据结构组成的。</p><h3 id="2-2HashMap底层的数据结构存储数据的过程">2.2HashMap底层的数据结构存储数据的过程</h3><p>存储过程如下所示：</p><p>使用的代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;String, Integer&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;刘德华&quot;</span>, <span class="number">53</span>);</span><br><span class="line">        map.put(<span class="string">&quot;柳岩&quot;</span>, <span class="number">35</span>);</span><br><span class="line">        map.put(<span class="string">&quot;张学友&quot;</span>, <span class="number">55</span>);</span><br><span class="line">        map.put(<span class="string">&quot;郭富城&quot;</span>, <span class="number">52</span>);</span><br><span class="line">        map.put(<span class="string">&quot;黎明&quot;</span>, <span class="number">51</span>);</span><br><span class="line">        map.put(<span class="string">&quot;林青霞&quot;</span>, <span class="number">55</span>);</span><br><span class="line">        map.put(<span class="string">&quot;刘德华&quot;</span>, <span class="number">50</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191114205953147.png" alt=""></p><p>说明：</p><p>1.面试题：HashMap中hash函数是怎么实现的？还有哪些hash函数的实现方式？</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对于key的hashCode做<span class="built_in">hash</span>操作，无符号右移<span class="number">16</span>位然后做异或运算。</span><br><span class="line">还有平方取中法，伪随机数法和取余数法。这三种效率都比较低。而无符号右移<span class="number">16</span>位异或运算效率是最高的。至于底层是如何计算的我们下面看源码时给大家讲解。</span><br></pre></td></tr></table></figure><p>2.面试题：当两个对象的hashCode相等时会怎么样？</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">会产生哈希碰撞，若<span class="built_in">key</span>值内容相同则替换旧的value.不然连接到链表后面，链表长度超过阈值<span class="number">8</span>就转换为红黑树存储。</span><br></pre></td></tr></table></figure><p>3.面试题：何时发生哈希碰撞和什么是哈希碰撞,如何解决哈希碰撞？</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">只要两个元素的<span class="built_in">key</span>计算的哈希码值相同就会发生哈希碰撞。jdk8前使用链表解决哈希碰撞。jdk8之后使用链表+红黑树解决哈希碰撞。</span><br></pre></td></tr></table></figure><p>4.面试题：如果两个键的hashcode相同，如何存储键值对？</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hashcode相同，通过<span class="keyword">equals</span>比较内容是否相同。</span><br><span class="line">相同：则新的value覆盖之前的value</span><br><span class="line">不相同：则将新的键值对添加到哈希表中</span><br></pre></td></tr></table></figure><p>5.在不断的添加数据的过程中，会涉及到扩容问题，当超出临界值(且要存放的位置非空)时，扩容。默认的扩容方式：扩容为原来容量的2倍，并将原有的数据复制过来。</p><p>6.通过上述描述，当位于一个链表中的元素较多，即hash值相等但是内容不相等的元素较多时，通过key值依次查找的效率较低。而<strong>JDK1.8</strong>中，哈希表存储采用数组+链表+红黑树实现，当链表长度(阀值)超过 8 时且当前数组的长度 &gt; 64时，将链表转换为红黑树，这样大大减少了查找时间。jdk8在哈希表中引入红黑树的原因只是为了查找效率更高。</p><p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的。如下图所示。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt=""></p><p><strong>但是这样的话问题来了，传统hashMap的缺点，1.8为什么引入红黑树？这样结构的话不是更麻烦了吗，为何阈值大于8换成红黑树？</strong></p><p>JDK 1.8 以前 HashMap 的实现是 数组+链表，即使哈希函数取得再好，也很难达到元素百分百均匀分布。当 HashMap 中有大量的元素都存放到同一个桶中时，这个桶下有一条长长的链表，这个时候 HashMap 就相当于一个单链表，假如单链表有 n 个元素，遍历的时间复杂度就是 O(n)，完全失去了它的优势。针对这种情况，JDK 1.8 中引入了 红黑树（查找时间复杂度为 O(logn)）来优化这个问题。 当链表长度很小的时候，即使遍历，速度也非常快，但是当链表长度不断变长，肯定会对查询性能有一定的影响，所以才需要转成树。</p><p>至于为什么阈值是8，我想，去源码中找寻答案应该是最可靠的途径。 下面我们在分析源码的时候会介绍。</p><p><strong>7.总结：</strong></p><p>上述我们大概阐述了HashMap底层存储数据的方式。为了方便大家更好的理解，我们结合一个存储流程图来进一步说明一下：(jdk8存储过程)</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/1.png" alt=""></p><p>说明：</p><p>1.size表示 HashMap中K-V的实时数量 ， 注意这个不等于数组的长度 。</p><p>2.threshold( 临界值)  =capacity(容量) * loadFactor( 加载因子 )。这个值是当前已占用数组长度的最大值。size超过这个临界值就重新resize(扩容)，扩容后的 HashMap 容量是之前容量的两倍 。</p><h2 id="3-HashMap继承关系">3.HashMap继承关系</h2><p>HashMap继承关系如下图所示：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/1.bmp" alt=""></p><p>说明：</p><ul><li>Cloneable 空接口，表示可以克隆。 创建并返回HashMap对象的一个副本。</li><li>Serializable 序列化接口。属于标记性接口。HashMap对象可以被序列化和反序列化。</li><li>AbstractMap 父类提供了Map实现接口。以最大限度地减少实现此接口所需的工作。</li></ul><p>补充：通过上述继承关系我们发现一个很奇怪的现象， 就是HashMap已经继承了AbstractMap而AbstractMap类实现了Map接口，那为什么HashMap还要在实现Map接口呢？同样在ArrayList中LinkedList中都是这种结构。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">据 java 集合框架的创始人Josh Bloch描述，这样的写法是一个失误。在java集合框架中，类似这样的写法很多，最开始写java集合框架的时候，他认为这样写，在某些地方可能是有价值的，直到他意识到错了。显然的，JDK的维护者，后来不认为这个小小的失误值得去修改，所以就这样存在下来了。</span><br></pre></td></tr></table></figure><h2 id="4-HashMap集合类的成员">4.HashMap集合类的成员</h2><h3 id="4-1成员变量">4.1成员变量</h3><p>1.序列化版本号</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">362498820763181265L</span>;</span><br></pre></td></tr></table></figure><p>2.集合的初始化容量( <strong>必须是二的n次幂</strong> )</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//默认的初始容量是16 -- 1&lt;&lt;4相当于1*2的4次方---1*16</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT_INITIAL_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">4</span>;   </span><br></pre></td></tr></table></figure><p>问题： <strong>为什么必须是2的n次幂？如果输入值不是2的幂比如10会怎么样？</strong></p><p>HashMap构造方法还可以指定集合的初始化容量大小：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HashMap(<span class="type">int</span> initialCapacity) 构造一个带指定初始容量和默认加载因子 (<span class="number">0.75</span>) 的空 HashMap。</span><br></pre></td></tr></table></figure><p>根据上述讲解我们已经知道，当向HashMap中添加一个元素的时候，需要根据key的hash值，去确定其在数组中的具体位置。 HashMap为了存取高效，要尽量较少碰撞，就是要尽量把数据分配均匀，每个链表长度大致相同，这个实现就在把数据存到哪个链表中的算法。</p><p>这个算法实际就是取模，hash%length，计算机中直接求余效率不如位移运算(这点上述已经讲解)。所以源码中做了优化,使用 hash&amp;(length-1)，而实际上hash%length等于hash&amp;(length-1)的前提是length是2的n次幂。</p><p>为什么这样能均匀分布减少碰撞呢？2的n次方实际就是1后面n个0，2的n次方-1  实际就是n个1；</p><p>举例：</p><p><strong>说明：按位与运算：相同的二进制数位上，都是1的时候，结果为1，否则为零。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例如长度为<span class="number">8</span>时候，<span class="number">3</span>&amp;(<span class="number">8</span>-<span class="number">1</span>)=<span class="number">3</span>  <span class="number">2</span>&amp;(<span class="number">8</span>-<span class="number">1</span>)=<span class="number">2</span> ，不同位置上，不碰撞；</span><br><span class="line">例如长度length为<span class="number">8</span>时候，<span class="number">8</span>是<span class="number">2</span>的<span class="number">3</span>次幂。二进制是：<span class="number">1000</span></span><br><span class="line">length-<span class="number">1</span> 二进制运算：</span><br><span class="line"><span class="number">1000</span></span><br><span class="line">-   <span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line">     <span class="number">111</span></span><br><span class="line">如下所示：</span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span>   &amp;(<span class="number">8</span>    - <span class="number">1</span>)=<span class="number">3</span>  </span><br><span class="line"><span class="number">00000011</span>  <span class="number">3</span> hash</span><br><span class="line">&amp;   <span class="number">00000111</span>  <span class="number">7</span> length-<span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line"><span class="number">00000011</span>-----》<span class="number">3</span> 数组下标</span><br><span class="line"></span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span> &amp;  (<span class="number">8</span> -    <span class="number">1</span>) = <span class="number">2</span>  </span><br><span class="line"><span class="number">00000010</span>  <span class="number">2</span> hash</span><br><span class="line">&amp;   <span class="number">00000111</span>  <span class="number">7</span> length-<span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line"><span class="number">00000010</span>-----》<span class="number">2</span>  数组下标</span><br><span class="line">说明：上述计算结果是不同位置上，不碰撞；</span><br></pre></td></tr></table></figure><p>如果数组长度不是2的n次幂</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">例如长度为<span class="number">9</span>时候，<span class="number">3</span>&amp;(<span class="number">9</span>-<span class="number">1</span>)=<span class="number">0</span>  <span class="number">2</span>&amp;(<span class="number">9</span>-<span class="number">1</span>)=<span class="number">0</span> ，都在<span class="number">0</span>上，碰撞了；</span><br><span class="line">例如长度length为<span class="number">9</span>时候，<span class="number">9</span>不是<span class="number">2</span>的n次幂。二进制是：<span class="number">00001001</span></span><br><span class="line">length-<span class="number">1</span> 二进制运算：</span><br><span class="line"><span class="number">1001</span></span><br><span class="line">-   <span class="number">1</span></span><br><span class="line">---------------------</span><br><span class="line">    <span class="number">1000</span></span><br><span class="line">如下所示：</span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">3</span>   &amp;(<span class="number">9</span>    - <span class="number">1</span>)=<span class="number">0</span>  </span><br><span class="line"><span class="number">00000011</span>  <span class="number">3</span> hash</span><br><span class="line">&amp;   <span class="number">00001000</span>  <span class="number">8</span> length-<span class="number">1</span> </span><br><span class="line">---------------------</span><br><span class="line"><span class="number">00000000</span>-----》<span class="number">0</span>  数组下标</span><br><span class="line"></span><br><span class="line">hash&amp;(length-<span class="number">1</span>)</span><br><span class="line"><span class="number">2</span> &amp;  (<span class="number">9</span> -    <span class="number">1</span>) = <span class="number">2</span>  </span><br><span class="line"><span class="number">00000010</span> <span class="number">2</span> hash</span><br><span class="line">&amp;   <span class="number">00001000</span> <span class="number">8</span> length-<span class="number">1</span> </span><br><span class="line">---------------------</span><br><span class="line"><span class="number">00000000</span>-----》<span class="number">0</span>  数组下标</span><br><span class="line">说明：上述计算结果都在<span class="number">0</span>上，碰撞了；</span><br></pre></td></tr></table></figure><p><strong>注意： 当然如果不考虑效率直接求余即可（就不需要要求长度必须是2的n次方了）</strong></p><p>小结：</p><p>​1.由上面可以看出，当我们根据key的hash确定其在数组的位置时，如果n为2的幂次方，可以保证数据的均匀插入，如果n不是2的幂次方，可能数组的一些位置永远不会插入数据，浪费数组的空间，加大hash冲突。</p><p>​    2.另一方面，一般我们可能会想通过 % 求余来确定位置，这样也可以，只不过性能不如 &amp; 运算。而且当n是2的幂次方时：hash &amp; (length - 1) == hash % length</p><p>​3.因此，HashMap 容量为2次幂的原因，就是为了数据的的均匀分布，减少hash冲突，毕竟hash冲突越大，代表数组中一个链的长度越大，这样的话会降低hashmap的性能</p><p>​<strong>4.如果创建HashMap对象时，输入的数组长度是10，不是2的幂，HashMap通过一通位移运算和或运算得到的肯定是2的幂次数，并且是离那个数最近的数字。</strong></p><p>源代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建HashMap集合的对象，指定数组长度是10，不是2的幂</span></span><br><span class="line"><span class="type">HashMap</span> <span class="variable">hashMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;<span class="comment">//initialCapacity=10</span></span><br><span class="line">   <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;<span class="comment">//initialCapacity=10</span></span><br><span class="line">     <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">    <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);<span class="comment">//initialCapacity=10</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;<span class="comment">//int cap = 10</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>由此可以看到，当在实例化HashMap实例时，如果给定了initialCapacity(假设是10)，由于HashMap的capacity必须都是2的幂，因此这个方法用于找到大于等于initialCapacity(假设是10)的最小的2的幂（initialCapacity如果就是2的幂，则返回的还是这个数）。<br>下面分析这个算法：<br>1)、首先，为什么要对cap做减1操作。int n = cap - 1;<br>这是为了防止，cap已经是2的幂。如果cap已经是2的幂， 又没有执行这个减1操作，则执行完后面的几条无符号右移操作之后，返回的capacity将是这个cap的2倍。如果不懂，要看完后面的几个无符号右移之后再回来看看。<br>下面看看这几个无符号右移操作：<br>2）、如果n这时为0了（经过了cap-1之后），则经过后面的几次无符号右移依然是0，最后返回的capacity是1（最后有个n+1的操作）。<br>这里只讨论n不等于0的情况。</p><p>3）、注意：<strong>|（按位或运算）：运算规则：相同的二进制数位上，都是0的时候，结果为0，否则为1。</strong></p><p>​ <strong>第一次右移</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;<span class="comment">//cap=10  n=9</span></span><br><span class="line">n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001001</span> <span class="comment">//9</span></span><br><span class="line">|</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000100</span> <span class="comment">//9右移之后变为4</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span> <span class="comment">//按位异或之后是13</span></span><br></pre></td></tr></table></figure><p>由于n不等于0，则n的二进制表示中总会有一bit为1，这时考虑最高位的1。通过无符号右移1位，则将最高位的1右移了1位，再做或操作，使得n的二进制表示中与最高位的1紧邻的右边一位也为1，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span></span><br></pre></td></tr></table></figure><p><strong>第二次右移</strong> ：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> n |= n &gt;&gt;&gt; <span class="number">2</span>;<span class="comment">//n通过第一次右移变为了：n=13</span></span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001101</span>  <span class="comment">// 13</span></span><br><span class="line">|</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000011</span>  <span class="comment">//13右移之后变为3</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span> <span class="comment">//按位异或之后是15</span></span><br></pre></td></tr></table></figure><p>注意，这个n已经经过了<code>n |= n &gt;&gt;&gt; 1;</code> 操作。假设此时n为00000000 00000000 00000000 00001101 ，则n无符号右移两位，会将最高位两个连续的1右移两位，然后再与原来的n做或操作，这样n的二进制表示的高位中会有4个连续的1。如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span> <span class="comment">//按位异或之后是15</span></span><br></pre></td></tr></table></figure><p><strong>第三次右移</strong> :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n |= n &gt;&gt;&gt; <span class="number">4</span>;<span class="comment">//n通过第一、二次右移变为了：n=15</span></span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span>  <span class="comment">// 15</span></span><br><span class="line">|</span><br><span class="line">    <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span>  <span class="comment">//15右移之后变为0</span></span><br><span class="line">-------------------------------------------------</span><br><span class="line"><span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00000000</span> <span class="number">00001111</span> <span class="comment">//按位异或之后是15</span></span><br></pre></td></tr></table></figure><p>这次把已经有的高位中的连续的4个1，右移4位，再做或操作，这样n的二进制表示的高位中正常会有8个连续的1。如00001111 1111xxxxxx 。<br>以此类推<br>注意，容量最大也就是32bit的正数，因此最后n |= n &gt;&gt;&gt; 16; ，最多也就32个1（但是这已经是负数了。在执行tableSizeFor之前，对initialCapacity做了判断，如果大于MAXIMUM_CAPACITY(2 ^ 30)，则取MAXIMUM_CAPACITY。如果等于MAXIMUM_CAPACITY(2 ^ 30)，会执行移位操作。所以这里面的移位操作之后，最大30个1，不会大于等于MAXIMUM_CAPACITY。30个1，加1之后得2 ^ 30） 。<br>请看下面的一个完整例子：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191115151630786.png" alt="image-20191115151657917"></p><p>注意，得到的这个capacity却被赋值给了threshold。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);<span class="comment">//initialCapacity=10</span></span><br></pre></td></tr></table></figure><p>3.默认的负载因子，默认值是0.75</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">float</span> <span class="variable">DEFAULT_LOAD_FACTOR</span> <span class="operator">=</span> <span class="number">0.75f</span>;</span><br></pre></td></tr></table></figure><p>4.集合最大容量</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//集合最大容量的上限是：2的30次幂</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MAXIMUM_CAPACITY</span> <span class="operator">=</span> <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br></pre></td></tr></table></figure><p>5.当链表的值超过8则会转红黑树(<strong>1.8新增</strong>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当桶(bucket)上的结点数大于这个值时会转成红黑树</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">TREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">8</span>;</span><br></pre></td></tr></table></figure><p><strong>问题：为什么Map桶中节点个数超过8才转为红黑树？</strong></p><p>8这个阈值定义在HashMap中，针对这个成员变量，在源码的注释中只说明了8是bin（bin就是bucket(桶)）从链表转成树的阈值，但是并没有说明为什么是8：</p><p>在HashMap中有一段注释说明： 我们继续往下看 :</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Because TreeNodes are about twice the size of regular nodes, we use them only <span class="keyword">when</span> bins contain enough nodes to warrant <span class="title function_">use</span> <span class="params">(see TREEIFY_THRESHOLD)</span>. And <span class="keyword">when</span> they become too <span class="title function_">small</span> <span class="params">(due to removal or resizing)</span> they are converted back to plain bins.  In usages with well-distributed user hashCodes, tree bins are rarely used.  Ideally, under random hashCodes, the frequency of nodes in bins follows a Poisson <span class="title function_">distribution</span></span><br><span class="line"><span class="params">(http://en.wikipedia.org/wiki/Poisson_distribution)</span> with a parameter of about <span class="number">0.5</span> on average <span class="keyword">for</span> the <span class="keyword">default</span> resizing threshold of <span class="number">0.75</span>, although with a large variance because of resizing granularity. Ignoring variance, the expected occurrences of list size k <span class="title function_">are</span> <span class="params">(exp(-<span class="number">0.5</span>)</span>*pow(<span class="number">0.5</span>, k)/factorial(k)).</span><br><span class="line">The first values are:</span><br><span class="line">因为树节点的大小大约是普通节点的两倍，所以我们只在箱子包含足够的节点时才使用树节点(参见TREEIFY_THRESHOLD)。当它们变得太小(由于删除或调整大小)时，就会被转换回普通的桶。在使用分布良好的用户hashcode时，很少使用树箱。理想情况下，在随机哈希码下，箱子中节点的频率服从泊松分布</span><br><span class="line">(http:<span class="comment">//en.wikipedia.org/wiki/Poisson_distribution)，默认调整阈值为0.75，平均参数约为0.5，尽管由于调整粒度的差异很大。忽略方差，列表大小k的预期出现次数是(exp(-0.5)*pow(0.5, k)/factorial(k))。</span></span><br><span class="line">第一个值是:</span><br><span class="line"></span><br><span class="line"><span class="number">0</span>:    <span class="number">0.60653066</span></span><br><span class="line"><span class="number">1</span>:    <span class="number">0.30326533</span></span><br><span class="line"><span class="number">2</span>:    <span class="number">0.07581633</span></span><br><span class="line"><span class="number">3</span>:    <span class="number">0.01263606</span></span><br><span class="line"><span class="number">4</span>:    <span class="number">0.00157952</span></span><br><span class="line"><span class="number">5</span>:    <span class="number">0.00015795</span></span><br><span class="line"><span class="number">6</span>:    <span class="number">0.00001316</span></span><br><span class="line"><span class="number">7</span>:    <span class="number">0.00000094</span></span><br><span class="line"><span class="number">8</span>:    <span class="number">0.00000006</span></span><br><span class="line">more: less than <span class="number">1</span> in ten million</span><br></pre></td></tr></table></figure><p>TreeNodes占用空间是普通Nodes的两倍，所以只有当bin包含足够多的节点时才会转成TreeNodes，而是否足够多就是由TREEIFY_THRESHOLD的值决定的。当bin中节点数变少时，又会转成普通的bin。并且我们查看源码的时候发现，链表长度达到8就转成红黑树，当长度降到6就转成普通bin。</p><p>这样就解释了为什么不是一开始就将其转换为TreeNodes，而是需要一定节点数才转为TreeNodes，说白了就是权衡，空间和时间的权衡。</p><p>这段内容还说到：当hashCode离散性很好的时候，树型bin用到的概率非常小，因为数据均匀分布在每个bin中，几乎不会有bin中链表长度会达到阈值。但是在随机hashCode下，离散性可能会变差，然而JDK又不能阻止用户实现这种不好的hash算法，因此就可能导致不均匀的数据分布。不过理想情况下随机hashCode算法下所有bin中节点的分布频率会遵循泊松分布，我们可以看到，一个bin中链表长度达到8个元素的概率为0.00000006，几乎是不可能事件。所以，之所以选择8，不是随便决定的，而是根据概率统计决定的。由此可见，发展将近30年的Java每一项改动和优化都是非常严谨和科学的。</p><p>也就是说：选择8因为符合泊松分布，超过8的时候，概率已经非常小了，所以我们选择8这个数字。</p><p>补充：</p><p>1）.</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> Poisson分布(泊松分布)，是一种统计与概率学里常见到的离散<span class="selector-attr">[概率分布]</span>。</span><br><span class="line">泊松分布的概率函数为：</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191115161055901.png" alt="image-20191115161055901"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">泊松分布的参数λ是单位时间(或单位面积)内随机事件的平均发生次数。 泊松分布适合于描述单位时间内随机事件发生的次数。</span><br></pre></td></tr></table></figure><p>2）.以下是我在研究这个问题时，在一些资料上面翻看的解释：供大家参考：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">红黑树的平均查找长度是log(n)，如果长度为<span class="number">8</span>，平均查找长度为log(<span class="number">8</span>)=<span class="number">3</span>，链表的平均查找长度为n/<span class="number">2</span>，当长度为<span class="number">8</span>时，平均查找长度为<span class="number">8</span>/<span class="number">2</span>=<span class="number">4</span>，这才有转换成树的必要；链表长度如果是小于等于<span class="number">6</span>，<span class="number">6</span>/<span class="number">2</span>=<span class="number">3</span>，而log(<span class="number">6</span>)=<span class="number">2.6</span>，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。</span><br></pre></td></tr></table></figure><p><strong>6.当链表的值小于6则会从红黑树转回链表</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当桶(bucket)上的结点数小于这个值时树转链表</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">UNTREEIFY_THRESHOLD</span> <span class="operator">=</span> <span class="number">6</span>;</span><br></pre></td></tr></table></figure><p>7.当Map里面的数量超过这个值时，表中的桶才能进行树形化 ，否则桶内元素太多时会扩容，而不是树形化 为了避免进行扩容、树形化选择的冲突，这个值不能小于 4 * TREEIFY_THRESHOLD (8)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//桶中结构转化为红黑树对应的数组长度最小的值 </span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIN_TREEIFY_CAPACITY</span> <span class="operator">=</span> <span class="number">64</span>;</span><br></pre></td></tr></table></figure><p><strong>8、table用来初始化(必须是二的n次幂)(重点)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存储元素的数组 </span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;</span><br></pre></td></tr></table></figure><p><strong>table</strong>在JDK1.8中我们了解到HashMap是由数组加链表加红黑树来组成的结构其中table就是HashMap中的数组，jdk8之前数组类型是Entry&lt;K,V&gt;类型。从jdk1.8之后是Node&lt;K,V&gt;类型。只是换了个名字，都实现了一样的接口：Map.Entry&lt;K,V&gt;。负责存储键值对数据的。</p><p>9、用来存放缓存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放具体元素的集合</span></span><br><span class="line"><span class="keyword">transient</span> Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br></pre></td></tr></table></figure><p><strong>10、 HashMap中存放元素的个数(重点)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//存放元素的个数，注意这个不等于数组的长度。</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="type">int</span> size;</span><br></pre></td></tr></table></figure><p><strong>size</strong>为HashMap中K-V的实时数量，不是数组table的长度。</p><p>11、 用来记录HashMap的修改次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每次扩容和更改map结构的计数器</span></span><br><span class="line"> <span class="keyword">transient</span> <span class="type">int</span> modCount;  </span><br></pre></td></tr></table></figure><p>12、 用来调整大小下一个容量的值计算方式为(容量*负载因子)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 临界值 当实际大小(容量*负载因子)超过临界值时，会进行扩容</span></span><br><span class="line"><span class="type">int</span> threshold;</span><br></pre></td></tr></table></figure><p><strong>13、 哈希表的加载因子(重点)</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载因子</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">float</span> loadFactor;</span><br></pre></td></tr></table></figure><p><strong>说明：</strong></p><p>1.<strong>loadFactor</strong>加载因子，是用来衡量 HashMap 满的程度，<strong>表示HashMap的疏密程度，影响hash操作到同一个数组位置的概率</strong>，计算HashMap的实时加载因子的方法为：size/capacity，而不是占用桶的数量去除以capacity。capacity 是桶的数量，也就是 table 的长度length。</p><p><strong>loadFactor太大导致查找元素效率低，太小导致数组的利用率低，存放的数据会很分散。loadFactor的默认值为0.75f是官方给出的一个比较好的临界值</strong>。</p><p><strong>当HashMap里面容纳的元素已经达到HashMap数组长度的75%时，表示HashMap太挤了，需要扩容，而扩容这个过程涉及到 rehash、复制数据等操作，非常消耗性能。，所以开发中尽量减少扩容的次数，可以通过创建HashMap集合对象时指定初始容量来尽量避免。</strong></p><p><strong>同时在HashMap的构造器中可以定制loadFactor。</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">构造方法：</span><br><span class="line">HashMap(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor) 构造一个带指定初始容量和加载因子的空 HashMap。</span><br></pre></td></tr></table></figure><p>2.为什么加载因子设置为0.75,初始化临界值是12？</p><p>loadFactor越趋近于1，那么 数组中存放的数据(entry)也就越多，也就越密，也就是会让链表的长度增加，loadFactor越小，也就是趋近于0，数组中存放的数据(entry)也就越少，也就越稀疏。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191115173553375.png" alt="image-20191115173553375"></p><p>如果希望链表尽可能少些。要提前扩容，有的数组空间有可能一直没有存储数据。加载因子尽可能小一些。</p><p>举例：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">例如：加载因子是<span class="number">0.4</span>。 那么<span class="number">16</span>*<span class="number">0.4</span><span class="comment">---&gt;6 如果数组中满6个空间就扩容会造成数组利用率太低了。</span></span><br><span class="line"> 加载因子是<span class="number">0.9</span>。 那么<span class="number">16</span>*<span class="number">0.9</span><span class="comment">----&gt;14 那么这样就会导致链表有点多了。导致查找元素效率低。</span></span><br></pre></td></tr></table></figure><p>所以既兼顾数组利用率又考虑链表不要太多，经过大量测试0.75是最佳方案。</p><ul><li><strong>threshold</strong>计算公式：capacity(数组长度默认16) * loadFactor(负载因子默认0.75)。这个值是当前已占用数组长度的最大值。<strong>当Size&gt;=threshold</strong>的时候，那么就要考虑对数组的resize(扩容)，也就是说，这个的意思就是 <strong>衡量数组是否需要扩增的一个标准</strong>。 扩容后的 HashMap 容量是之前容量的两倍.</li></ul><h3 id="4-2构造方法">4.2构造方法</h3><p>HashMap 中重要的构造方法，它们分别如下：</p><p>1、构造一个空的 <code>HashMap</code> ，默认初始容量（16）和默认负载因子（0.75）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">()</span> &#123;</span><br><span class="line">   <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// 将默认的加载因子0.75赋值给loadFactor，并没有创建数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、 构造一个具有指定的初始容量和默认负载因子（0.75） <code>HashMap</code>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 指定“容量大小”的构造函数</span></span><br><span class="line"> <span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>(initialCapacity, DEFAULT_LOAD_FACTOR);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>3、 构造一个具有指定的初始容量和负载因子的 <code>HashMap</code>。我们来分析一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 指定“容量大小”和“加载因子”的构造函数</span></span><br><span class="line"><span class="comment"> initialCapacity: 指定的容量</span></span><br><span class="line"><span class="comment"> loadFactor:指定的加载因子</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(<span class="type">int</span> initialCapacity, <span class="type">float</span> loadFactor)</span> &#123;</span><br><span class="line">    <span class="comment">//判断初始化容量initialCapacity是否小于0</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="comment">//如果小于0，则抛出非法的参数异常IllegalArgumentException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal initial capacity: &quot;</span> +</span><br><span class="line">                                               initialCapacity);</span><br><span class="line">    <span class="comment">//判断初始化容量initialCapacity是否大于集合的最大容量MAXIMUM_CAPACITY-》2的30次幂</span></span><br><span class="line">        <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="comment">//如果超过MAXIMUM_CAPACITY，会将MAXIMUM_CAPACITY赋值给initialCapacity</span></span><br><span class="line">            initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="comment">//判断负载因子loadFactor是否小于等于0或者是否是一个非数值</span></span><br><span class="line">        <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">            <span class="comment">//如果满足上述其中之一，则抛出非法的参数异常IllegalArgumentException</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Illegal load factor: &quot;</span> +</span><br><span class="line">                                               loadFactor);</span><br><span class="line">     <span class="comment">//将指定的加载因子赋值给HashMap成员变量的负载因子loadFactor</span></span><br><span class="line">        <span class="built_in">this</span>.loadFactor = loadFactor;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    tableSizeFor(initialCapacity) 判断指定的初始化容量是否是2的n次幂，如果不是那么会变为比指定初始化容量大的最小的2的n次幂。这点上述已经讲解过。</span></span><br><span class="line"><span class="comment">    但是注意，在tableSizeFor方法体内部将计算后的数据返回给调用这里了，并且直接赋值给threshold边界值了。有些人会觉得这里是一个bug,应该这样书写：</span></span><br><span class="line"><span class="comment">    this.threshold = tableSizeFor(initialCapacity) * this.loadFactor;</span></span><br><span class="line"><span class="comment">    这样才符合threshold的意思（当HashMap的size到达threshold这个阈值时会扩容）。</span></span><br><span class="line"><span class="comment">但是，请注意，在jdk8以后的构造方法中，并没有对table这个成员变量进行初始化，table的初始化被推 迟到了put方法中，在put方法中会对threshold重新计算，put方法的具体实现我们下面会进行讲解</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">        <span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity);</span><br><span class="line">    &#125;</span><br><span class="line">最后调用了tableSizeFor，来看一下方法实现：</span><br><span class="line">     <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns a power of two size for the given target capacity.</span></span><br><span class="line"><span class="comment">       返回比指定初始化容量大的最小的2的n次幂</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">tableSizeFor</span><span class="params">(<span class="type">int</span> cap)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> cap - <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">2</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">4</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">8</span>;</span><br><span class="line">        n |= n &gt;&gt;&gt; <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">0</span>) ? <span class="number">1</span> : (n &gt;= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>对于 this.threshold = tableSizeFor(initialCapacity); 疑问解答：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tableSizeFor(initialCapacity) 判断指定的初始化容量是否是<span class="number">2</span>的n次幂，如果不是那么会变为比指定初始化容量大的最小的<span class="number">2</span>的n次幂。这点上述已经讲解过。</span><br><span class="line">但是注意，在tableSizeFor方法体内部将计算后的数据返回给调用这里了，并且直接赋值给threshold边界值了。有些人会觉得这里是一个bug,应该这样书写：</span><br><span class="line"><span class="built_in">this</span>.threshold = tableSizeFor(initialCapacity) * <span class="built_in">this</span>.loadFactor;</span><br><span class="line">这样才符合threshold的意思（当HashMap的size到达threshold这个阈值时会扩容）。</span><br><span class="line">但是，请注意，在jdk8以后的构造方法中，并没有对table这个成员变量进行初始化，table的初始化被推 迟到了put方法中，在put方法中会对threshold重新计算，put方法的具体实现我们下面会进行讲解</span><br></pre></td></tr></table></figure><p>4、包含另一个“Map”的构造函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构造一个映射关系与指定 Map 相同的新 HashMap。</span></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">HashMap</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m)</span> &#123;</span><br><span class="line">    <span class="comment">//负载因子loadFactor变为默认的负载因子0.75</span></span><br><span class="line">         <span class="built_in">this</span>.loadFactor = DEFAULT_LOAD_FACTOR;</span><br><span class="line">         putMapEntries(m, <span class="literal">false</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>最后调用了putMapEntries，来看一下方法实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">putMapEntries</span><span class="params">(Map&lt;? extends K, ? extends V&gt; m, <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    <span class="comment">//获取参数集合的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">s</span> <span class="operator">=</span> m.size();</span><br><span class="line">    <span class="keyword">if</span> (s &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//判断参数集合的长度是否大于0，说明大于0</span></span><br><span class="line">        <span class="keyword">if</span> (table == <span class="literal">null</span>)  <span class="comment">// 判断table是否已经初始化</span></span><br><span class="line">        &#123; <span class="comment">// pre-size</span></span><br><span class="line">                <span class="comment">// 未初始化，s为m的实际元素个数</span></span><br><span class="line">                <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> ((<span class="type">float</span>)s / loadFactor) + <span class="number">1.0F</span>;</span><br><span class="line">                <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> ((ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY) ?</span><br><span class="line">                        (<span class="type">int</span>)ft : MAXIMUM_CAPACITY);</span><br><span class="line">                <span class="comment">// 计算得到的t大于阈值，则初始化阈值</span></span><br><span class="line">                <span class="keyword">if</span> (t &gt; threshold)</span><br><span class="line">                    threshold = tableSizeFor(t);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 已初始化，并且m元素个数大于阈值，进行扩容处理</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s &gt; threshold)</span><br><span class="line">            resize();</span><br><span class="line">        <span class="comment">// 将m中的所有元素添加至HashMap中</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;? <span class="keyword">extends</span> <span class="title class_">K</span>, ? <span class="keyword">extends</span> <span class="title class_">V</span>&gt; e : m.entrySet()) &#123;</span><br><span class="line">            <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> e.getKey();</span><br><span class="line">            <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> e.getValue();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, evict);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：</p><p>float ft = ((float)s / loadFactor) + 1.0F;这一行代码中为什么要加1.0F ？</p><p>s/loadFactor的结果是小数，加1.0F与(int)ft相当于是对小数做一个向上取整以尽可能的保证更大容量，更大的容量能够减少resize的调用次数。所以 + 1.0F是为了获取更大的容量。</p><p>例如：原来集合的元素个数是6个，那么6/0.75是8，是2的n次幂，那么新的数组大小就是8了。然后原来数组的数据就会存储到长度是8的新的数组中了，这样会导致在存储元素的时候，容量不够，还得继续扩容，那么性能降低了，而如果+1呢，数组长度直接变为16了，这样可以减少数组的扩容。</p><h3 id="4-3成员方法">4.3成员方法</h3><h4 id="4-3-1增加方法">4.3.1增加方法</h4><p>put方法是比较复杂的，实现步骤大致如下：</p><p>1）先通过hash值计算出key映射到哪个桶；</p><p>2）如果桶上没有碰撞冲突，则直接插入；</p><p>3）如果出现碰撞冲突了，则需要处理冲突：</p><p>​a:如果该桶使用红黑树处理冲突，则调用红黑树的方法插入数据；</p><p>​b:否则采用传统的链式方法插入。如果链的长度达到临界值，则把链转变为红黑树；</p><p>4）如果桶中存在重复的键，则为该键替换新值value；</p><p>5）如果size大于阈值threshold，则进行扩容；</p><p>具体的方法如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><p>​1）HashMap只提供了put用于添加元素，putVal方法只是给put方法调用的一个方法，并没有提供给用户使用。 所以我们重点看putVal方法。</p><pre><code>2）我们可以看到在putVal()方法中key在这里执行了一下hash()方法,来看一下Hash方法是如何实现的。 </code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> </span><br><span class="line">&#123;</span><br><span class="line">       <span class="type">int</span> h;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1）如果key等于null：</span></span><br><span class="line"><span class="comment">    可以看到当key等于null的时候也是有哈希值的，返回的是0.</span></span><br><span class="line"><span class="comment">    2）如果key不等于null：</span></span><br><span class="line"><span class="comment">    首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">       <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面可以得知HashMap是支持Key为空的，而HashTable是直接用Key来获取HashCode所以key为空会抛异常。</p><p>{其实上面就已经解释了为什么HashMap的长度<strong>为什么要是2的幂</strong>因为HashMap 使用的方法很巧妙，它通过 hash &amp; (table.length -1)来得到该对象的保存位，前面说过 HashMap 底层数组的长度总是2的n次方，这是HashMap在速度上的优化。当 length 总是2的n次方时，hash &amp; (length-1)运算等价于对 length 取模，也就是hash%length，但是&amp;比%具有更高的效率。比如 n % 32 = n &amp; (32 -1)。}</p><p><strong>解读上述hash方法：</strong></p><p>我们先研究下key的哈希值是如何计算出来的。key的哈希值是通过上述方法计算出来的。</p><p>这个哈希方法首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值。计算过程如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> </span><br><span class="line">&#123;</span><br><span class="line">       <span class="type">int</span> h;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1）如果key等于null：</span></span><br><span class="line"><span class="comment">    可以看到当key等于null的时候也是有哈希值的，返回的是0.</span></span><br><span class="line"><span class="comment">    2）如果key不等于null：</span></span><br><span class="line"><span class="comment">    首先计算出key的hashCode赋值给h,然后与h无符号右移16位后的二进制进行按位异或得到最后的hash值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">       <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在putVal函数中使用到了上述hash函数计算的哈希值：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">        。。。。。。。。。。。。。。</span><br><span class="line">        <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)<span class="comment">//这里的n表示数组长度16</span></span><br><span class="line">       。。。。。。。。。。。。。。</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>计算过程如下所示：</p><p>​说明：</p><p>​1）key.hashCode()；返回散列值也就是hashcode。假设随便生成的一个值。</p><p>​2）n表示数组初始化的长度是16</p><p>​3）&amp;（按位与运算）：运算规则：相同的二进制数位上，都是1的时候，结果为1，否则为零。</p><p>​    4）^（按位异或运算）：运算规则：相同的二进制数位上，数字相同，结果为0，不同为1。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191114193730911.png" alt="image-20191114193730911"></p><p>简单来说就是：</p><ul><li><p>高16 bit 不变，低16 bit 和高16 bit 做了一个异或（得到的 hashcode 转化为32位二进制，前16位和后16位低16 bit和高16 bit做了一个异或）</p><p><strong>问题：为什么要这样操作呢？</strong></p><p>如果当n即数组长度很小，假设是16的话，那么n-1即为  —》1111 ，这样的值和hashCode()直接做按位与操作，实际上只使用了哈希值的后4位。如果当哈希值的高位变化很大，低位变化很小，这样就很容易造成哈希冲突了，所以这里把高低位都利用起来，从而解决了这个问题。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">例如上述：</span><br><span class="line">hashCode()值：     <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">1111</span> <span class="number">0000</span> <span class="number">1110</span> <span class="number">1010</span></span><br><span class="line">&amp;</span><br><span class="line">n-<span class="number">1</span>即<span class="number">16</span>-<span class="number">1</span>--》<span class="number">15</span>：  。。。。。。。。。。。。。。。。。。。。。。<span class="number">1111</span></span><br><span class="line">-------------------------------------------------------------------</span><br><span class="line">  <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">0000</span> <span class="number">1010</span> ----》<span class="number">10</span>作为索引</span><br><span class="line">其实就是将hashCode值作为数组索引，那么如果下个高位hashCode不一致，低位一致的话，就会造成计算的索引还是<span class="number">10</span>,从而造成了哈希冲突了。降低性能。</span><br></pre></td></tr></table></figure></li><li><p>(n-1) &amp; hash = -&gt; 得到下标   (n-1)   n表示数组长度16，n-1就是15</p></li><li><p>取余数本质是不断做除法，把剩余的数减去，运算效率要比位运算低。</p></li></ul><p>现在看putVal()方法，看看它到底做了什么。</p><p>主要参数：</p><ul><li>hash key的hash值</li><li>key 原始Key</li><li>value 要存放的值</li><li>onlyIfAbsent 如果true代表不更改现有的值</li><li>evict 如果为false表示table为创建状态</li></ul><p>putVal()方法源代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> </span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> V <span class="title function_">putVal</span><span class="params">(<span class="type">int</span> hash, K key, V value, <span class="type">boolean</span> onlyIfAbsent,</span></span><br><span class="line"><span class="params">                   <span class="type">boolean</span> evict)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, i;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1）transient Node&lt;K,V&gt;[] table; 表示存储Map集合中元素的数组。</span></span><br><span class="line"><span class="comment">    2）(tab = table) == null 表示将空的table赋值给tab,然后判断tab是否等于null，第一次肯定是null</span></span><br><span class="line"><span class="comment">    3）(n = tab.length) == 0 表示将数组的长度0赋值给n,然后判断n是否等于0，n等于0</span></span><br><span class="line"><span class="comment">    由于if判断使用双或，满足一个即可，则执行代码 n = (tab = resize()).length; 进行数组初始化。</span></span><br><span class="line"><span class="comment">    并将初始化好的数组长度赋值给n.</span></span><br><span class="line"><span class="comment">    4）执行完n = (tab = resize()).length，数组tab每个空间都是null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="literal">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1）i = (n - 1) &amp; hash 表示计算数组的索引赋值给i，即确定元素存放在哪个桶中</span></span><br><span class="line"><span class="comment">    2）p = tab[i = (n - 1) &amp; hash]表示获取计算出的位置的数据赋值给节点p</span></span><br><span class="line"><span class="comment">    3) (p = tab[i = (n - 1) &amp; hash]) == null 判断节点位置是否等于null，如果为null，则执行代码：tab[i] = newNode(hash, key, value, null);根据键值对创建新的节点放入该位置的桶中</span></span><br><span class="line"><span class="comment">        小结：如果当前桶没有哈希碰撞冲突，则直接把键值对插入空间位置</span></span><br><span class="line"><span class="comment">    */</span> </span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="literal">null</span>)</span><br><span class="line">        <span class="comment">//创建一个新的节点存入到桶中</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">// 执行else说明tab[i]不等于null，表示这个位置已经有值了。</span></span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        比较桶中第一个元素(数组中的结点)的hash值和key是否相等</span></span><br><span class="line"><span class="comment">        1）p.hash == hash ：p.hash表示原来存在数据的hash值  hash表示后添加数据的hash值 比较两个 hash值是否相等</span></span><br><span class="line"><span class="comment">                 说明：p表示tab[i]，即 newNode(hash, key, value, null)方法返回的Node对象。</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) </span></span><br><span class="line"><span class="comment">                    &#123;</span></span><br><span class="line"><span class="comment">                        return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    而在Node类中具有成员变量hash用来记录着之前数据的hash值的</span></span><br><span class="line"><span class="comment">             2）(k = p.key) == key ：p.key获取原来数据的key赋值给k  key 表示后添加数据的key 比较两个key的地址值是否相等</span></span><br><span class="line"><span class="comment">             3）key != null &amp;&amp; key.equals(k)：能够执行到这里说明两个key的地址值不相等，那么先判断后添加的key是否等于null，如果不等于null再调用equals方法判断两个key的内容是否相等</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                说明：两个元素哈希值相等，并且key的值也相等</span></span><br><span class="line"><span class="comment">                将旧的元素整体对象赋值给e，用e来记录</span></span><br><span class="line"><span class="comment">                */</span> </span><br><span class="line">                e = p;</span><br><span class="line">        <span class="comment">// hash值不相等或者key不相等；判断p是否为红黑树结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">            <span class="comment">// 放入树中</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="built_in">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="comment">// 说明是链表节点</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1)如果是链表的话需要遍历到最后节点然后插入</span></span><br><span class="line"><span class="comment">            2)采用循环遍历的方式，判断链表中是否有重复的key</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">binCount</span> <span class="operator">=</span> <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                1)e = p.next 获取p的下一个元素赋值给e</span></span><br><span class="line"><span class="comment">                2)(e = p.next) == null 判断p.next是否等于null，等于null，说明p没有下一个元素，那么此时到达了链表的尾部，还没有找到重复的key,则说明HashMap没有包含该键</span></span><br><span class="line"><span class="comment">                将该键值对插入链表中</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    1）创建一个新的节点插入到尾部</span></span><br><span class="line"><span class="comment">                     p.next = newNode(hash, key, value, null);</span></span><br><span class="line"><span class="comment">                     Node&lt;K,V&gt; newNode(int hash, K key, V value, Node&lt;K,V&gt; next) </span></span><br><span class="line"><span class="comment">                     &#123;</span></span><br><span class="line"><span class="comment">                                return new Node&lt;&gt;(hash, key, value, next);</span></span><br><span class="line"><span class="comment">                         &#125;</span></span><br><span class="line"><span class="comment">                         注意第四个参数next是null，因为当前元素插入到链表末尾了，那么下一个节点肯定是null</span></span><br><span class="line"><span class="comment">                         2）这种添加方式也满足链表数据结构的特点，每次向后添加新的元素</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    1)节点添加完成之后判断此时节点个数是否大于TREEIFY_THRESHOLD临界值8，如果大于</span></span><br><span class="line"><span class="comment">                    则将链表转换为红黑树</span></span><br><span class="line"><span class="comment">                    2）int binCount = 0 ：表示for循环的初始化值。从0开始计数。记录着遍历节点的个数。值是0表示第一个节点，1表示第二个节点。。。。7表示第八个节点，加上数组中的的一个元素，元素个数是9</span></span><br><span class="line"><span class="comment">                    TREEIFY_THRESHOLD - 1 --》8 - 1 ---》7</span></span><br><span class="line"><span class="comment">                    如果binCount的值是7(加上数组中的的一个元素，元素个数是9)</span></span><br><span class="line"><span class="comment">                    TREEIFY_THRESHOLD - 1也是7，此时转换红黑树</span></span><br><span class="line"><span class="comment">                    */</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">                        <span class="comment">//转换为红黑树</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="comment">// 跳出循环</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                 </span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                执行到这里说明e = p.next 不是null，不是最后一个元素。继续判断链表中结点的key值与插  入的元素的key值是否相等</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="comment">// 相等，跳出循环</span></span><br><span class="line">                    <span class="comment">/*</span></span><br><span class="line"><span class="comment">                要添加的元素和链表中的存在的元素的key相等了，则跳出for循环。不用再继续比较了</span></span><br><span class="line"><span class="comment">                直接执行下面的if语句去替换去 if (e != null) </span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                说明新添加的元素和当前节点不相等，继续查找下一个节点。</span></span><br><span class="line"><span class="comment">                用于遍历桶中的链表，与前面的e = p.next组合，可以遍历链表</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        表示在桶中找到key值、hash值与插入元素相等的结点</span></span><br><span class="line"><span class="comment">        也就是说通过上面的操作找到了重复的键，所以这里就是把该键的值变为新的值，并返回旧值</span></span><br><span class="line"><span class="comment">        这里完成了put方法的修改功能</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (e != <span class="literal">null</span>) &#123; </span><br><span class="line">            <span class="comment">// 记录e的value</span></span><br><span class="line">            <span class="type">V</span> <span class="variable">oldValue</span> <span class="operator">=</span> e.value;</span><br><span class="line">            <span class="comment">// onlyIfAbsent为false或者旧值为null</span></span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="literal">null</span>)</span><br><span class="line">                <span class="comment">//用新值替换旧值</span></span><br><span class="line">                <span class="comment">//e.value 表示旧值  value表示新值 </span></span><br><span class="line">                e.value = value;</span><br><span class="line">            <span class="comment">// 访问后回调</span></span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="comment">// 返回旧值</span></span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//修改记录次数</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="comment">// 判断实际大小是否大于threshold阈值，如果超过则扩容</span></span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();</span><br><span class="line">    <span class="comment">// 插入后回调</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h4 id="4-3-2将链表转换为红黑树的treeifyBin方法">4.3.2将链表转换为红黑树的treeifyBin方法</h4><p>节点添加完成之后判断此时节点个数是否大于TREEIFY_THRESHOLD临界值8，如果大于则将链表转换为红黑树，转换红黑树的方法  treeifyBin，整体代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// -1 for 1st</span></span><br><span class="line">   <span class="comment">//转换为红黑树 tab表示数组名  hash表示哈希值</span></span><br><span class="line">   treeifyBin(tab, hash);</span><br></pre></td></tr></table></figure><p>treeifyBin方法如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Replaces all linked nodes in bin at index for given hash unless</span></span><br><span class="line"><span class="comment"> * table is too small, in which case resizes instead.</span></span><br><span class="line"><span class="comment">   替换指定哈希表的索引处桶中的所有链接节点，除非表太小，否则将修改大小。</span></span><br><span class="line"><span class="comment">   Node&lt;K,V&gt;[] tab = tab 数组名</span></span><br><span class="line"><span class="comment">   int hash = hash表示哈希值</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="type">int</span> hash)</span> &#123;</span><br><span class="line">      <span class="type">int</span> n, index; Node&lt;K,V&gt; e;</span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">      如果当前数组为空或者数组的长度小于进行树形化的阈值(MIN_TREEIFY_CAPACITY = 64),</span></span><br><span class="line"><span class="comment">      就去扩容。而不是将节点变为红黑树。</span></span><br><span class="line"><span class="comment">      目的：如果数组很小，那么转换红黑树，然后遍历效率要低一些。这时进行扩容，那么重新计算哈希值</span></span><br><span class="line"><span class="comment">      ，链表长度有可能就变短了，数据会放到数组中，这样相对来说效率高一些。</span></span><br><span class="line"><span class="comment">      */</span></span><br><span class="line">      <span class="keyword">if</span> (tab == <span class="literal">null</span> || (n = tab.length) &lt; MIN_TREEIFY_CAPACITY)</span><br><span class="line">          <span class="comment">//扩容方法</span></span><br><span class="line">          resize();</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> ((e = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          1）执行到这里说明哈希表中的数组长度大于阈值64，开始进行树形化</span></span><br><span class="line"><span class="comment">          2）e = tab[index = (n - 1) &amp; hash]表示将数组中的元素取出赋值给e,e是哈希表中指定位置桶里的链表节点，从第一个开始</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="comment">//hd：红黑树的头结点   tl :红黑树的尾结点</span></span><br><span class="line">          TreeNode&lt;K,V&gt; hd = <span class="literal">null</span>, tl = <span class="literal">null</span>;</span><br><span class="line">          <span class="keyword">do</span> &#123;</span><br><span class="line">              <span class="comment">//新创建一个树的节点，内容和当前链表节点e一致</span></span><br><span class="line">              TreeNode&lt;K,V&gt; p = replacementTreeNode(e, <span class="literal">null</span>);</span><br><span class="line">              <span class="keyword">if</span> (tl == <span class="literal">null</span>)</span><br><span class="line">                  <span class="comment">//将新创键的p节点赋值给红黑树的头结点</span></span><br><span class="line">                  hd = p;</span><br><span class="line">              <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="comment">/*</span></span><br><span class="line"><span class="comment">                   p.prev = tl：将上一个节点p赋值给现在的p的前一个节点</span></span><br><span class="line"><span class="comment">                   tl.next = p;将现在节点p作为树的尾结点的下一个节点</span></span><br><span class="line"><span class="comment">                  */</span></span><br><span class="line">                  p.prev = tl;</span><br><span class="line">                  tl.next = p;</span><br><span class="line">              &#125;</span><br><span class="line">              tl = p;</span><br><span class="line">              <span class="comment">/*</span></span><br><span class="line"><span class="comment">              e = e.next 将当前节点的下一个节点赋值给e,如果下一个节点不等于null</span></span><br><span class="line"><span class="comment">              则回到上面继续取出链表中节点转换为红黑树</span></span><br><span class="line"><span class="comment">              */</span></span><br><span class="line">          &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">          <span class="comment">/*</span></span><br><span class="line"><span class="comment">          让桶中的第一个元素即数组中的元素指向新建的红黑树的节点，以后这个桶里的元素就是红黑树</span></span><br><span class="line"><span class="comment">          而不是链表数据结构了</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">          <span class="keyword">if</span> ((tab[index] = hd) != <span class="literal">null</span>)</span><br><span class="line">              hd.treeify(tab);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>小结：上述操作一共做了如下几件事：</p><p>1.根据哈希表中元素个数确定是扩容还是树形化</p><p>2.如果是树形化遍历桶中的元素，创建相同个数的树形节点，复制内容，建立起联系</p><p>3.然后让桶中的第一个元素指向新创建的树根节点，替换桶的链表内容为树形化内容</p><h4 id="4-3-3扩容方法-resize">4.3.3扩容方法_resize</h4><h5 id="4-3-3-1扩容机制">4.3.3.1扩容机制</h5><p>想要了解HashMap的扩容机制你要有这两个问题</p><ul><li>1.什么时候才需要扩容</li><li>2.HashMap的扩容是什么</li></ul><p><strong>1.什么时候才需要扩容</strong></p><p>当HashMap中的元素个数超过数组大小(数组长度)*loadFactor(负载因子)时，就会进行数组扩容，loadFactor的默认值(DEFAULT_LOAD_FACTOR)是0.75,这是一个折中的取值。也就是说，默认情况下，数组大小为16，那么当HashMap中的元素个数超过16×0.75=12(这个值就是阈值或者边界值threshold值)的时候，就把数组的大小扩展为2×16=32，即扩大一倍，然后重新计算每个元素在数组中的位置，而这是一个非常耗性能的操作，所以如果我们已经预知HashMap中元素的个数，那么预知元素的个数能够有效的提高HashMap的性能。</p><p><strong>补充：</strong></p><p><strong>当HashMap中的其中一个链表的对象个数如果达到了8个，此时如果数组长度没有达到64，那么HashMap会先扩容解决，如果已经达到了64，那么这个链表会变成红黑树，节点类型由Node变成TreeNode类型。当然，如果映射关系被移除后，下次执行resize方法时判断树的节点个数低于6，也会再把树转换为链表。</strong></p><p><strong>2.HashMap的扩容是什么</strong></p><p>进行扩容，会伴随着一次重新hash分配，并且会遍历hash表中所有的元素，是非常耗时的。在编写程序中，要尽量避免resize。</p><p>HashMap在进行扩容时，使用的rehash方式非常巧妙，因为每次扩容都是翻倍，与原来计算的 (n-1)&amp;hash的结果相比，只是多了一个bit位，所以节点要么就在原来的位置，要么就被分配到&quot;<strong>原位置+旧容量</strong>&quot;这个位置。</p><p>怎么理解呢？例如我们从16扩展为32时，具体的变化如下所示：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117110812839.png" alt="image-20191117110812839"></p><p>因此元素在重新计算hash之后，因为n变为2倍，那么n-1的标记范围在高位多1bit(红色)，因此新的index就会发生这样的变化：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117110934974.png" alt="image-20191117110934974"></p><p>说明：5是假设计算出来的原来的索引。这样就验证了上述所描述的：扩容之后所以节点要么就在原来的位置，要么就被分配到&quot;<strong>原位置+旧容量</strong>&quot;这个位置。</p><p>因此，我们在扩充HashMap的时候，不需要重新计算hash，只需要看看原来的hash值新增的那个bit是1还是0就可以了，是0的话索引没变，是1的话索引变成“原索引+oldCap(<strong>原位置+旧容量</strong>)”。可以看看下图为16扩充为32的resize示意图：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117111211630.png" alt="image-20191117111211630"></p><p>正是因为这样巧妙的rehash方式，既省去了重新计算hash值的时间，而且同时，由于新增的1bit是0还是1可以认为是随机的，在resize的过程中保证了rehash之后每个桶上的节点数一定小于等于原来桶上的节点数，保证了rehash之后不会出现更严重的hash冲突，均匀的把之前的冲突的节点分散到新的桶中了。</p><h5 id="4-3-3-2源码resize方法的解读">4.3.3.2源码resize方法的解读</h5><p>下面是代码的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    <span class="comment">//得到当前数组</span></span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="comment">//如果当前数组等于null长度返回0，否则返回当前数组的长度</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldCap</span> <span class="operator">=</span> (oldTab == <span class="literal">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="comment">//当前阀值点 默认是12(16*0.75)</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">oldThr</span> <span class="operator">=</span> threshold;</span><br><span class="line">    <span class="type">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//如果老的数组长度大于0</span></span><br><span class="line">    <span class="comment">//开始计算扩容后的大小</span></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 超过最大值就不再扩充了，就只好随你碰撞去吧</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            <span class="comment">//修改阈值为int的最大值</span></span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        没超过最大值，就扩充为原来的2倍</span></span><br><span class="line"><span class="comment">        1)(newCap = oldCap &lt;&lt; 1) &lt; MAXIMUM_CAPACITY 扩大到2倍之后容量要小于最大容量</span></span><br><span class="line"><span class="comment">        2）oldCap &gt;= DEFAULT_INITIAL_CAPACITY 原数组长度大于等于数组初始化长度16</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            <span class="comment">//阈值扩大一倍</span></span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//老阈值点大于0 直接赋值</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) <span class="comment">// 老阈值赋值给新的数组长度</span></span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;<span class="comment">// 直接使用默认值</span></span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;<span class="comment">//16</span></span><br><span class="line">        newThr = (<span class="type">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算新的resize最大上限</span></span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">float</span> <span class="variable">ft</span> <span class="operator">=</span> (<span class="type">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="type">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="type">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//新的阀值 默认原来是12 乘以2之后变为24</span></span><br><span class="line">    threshold = newThr;</span><br><span class="line">    <span class="comment">//创建新的哈希表</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(&#123;&quot;rawtypes&quot;,&quot;unchecked&quot;&#125;)</span></span><br><span class="line">    <span class="comment">//newCap是新的数组长度--》32</span></span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> <span class="title class_">Node</span>[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="comment">//判断旧数组是否等于空</span></span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 把每个bucket都移动到新的buckets中</span></span><br><span class="line">        <span class="comment">//遍历旧的哈希表的每个桶，重新计算桶里元素的新位置</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//原来的数据赋值为null 便于GC回收</span></span><br><span class="line">                oldTab[j] = <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">//判断数组是否有下一个引用</span></span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="literal">null</span>)</span><br><span class="line">                    <span class="comment">//没有下一个引用，说明不是链表，当前桶上只有一个键值对，直接插入</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="comment">//判断是否是红黑树</span></span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//说明是红黑树来处理冲突的，则调用相关方法把树分开</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="built_in">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">// 采用链表处理冲突</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="literal">null</span>, loTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="literal">null</span>, hiTail = <span class="literal">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="comment">//通过上述讲解的原理来计算节点的新位置</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="comment">// 原索引</span></span><br><span class="line">                        next = e.next;</span><br><span class="line">                     <span class="comment">//这里来判断如果等于true e这个节点在resize之后不需要移动位置</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="literal">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 原索引+oldCap</span></span><br><span class="line">                        <span class="keyword">else</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="literal">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="literal">null</span>);</span><br><span class="line">                    <span class="comment">// 原索引放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        loTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 原索引+oldCap放到bucket里</span></span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="literal">null</span>) &#123;</span><br><span class="line">                        hiTail.next = <span class="literal">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-4-删除方法-remove">4.3.4 删除方法(remove)</h4><p>理解了put方法之后，remove方法已经没什么难度了，所以重复的内容就不再做详细介绍了。</p><p>删除的话就是首先先找到元素的位置，如果是链表就遍历链表找到元素之后删除。如果是用红黑树就遍历树然后找到之后做删除，树小于6的时候要转链表。</p><p>删除remove方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//remove方法的具体实现在removeNode方法中，所以我们重点看下removeNode方法</span></span><br><span class="line"><span class="keyword">public</span> V <span class="title function_">remove</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e;</span><br><span class="line">        <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="literal">null</span>, <span class="literal">false</span>, <span class="literal">true</span>)) == <span class="literal">null</span> ?</span><br><span class="line">            <span class="literal">null</span> : e.value;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>removeNode方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">removeNode</span><span class="params">(<span class="type">int</span> hash, Object key, Object value,</span></span><br><span class="line"><span class="params">                               <span class="type">boolean</span> matchValue, <span class="type">boolean</span> movable)</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="type">int</span> n, index;</span><br><span class="line">    <span class="comment">//根据hash找到位置 </span></span><br><span class="line">    <span class="comment">//如果当前key映射到的桶不为空</span></span><br><span class="line">        <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">            (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">            Node&lt;K,V&gt; node = <span class="literal">null</span>, e; K k; V v;</span><br><span class="line">            <span class="comment">//如果桶上的节点就是要找的key，则将node指向该节点</span></span><br><span class="line">            <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">                ((k = p.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                node = p;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">//说明节点存在下一个节点</span></span><br><span class="line">                <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    <span class="comment">//说明是以红黑树来处理的冲突，则获取红黑树要删除的节点</span></span><br><span class="line">                    node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//判断是否以链表方式处理hash冲突，是的话则通过遍历链表来寻找要删除的节点</span></span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                            ((k = e.key) == key ||</span><br><span class="line">                             (key != <span class="literal">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                            node = e;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        p = e;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//比较找到的key的value和要删除的是否匹配</span></span><br><span class="line">            <span class="keyword">if</span> (node != <span class="literal">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                                 (value != <span class="literal">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">                <span class="comment">//通过调用红黑树的方法来删除节点</span></span><br><span class="line">                <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="built_in">this</span>, tab, movable);</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                    <span class="comment">//链表删除</span></span><br><span class="line">                    tab[index] = node.next;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    p.next = node.next;</span><br><span class="line">                <span class="comment">//记录修改次数</span></span><br><span class="line">                ++modCount;</span><br><span class="line">                <span class="comment">//变动的数量</span></span><br><span class="line">                --size;</span><br><span class="line">                afterNodeRemoval(node);</span><br><span class="line">                <span class="keyword">return</span> node;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h4 id="4-3-5查找元素方法-get">4.3.5查找元素方法(get)</h4><p>查找方法，通过元素的Key找到Value。</p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="literal">null</span> ? <span class="literal">null</span> : e.value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>get方法主要调用的是getNode方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title function_">getNode</span><span class="params">(<span class="type">int</span> hash, Object key)</span> &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="type">int</span> n; K k;</span><br><span class="line">    <span class="comment">//如果哈希表不为空并且key对应的桶上不为空</span></span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="literal">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">/* </span></span><br><span class="line"><span class="comment">        判断数组元素是否相等</span></span><br><span class="line"><span class="comment">        根据索引的位置检查第一个元素</span></span><br><span class="line"><span class="comment">        注意：总是检查第一个元素</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="comment">// 如果不是第一个元素，判断是否有后续节点</span></span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 判断是否是红黑树，是的话调用红黑树中的getTreeNode方法获取节点</span></span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="comment">// 不是红黑树的话，那就是链表结构了，通过循环的方法判断链表中是否存在该key</span></span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="literal">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>小结：</p><p>1.get方法实现的步骤：</p><p>​1）通过hash值获取该key映射到的桶</p><p>​2）桶上的key就是要查找的key,则直接找到并返回</p><p>​3）桶上的key不是要找的key,则查看后续的节点：</p><p>​a:如果后续节点是红黑树节点，通过调用红黑树的方法根据key获取value</p><p>​b:如果后续节点是链表节点，则通过循环遍历链表根据key获取value</p><p>2.上述红黑树节点调用的是getTreeNode方法通过树形节点的find方法进行查找：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">getTreeNode</span><span class="params">(<span class="type">int</span> h, Object k)</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> ((parent != <span class="literal">null</span>) ? root() : <span class="built_in">this</span>).find(h, k, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">final</span> TreeNode&lt;K,V&gt; <span class="title function_">find</span><span class="params">(<span class="type">int</span> h, Object k, Class&lt;?&gt; kc)</span> &#123;</span><br><span class="line">           TreeNode&lt;K,V&gt; p = <span class="built_in">this</span>;</span><br><span class="line">           <span class="keyword">do</span> &#123;</span><br><span class="line">               <span class="type">int</span> ph, dir; K pk;</span><br><span class="line">               TreeNode&lt;K,V&gt; pl = p.left, pr = p.right, q;</span><br><span class="line">               <span class="keyword">if</span> ((ph = p.hash) &gt; h)</span><br><span class="line">                   p = pl;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (ph &lt; h)</span><br><span class="line">                   p = pr;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((pk = p.key) == k || (k != <span class="literal">null</span> &amp;&amp; k.equals(pk)))</span><br><span class="line">                   <span class="keyword">return</span> p;<span class="comment">//找到之后直接返回</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (pl == <span class="literal">null</span>)</span><br><span class="line">                   p = pr;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (pr == <span class="literal">null</span>)</span><br><span class="line">                   p = pl;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((kc != <span class="literal">null</span> ||</span><br><span class="line">                         (kc = comparableClassFor(k)) != <span class="literal">null</span>) &amp;&amp;</span><br><span class="line">                        (dir = compareComparables(kc, k, pk)) != <span class="number">0</span>)</span><br><span class="line">                   p = (dir &lt; <span class="number">0</span>) ? pl : pr;</span><br><span class="line">               <span class="comment">//递归查找</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((q = pr.find(h, k, kc)) != <span class="literal">null</span>)</span><br><span class="line">                   <span class="keyword">return</span> q;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   p = pl;</span><br><span class="line">           &#125; <span class="keyword">while</span> (p != <span class="literal">null</span>);</span><br><span class="line">           <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">       &#125;</span><br></pre></td></tr></table></figure><p>3.查找红黑树，由于之前添加时已经保证这个树是有序的了，因此查找时基本就是折半查找，效率更高。</p><p>4.这里和插入时一样，如果对比节点的哈希值和要查找的哈希值相等，就会判断key是否相等，相等就直接返回。不相等就从子树中递归查找。</p><ol start="5"><li></li></ol><p>​若为树，则在树中通过key.equals(k)查找，O(logn)</p><p>​若为链表，则在链表中通过key.equals(k)查找，O(n)。</p><h4 id="4-3-6遍历HashMap集合几种方式">4.3.6遍历HashMap集合几种方式</h4><p>1、分别遍历Key和Values</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117160455507.png" alt="image-20191117160455507"></p><p>2、使用Iterator迭代器迭代</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117160627369.png" alt="image-20191117160627369"></p><p>3、通过get方式（不建议使用）</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117160733756.png" alt="image-20191117160733756"></p><p>说明：根据阿里开发手册，不建议使用这种方式，因为迭代两次。keySet获取Iterator一次，还有通过get又迭代一次。降低性能。</p><p>4.jdk8以后使用Map接口中的默认方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">default</span> <span class="keyword">void</span> <span class="title function_">forEach</span><span class="params">(BiConsumer&lt;? <span class="built_in">super</span> K,? <span class="built_in">super</span> V&gt; action)</span> </span><br><span class="line">BiConsumer接口中的方法：</span><br><span class="line"><span class="keyword">void</span> accept​(T t, U u) 对给定的参数执行此操作。  </span><br><span class="line">参数 </span><br><span class="line">            t - 第一个输入参数 </span><br><span class="line">            u - 第二个输入参数 </span><br></pre></td></tr></table></figure><p>遍历代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        HashMap&lt;String,String&gt; m1 = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">        m1.put(<span class="string">&quot;001&quot;</span>, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        m1.put(<span class="string">&quot;002&quot;</span>, <span class="string">&quot;lisi&quot;</span>);</span><br><span class="line">        m1.forEach((key,value)-&gt;&#123;</span><br><span class="line">            System.out.println(key+<span class="string">&quot;---&quot;</span>+value);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-如何设计多个非重复的键值对要存储HashMap的初始化？">5.如何设计多个非重复的键值对要存储HashMap的初始化？</h2><h3 id="5-1HashMap的初始化问题描述">5.1HashMap的初始化问题描述</h3><p>​如果我们确切的知道我们有多少键值对需要存储，那么我们在初始化HashMap的时候就应该指定它的容量，以防止HashMap自动扩容，影响使用效率。</p><p>​默认情况下HashMap的容量是16，但是，如果用户通过构造函数指定了一个数字作为容量，那么Hash会选择大于该数字的第一个2的幂作为容量。(3-&gt;4、7-&gt;8、9-&gt;16) .这点我们在上述已经进行过讲解。</p><p>《阿里巴巴Java开发手册》中建议我们设置HashMap的初始化容量。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117164748836.png" alt="image-20191117164748836"></p><p>那么，为什么要这么建议？你有想过没有。</p><p>当然，以上建议也是有理论支撑的。我们上面介绍过，HashMap的扩容机制，就是当达到扩容条件时会进行扩容。HashMap的扩容条件就是当HashMap中的元素个数（size）超过临界值（threshold）时就会自动扩容。在HashMap中，threshold = loadFactor * capacity。</p><p>所以，如果我们没有设置初始容量大小，随着元素的不断增加，HashMap会有可能发生多次扩容，而HashMap中的扩容机制决定了每次扩容都需要重建hash表，是非常影响性能的。</p><p>但是设置初始化容量，设置的数值不同也会影响性能，那么当我们已知HashMap中即将存放的KV个数的时候，容量设置成多少为好呢？</p><h3 id="5-2HashMap中容量的初始化">5.2HashMap中容量的初始化</h3><p>当我们使用HashMap(int initialCapacity)来初始化容量的时候，jdk会默认帮我们计算一个相对合理的值当做初始容量。那么，是不是我们只需要把已知的HashMap中即将存放的元素个数直接传给initialCapacity就可以了呢？</p><p>关于这个值的设置，在《阿里巴巴Java开发手册》有以下建议：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/img/image-20191117165438726.png" alt="image-20191117165438726"></p><p>也就是说，如果我们设置的默认值是7，经过Jdk处理之后，会被设置成8，但是，这个HashMap在元素个数达到 8*0.75 = 6的时候就会进行一次扩容，这明显是我们不希望见到的。我们应该尽量减少扩容。原因也已经分析过。</p><p>如果我们通过<strong>initialCapacity/ 0.75F + 1.0F</strong>计算，7/0.75 + 1 = 10 ,10经过Jdk处理之后，会被设置成16，这就大大的减少了扩容的几率。</p><p>当HashMap内部维护的哈希表的容量达到75%时（默认情况下），会触发rehash，而rehash的过程是比较耗费时间的。所以初始化容量要设置成<strong>initialCapacity/0.75 + 1</strong>的话，可以有效的减少冲突也可以减小误差。</p><p>所以，我可以认为，当我们明确知道HashMap中元素的个数的时候，把默认容量设置成<strong>initialCapacity/ 0.75F + 1.0F</strong>是一个在性能上相对好的选择，但是，同时也会牺牲些内存。</p><p>我们想要在代码中创建一个HashMap的时候，如果我们已知这个Map中即将存放的元素个数，给HashMap设置初始容量可以在一定程度上提升效率。</p><p>但是，JDK并不会直接拿用户传进来的数字当做默认容量，而是会进行一番运算，最终得到一个2的幂。原因也已经分析过。</p><p>但是，为了最大程度的避免扩容带来的性能消耗，我们建议可以把默认容量的数字设置成<strong>initialCapacity/ 0.75F + 1.0F</strong>。</p>]]></content>
    
    
    <summary type="html">java基础知识</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>Langchain4j</title>
    <link href="https://yjyrichard.github.io/posts/2ffe06be.html"/>
    <id>https://yjyrichard.github.io/posts/2ffe06be.html</id>
    <published>2025-06-05T13:24:25.548Z</published>
    <updated>2025-06-08T07:00:41.816Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1>Langchain4j</h1><h2 id="前置知识">前置知识</h2><ul><li><p>Java基础</p></li><li><p>Maven</p></li><li><p>MySQL</p></li><li><p>SSM</p></li><li><p>SpringBoot</p></li></ul><h2 id="一、LangChain4j-入门">一、LangChain4j 入门</h2><h3 id="1、简介">1、简介</h3><p>LangChain4j 的目标是简化将大语言模型（LLM - Large Language Model）集成到 Java 应用程序中的过程。</p><h4 id="1-1、历史背景">1.1、历史背景</h4><p>2022 年11月30日OpenAI发布了Chat GPT（GPT-3.5）</p><p>早在 2022 年10月，Harrison Chase 发布了基于Python的LangChain。</p><p>随后同时包含了Python版和JavaScript（LangChain.js）版的LangChain 也发布了。</p><p>2023 年 11 月，Quarkus 发布了 LangChain4j 的 0.1 版本，2025 年 2 月发布了 1.0 - Beta1 版本，4 月发布了 1.0 - Beta3 版本</p><p>**官网：**<a href="https://docs.langchain4j.dev">https://docs.langchain4j.dev</a></p><h4 id="1-2、主要功能">1.2、主要功能</h4><p><strong>与大型语言模型和向量数据库的便捷交互</strong></p><p>通过统一的应用程序编程接口（API），可以轻松访问所有主要的商业和开源大型语言模型以及向量数据库，使你能够构建聊天机器人、智能助手等应用。</p><p><strong>专为 Java 打造</strong></p><p>借助Spring Boot 集成，能够将大模型集成到ava 应用程序中。大型语言模型与 Java 之间实现了双向集成：你可以从 Java 中调用大型语言模型，同时也允许大型语言模型反过来调用你的 Java 代码</p><p><strong>智能代理、工具、检索增强生成（RAG）</strong></p><p>为常见的大语言模型操作提供了广泛的工具，涵盖从底层的提示词模板创建、聊天记忆管理和输出解析，到智能代理和检索增强生成等高级模式。</p><h4 id="1-3、应用示例">1.3、应用示例</h4><ol><li><p>你想要实现一个自定义的由人工智能驱动的聊天机器人，它可以访问你的数据，并按照你期望的方式运行：</p><ul><li><p>客户支持聊天机器人，它可以：</p><ul><li>礼貌地回答客户问题</li></ul></li></ul></li></ol><ul><li><p>处理 / 更改 / 取消订单</p></li><li><p>教育助手，它可以：</p><ul><li>教授各种学科</li></ul></li><li><p>解释不清楚的部分</p><ul><li>评估用户的理解 / 知识水平</li></ul></li></ul><ol start="2"><li><p>你想要处理大量的非结构化数据（文件、网页等），并从中提取结构化信息。例如：</p><ul><li>从客户评价和支持聊天记录中提取有效评价</li><li>从竞争对手的网站上提取有趣的信息</li><li>从求职者的简历中提取有效信息</li></ul></li><li><p>你想要生成信息，例如：</p><ul><li>为你的每个客户量身定制的电子邮件</li><li>为你的应用程序 / 网站生成内容：<ul><li>博客文章</li><li>故事</li></ul></li></ul></li><li><p>你想要转换信息，例如：</p><ul><li>总结</li><li>校对和改写</li><li>翻译</li></ul></li></ol><h3 id="2、创建SpringBoot项目">2、创建SpringBoot项目</h3><h4 id="2-1、创建一个Maven项目">2.1、创建一个Maven项目</h4><p>java-ai-langchain4j</p><h4 id="2-2、添加SpringBoot相关依赖">2.2、添加SpringBoot相关依赖</h4><p>在pom.xml的 <project> 节点下填加如下依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-boot.version</span>&gt;</span>3.2.6<span class="tag">&lt;/<span class="name">spring-boot.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">knife4j.version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">knife4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">langchain4j.version</span>&gt;</span>1.0.0-beta3<span class="tag">&lt;/<span class="name">langchain4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- web应用程序核心依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 编写和运行测试用例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 前后端分离中的后端接口测试工具 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;knife4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入SpringBoot依赖管理清单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-boot.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3、创建配置文件">2.3、创建配置文件</h4><p>在resources下创建配置文件application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># web服务访问端口</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">8080</span></span><br></pre></td></tr></table></figure><h4 id="2-4、创建启动类">2.4、创建启动类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaozhiApp</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(XiaozhiApp.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5、启动启动类">2.5、启动启动类</h4><p>访问 <a href="http://localhost:8080/doc.html">http://localhost:8080/doc.html</a> 查看程序能否成功运行并显示knife4j的界面</p><h3 id="3、接入大模型">3、接入大模型</h3><ul><li><strong>参考文档： Get Started</strong><a href="https://docs.langchain4j.dev/get-started">https://docs.langchain4j.dev/get-started</a></li></ul><h4 id="3-1、LangChain4j-库结构">3.1、LangChain4j 库结构</h4><p>LangChain4j 具有模块化设计，包括：</p><ol><li>langchain4j-core 模块，它定义了核心抽象概念（如聊天语言模型和嵌入存储）及其 API。</li><li>主 langchain4j 模块，包含有用的工具，如文档加载器、聊天记忆实现，以及诸如人工智能服务等高层功能。</li><li>大量的 langchain4j-{集成} 模块，每个模块都将各种大语言模型提供商和嵌入存储集成到 LangChain4j 中。你可以独立使用 langchain4j-{集成} 模块。如需更多功能，只需导入主 langchain4j 依赖项即可。</li></ol><h4 id="3-2、添加LangChain4j相关依赖">3.2、添加LangChain4j相关依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">langchain4j.version</span>&gt;</span>1.0.0-beta3<span class="tag">&lt;/<span class="name">langchain4j.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 基于open-ai的langchain4j接口：ChatGPT、deepseek都是open-ai标准下的大模型 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-open-ai<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引入langchain4j依赖管理清单--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;langchain4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-3、创建测试用例">3.3、创建测试用例</h4><p>接入任何一个大模型都需要先去申请apiKey。</p><p>如果你暂时没有密钥，也可以使用LangChain4j 提供的演示密钥，这个密钥是免费的，有使用配额限制，且仅限于 gpt-4o-mini 模型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> dev.langchain4j.model.openai.OpenAiChatModel;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LLMTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * gpt-4o-mini语言模型接入测试</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGPTDemo</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化模型</span></span><br><span class="line">        <span class="type">OpenAiChatModel</span> <span class="variable">model</span> <span class="operator">=</span> OpenAiChatModel.builder()</span><br><span class="line">                <span class="comment">//LangChain4j提供的代理服务器，该代理服务器会将演示密钥替换成真实密钥， 再将请求转发给OpenAI API</span></span><br><span class="line">                <span class="comment">//.baseUrl(&quot;http://langchain4j.dev/demo/openai/v1&quot;) //设置模型api地址（如果apiKey=&quot;demo&quot;，则可省略baseUrl的配置）</span></span><br><span class="line">                .apiKey(<span class="string">&quot;demo&quot;</span>) <span class="comment">//设置模型apiKey</span></span><br><span class="line">                .modelName(<span class="string">&quot;gpt-4o-mini&quot;</span>) <span class="comment">//设置模型名称</span></span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向模型提问</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> model.chat(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">        <span class="comment">//输出结果</span></span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、SpringBoot整合">4、SpringBoot整合</h3><p>**参考文档：**<a href="https://docs.langchain4j.dev/tutorials/spring-boot-integration">https://docs.langchain4j.dev/tutorials/spring-boot-integration</a></p><h4 id="4-1、替换依赖">4.1、替换依赖</h4><p>将 <code>langchain4j-open-ai</code> 替换成 <code>langchain4j-open-ai-spring-boot-starter</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-open-ai-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2、配置模型参数">4.2、配置模型参数</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#langchain4j测试模型</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.api-key</span>=<span class="string">demo</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.model-name</span>=<span class="string">gpt-4o</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#请求和响应日志</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.log-requests</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.log-responses</span>=<span class="string">true</span></span><br><span class="line"><span class="comment">#启用日志debug级别</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">debug</span></span><br></pre></td></tr></table></figure><h4 id="4-3、创建测试用例">4.3、创建测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 整合SpringBoot</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OpenAiChatModel openAiChatModel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSpringBoot</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//向模型提问</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> openAiChatModel.chat(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、接入其他大模型">二、接入其他大模型</h2><h3 id="1、都有哪些大模型">1、都有哪些大模型</h3><ul><li>**大语言模型排行榜：**<a href="https://superclueai.com/">https://superclueai.com/</a></li></ul><p>SuperCLUE 是由国内 CLUE 学术社区于 2023 年 5 月推出的中文通用大模型综合性评测基准。</p><ul><li><p><strong>评测目的</strong>：全面评估中文大模型在语义理解、逻辑推理、代码生成等 10 项基础能力，以及涵盖数学、物理、社科等 50 多学科的专业能力，旨在回答在通用大模型发展背景下，中文大模型的效果情况，包括不同任务效果、与国际代表性模型的差距、与人类的效果对比等问题。</p></li><li><p><strong>特色优势</strong>：针对中文特性任务，如成语、诗歌、字形等设立专项评测，使评测更符合中文语言特点。通过 3700 多道客观题和匿名对战机制，动态追踪国内外主流模型，如 GPT-4、文心一言、通义千问等的表现差异，保证评测的客观性和时效性。</p></li><li><p><strong>行业影响</strong>：作为中文领域权威测评社区，其评测结果被学界和产业界广泛引用，例如商汤 “日日新 5.0” 和百度文心大模型均通过 SuperCLUE 验证技术突破，推动了中文 NLP 技术生态的迭代，为中文大模型的发展和优化提供了重要的参考依据，促进了中文大模型技术的不断进步和应用。</p></li><li><p><strong>LangChain4j支持接入的大模型</strong>：<a href="https://docs.langchain4j.dev/integrations/language-models/">https://docs.langchain4j.dev/integrations/language-models/</a></p></li></ul><h3 id="2、接入DeepSeek">2、接入DeepSeek</h3><h4 id="1-1、获取开发参数">1.1、获取开发参数</h4><ul><li>**访问官网：**<a href="https://www.deepseek.com/">https://www.deepseek.com/</a>  注册账号，获取base_url和api_key，充值</li></ul><h4 id="1-2、配置开发参数">1.2、配置开发参数</h4><p>为了apikay的安全，建议将其配置在服务器的环境变量中。变量名自定义即可，例如 <code>DEEP_SEEK_API_KEY</code></p><h4 id="1-3、配置模型参数">1.3、配置模型参数</h4><p>**DeepSeek API文档：**<a href="https://api-docs.deepseek.com/zh-cn/">https://api-docs.deepseek.com/zh-cn/</a></p><p>在 LangChain4j 中，DeepSeek 和 GPT 一样也使用了 OpenAI 的接口标准，因此也使用OpenAiChatModel进行接入</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#DeepSeek</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.base-url</span>=<span class="string">https://api.deepseek.com</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.api-key</span>=<span class="string">$&#123;DEEP_SEEK_API_KEY&#125;</span></span><br><span class="line"><span class="comment">#DeepSeek-V3</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.model-name</span>=<span class="string">deepseek-chat</span></span><br><span class="line"><span class="comment">#DeepSeek-R1 推理模型</span></span><br><span class="line"><span class="comment">#langchain4j.open-ai.chat-model.model-name=deepseek-reasoner</span></span><br></pre></td></tr></table></figure><h4 id="1-4、测试">1.4、测试</h4><p>直接使用前面的测试用例即可</p><p>配置好后记得在idea下方的终端进行验证：echo %DEEP_SEEK_API_KEY%</p><h3 id="3、ollama本地部署">3、ollama本地部署</h3><h4 id="3-1、为什么要本地部署">3.1、为什么要本地部署</h4><p>Ollama 是一个本地部署大模型的工具。使用 Ollama 进行本地部署有以下多方面的原因：</p><ul><li>数据隐私与安全：对于金融、医疗、法律等涉及大量敏感数据的行业，数据安全至关重要。</li><li>离线可用性：在网络不稳定或无法联网的环境中，本地部署的 Ollama 模型仍可正常运行。</li><li>降低成本：云服务通常按使用量收费，长期使用下来费用较高。而 Ollama 本地部署，只需一次性投入硬件成本，对于需要频繁使用大语言模型且对成本敏感的用户或企业来说，能有效节约成本。</li><li>部署流程简单：只需通过简单的命令 “ollama run &lt; 模型名&gt;”，就可以自动下载并运行所需的模型。</li><li>灵活扩展与定制：可对模型微调，以适配垂直领域需求。</li></ul><h4 id="3-2、在ollama上部署DeepSeek">3.2、在ollama上部署DeepSeek</h4><p>**官网：**<a href="https://ollama.com/">https://ollama.com/</a></p><p>（1）下载并安装ollama：<code>OllamaSetup.exe</code></p><p>（2）查看模型列表，选择要部署的模型，<strong>模型列表：</strong> <a href="https://ollama.com/search">https://ollama.com/search</a></p><p>（3）执行命令：<code>ollama run deepseek-r1:1.5</code>运行大模型。如果是第一次运行则会先下载大模型</p><h4 id="3-3、常用命令">3.3、常用命令</h4><h4 id="3-4、引入依赖">3.4、引入依赖</h4><p>**参考文档：**<a href="https://docs.langchain4j.dev/integrations/language-models/ollama#get-started">https://docs.langchain4j.dev/integrations/language-models/ollama#get-started</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 接入ollama --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-ollama-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5、配置模型参数">3.5、配置模型参数</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#ollama</span></span><br><span class="line"><span class="attr">langchain4j.ollama.chat-model.base-url</span>=<span class="string">http://localhost:11434</span></span><br><span class="line"><span class="attr">langchain4j.ollama.chat-model.model-name</span>=<span class="string">deepseek-r1:1.5b</span></span><br><span class="line"><span class="attr">langchain4j.ollama.chat-model.log-requests</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">langchain4j.ollama.chat-model.log-responses</span>=<span class="string">true</span></span><br></pre></td></tr></table></figure><h4 id="3-6、创建测试用例">3.6、创建测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ollama接入</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> OllamaChatModel ollamaChatModel;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testOllama</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//向模型提问</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> ollamaChatModel.chat(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、接入阿里百炼平台">4、接入阿里百炼平台</h3><h4 id="4-1、什么是阿里百炼">4.1、什么是阿里百炼</h4><ul><li><p>阿里云百炼是 2023 年 10 月推出的。它集成了阿里的通义系列大模型和第三方大模型，涵盖文本、图像、音视频等不同模态。</p></li><li><p><strong>功能优势</strong>：集成超百款大模型 API，模型选择丰富；5-10 分钟就能低代码快速构建智能体，应用构建高效；提供全链路模型训练、评估工具及全套应用开发工具，模型服务多元；在线部署可按需扩缩容，新用户有千万 token 免费送，业务落地成本低。</p></li><li><p>**支持接入的模型列表：**<a href="https://help.aliyun.com/zh/model-studio/models">https://help.aliyun.com/zh/model-studio/models</a></p></li><li><p>**模型广场：**<a href="https://bailian.console.aliyun.com/?productCode=p_efm#/model-market">https://bailian.console.aliyun.com/?productCode=p_efm#/model-market</a></p></li></ul><h4 id="4-2、申请免费体验">4.2、申请免费体验</h4><p>（1）点击进入免费体验页面</p><p>（2）点击免费体验</p><p>（3）点击开通服务</p><p>（4）确认开通</p><h4 id="4-3、配置apiKey">4.3、配置apiKey</h4><p>**申请apiKey：**<a href="https://bailian.console.aliyun.com/?apiKey=1&amp;productCode=p_efm#/api-key">https://bailian.console.aliyun.com/?apiKey=1&amp;productCode=p_efm#/api-key</a></p><p><strong>配置apiKey：<strong>配置在环境变量</strong>DASH_SCOPE_API_KEY</strong>中</p><h4 id="4-4、添加依赖">4.4、添加依赖</h4><p>**LangChain4j参考文档：**<a href="https://docs.langchain4j.dev/integrations/language-models/dashscope#plain-java">https://docs.langchain4j.dev/integrations/language-models/dashscope#plain-java</a></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 接入阿里云百炼平台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-community-dashscope-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--引入百炼依赖管理清单--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-community-bom<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;langchain4j.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-5、配置模型参数">4.5、配置模型参数</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#阿里百炼平台</span></span><br><span class="line"><span class="attr">langchain4j.community.dashscope.chat-model.api-key</span>=<span class="string">$&#123;DASH_SCOPE_API_KEY&#125;</span></span><br><span class="line"><span class="attr">langchain4j.community.dashscope.chat-model.model-name</span>=<span class="string">qwen-max</span></span><br></pre></td></tr></table></figure><h4 id="4-6、测试通义千问">4.6、测试通义千问</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通义千问大模型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> QwenChatModel qwenChatModel;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDashScopeQwen</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//向模型提问</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> qwenChatModel.chat(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line">    <span class="comment">//输出结果</span></span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-6、测试通义万象">4.6、测试通义万象</h4><p>生成图片测试</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDashScopeWanx</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">WanxImageModel</span> <span class="variable">wanxImageModel</span> <span class="operator">=</span> WanxImageModel.builder()</span><br><span class="line">            .modelName(<span class="string">&quot;wanx2.1-t2i-plus&quot;</span>)</span><br><span class="line">            .apiKey(System.getenv(<span class="string">&quot;DASH_SCOPE_API_KEY&quot;</span>))</span><br><span class="line">            .build();</span><br><span class="line">    Response&lt;Image&gt; response = wanxImageModel.generate(<span class="string">&quot;奇幻森林精灵：在一片弥漫着轻柔薄雾的古老森林深处，阳光透过茂密枝叶洒下金色光斑。一位身材娇小、长着透明薄翼的精灵少女站在一朵硕大的蘑菇上。她有着海藻般的绿色长发，发间点缀着蓝色的小花，皮肤泛着珍珠般的微光。身上穿着由翠绿树叶和白色藤蔓编织而成的连衣裙，手中捧着一颗散发着柔和光芒的水晶球，周围环绕着五彩斑斓的蝴蝶，脚下是铺满苔藓的地面，蘑菇和蕨类植物丛生，营造出神秘而梦幻的氛围。&quot;</span>);</span><br><span class="line">    System.out.println(response.content().url());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-7、测试DeepSeek">4.7、测试DeepSeek</h4><p>也可以在阿里百炼上集成第三方大模型，如DeepSeek</p><p>将配置参数上的base-url参数指定到百炼平台，使用百炼上的大模型名称和apiKey即可</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集成百炼-deepseek</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.base-url</span>=<span class="string">https://dashscope.aliyuncs.com/compatible-mode/v1</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.api-key</span>=<span class="string">$&#123;DASH_SCOPE_API_KEY&#125;</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.model-name</span>=<span class="string">deepseek-v3</span></span><br><span class="line"><span class="comment">#温度系数：取值范围通常在 0 到 1 之间。值越高，模型的输出越随机、富有创造性；</span></span><br><span class="line"><span class="comment"># 值越低，输出越确定、保守。这里设置为 0.9，意味着模型会有一定的随机性，生成的回复可能会比较多样化。</span></span><br><span class="line"><span class="attr">langchain4j.open-ai.chat-model.temperature</span>=<span class="string">0.9</span></span><br></pre></td></tr></table></figure><p>使用之前的测试用例<code>testSpringBoot</code>测试即可</p><h2 id="三、人工智能服务-AIService">三、人工智能服务 AIService</h2><h3 id="1、什么是AIService">1、什么是AIService</h3><p>AIService使用面向接口和动态代理的方式完成程序的编写，更灵活的实现高级功能。</p><h4 id="1-1、链-Chain（旧版）">1.1、链 Chain（旧版）</h4><p>链的概念源自 Python 中的 LangChain。其理念是针对每个常见的用例都设置一条链，比如聊天机器人、检索增强生成（RAG）等。链将多个底层组件组合起来，并协调它们之间的交互。链存在的主要问题是不灵活，我们不进行深入的研究。</p><h4 id="1-2、人工智能服务-AIService">1.2、人工智能服务 AIService</h4><p>在LangChain4j中我们使用AIService完成复杂操作。底层组件将由AIService进行组装。</p><p><strong>AIService可处理最常见的操作：</strong></p><ul><li>为大语言模型格式化输入内容</li><li>解析大语言模型的输出结果</li></ul><p><strong>它们还支持更高级的功能：</strong></p><ul><li>聊天记忆 Chat memory</li><li>工具 Tools</li><li>检索增强生成 RAG</li></ul><h3 id="2、创建AIService">2、创建AIService</h3><h4 id="2-1、引入依赖">2.1、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--langchain4j高级功能--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-2、创建接口">2.2、创建接口</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Assistant</span> &#123;</span><br><span class="line">    String <span class="title function_">chat</span><span class="params">(String userMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-3、测试用例">2.3、测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AIServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> QwenChatModel qwenChatModel;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChat</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建AIService</span></span><br><span class="line">        <span class="type">Assistant</span> <span class="variable">assistant</span> <span class="operator">=</span> AiServices.create(Assistant.class, qwenChatModel);</span><br><span class="line">        <span class="comment">//调用service的接口</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> assistant.chat(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4、-AiService">2.4、@AiService</h4><p>也可以在<code>Assistant</code>接口上添加<code>@AiService</code>注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//因为我们在配置文件中同时配置了多个大语言模型，所以需要在这里明确指定（EXPLICIT）模型的beanName（qwenChatModel）</span></span><br><span class="line"><span class="meta">@AiService(wiringMode = EXPLICIT, chatModel = &quot;qwenChatModel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Assistant</span> &#123;</span><br><span class="line">    String <span class="title function_">chat</span><span class="params">(String userMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试用例中，我们可以直接注入Assistant对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Assistant assistant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAssistant</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> assistant.chat(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5、工作原理">2.5、工作原理</h4><p>AiServices会<strong>组装Assistant接口以及其他组件</strong>，并使用反射机制创建一个实现Assistant接口的<strong>代理对象</strong>。这个代理对象会处理输入和输出的所有转换工作。在这个例子中，chat方法的输入是一个字符串，但是大模型需要一个<code>UserMessage</code>对象。所以，代理对象将这个字符串转换为<code>UserMessage</code>，并调用聊天语言模型。chat方法的输出类型也是字符串，但是大模型返回的是 <code>AiMessage</code> 对象，代理对象会将其转换为字符串。</p><p><strong>简单理解就是：代理对象的作用是输入转换和输出转换</strong></p><h2 id="四、聊天记忆-Chat-memory">四、聊天记忆 Chat memory</h2><h3 id="1、测试对话是否有记忆">1、测试对话是否有记忆</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatMemoryTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Assistant assistant;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChatMemory</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">answer1</span> <span class="operator">=</span> assistant.chat(<span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">        System.out.println(answer1);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">answer2</span> <span class="operator">=</span> assistant.chat(<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">        System.out.println(answer2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很显然，目前的接入方式，大模型是没有记忆的。API级别是不行的</p><h3 id="2、聊天记忆的简单实现">2、聊天记忆的简单实现</h3><p>可以使用下面的方式实现对话记忆。[其实就是把上次问的和回答的都一起发送给一轮对话来达到记忆的效果]</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> QwenChatModel qwenChatModel;</span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChatMemory2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第一轮对话</span></span><br><span class="line">    <span class="type">UserMessage</span> <span class="variable">userMessage1</span> <span class="operator">=</span> UserMessage.userMessage(<span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">    <span class="type">ChatResponse</span> <span class="variable">chatResponse1</span> <span class="operator">=</span> qwenChatModel.chat(userMessage1);</span><br><span class="line">    <span class="type">AiMessage</span> <span class="variable">aiMessage1</span> <span class="operator">=</span> chatResponse1.aiMessage();</span><br><span class="line">    <span class="comment">//输出大语言模型的回复</span></span><br><span class="line">    System.out.println(aiMessage1.text());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二轮对话</span></span><br><span class="line">    <span class="type">UserMessage</span> <span class="variable">userMessage2</span> <span class="operator">=</span> UserMessage.userMessage(<span class="string">&quot;你知道我是谁吗&quot;</span>);</span><br><span class="line">    <span class="type">ChatResponse</span> <span class="variable">chatResponse2</span> <span class="operator">=</span> qwenChatModel.chat(Arrays.asList(userMessage1, aiMessage1, userMessage2));</span><br><span class="line">    <span class="type">AiMessage</span> <span class="variable">aiMessage2</span> <span class="operator">=</span> chatResponse2.aiMessage();</span><br><span class="line">    <span class="comment">//输出大语言模型的回复</span></span><br><span class="line">    System.out.println(aiMessage2.text());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、使用ChatMemory实现聊天记忆">3、使用ChatMemory实现聊天记忆</h3><p>使用AIService可以封装多轮对话的复杂性，使聊天记忆功能的实现变得简单</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChatMemory3</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建chatMemory</span></span><br><span class="line">    <span class="type">MessageWindowChatMemory</span> <span class="variable">chatMemory</span> <span class="operator">=</span> MessageWindowChatMemory.withMaxMessages(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建AIService</span></span><br><span class="line">    <span class="type">Assistant</span> <span class="variable">assistant</span> <span class="operator">=</span> AiServices</span><br><span class="line">            .builder(Assistant.class)</span><br><span class="line">            .chatLanguageModel(qwenChatModel)</span><br><span class="line">            .chatMemory(chatMemory)</span><br><span class="line">            .build();</span><br><span class="line">    <span class="comment">//调用service的接口</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">answer1</span> <span class="operator">=</span> assistant.chat(<span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">    System.out.println(answer1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer2</span> <span class="operator">=</span> assistant.chat(<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">    System.out.println(answer2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、使用AIService实现聊天记忆">4、使用AIService实现聊天记忆</h3><h4 id="4-1、创建记忆对话智能体">4.1、创建记忆对话智能体</h4><p>当AIService由多个组件（大模型，聊天记忆，等）组成的时候，我们就可以称他为<code>智能体</code>了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.assistant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">    wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">    chatModel = &quot;qwenChatModel&quot;,</span></span><br><span class="line"><span class="meta">    chatMemory = &quot;chatMemory&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">MemoryChatAssistant</span> &#123;</span><br><span class="line"></span><br><span class="line">    String <span class="title function_">chat</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2、配置ChatMemory">4.2、配置ChatMemory</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MemoryChatAssistantConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ChatMemory <span class="title function_">chatMemory</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//设置聊天记忆记录的message数量</span></span><br><span class="line">        <span class="keyword">return</span> MessageWindowChatMemory.withMaxMessages(<span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="4-3、测试">4.3、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MemoryChatAssistant memoryChatAssistant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChatMemory4</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer1</span> <span class="operator">=</span> memoryChatAssistant.chat(<span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">    System.out.println(answer1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer2</span> <span class="operator">=</span> memoryChatAssistant.chat(<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">    System.out.println(answer2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、隔离聊天记忆">5、隔离聊天记忆</h3><p>为每个用户的新聊天或者不同的用户区分聊天记忆</p><h4 id="5-1、创建记忆隔离对话智能体">5.1、创建记忆隔离对话智能体</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.assistant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">    wiringMode = EXPLICIT, </span></span><br><span class="line"><span class="meta">    chatMemory = &quot;chatMemory&quot;,</span></span><br><span class="line"><span class="meta">    chatMemoryProvider = &quot;chatMemoryProvider&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SeparateChatAssistant</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分离聊天记录</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> memoryId 聊天id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> userMessage 用户消息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    String <span class="title function_">chat</span><span class="params">(<span class="meta">@MemoryId</span> <span class="type">int</span> memoryId, <span class="meta">@UserMessage</span> String userMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-2、配置ChatMemoryProvider">5.2、配置ChatMemoryProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeparateChatAssistantConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ChatMemoryProvider <span class="title function_">chatMemoryProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memoryId -&gt; MessageWindowChatMemory.builder()</span><br><span class="line">                .id(memoryId)</span><br><span class="line">            .maxMessages(<span class="number">10</span>)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="5-3、测试对话助手">5.3、测试对话助手</h4><p>用两个不同的memoryId测试聊天记忆的隔离效果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> SeparateChatAssistant separateChatAssistant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testChatMemory5</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer1</span> <span class="operator">=</span> separateChatAssistant.chat(<span class="number">1</span>,<span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">    System.out.println(answer1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer2</span> <span class="operator">=</span> separateChatAssistant.chat(<span class="number">1</span>,<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">    System.out.println(answer2);</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer3</span> <span class="operator">=</span> separateChatAssistant.chat(<span class="number">2</span>,<span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">    System.out.println(answer3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、持久化聊天记忆-Persistence">五、持久化聊天记忆 Persistence</h2><p>默认情况下，聊天记忆存储在内存中。如果需要持久化存储，可以实现一个自定义的聊天记忆存储类，以便将聊天消息存储在你选择的任何持久化存储介质中。</p><h3 id="1、存储介质的选择">1、存储介质的选择</h3><p>大模型中聊天记忆的存储选择哪种数据库，需要综合考虑数据特点、应用场景和性能要求等因素，以下是一些常见的选择及其特点：</p><ul><li><p>MySQL</p><ul><li><p><strong>特点</strong>：关系型数据库。支持事务处理，确保数据的一致性和完整性，适用于结构化数据的存储和查询。</p></li><li><p><strong>适用场景</strong>：如果聊天记忆数据结构较为规整，例如包含固定的字段如对话 ID、用户 ID、时间戳、消息内容等，且需要进行复杂的查询和统计分析，如按用户统计对话次数、按时间范围查询特定对话等，MySQL 是不错的选择。</p></li></ul></li><li><p>Redis</p><ul><li><p><strong>特点</strong>：内存数据库，读写速度极高。它适用于存储热点数据，并且支持多种数据结构，如字符串、哈希表、列表等，方便对不同类型的聊天记忆数据进行处理。</p></li><li><p><strong>适用场景</strong>：对于实时性要求极高的聊天应用，如在线客服系统或即时通讯工具，Redis 可以快速存储和获取最新的聊天记录，以提供流畅的聊天体验。</p></li></ul></li><li><p>MongoDB</p><ul><li><p><strong>特点</strong>：文档型数据库，数据以 JSON - like 的文档形式存储，具有高度的灵活性和可扩展性。它不需要预先定义严格的表结构，适合存储半结构化或非结构化的数据。</p></li><li><p><strong>适用场景</strong>：当聊天记忆中包含多样化的信息，如文本消息、图片、语音等多媒体数据，或者消息格式可能会频繁变化时，MongoDB 能很好地适应这种灵活性。例如，一些社交应用中用户可能会发送各种格式的消息，使用 MongoDB 可以方便地存储和管理这些不同类型的数据。</p></li></ul></li><li><p>Cassandra</p><ul><li><p><strong>特点</strong>：是一种分布式的 NoSQL 数据库，具有高可扩展性和高可用性，能够处理大规模的分布式数据存储和读写请求。适合存储海量的、时间序列相关的数据。</p></li><li><p><strong>适用场景</strong>：对于大型的聊天应用，尤其是用户量众多、聊天数据量巨大且需要分布式存储和处理的场景，Cassandra 能够有效地应对高并发的读写操作。例如，一些面向全球用户的社交媒体平台，其聊天数据需要在多个节点上进行分布式存储和管理，Cassandra 可以提供强大的支持。</p></li></ul></li></ul><h3 id="2、MongoDB">2、MongoDB</h3><h4 id="2-1、简介">2.1、简介</h4><p>MongoDB 是一个基于文档的 NoSQL 数据库，由 MongoDB Inc. 开发。</p><p>NoSQL，指的是非关系型的数据库。NoSQL有时也称作Not Only SQL的缩写，是对不同于传统的关系型数据库的数据库管理系统的统称。</p><p>MongoDB 的设计理念是为了应对大数据量、高性能和灵活性需求。</p><p>MongoDB使用集合（Collections）来组织文档（Documents），每个文档都是由键值对组成的。</p><ul><li><strong>数据库（Database）</strong>：存储数据的容器，类似于关系型数据库中的数据库。</li><li><strong>集合（Collection）</strong>：数据库中的一个集合，类似于关系型数据库中的表。</li><li><strong>文档（Document）</strong>：集合中的一个数据记录，类似于关系型数据库中的行（row），以 BSON 格式存储。</li></ul><p>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成，文档类似于 JSON 对象，字段值可以包含其他文档，数组及文档数组</p><h4 id="2-2、安装MongoDB">2.2、安装MongoDB</h4><p>服务器：<code>mongodb-windows-x86_64-8.0.6-signed.msi </code><a href="https://www.mongodb.com/try/download/community">https://www.mongodb.com/try/download/community</a></p><p>命令行客户端 ：<code>mongosh-2.5.0-win32-x64.zip</code> <a href="https://www.mongodb.com/try/download/shell">https://www.mongodb.com/try/download/shell</a></p><p>图形客户端：<code>mongodb-compass-1.39.3-win32-x64.exe</code> <a href="https://www.mongodb.com/try/download/compass">https://www.mongodb.com/try/download/compass</a></p><h4 id="2-3、使用mongosh">2.3、使用mongosh</h4><p><strong>启动 MongoDB Shell：</strong></p><p>在命令行中输入 mongosh 命令，启动 MongoDB Shell，如果 MongoDB 服务器运行在本地默认端口（27017），则可以直接连接。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">mongosh</span></span><br></pre></td></tr></table></figure><p><strong>连接到 MongoDB 服务器：</strong></p><p>如果 MongoDB 服务器运行在非默认端口或者远程服务器上，可以使用以下命令连接：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mongosh --host &lt;hostname&gt;<span class="symbol">:&lt;port&gt;</span></span><br></pre></td></tr></table></figure><p>其中 <code>&lt;hostname&gt;</code> 是 MongoDB 服务器的主机名或 IP 地址，<code>&lt;port&gt;</code> 是 MongoDB 服务器的端口号。</p><p><strong>执行基本操作：</strong></p><p>连接成功后，可以执行各种 MongoDB 数据库操作。例如：</p><ul><li>查看当前数据库：<code>db</code></li><li>显示数据库列表：<code>show dbs</code></li><li>切换到指定数据库：<code>use &lt;database_name&gt;</code></li><li>执行查询操作：<code>db.&lt;collection_name&gt;.find()</code></li><li>插入文档：<code>db.&lt;collection_name&gt;.insertOne(&#123; ... &#125;)</code></li><li>更新文档：<code>db.&lt;collection_name&gt;.updateOne(&#123; ... &#125;)</code></li><li>删除文档：<code>db.&lt;collection_name&gt;.deleteOne(&#123; ... &#125;)</code></li><li>退出 MongoDB Shell：<code>quit()</code> 或者 <code>exit</code></li></ul><p><strong>CRUD</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">插入文档</span></span><br><span class="line"><span class="meta prompt_">test&gt; </span><span class="language-bash">db.mycollection.insertOne(&#123; name: <span class="string">&quot;Alice&quot;</span>, age: 30 &#125;)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询文档</span></span><br><span class="line"><span class="meta prompt_">test&gt; </span><span class="language-bash">db.mycollection.find()</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新文档</span></span><br><span class="line"><span class="meta prompt_">test&gt; </span><span class="language-bash">db.mycollection.updateOne(&#123; name: <span class="string">&quot;Alice&quot;</span> &#125;, &#123; <span class="variable">$set</span>: &#123; age: 31 &#125; &#125;)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除文档</span></span><br><span class="line"><span class="meta prompt_">test&gt; </span><span class="language-bash">db.mycollection.deleteOne(&#123; name: <span class="string">&quot;Alice&quot;</span> &#125;)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">退出 MongoDB Shell</span></span><br><span class="line"><span class="meta prompt_">test&gt; </span><span class="language-bash">quit()</span></span><br></pre></td></tr></table></figure><h4 id="2-4、使用mongodb-compass">2.4、使用mongodb-compass</h4><h4 id="2-5、整合SpringBoot">2.5、整合SpringBoot</h4><p>引入MongoDB依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Spring Boot Starter Data MongoDB --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-mongodb<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加远程连接配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#MongoDB连接配置</span></span><br><span class="line"><span class="attr">spring.data.mongodb.uri</span>=<span class="string">mongodb://localhost:27017/chat_memory_db</span></span><br></pre></td></tr></table></figure><h4 id="2-6、CRUD测试">2.6、CRUD测试</h4><p>创建实体类：映射MongoDB中的文档（相当与MySQL的表）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(&quot;chat_messages&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatMessages</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唯一标识，映射到 MongoDB 文档的 _id 字段</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId messageId;</span><br><span class="line">    <span class="comment">//private Long messageId;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String content; <span class="comment">//存储当前聊天记录列表的json字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建测试类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoCrudTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">   <span class="comment">/* @Test</span></span><br><span class="line"><span class="comment">    public void testInsert() &#123;</span></span><br><span class="line"><span class="comment">        mongoTemplate.insert(new ChatMessages(1L, &quot;聊天记录&quot;));</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 插入文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testInsert2</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ChatMessages</span> <span class="variable">chatMessages</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChatMessages</span>();</span><br><span class="line">        chatMessages.setContent(<span class="string">&quot;聊天记录列表&quot;</span>);</span><br><span class="line">        mongoTemplate.insert(chatMessages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ChatMessages</span> <span class="variable">chatMessages</span> <span class="operator">=</span> mongoTemplate.findById(<span class="string">&quot;6801ead733ba9c4a0d9b6c7b&quot;</span>, ChatMessages.class);</span><br><span class="line">        System.out.println(chatMessages);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> Criteria.where(<span class="string">&quot;_id&quot;</span>).is(<span class="string">&quot;6801ead733ba9c4a0d9b6c7b&quot;</span>);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(criteria);</span><br><span class="line">        <span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line">        update.set(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;新的聊天记录列表&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改或新增</span></span><br><span class="line">        mongoTemplate.upsert(query, update, ChatMessages.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增或修改文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate2</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> Criteria.where(<span class="string">&quot;_id&quot;</span>).is(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(criteria);</span><br><span class="line">        <span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line">        update.set(<span class="string">&quot;content&quot;</span>, <span class="string">&quot;新的聊天记录列表&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//修改或新增</span></span><br><span class="line">        mongoTemplate.upsert(query, update, ChatMessages.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除文档</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDelete</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> Criteria.where(<span class="string">&quot;_id&quot;</span>).is(<span class="string">&quot;100&quot;</span>);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(criteria);</span><br><span class="line">        mongoTemplate.remove(query, ChatMessages.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、持久化聊天">3、持久化聊天</h3><h4 id="3-1、优化实体类">3.1、优化实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@Document(&quot;chat_messages&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatMessages</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//唯一标识，映射到 MongoDB 文档的 _id 字段</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> ObjectId id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> messageId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content; <span class="comment">//存储当前聊天记录列表的json字符串</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-2、创建持久化类">3.2、创建持久化类</h4><p>创建一个类实现ChatMemoryStore接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.store;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MongoChatMemoryStore</span> <span class="keyword">implements</span> <span class="title class_">ChatMemoryStore</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoTemplate mongoTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ChatMessage&gt; <span class="title function_">getMessages</span><span class="params">(Object memoryId)</span> &#123;</span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> Criteria.where(<span class="string">&quot;memoryId&quot;</span>).is(memoryId);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(criteria);</span><br><span class="line">        <span class="type">ChatMessages</span> <span class="variable">chatMessages</span> <span class="operator">=</span> mongoTemplate.findOne(query, ChatMessages.class);</span><br><span class="line">        <span class="keyword">if</span>(chatMessages == <span class="literal">null</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">LinkedList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">return</span> ChatMessageDeserializer.messagesFromJson(chatMessages.getContent());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateMessages</span><span class="params">(Object memoryId, List&lt;ChatMessage&gt; messages)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> Criteria.where(<span class="string">&quot;memoryId&quot;</span>).is(memoryId);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(criteria);</span><br><span class="line"></span><br><span class="line">        <span class="type">Update</span> <span class="variable">update</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Update</span>();</span><br><span class="line">        update.set(<span class="string">&quot;content&quot;</span>, ChatMessageSerializer.messagesToJson(messages));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//根据query条件能查询出文档，则修改文档；否则新增文档</span></span><br><span class="line">        mongoTemplate.upsert(query, update, ChatMessages.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteMessages</span><span class="params">(Object memoryId)</span> &#123;</span><br><span class="line">        <span class="type">Criteria</span> <span class="variable">criteria</span> <span class="operator">=</span> Criteria.where(<span class="string">&quot;memoryId&quot;</span>).is(memoryId);</span><br><span class="line">        <span class="type">Query</span> <span class="variable">query</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Query</span>(criteria);</span><br><span class="line">        mongoTemplate.remove(query, ChatMessages.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在SeparateChatAssistantConfig中，添加MongoChatMemoryStore对象的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeparateChatAssistantConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注入持久化对象</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoChatMemoryStore mongoChatMemoryStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ChatMemoryProvider <span class="title function_">chatMemoryProvider</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memoryId -&gt; MessageWindowChatMemory.builder()</span><br><span class="line">                .id(memoryId)</span><br><span class="line">                .maxMessages(<span class="number">10</span>)</span><br><span class="line">                .chatMemoryStore(mongoChatMemoryStore)<span class="comment">//配置持久化对象</span></span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4、测试">4、测试</h3><p>发现MongoDB中已经存储了会话记录</p><h2 id="六、提示词-Prompt">六、提示词 Prompt</h2><h3 id="1、系统提示词">1、系统提示词</h3><p><strong>@SystemMessage</strong> 设定角色，塑造AI助手的专业身份，明确助手的能力范围</p><h4 id="1-1、配置-SystemMessage">1.1、配置@SystemMessage</h4><p>在SeparateChatAssistant类的chat方法上添加@SystemMessage注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SystemMessage(&quot;你是我的好朋友，请用东北话回答问题。&quot;)</span><span class="comment">//系统消息提示词</span></span><br><span class="line">String <span class="title function_">chat</span><span class="params">(<span class="meta">@MemoryId</span> <span class="type">int</span> memoryId, <span class="meta">@UserMessage</span> String userMessage)</span>;</span><br></pre></td></tr></table></figure><p><code>@SystemMessage</code>的内容将在后台转换为 <code>SystemMessage</code>对象，并与 <code>UserMessage</code> 一起发送给大语言模型（LLM）。</p><p>SystemMessaged的内容只会发送给大模型一次。</p><p>如果你修改了SystemMessage的内容，新的SystemMessage会被发送给大模型，之前的聊天记忆会失效。</p><h4 id="1-2、测试">1.2、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PromptTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SeparateChatAssistant separateChatAssistant;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSystemMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> separateChatAssistant.chat(<span class="number">3</span>,<span class="string">&quot;今天几号&quot;</span>);</span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果要显示今天的日期，我们需要在提示词中添加当前日期的占位符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SystemMessage(&quot;你是我的好朋友，请用东北话回答问题。今天是&#123;&#123;current_date&#125;&#125;&quot;)</span><span class="comment">//系统消息提示词</span></span><br><span class="line">String <span class="title function_">chat</span><span class="params">(<span class="meta">@MemoryId</span> <span class="type">int</span> memoryId, <span class="meta">@UserMessage</span> String userMessage)</span>;</span><br></pre></td></tr></table></figure><h4 id="1-3、从资源中加载提示模板">1.3、从资源中加载提示模板</h4><p><code>@SystemMessage</code> 注解还可以从资源中加载提示模板：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SystemMessage(fromResource = &quot;my-prompt-template.txt&quot;)</span></span><br><span class="line">String <span class="title function_">chat</span><span class="params">(<span class="meta">@MemoryId</span> <span class="type">int</span> memoryId, <span class="meta">@UserMessage</span> String userMessage)</span>;</span><br></pre></td></tr></table></figure><p>my-prompt-template.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">你是我的好朋友，请用东北话回答问题，回答问题的时候适当添加表情符号。</span><br></pre></td></tr></table></figure>表示当前日期<figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你是我的好朋友，请用东北话回答问题，回答问题的时候适当添加表情符号。</span><br><span class="line">今天是 &#123;&#123;current_date&#125;&#125;。</span><br></pre></td></tr></table></figure><h3 id="2、用户提示词模板">2、用户提示词模板</h3><p>**@UserMessage：**获取用户输入</p><h4 id="2-1、配置-UserMessage">2.1、配置@UserMessage</h4><p>在<code>MemoryChatAssistant</code>的<code>chat</code>方法中添加注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UserMessage(&quot;你是我的好朋友，请用上海话回答问题，并且添加一些表情符号。 &#123;&#123;it&#125;&#125;&quot;)</span> <span class="comment">//&#123;&#123;it&#125;&#125;表示这里唯一的参数的占位符</span></span><br><span class="line">String <span class="title function_">chat</span><span class="params">(String message)</span>;</span><br></pre></td></tr></table></figure><h4 id="2-2、测试">2.2、测试</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> MemoryChatAssistant memoryChatAssistant;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserMessage</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> memoryChatAssistant.chat(<span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、指定参数名称">3、指定参数名称</h3><h4 id="3-1、配置-V">3.1、配置@V</h4><p><strong>@V</strong> 明确指定传递的参数名称</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UserMessage(&quot;你是我的好朋友，请用上海话回答问题，并且添加一些表情符号。&#123;&#123;message&#125;&#125;&quot;)</span></span><br><span class="line">String <span class="title function_">chat</span><span class="params">(<span class="meta">@V(&quot;message&quot;)</span> String userMessage)</span>;</span><br></pre></td></tr></table></figure><h4 id="3-2、多个参数的情况">3.2、多个参数的情况</h4><p>如果有两个或两个以上的参数，我们必须要用<code>@V</code>，在<code>SeparateChatAssistant</code>中定义方法<code>chat2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@UserMessage(&quot;你是我的好朋友，请用粤语回答问题。&#123;&#123;message&#125;&#125;&quot;)</span></span><br><span class="line">String <span class="title function_">chat2</span><span class="params">(<span class="meta">@MemoryId</span> <span class="type">int</span> memoryId, <span class="meta">@V(&quot;message&quot;)</span> String userMessage)</span>;</span><br></pre></td></tr></table></figure><p>测试：<code>@UserMessage</code>中的内容每次都会被和用户问题组织在一起发送给大模型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testV</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer1</span> <span class="operator">=</span> separateChatAssistant.chat2(<span class="number">1</span>, <span class="string">&quot;我是环环&quot;</span>);</span><br><span class="line">    System.out.println(answer1);</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer2</span> <span class="operator">=</span> separateChatAssistant.chat2(<span class="number">1</span>, <span class="string">&quot;我是谁&quot;</span>);</span><br><span class="line">    System.out.println(answer2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-3、-SystemMessage和-V">3.3、@SystemMessage和@V</h4><p>也可以将<code>@SystemMessage</code>和<code>@V</code>结合使用</p><p>在<code>SeparateChatAssistant</code>中添加方法chat3</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SystemMessage(fromResource = &quot;my-prompt-template3.txt&quot;)</span></span><br><span class="line">String <span class="title function_">chat3</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@MemoryId</span> <span class="type">int</span> memoryId, </span></span><br><span class="line"><span class="params">    <span class="meta">@UserMessage</span> String userMessage, </span></span><br><span class="line"><span class="params">    <span class="meta">@V(&quot;username&quot;)</span> String username, </span></span><br><span class="line"><span class="params">    <span class="meta">@V(&quot;age&quot;)</span> <span class="type">int</span> age</span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure><p>创建提示词模板my-prompt-template3.txt，添加占位符</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">你是我的好朋友，我是&#123;&#123;username&#125;&#125;，我的年龄是&#123;&#123;age&#125;&#125;，请用东北话回答问题，回答问题的时候适当添加表情符号。</span><br><span class="line">今天是 &#123;&#123;current_date&#125;&#125;。</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUserInfo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> separateChatAssistant.chat3(<span class="number">1</span>, <span class="string">&quot;我是谁，我多大了&quot;</span>, <span class="string">&quot;翠花&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    System.out.println(answer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、项目实战-创建硅谷小智">七、项目实战-创建硅谷小智</h2><p>这部分我们实现硅谷小智的基本聊天功能，包含聊天记忆、聊天记忆持久化、提示词</p><h3 id="1、创建硅谷小智">1、创建硅谷小智</h3><p>创建XiaozhiAgent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.assistant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dev.langchain4j.service.*;</span><br><span class="line"><span class="keyword">import</span> dev.langchain4j.service.spring.AiService;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> dev.langchain4j.service.spring.AiServiceWiringMode.EXPLICIT;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">        wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">        chatModel = &quot;qwenChatModel&quot;,</span></span><br><span class="line"><span class="meta">        chatMemoryProvider = &quot;chatMemoryProviderXiaozhi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XiaozhiAgent</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SystemMessage(fromResource = &quot;zhaozhi-prompt-template.txt&quot;)</span></span><br><span class="line">    String <span class="title function_">chat</span><span class="params">(<span class="meta">@MemoryId</span> Long memoryId, <span class="meta">@UserMessage</span> String userMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、提示词模板">2、提示词模板</h3><p>zhaozhi-prompt-template.txt</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">你的名字是“硅谷小智”，你是一家名为“北京协和医院”的智能客服。</span><br><span class="line">你是一个训练有素的医疗顾问和医疗伴诊助手。</span><br><span class="line">你态度友好、礼貌且言辞简洁。</span><br><span class="line"></span><br><span class="line">1、请仅在用户发起第一次会话时，和用户打个招呼，并介绍你是谁。</span><br><span class="line"></span><br><span class="line">2、作为一个训练有素的医疗顾问：</span><br><span class="line">请基于当前临床实践和研究，针对患者提出的特定健康问题，提供详细、准确且实用的医疗建议。请同时考虑可能的病因、诊断流程、治疗方案以及预防措施，并给出在不同情境下的应对策略。对于药物治疗，请特别指明适用的药品名称、剂量和疗程。如果需要进一步的检查或就医，也请明确指示。</span><br><span class="line"></span><br><span class="line">3、作为医疗伴诊助手，你可以回答用户就医流程中的相关问题，主要包含以下功能：</span><br><span class="line">AI分导诊：根据患者的病情和就医需求，智能推荐最合适的科室。</span><br><span class="line">AI挂号助手：实现智能查询是否有挂号号源服务；实现智能预约挂号服务；实现智能取消挂号服务。</span><br><span class="line"></span><br><span class="line">4、你必须遵守的规则如下：</span><br><span class="line">在获取挂号预约详情或取消挂号预约之前，你必须确保自己知晓用户的姓名（必选）、身份证号（必选）、预约科室（必选）、预约日期（必选，格式举例：2025-04-14）、预约时间（必选，格式：上午 或 下午）、预约医生（可选）。</span><br><span class="line">当被问到其他领域的咨询时，要表示歉意并说明你无法在这方面提供帮助。</span><br><span class="line"></span><br><span class="line">5、请在回答的结果中适当包含一些轻松可爱的图标和表情。</span><br><span class="line"></span><br><span class="line">6、今天是 &#123;&#123;current_date&#125;&#125;。</span><br></pre></td></tr></table></figure><h3 id="3、配置小智助手">3、配置小智助手</h3><p>配置持久化和记忆隔离</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaozhiAgentConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MongoChatMemoryStore mongoChatMemoryStore;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    ChatMemoryProvider <span class="title function_">chatMemoryProviderXiaozhi</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memoryId -&gt; MessageWindowChatMemory.builder()</span><br><span class="line">                .id(memoryId)</span><br><span class="line">                .maxMessages(<span class="number">20</span>)</span><br><span class="line">                .chatMemoryStore(mongoChatMemoryStore)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4、封装对话对象">4、封装对话对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.bean;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ChatForm</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long memoryId;<span class="comment">//对话id</span></span><br><span class="line">    <span class="keyword">private</span> String message;<span class="comment">//用户问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5、添加Controller方法">5、添加Controller方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Tag(name = &quot;硅谷小智&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/xiaozhi&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XiaozhiController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> XiaozhiAgent xiaozhiAgent;</span><br><span class="line">    <span class="meta">@Operation(summary = &quot;对话&quot;)</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/chat&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">chat</span><span class="params">(<span class="meta">@RequestBody</span> ChatForm chatForm)</span>  &#123;</span><br><span class="line">        <span class="keyword">return</span> xiaozhiAgent.chat(chatForm.getMemoryId(), chatForm.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、待优化">6、待优化</h3><p>信息查询：提示词中还应该提供医院信息（如位置信息，营业时间等）、科室信息（都有哪些科室）、医生信息（都有哪些医生）</p><p>业务实现：预约、取消预约、查询是否预约等</p><p>信息查询可以使用RAG检索增强生成</p><p>业务实现需要通过Function Calling函数调用</p><h2 id="八、-Function-Calling-函数调用">八、 Function Calling 函数调用</h2><p><code>Function Calling 函数调用</code> 也叫  <code>Tools 工具</code></p><h3 id="1、入门案例">1、入门案例</h3><p>例如，大语言模型本身并不擅长数学运算。如果应用场景中偶尔会涉及到数学计算，我们可以为他提供一个 “数学工具”。当我们提出问题时，大语言模型会判断是否使用某个工具。</p><h4 id="1-1、创建工具类">1.1、创建工具类</h4><p>用 <code>@Tool</code> 注解的方法：</p><ul><li>既可以是静态的，也可以是非静态的；</li><li>可以具有任何可见性（公有、私有等）。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.tools;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTools</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Tool</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">sum</span><span class="params">(<span class="type">double</span> a, <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用加法运算&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tool</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">squareRoot</span><span class="params">(<span class="type">double</span> x)</span> &#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;调用平方根运算&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-2、配值工具类">1.2、配值工具类</h4><p>在SeparateChatAssistant中添加tools属性配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">        wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">        chatModel = &quot;qwenChatModel&quot;,</span></span><br><span class="line"><span class="meta">        chatMemoryProvider = &quot;chatMemoryProvider&quot;,</span></span><br><span class="line"><span class="meta">        tools = &quot;calculatorTools&quot; //配置tools</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h4 id="1-3、测试工具类">1.3、测试工具类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ToolsTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SeparateChatAssistant separateChatAssistant;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalculatorTools</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">answer</span> <span class="operator">=</span> separateChatAssistant.chat(<span class="number">1</span>, <span class="string">&quot;1+2等于几，475695037565的平方根是多少？&quot;</span>);</span><br><span class="line">        <span class="comment">//答案：3，689706.4865</span></span><br><span class="line">        System.out.println(answer);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试后可以查看持久化存储中SYSTEM、USER、AI以及Tools的消息，分析tools的调用流程：</p><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Request</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">\- messages</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">\- SystemMessage</span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">\- text</span><span class="punctuation">:</span> <span class="string">系统定义AI的角色</span></span><br><span class="line">    <span class="attribute">\- UserMessage</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">\- text</span><span class="punctuation">:</span> <span class="string">用户提问</span></span><br><span class="line">    <span class="attribute">\- AiMessage</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">\- toolExecutionRequests</span><span class="punctuation">:</span></span><br><span class="line">            <span class="attribute">\- ai获取提问信息组织参数调用工具方法</span></span><br><span class="line"><span class="attribute">    \- ToolExecutionResultMessage</span><span class="punctuation">:</span></span><br><span class="line">        <span class="attribute">\- text</span><span class="punctuation">:</span> <span class="string">工具方法执行</span></span><br><span class="line"></span><br><span class="line"><span class="attribute">Response </span><span class="punctuation">:</span></span><br><span class="line"><span class="attribute">\- AiMessage</span><span class="punctuation">:</span></span><br><span class="line">    <span class="attribute">\- text</span><span class="punctuation">:</span> <span class="string">根据工具方法的执行ai再次组织结果返回</span></span><br></pre></td></tr></table></figure><h3 id="2、-Tool-注解的可选字段">2、@Tool 注解的可选字段</h3><p><code>@Tool</code> 注解有两个可选字段：</p><ul><li><strong>name（工具名称）</strong>：工具的名称。如果未提供该字段，方法名会作为工具的名称。</li><li><strong>value（工具描述）</strong>：工具的描述信息。</li></ul><p>根据工具的不同，即使没有任何描述，大语言模型可能也能很好地理解它（例如，<code>add(a, b)</code> 就很直观），但通常最好提供清晰且有意义的名称和描述。这样，大语言模型就能获得更多信息，以决定是否调用给定的工具以及如何调用。</p><h3 id="3、-P-注解">3、@P 注解</h3><p>方法参数可以选择使用 <code>@P</code> 注解进行标注。</p><p><code>@P</code> 注解有两个字段：</p><ul><li><strong>value</strong>：参数的描述信息，这是必填字段。</li><li><strong>required</strong>：表示该参数是否为必需项，默认值为 <code>true</code>，此为可选字段。</li></ul><h3 id="4、-ToolMemoryId">4、@ToolMemoryId</h3><p>如果你的AIService方法中有一个参数使用 <code>@MemoryId</code> 注解，那么你也可以使用 <code>@ToolMemoryId</code> 注解 <code>@Tool</code> 方法中的一个参数。提供给AIService方法的值将自动传递给 <code>@Tool</code> 方法。如果你有多个用户，或每个用户有多个聊天记忆，并且希望在 <code>@Tool</code> 方法中对它们进行区分，那么这个功能会很有用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorTools</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tool(name = &quot;加法&quot;, value = &quot;返回两个参数相加之和&quot;)</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">sum</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@ToolMemoryId</span> <span class="type">int</span> memoryId,</span></span><br><span class="line"><span class="params">            <span class="meta">@P(value=&quot;加数1&quot;, required = true)</span> <span class="type">double</span> a,</span></span><br><span class="line"><span class="params">            <span class="meta">@P(value=&quot;加数2&quot;, required = true)</span> <span class="type">double</span> b)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用加法运算 &quot;</span> + memoryId);</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tool(name = &quot;平方根&quot;, value = &quot;返回给定参数的平方根&quot;)</span></span><br><span class="line">    <span class="type">double</span> <span class="title function_">squareRoot</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@ToolMemoryId</span> <span class="type">int</span> memoryId, <span class="type">double</span> x)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;调用平方根运算 &quot;</span> + memoryId);</span><br><span class="line">        <span class="keyword">return</span> Math.sqrt(x);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="九、项目实战-优化硅谷小智">九、项目实战-优化硅谷小智</h2><h3 id="1、预约业务的实现">1、预约业务的实现</h3><p>这部分我们实现硅谷小智的查询订单、预约订单、取消订单的功能</p><h4 id="1-1、创建MySQL数据库表">1.1、创建MySQL数据库表</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `guiguxiaozhi`;</span><br><span class="line">USE `guiguxiaozhi`;</span><br><span class="line"><span class="keyword">CREATE TABLE</span> `appointment` (</span><br><span class="line">  `id` <span class="type">BIGINT</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `id_card` <span class="type">VARCHAR</span>(<span class="number">18</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `department` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `<span class="type">date</span>` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `<span class="type">time</span>` <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `doctor_name` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">   <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="1-2、引入依赖">1.2、引入依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Mysql Connector --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--mybatis-plus 持久层--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-spring-boot3-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-plus.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-3、配置数据库连接">1.3、配置数据库连接</h4><p>application.properties</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 基本数据源配置</span></span><br><span class="line"><span class="attr">spring.datasource.url</span>=<span class="string">jdbc:mysql://localhost:3306/guiguxiaozhi?useUnicode=true&amp;characterEncoding=UTF-8&amp;serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="attr">spring.datasource.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">spring.datasource.password</span>=<span class="string">123456</span></span><br><span class="line"><span class="attr">spring.datasource.driver-class-name</span>=<span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="comment"># 开启 SQL 日志打印</span></span><br><span class="line"><span class="attr">mybatis-plus.configuration.log-impl</span>=<span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h4 id="1-4、创建实体类">1.4、创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.entity;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Appointment</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableId(type = IdType.AUTO)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String idCard;</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line">    <span class="keyword">private</span> String time;</span><br><span class="line">    <span class="keyword">private</span> String doctorName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-5、Mapper">1.5、Mapper</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.mapper;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AppointmentMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;Appointment&gt; &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>xml：在resources下创建mapper目录，创建AppointmentMapper.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.atguigu.java.ai.langchain4j.mapper.AppointmentMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-6、Service">1.6、Service</h4><p>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AppointmentService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Appointment&gt; &#123;</span><br><span class="line">    Appointment <span class="title function_">getOne</span><span class="params">(Appointment appointment)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.service.impl;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppointmentServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;AppointmentMapper, Appointment&gt; <span class="keyword">implements</span> <span class="title class_">AppointmentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询订单是否存在</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> appointment</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Appointment <span class="title function_">getOne</span><span class="params">(Appointment appointment)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;Appointment&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(Appointment::getUsername, appointment.getUsername());</span><br><span class="line">        queryWrapper.eq(Appointment::getIdCard, appointment.getIdCard());</span><br><span class="line">        queryWrapper.eq(Appointment::getDepartment, appointment.getDepartment());</span><br><span class="line">        queryWrapper.eq(Appointment::getDate, appointment.getDate());</span><br><span class="line">        queryWrapper.eq(Appointment::getTime, appointment.getTime());</span><br><span class="line"></span><br><span class="line">        <span class="type">Appointment</span> <span class="variable">appointmentDB</span> <span class="operator">=</span> baseMapper.selectOne(queryWrapper);</span><br><span class="line">        <span class="keyword">return</span> appointmentDB;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-7、创建测试用例">1.7、创建测试用例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.service;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AppointmentServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppointmentService appointmentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testGetOne</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Appointment</span> <span class="variable">appointment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Appointment</span>();</span><br><span class="line">        appointment.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        appointment.setIdCard(<span class="string">&quot;123456789012345678&quot;</span>);</span><br><span class="line">        appointment.setDepartment(<span class="string">&quot;内科&quot;</span>);</span><br><span class="line">        appointment.setDate(<span class="string">&quot;2025-04-14&quot;</span>);</span><br><span class="line">        appointment.setTime(<span class="string">&quot;上午&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Appointment</span> <span class="variable">appointmentDB</span> <span class="operator">=</span> appointmentService.getOne(appointment);</span><br><span class="line">        System.out.println(appointmentDB);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Appointment</span> <span class="variable">appointment</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Appointment</span>();</span><br><span class="line">        appointment.setUsername(<span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        appointment.setIdCard(<span class="string">&quot;123456789012345678&quot;</span>);</span><br><span class="line">        appointment.setDepartment(<span class="string">&quot;内科&quot;</span>);</span><br><span class="line">        appointment.setDate(<span class="string">&quot;2025-04-14&quot;</span>);</span><br><span class="line">        appointment.setTime(<span class="string">&quot;上午&quot;</span>);</span><br><span class="line">        appointment.setDoctorName(<span class="string">&quot;张医生&quot;</span>);</span><br><span class="line"></span><br><span class="line">        appointmentService.save(appointment);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testRemoveById</span><span class="params">()</span> &#123;</span><br><span class="line">        appointmentService.removeById(<span class="number">1L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、Tools">2、Tools</h3><h4 id="2-1、创建Tools">2.1、创建Tools</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.tools;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.atguigu.java.ai.langchain4j.entity.Appointment;</span><br><span class="line"><span class="keyword">import</span> com.atguigu.java.ai.langchain4j.service.AppointmentService;</span><br><span class="line"><span class="keyword">import</span> dev.langchain4j.agent.tool.P;</span><br><span class="line"><span class="keyword">import</span> dev.langchain4j.agent.tool.Tool;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppointmentTools</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AppointmentService appointmentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tool(name=&quot;预约挂号&quot;, value = &quot;根据参数，先执行工具方法queryDepartment查询是否可预约，并直接给用户回答是否可预约，并让用户确认所有预约信息，用户确认后再进行预约。&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">bookAppointment</span><span class="params">(Appointment appointment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//查找数据库中是否包含对应的预约记录</span></span><br><span class="line">        <span class="type">Appointment</span> <span class="variable">appointmentDB</span> <span class="operator">=</span> appointmentService.getOne(appointment);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(appointmentDB == <span class="literal">null</span>)&#123;</span><br><span class="line">            appointment.setId(<span class="literal">null</span>);<span class="comment">//防止大模型幻觉设置了id</span></span><br><span class="line">            <span class="keyword">if</span>(appointmentService.save(appointment))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;预约成功，并返回预约详情&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;预约失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;您在相同的科室和时间已有预约&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tool(name=&quot;取消预约挂号&quot;, value = &quot;根据参数，查询预约是否存在，如果存在则删除预约记录并返回取消预约成功，否则返回取消预约失败&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">cancelAppointment</span><span class="params">(Appointment appointment)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Appointment</span> <span class="variable">appointmentDB</span> <span class="operator">=</span> appointmentService.getOne(appointment);</span><br><span class="line">        <span class="keyword">if</span>(appointmentDB != <span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//删除预约记录</span></span><br><span class="line">            <span class="keyword">if</span>(appointmentService.removeById(appointmentDB.getId()))&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;取消预约成功&quot;</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;取消预约失败&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取消失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;您没有预约记录，请核对预约科室和时间&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Tool(name = &quot;查询是否有号源&quot;, value=&quot;根据科室名称，日期，时间和医生查询是否有号源，并返回给用户&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">queryDepartment</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@P(value = &quot;科室名称&quot;)</span> String name,</span></span><br><span class="line"><span class="params">            <span class="meta">@P(value = &quot;日期&quot;)</span> String date,</span></span><br><span class="line"><span class="params">            <span class="meta">@P(value = &quot;时间，可选值：上午、下午&quot;)</span> String time,</span></span><br><span class="line"><span class="params">            <span class="meta">@P(value = &quot;医生名称&quot;, required = false)</span> String doctorName</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;查询是否有号源&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;科室名称：&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;日期：&quot;</span> + date);</span><br><span class="line">        System.out.println(<span class="string">&quot;时间：&quot;</span> + time);</span><br><span class="line">        System.out.println(<span class="string">&quot;医生名称：&quot;</span> + doctorName);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//TODO 维护医生的排班信息：</span></span><br><span class="line">        <span class="comment">//如果没有指定医生名字，则根据其他条件查询是否有可以预约的医生（有返回true，否则返回false）；</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果指定了医生名字，则判断医生是否有排班（没有排版返回false）</span></span><br><span class="line">        <span class="comment">//如果有排班，则判断医生排班时间段是否已约满（约满返回false，有空闲时间返回true）</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-2、配置Tools">2.2、配置Tools</h4><p>在<code>XiaozhiAgent</code>中添加<code>tools</code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">        wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">        chatModel = &quot;qwenChatModel&quot;,</span></span><br><span class="line"><span class="meta">        chatMemoryProvider = &quot;chatMemoryProviderXiaozhi&quot;,</span></span><br><span class="line"><span class="meta">        tools = &quot;appointmentTools&quot; //tools配置</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h4 id="2-3、测试">2.3、测试</h4><p>在Controller中测试</p><h2 id="十、检索增强生成-RAG">十、检索增强生成 RAG</h2><h3 id="1、如何让大模型回答专业领域的知识">1、如何让大模型回答专业领域的知识</h3><p>LLM 的知识仅限于它所训练的数据。 如果你想让 LLM 了解特定领域的知识或专有数据，你可以：</p><ul><li><code>使用 RAG</code></li><li>使用你的数据微调 LLM</li><li>结合 RAG 和微调</li></ul><h4 id="1-1、微调大模型">1.1、微调大模型</h4><p>在现有大模型的基础上，使用小规模的特定任务数据进行再次训练，调整模型参数，让模型更精确地处理特定领域或任务的数据。更新需重新训练，计算资源和时间成本高。</p><ul><li>优点：一次会话只需一次模型调用，速度快，在特定任务上性能更高，准确性也更高。</li><li>缺点：知识更新不及时，模型训成本高、训练周期长。</li><li>应用场景：适合知识库稳定、对生成内容准确性和风格要求高的场景，如对上下文理解和语言生成质量要求高的文学创作、专业文档生成等。</li></ul><h4 id="1-2、RAG">1.2、RAG</h4><p><strong>R</strong>etrieval-<strong>A</strong>ugmented <strong>G</strong>eneration 检索增强生成</p><p>将原始问题以及提示词信息发送给大语言模型之前，先通过外部知识库检索相关信息，然后将检索结果和原始问题一起发送给大模型，大模型依据外部知识库再结合自身的训练数据，组织自然语言回答问题。通过这种方式，大语言模型可以获取到特定领域的相关信息，并能够利用这些信息进行回复。</p><ul><li>优点：数据存储在外部知识库，可以实时更新，不依赖对模型自身的训练，成本更低。</li><li>缺点：需要两次查询：先查询知识库，然后再查询大模型，性能不如微调大模型</li><li>应用场景：适用于知识库规模大且频繁更新的场景，如企业客服、实时新闻查询、法律和医疗领域的最新知识问答等。</li></ul><h4 id="1-3、RAG常用方法">1.3、RAG常用方法</h4><ul><li><code>全文（关键词）搜索。</code>这种方法通过将问题和提示词中的关键词与知识库文档数据库进行匹配来搜索文档。根据这些关键词在每个文档中的出现频率和相关性对搜索结果进行排序。</li><li><code>向量搜索</code>，也被称为 “语义搜索”。文本通过<code>嵌入模型</code>被转换为<code>数字向量</code>。然后，它根据查询向量与文档向量之间的余弦相似度或其他相似性 / 距离度量来查找和排序文档，从而捕捉更深层次的语义含义。</li><li><code>混合搜索。</code>结合多种搜索方法（例如，全文搜索 + 向量搜索）通常可以提高搜索的效果。</li></ul><h3 id="2、向量搜索-vector-search">2、向量搜索 vector search</h3><h4 id="2-1、向量-Vectors">2.1、向量 Vectors</h4><p>可以将向量理解为从空间中的一个点到另一个点的移动。例如，在下图中，我们可以看到一些二维空间中的向量：</p><blockquote><p><strong>a</strong>是一个从 (100, 50) 到 (-50, -50) 的向量，<strong>b</strong> 是一个从 (0, 0) 到 (100, -50) 的向量。</p></blockquote><p><img src="https://photo.459122.xyz/i/1fb641893d2d92def7390e4bc94a52fc.jpg" alt="v2-55c2f61aceb86313711d50a5e6e9f8fd_1440w-1749129441877-1"></p><p>很多时候，我们处理的向量是从原点 (0, 0) 开始的，比如<strong>b</strong>。这样我们可以省略向量起点部分，直接说 <strong>b</strong> 是向量 (100, -50)。</p><p>如何将向量的概念扩展到非数值实体上呢（例如文本）？</p><h4 id="2-2、维度-Dimensions">2.2、维度 Dimensions</h4><p>如我们所见，每个数值向量都有 x 和 y 坐标（或者在多维系统中是 x、y、z，…）。x、y、z… 是这个向量空间的轴，称为维度。对于我们想要表示为向量的一些非数值实体，我们首先需要决定这些维度，并为每个实体在每个维度上分配一个值。</p><p>例如，在一个交通工具数据集中，我们可以定义四个维度：“轮子数量”、“是否有发动机”、“是否可以在地上开动”和“最大乘客数”。然后我们可以将一些车辆表示为：</p><p><img src="https://photo.459122.xyz/i/503f03ce04bb22c85550de052eac5287.jpg" alt="v2-b88f750dc797da4f9cc45da0fdd482dc_1440w-1749129500192-3"></p><p>因此，我们的汽车Car向量将是 (4, yes, yes, 5)，或者用数值表示为 (4, 1, 1, 5)（将 yes 设为 1，no 设为 0）。</p><p>向量的每个维度代表数据的不同特性，维度越多对事务的描述越精确，我们可以使用“是否有翅膀”、“是否使用柴油”、“最高速度”、“平均重量”、“价格”等等更多的维度信息。</p><h4 id="2-3、相似度-Similarity">2.3、相似度 Similarity</h4><p>如果用户搜索<code>“轿车Car”</code>，你希望能够返回所有与<code>“汽车automobile”</code>和<code>“车辆vehicle”</code>等信息相关的结果。向量搜索就是实现这个目标的一种方法。</p><p><strong>如何确定哪些是最相似的？</strong></p><p>每个向量都有一个长度和方向。例如，在这个图中，p 和 a 指向相同的方向，但长度不同。p 和 b 正好指向相反的方向，但有相同的长度。然后还有c，长度比p短一点，方向不完全相同，但很接近。</p><p><img src="https://photo.459122.xyz/i/bd4e8b27905f5bb7610b5a9fe2b4791c.jpg" alt="v2-db52b20a89a5dc3bde66da11691a7438_1440w-1749129540021-5"></p><p>那么，哪一个最接近 p 呢？</p><p>如果“相似”仅仅意味着指向相似的方向，那么a 是最接近 p 的。接下来是 c。b 是最不相似的，因为它正好指向与p 相反的方向。如果“相似”仅仅意味着相似的长度，那么 b 是最接近 p 的（因为它有相同的长度），接下来是 c，然后是 a。</p><p>由于向量通常用于描述语义意义，仅仅看长度通常无法满足需求。<strong>大多数相似度测量要么仅依赖于方向，要么同时考虑方向和大小。</strong></p><h4 id="2-4、相似度测量-Measures-of-similarity">2.4、相似度测量 Measures of similarity</h4><p>相似度测量即相似度计算。四种常见的向量相似度计算方法（这里不展开讨论）：</p><ul><li>欧几里得距离 Euclidean distance</li><li>曼哈顿距离 Manhattan distance</li><li>点积 Dot product</li><li>余弦相似度 Cosine similarity</li></ul><h3 id="3、RAG的过程">3、RAG的过程</h3><p><strong>RAG 过程分为 2 个不同的阶段：索引和检索。</strong></p><h4 id="3-1、索引阶段">3.1、索引阶段</h4><p>在索引阶段，对知识库文档进行预处理，可实现检索阶段的高效搜索。</p><ul><li>以下是索引阶段的简化图：</li></ul><p>加载知识库文档 ==&gt; 将文档中的<strong>文本分段</strong> ==&gt; 利用<strong>向量大模型</strong>将分段后的<strong>文本转换成向量</strong> ==&gt; 将向量<strong>存入向量数据库</strong></p><p><img src="https://photo.459122.xyz/i/6774dc7e3f4e0b0428de056229c76784.png" alt="image-20250420170954862-1749129593484-7"></p><p><strong>为什么要进行文本分段？</strong></p><p>大语言模型（LLM）的上下文窗口有限，所以整个知识库可能无法全部容纳其中。</p><ul><li>你在提问中提供的信息越多，大语言模型处理并做出回应所需的时间就越长。</li><li>你在提问中提供的信息越多，花费也就越多。</li><li>提问中的无关信息可能会干扰大语言模型，增加产生幻觉（生成错误信息）的几率。</li></ul><p>我们可以通过将知识库分割成更小、更易于理解的片段来解决这些问题。</p><h4 id="3-2、检索阶段">3.2、检索阶段</h4><ul><li>以下是检索阶段的简化图：</li></ul><p>通过向量模型<strong>将用户查询转换成向量</strong> ==&gt; 在向量数据库中根据用户查询进行<strong>相似度匹配</strong> ==&gt; 将用户查询和向量数据库中匹配到的相关内容一起交给LLM处理</p><p><img src="https://photo.459122.xyz/i/9c2faba61363b1b2537a5fbdba6de2c3.png" alt="rag-retrieval-f525d2937abc08fed5cec36a7f08a4c3-1749129674191-9"></p><h3 id="4、文档加载器-Document-Loader">4、文档加载器 Document Loader</h3><h4 id="4-1、常见文档加载器">4.1、常见文档加载器</h4><ul><li><code>来自 langchain4j 模块的文件系统文档加载器（FileSystemDocumentLoader）</code></li><li>来自 langchain4j 模块的类路径文档加载器（ClassPathDocumentLoader）</li><li>来自 langchain4j 模块的网址文档加载器（UrlDocumentLoader）</li><li>来自 langchain4j-document-loader-amazon-s3 模块的亚马逊 S3 文档加载器（AmazonS3DocumentLoader）</li><li>来自 langchain4j-document-loader-azure-storage-blob 模块的 Azure Blob 存储文档加载器（AzureBlobStorageDocumentLoader）</li><li>来自 langchain4j-document-loader-github 模块的 GitHub 文档加载器（GitHubDocumentLoader）</li><li>来自 langchain4j-document-loader-google-cloud-storage 模块的谷歌云存储文档加载器（GoogleCloudStorageDocumentLoader）</li><li>来自 langchain4j-document-loader-selenium 模块的 Selenium 文档加载器（SeleniumDocumentLoader）</li><li>来自 langchain4j-document-loader-tencent-cos 模块的腾讯云对象存储文档加载器（TencentCosDocumentLoader）</li></ul><h4 id="4-2、测试文档加载">4.2、测试文档加载</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RAGTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadDocument</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//使用FileSystemDocumentLoader读取指定目录下的知识库文档</span></span><br><span class="line">        <span class="comment">//并使用默认的文档解析器TextDocumentParser对文档进行解析</span></span><br><span class="line">        <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/测试.txt&quot;</span>);</span><br><span class="line">        System.out.println(document.text());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其他加载文档的方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 加载单个文档</span></span><br><span class="line"><span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/file.txt&quot;</span>, <span class="keyword">new</span> <span class="title class_">TextDocumentParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从一个目录中加载所有文档</span></span><br><span class="line">List&lt;Document&gt; documents = FileSystemDocumentLoader.loadDocuments(<span class="string">&quot;E:/knowledge&quot;</span>, <span class="keyword">new</span> <span class="title class_">TextDocumentParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从一个目录中加载所有的.txt文档</span></span><br><span class="line"><span class="type">PathMatcher</span> <span class="variable">pathMatcher</span> <span class="operator">=</span> FileSystems.getDefault().getPathMatcher(<span class="string">&quot;glob:*.txt&quot;</span>);</span><br><span class="line">List&lt;Document&gt; documents = FileSystemDocumentLoader.loadDocuments(<span class="string">&quot;E:/knowledge&quot;</span>, pathMatcher, <span class="keyword">new</span> <span class="title class_">TextDocumentParser</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从一个目录及其子目录中加载所有文档</span></span><br><span class="line">List&lt;Document&gt; documents = FileSystemDocumentLoader.loadDocumentsRecursively(<span class="string">&quot;E:/knowledge&quot;</span>, <span class="keyword">new</span> <span class="title class_">TextDocumentParser</span>());</span><br></pre></td></tr></table></figure><h3 id="5、文档解析器-Document-Parser">5、文档解析器 Document Parser</h3><h4 id="5-1、常见文档解析器">5.1、常见文档解析器</h4><p>文档可以是各种格式的文件，比如 PDF、DOC、TXT 等等。为了解析这些不同格式的文件，有一个 “文档解析器”（DocumentParser）接口，并且我们的库中包含了该接口的几种实现方式：</p><ul><li><code>来自 langchain4j 模块的文本文档解析器（TextDocumentParser），它能够解析纯文本格式的文件（例如 TXT、HTML、MD 等）。</code></li><li>来自 langchain4j-document-parser-apache-pdfbox 模块的 Apache PDFBox 文档解析器（ApachePdfBoxDocumentParser），它可以解析 PDF 文件。</li><li>来自 langchain4j-document-parser-apache-poi 模块的 Apache POI 文档解析器（ApachePoiDocumentParser），它能够解析微软办公软件的文件格式（例如 DOC、DOCX、PPT、PPTX、XLS、XLSX 等）。</li><li>来自 langchain4j-document-parser-apache-tika 模块的 Apache Tika 文档解析器（ApacheTikaDocumentParser），它可以自动检测并解析几乎所有现有的文件格式。</li></ul><p>假设如果我们想解析PDF文档，那么原有的<code>TextDocumentParser</code>就无法工作了，我们需要引入<code>langchain4j-document-parser-apache-pdfbox</code></p><h4 id="5-2、添加依赖">5.2、添加依赖</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--解析pdf文档--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-document-parser-apache-pdfbox<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-3、解析pdf文档">5.3、解析pdf文档</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解析PDF</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testParsePDF</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(</span><br><span class="line">            <span class="string">&quot;E:/knowledge/医院信息.pdf&quot;</span>,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ApachePdfBoxDocumentParser</span>()</span><br><span class="line">    );</span><br><span class="line">    System.out.println(document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6、文档分割器-Document-Splitter">6、文档分割器 Document Splitter</h3><h4 id="6-1、常见文档分割器">6.1、常见文档分割器</h4><p>LangChain4j 有一个 “文档分割器”（DocumentSplitter）接口，并且提供了几种开箱即用的实现方式：</p><p><code>按段落文档分割器（DocumentByParagraphSplitter）</code> 那什么叫做按照段落分割呢？两个换行符就是分段</p><p>但是在md文档中shift回车是一个换行符</p><p>按行文档分割器（DocumentByLineSplitter）</p><p>按句子文档分割器（DocumentBySentenceSplitter）</p><p>按单词文档分割器（DocumentByWordSplitter）</p><p>按字符文档分割器（DocumentByCharacterSplitter）</p><p>按正则表达式文档分割器（DocumentByRegexSplitter）</p><p>递归分割：DocumentSplitters.recursive (…)</p><p>默认情况下每个文本片段最多不能超过300个token</p><h4 id="6-2、测试向量转换和向量存储">6.2、测试向量转换和向量存储</h4><p>Embedding (Vector) Stores 常见的意思是 “嵌入（向量）存储” 。在机器学习和自然语言处理领域，Embedding 指的是将数据（如文本、图像等）转换为低维稠密向量表示的过程，这些向量能够保留数据的关键特征。而 Stores 表示存储，即用于存储这些嵌入向量的系统或工具。它们可以高效地存储和检索向量数据，支持向量相似性搜索，在文本检索、推荐系统、图像识别等任务中发挥着重要作用。</p><p>**Langchain4j支持的向量存储：**<a href="https://docs.langchain4j.dev/integrations/embedding-stores/">https://docs.langchain4j.dev/integrations/embedding-stores/</a></p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--简单的rag实现--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-easy-rag<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加载文档并存入向量数据库</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReadDocumentAndStore</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用FileSystemDocumentLoader读取指定目录下的知识库文档</span></span><br><span class="line">    <span class="comment">//并使用默认的文档解析器对文档进行解析(TextDocumentParser)</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/人工智能.md&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了简单起见，我们暂时使用基于内存的向量存储</span></span><br><span class="line">    InMemoryEmbeddingStore&lt;TextSegment&gt; embeddingStore = <span class="keyword">new</span> <span class="title class_">InMemoryEmbeddingStore</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//ingest</span></span><br><span class="line">    <span class="comment">//1、分割文档：默认使用递归分割器，将文档分割为多个文本片段，每个片段包含不超过 300个token，并且有 30个token的重叠部分保证连贯性</span></span><br><span class="line">    <span class="comment">//DocumentByParagraphSplitter(DocumentByLineSplitter(DocumentBySentenceSplitter(DocumentByWordSplitter)))</span></span><br><span class="line">    <span class="comment">//2、文本向量化：使用一个LangChain4j内置的轻量化向量模型对每个文本片段进行向量化</span></span><br><span class="line">    <span class="comment">//3、将原始文本和向量存储到向量数据库中(InMemoryEmbeddingStore)</span></span><br><span class="line">    EmbeddingStoreIngestor.ingest(document, embeddingStore);</span><br><span class="line">    <span class="comment">//查看向量数据库内容</span></span><br><span class="line">    System.out.println(embeddingStore);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有很多的分割器分割器下面有很多层级的子分割器</p><h4 id="6-3、测试文档分割">6.3、测试文档分割</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 文档分割</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDocumentSplitter</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用FileSystemDocumentLoader读取指定目录下的知识库文档</span></span><br><span class="line">    <span class="comment">//并使用默认的文档解析器对文档进行解析(TextDocumentParser)</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/人工智能.md&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//为了简单起见，我们暂时使用基于内存的向量存储</span></span><br><span class="line">    InMemoryEmbeddingStore&lt;TextSegment&gt; embeddingStore = <span class="keyword">new</span> <span class="title class_">InMemoryEmbeddingStore</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//自定义文档分割器</span></span><br><span class="line">    <span class="comment">//按段落分割文档：每个片段包含不超过 300个token，并且有 30个token的重叠部分保证连贯性</span></span><br><span class="line">    <span class="comment">//注意：当段落长度总和小于设定的最大长度时，就不会有重叠的必要。</span></span><br><span class="line">    <span class="type">DocumentByParagraphSplitter</span> <span class="variable">documentSplitter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DocumentByParagraphSplitter</span>(</span><br><span class="line">            <span class="number">300</span>,</span><br><span class="line">            <span class="number">30</span>,</span><br><span class="line">            <span class="comment">//token分词器：按token计算</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">HuggingFaceTokenizer</span>());</span><br><span class="line">    <span class="comment">//按字符计算</span></span><br><span class="line">    <span class="comment">//DocumentByParagraphSplitter documentSplitter = new DocumentByParagraphSplitter(300, 30);</span></span><br><span class="line"></span><br><span class="line">    EmbeddingStoreIngestor</span><br><span class="line">            .builder()</span><br><span class="line">            .embeddingStore(embeddingStore)</span><br><span class="line">            .documentSplitter(documentSplitter)</span><br><span class="line">            .build()</span><br><span class="line">            .ingest(document);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4、token和token计算">6.4、token和token计算</h4><p>DeepSeek：<a href="https://api-docs.deepseek.com/zh-cn/quick_start/token_usage">Token 用量计算 | DeepSeek API Docs</a></p><p>阿里百炼：<a href="https://bailian.console.aliyun.com/?spm=5176.29597918.J_SEsSjsNv72yRuRFS2VknO.2.18867ca0uXrEFa#/efm/model_experience_center">百炼控制台</a></p><p>LangChain4j：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTokenCount</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> <span class="string">&quot;这是一个示例文本，用于测试 token 长度的计算。&quot;</span>;</span><br><span class="line">    <span class="type">UserMessage</span> <span class="variable">userMessage</span> <span class="operator">=</span> UserMessage.userMessage(text);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算 token 长度</span></span><br><span class="line">    <span class="comment">//QwenTokenizer tokenizer = new QwenTokenizer(System.getenv(&quot;DASH_SCOPE_API_KEY&quot;), &quot;qwen-max&quot;);</span></span><br><span class="line">    <span class="type">HuggingFaceTokenizer</span> <span class="variable">tokenizer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HuggingFaceTokenizer</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> tokenizer.estimateTokenCountInMessage(userMessage);</span><br><span class="line">    System.out.println(<span class="string">&quot;token长度：&quot;</span> + count);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-5、工作方式">6.5、工作方式</h4><ol><li>实例化一个 “文档分割器”（DocumentSplitter），指定所需的 “文本片段”（TextSegment）大小，并且可以选择指定characters 或token的重叠部分。</li><li>“文档分割器”（DocumentSplitter）将给定的文档（Document）分割成更小的单元，这些单元的性质因分割器而异。例如，“按段落分割文档器”（DocumentByParagraphSplitter）将文档分割成段落（由两个或更多连续的换行符定义），而 “按句子分割文档器”（DocumentBySentenceSplitter）使用 OpenNLP 库的句子检测器将文档分割成句子，依此类推。</li><li>然后，“文档分割器”（DocumentSplitter）将这些较小的单元（段落、句子、单词等）组合成 “文本片段”（TextSegment），尝试在单个 “文本片段”（TextSegment）中包含尽可能多的单元，同时不超过第一步中设置的限制。如果某些单元仍然太大，无法放入一个 “文本片段”（TextSegment）中，它会调用一个子分割器。这是另一个 “文档分割器”（DocumentSplitter），能够将不适合的单元分割成更细粒度的单元。会向每个文本片段添加一个唯一的元数据条目 “index”。第一个 “文本片段”（TextSegment）将包含 <code>index=0</code>，第二个是 <code>index=1</code>，依此类推</li></ol><p><code>模型上下文窗口</code>可以通过模型参数列表查看：<a href="https://bailian.console.aliyun.com/?tab=doc#/doc/?type=model&amp;url=https%3A%2F%2Fhelp.aliyun.com%2Fdocument_detail%2F2840914.html">阿里云百炼</a></p><p><strong>期望的文本片段最大大小</strong></p><ol><li><strong>模型上下文窗口</strong>：如果你使用的大语言模型（LLM）有特定的上下文窗口限制，这个值不能超过模型能够处理的最大 token 数。例如，某些模型可能最大只能处理 2048 个 token，那么设置的文本片段大小就需要远小于这个值，为后续的处理（如添加指令、其他输入等）留出空间。通常，在这种情况下，你可以设置为 1000 - 1500 左右，具体根据实际情况调整。</li><li><strong>数据特点</strong>：如果你的文档内容较为复杂，每个段落包含的信息较多，那么可以适当提高这个值，比如设置为 500 - 800 个 token，以便在一个文本片段中包含相对完整的信息块。相反，如果文档段落较短且信息相对独立，设置为 200 - 400 个 token 可能就足够了。</li><li><strong>检索需求</strong>：如果希望在检索时能够更精确地匹配到相关信息，较小的文本片段可能更合适，这样可以提高信息的粒度。例如设置为 200 - 300 个 token。但如果更注重获取完整的上下文信息，较大的文本片段（如 500 - 600 个 token）可能更有助于理解相关内容。</li></ol><p><strong>重叠部分大小</strong></p><ol><li><strong>上下文连贯性</strong>：重叠部分的主要作用是提供上下文连贯性，避免因分割导致信息缺失。如果文档内容之间的逻辑联系紧密，建议设置较大的重叠部分，如 50 - 100 个 token，以确保相邻文本片段之间的过渡自然，模型在处理时能够更好地理解上下文。</li><li><strong>数据冗余</strong>：然而，设置过大的重叠部分会增加数据的冗余度，可能导致处理时间增加和资源浪费。因此，需要在上下文连贯性和数据冗余之间进行平衡。一般来说，20 - 50 个 token 的重叠是比较常见的取值范围。</li><li><strong>模型处理能力</strong>：如果使用的模型对输入的敏感性较高，较小的重叠部分（如 20 - 30 个 token）可能就足够了，因为过多的重叠可能会引入不必要的干扰信息。但如果模型对上下文依赖较大，适当增加重叠部分（如 40 - 60 个 token）可能会提高模型的性能。</li></ol><p>例如，在处理一般性的文本资料，且使用的模型上下文窗口较大（如 4096 个 token）时，设置文本片段最大大小为 600 - 800 个 token，重叠部分为 30 - 50 个 token 可能是一个不错的选择。但最终的设置还需要通过实验和实际效果评估来确定，以找到最适合具体应用场景的参数值。</p><h2 id="十一、项目实战-在硅谷小智中实现RAG">十一、项目实战-在硅谷小智中实现RAG</h2><h3 id="1、创建-Bean对象">1、创建@Bean对象</h3><p>在xiaozhiAgentConfig中添加ContentRetriever</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line">ContentRetriever <span class="title function_">contentRetrieverXiaozhi</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//使用FileSystemDocumentLoader读取指定目录下的知识库文档</span></span><br><span class="line">    <span class="comment">//并使用默认的文档解析器对文档进行解析</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document1</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/医院信息.md&quot;</span>);</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document2</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/科室信息.md&quot;</span>);</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document3</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/神经内科.md&quot;</span>);</span><br><span class="line">    List&lt;Document&gt; documents = Arrays.asList(document1, document2, document3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用内存向量存储</span></span><br><span class="line">    InMemoryEmbeddingStore&lt;TextSegment&gt; embeddingStore = <span class="keyword">new</span> <span class="title class_">InMemoryEmbeddingStore</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//使用默认的文档分割器</span></span><br><span class="line">    EmbeddingStoreIngestor.ingest(documents, embeddingStore);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//从嵌入存储（EmbeddingStore）里检索和查询内容相关的信息</span></span><br><span class="line">    <span class="keyword">return</span> EmbeddingStoreContentRetriever.from(embeddingStore);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、添加配置">2、添加配置</h3><p>在<code>XiaozhiAgent</code>中添加<code>contentRetriever</code>配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">        wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">        chatModel = &quot;qwenChatModel&quot;,</span></span><br><span class="line"><span class="meta">        chatMemoryProvider = &quot;chatMemoryProviderXiaozhi&quot;,</span></span><br><span class="line"><span class="meta">        tools = &quot;appointmentTools&quot;,</span></span><br><span class="line"><span class="meta">        contentRetriever = &quot;contentRetrieverXiaozhi&quot; //配置向量存储</span></span><br><span class="line"><span class="meta">)</span></span><br></pre></td></tr></table></figure><h3 id="3、修改工具的value提示">3、修改工具的value提示</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Tool(name=&quot;预约挂号&quot;, value = &quot;根据参数，先执行工具方法queryDepartment查询是否可预约，并直接给用户回答是否可预约，并让用户确认所有预约信息，用户确认后再进行预约。如果用户没有提供具体的医生姓名，请从向量存储中找到一位医生。&quot;)</span></span><br></pre></td></tr></table></figure><h3 id="4、测试RAG">4、测试RAG</h3><p>在Controller中测试</p><h2 id="十二、向量模型和向量存储">十二、向量模型和向量存储</h2><h3 id="1、向量大模型">1、向量大模型</h3><h4 id="1-1、介绍">1.1、介绍</h4><p>**通用文本向量模型：**<a href="https://help.aliyun.com/zh/model-studio/developer-reference/text-embedding-synchronous-api?spm=a2c4g.11186623.help-menu-2400256.d_2_5_0.592672a3yMJDRq&amp;scm=20140722.H_2712515._.OR_help-T_cn~zh-V_1">https://help.aliyun.com/zh/model-studio/developer-reference/text-embedding-synchronous-api?spm=a2c4g.11186623.help-menu-2400256.d_2_5_0.592672a3yMJDRq&amp;scm=20140722.H_2712515._.OR_help-T_cn~zh-V_1</a></p><p><strong>text-embedding-v3：</strong><a href="https://bailian.console.aliyun.com/?tab=model#/model-market/detail/text-embedding-v3">阿里云百炼</a></p><p><img src="https://photo.459122.xyz/i/14cf859abeb5de6588a758ff76e0bda0.png" alt="image-20250402000205052-1749129786013-11"></p><p>使用通用文本向量 text-embedding-v3，维度1024，维度越多，对事务的描述越精准，信息检索的精度越高</p><h4 id="1-2、模型配置">1.2、模型配置</h4><p>使用<code>text-embedding-v3</code>依然需要添加<code>langchain4j-community-dashscope</code>依赖，我们之前已经添加过了</p><p>配置向量模型</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集成阿里通义千问-通用文本向量-v3</span></span><br><span class="line"><span class="attr">langchain4j.community.dashscope.embedding-model.api-key</span>=<span class="string">$&#123;DASH_SCOPE_API_KEY&#125;</span></span><br><span class="line"><span class="attr">langchain4j.community.dashscope.embedding-model.model-name</span>=<span class="string">text-embedding-v3</span></span><br></pre></td></tr></table></figure><h4 id="1-3、文本向量化">1.3、文本向量化</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmbeddingTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmbeddingModel embeddingModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmbeddingModel</span><span class="params">()</span>&#123;</span><br><span class="line">        Response&lt;Embedding&gt; embed = embeddingModel.embed(<span class="string">&quot;你好&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;向量维度：&quot;</span> + embed.content().vector().length);</span><br><span class="line">        System.out.println(<span class="string">&quot;向量输出：&quot;</span> + embed.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、向量存储">2、向量存储</h3><h4 id="2-1、Pinecone简介">2.1、Pinecone简介</h4><p>之前我们使用的是InMemoryEmbeddingStore作为向量存储，但是不建议在生产中使用基于内存的向量存储。因此这里我们使用Pinecone作为向量数据库。</p><p>官方网站：<a href="https://www.pinecone.io/">The vector database to build knowledgeable AI | Pinecone</a></p><p>访问官方网站、注册、登录、获取apiKey且配置在环境变量中。<strong>默认有2GB的免费存储空间</strong></p><h4 id="2-2、Pinecone的使用">2.2、Pinecone的使用</h4><p><strong>得分的含义</strong></p><p>在向量检索场景中，当我们把查询文本转换为向量后，会在嵌入存储（<code>EmbeddingStore</code>）里查找与之最相似的向量（这些向量对应着文档片段等内容）。为了衡量查询向量和存储向量之间的相似程度，会使用某种相似度计算方法（例如余弦相似度等）来得出一个数值，这个数值就是得分。得分越高，表明查询向量和存储向量越相似，对应的文档片段与查询文本的相关性也就越高。</p><p><strong>得分的作用</strong></p><ul><li><strong>筛选结果</strong>：通过设置 <code>minScore</code> 阈值，能够过滤掉那些与查询文本相关性较低的结果。在代码里，<code>minScore(0.8)</code> 意味着只有得分大于等于 0.8 的结果才会被返回，低于这个阈值的结果会被舍弃。这样可以确保返回的结果是与查询文本高度相关的，提升检索结果的质量。</li><li><strong>控制召回率和准确率</strong>：调整 <code>minScore</code> 的值可以在召回率和准确率之间进行权衡。如果把阈值设置得较低，那么更多的结果会被返回，召回率会提高，但可能会包含一些相关性不太强的结果，导致准确率下降；反之，如果把阈值设置得较高，返回的结果数量会减少，准确率会提高，但可能会遗漏一些相关的结果，使得召回率降低。在实际应用中，需要根据具体的业务需求来合理设置 <code>minScore</code> 的值。</li></ul><p><strong>示例说明</strong></p><p>假设我们有一个关于水果的文档集合，嵌入存储中存储了这些文档片段的向量。当我们使用 “苹果的营养价值” 作为查询文本时，向量检索会计算查询向量与存储向量的相似度得分。如果 <code>minScore</code> 设置为 0.8，那么只有那些与 “苹果的营养价值” 相关性非常高的文档片段才会被返回，而一些只简单提及苹果但没有详细讨论其营养价值的文档片段可能由于得分低于 0.8 而不会被返回。</p><h4 id="2-3、集成Pinecone">2.3、集成Pinecone</h4><p>参考文档：<a href="https://docs.langchain4j.dev/integrations/embedding-stores/pinecone">Pinecone | LangChain4j</a></p><p>添加依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-pinecone<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-4、配置向量存储对象">2.4、配置向量存储对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.java.ai.langchain4j.config;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmbeddingStoreConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmbeddingModel embeddingModel;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> EmbeddingStore&lt;TextSegment&gt; <span class="title function_">embeddingStore</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//创建向量存储</span></span><br><span class="line">        EmbeddingStore&lt;TextSegment&gt; embeddingStore = PineconeEmbeddingStore.builder()</span><br><span class="line">                .apiKey(System.getenv(<span class="string">&quot;PINECONE_API_KEY&quot;</span>))</span><br><span class="line">                .index(<span class="string">&quot;xiaozhi-index&quot;</span>)<span class="comment">//如果指定的索引不存在，将创建一个新的索引</span></span><br><span class="line">                .nameSpace(<span class="string">&quot;xiaozhi-namespace&quot;</span>) <span class="comment">//如果指定的名称空间不存在，将创建一个新的名称空间</span></span><br><span class="line">                .createIndex(PineconeServerlessIndexConfig.builder()</span><br><span class="line">                        .cloud(<span class="string">&quot;AWS&quot;</span>) <span class="comment">//指定索引部署在 AWS 云服务上。</span></span><br><span class="line">                        .region(<span class="string">&quot;us-east-1&quot;</span>) <span class="comment">//指定索引所在的 AWS 区域为 us-east-1。</span></span><br><span class="line">                        .dimension(embeddingModel.dimension()) <span class="comment">//指定索引的向量维度，该维度与 embeddedModel 生成的向量维度相同。</span></span><br><span class="line">                        .build())</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> embeddingStore;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-5、测试向量存储">2.5、测试向量存储</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmbeddingStore embeddingStore;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将文本转换成向量，然后存储到pinecone中</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 参考：</span></span><br><span class="line"><span class="comment"> * https://docs.langchain4j.dev/tutorials/embedding-stores</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPineconeEmbeded</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将文本转换成向量</span></span><br><span class="line">    <span class="type">TextSegment</span> <span class="variable">segment1</span> <span class="operator">=</span> TextSegment.from(<span class="string">&quot;我喜欢羽毛球&quot;</span>);</span><br><span class="line">    <span class="type">Embedding</span> <span class="variable">embedding1</span> <span class="operator">=</span> embeddingModel.embed(segment1).content();</span><br><span class="line">    <span class="comment">//存入向量数据库</span></span><br><span class="line">    embeddingStore.add(embedding1, segment1);</span><br><span class="line"></span><br><span class="line">    <span class="type">TextSegment</span> <span class="variable">segment2</span> <span class="operator">=</span> TextSegment.from(<span class="string">&quot;今天天气很好&quot;</span>);</span><br><span class="line">    <span class="type">Embedding</span> <span class="variable">embedding2</span> <span class="operator">=</span> embeddingModel.embed(segment2).content();</span><br><span class="line">    embeddingStore.add(embedding2, segment2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、相似度匹配">3、相似度匹配</h3><p>接收请求获取问题，将问题转换为向量，在 Pinecone 向量数据库中进行相似度搜索，找到最相似的文本片段，并将其文本内容返回给客户端。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Pinecone-相似度匹配</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">embeddingSearch</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提问，并将问题转成向量数据</span></span><br><span class="line">    <span class="type">Embedding</span> <span class="variable">queryEmbedding</span> <span class="operator">=</span> embeddingModel.embed(<span class="string">&quot;你最喜欢的运动是什么？&quot;</span>).content();</span><br><span class="line">    <span class="comment">//创建搜索请求对象</span></span><br><span class="line">    <span class="type">EmbeddingSearchRequest</span> <span class="variable">searchRequest</span> <span class="operator">=</span> EmbeddingSearchRequest.builder()</span><br><span class="line">            .queryEmbedding(queryEmbedding)</span><br><span class="line">            .maxResults(<span class="number">1</span>) <span class="comment">//匹配最相似的一条记录</span></span><br><span class="line">        <span class="comment">//.minScore(0.8)</span></span><br><span class="line">            .build();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据搜索请求 searchRequest 在向量存储中进行相似度搜索</span></span><br><span class="line">    EmbeddingSearchResult&lt;TextSegment&gt; searchResult = embeddingStore.search(searchRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//searchResult.matches()：获取搜索结果中的匹配项列表。</span></span><br><span class="line">    <span class="comment">//.get(0)：从匹配项列表中获取第一个匹配项</span></span><br><span class="line">    EmbeddingMatch&lt;TextSegment&gt; embeddingMatch = searchResult.matches().get(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取匹配项的相似度得分</span></span><br><span class="line">    System.out.println(embeddingMatch.score()); <span class="comment">// 0.8144288515898701</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回文本结果</span></span><br><span class="line">    System.out.println(embeddingMatch.embedded().text());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="十三、项目实战-在硅谷小智中整合向量数据库">十三、项目实战-在硅谷小智中整合向量数据库</h2><h3 id="1、上传知识库到Pinecone">1、上传知识库到Pinecone</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUploadKnowledgeLibrary</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用FileSystemDocumentLoader读取指定目录下的知识库文档</span></span><br><span class="line">    <span class="comment">//并使用默认的文档解析器对文档进行解析</span></span><br><span class="line">    <span class="type">Document</span> <span class="variable">document1</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/医院信息.md&quot;</span>);</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document2</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/科室信息.md&quot;</span>);</span><br><span class="line">    <span class="type">Document</span> <span class="variable">document3</span> <span class="operator">=</span> FileSystemDocumentLoader.loadDocument(<span class="string">&quot;E:/knowledge/神经内科.md&quot;</span>);</span><br><span class="line">    List&lt;Document&gt; documents = Arrays.asList(document1, document2, document3);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文本向量化并存入向量数据库：将每个片段进行向量化，得到一个嵌入向量</span></span><br><span class="line">    EmbeddingStoreIngestor</span><br><span class="line">            .builder()</span><br><span class="line">            .embeddingStore(embeddingStore)</span><br><span class="line">            .embeddingModel(embeddingModel)</span><br><span class="line">            .build()</span><br><span class="line">            .ingest(documents);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、修改XiaozhiAgentConfig">2、修改XiaozhiAgentConfig</h3><p>添加基于Pinecone的向量数据库配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmbeddingStore embeddingStore;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmbeddingModel embeddingModel;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line">ContentRetriever <span class="title function_">contentRetrieverXiaozhiPincone</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建一个 EmbeddingStoreContentRetriever 对象，用于从嵌入存储中检索内容</span></span><br><span class="line">    <span class="keyword">return</span> EmbeddingStoreContentRetriever</span><br><span class="line">            .builder()</span><br><span class="line">            <span class="comment">// 设置用于生成嵌入向量的嵌入模型</span></span><br><span class="line">            .embeddingModel(embeddingModel)</span><br><span class="line">            <span class="comment">// 指定要使用的嵌入存储</span></span><br><span class="line">            .embeddingStore(embeddingStore)</span><br><span class="line">            <span class="comment">// 设置最大检索结果数量，这里表示最多返回 1 条匹配结果</span></span><br><span class="line">            .maxResults(<span class="number">1</span>)</span><br><span class="line">            <span class="comment">// 设置最小得分阈值，只有得分大于等于 0.8 的结果才会被返回</span></span><br><span class="line">            .minScore(<span class="number">0.8</span>)</span><br><span class="line">            <span class="comment">// 构建最终的 EmbeddingStoreContentRetriever 实例</span></span><br><span class="line">            .build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、修改XiaozhiAgent">3、修改XiaozhiAgent</h3><p>修改contentRetriever的配置为contentRetrieverXiaozhiPincone</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">        wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">        chatModel = &quot;qwenChatModel&quot;,</span></span><br><span class="line"><span class="meta">        chatMemoryProvider = &quot;chatMemoryProviderXiaozhi&quot;,</span></span><br><span class="line"><span class="meta">        tools = &quot;appointmentTools&quot;,</span></span><br><span class="line"><span class="meta">        contentRetriever = &quot;contentRetrieverXiaozhiPincone&quot;)</span></span><br></pre></td></tr></table></figure><h2 id="十四、项目实战-改造流式输出">十四、项目实战-改造流式输出</h2><p>大模型的流式输出是指大模型在生成文本或其他类型的数据时，不是等到整个生成过程完成后再一次性返回所有内容，而是生成一部分就立即发送一部分给用户或下游系统，以逐步、逐块的方式返回结果。这样，用户就不需要等待整个文本生成完成再看到结果。通过这种方式可以改善用户体验，因为用户不需要等待太长时间，几乎可以立即开始阅读响应。</p><h3 id="1、添加依赖">1、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--流式输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-webflux<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>dev.langchain4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>langchain4j-reactor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2、配置流式输出模型">2、配置流式输出模型</h3><p>在application.properties中配置流式输出大模型</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#集成阿里通义千问-流式输出</span></span><br><span class="line"><span class="attr">langchain4j.community.dashscope.streaming-chat-model.api-key</span>=<span class="string">$&#123;DASH_SCOPE_API_KEY&#125;</span></span><br><span class="line"><span class="attr">langchain4j.community.dashscope.streaming-chat-model.model-name</span>=<span class="string">qwen-plus</span></span><br></pre></td></tr></table></figure><h3 id="3、编码">3、编码</h3><p>修改<code>XiaozhiAgent</code>中<code>chatModel</code>改为 streamingChatModel = “qwenStreamingChatModel”</p><p>``chat<code>方法的返回值为</code>Flux<String>`</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@AiService(</span></span><br><span class="line"><span class="meta">        wiringMode = EXPLICIT,</span></span><br><span class="line"><span class="meta">        streamingChatModel = &quot;qwenStreamingChatModel&quot;,</span></span><br><span class="line"><span class="meta">        chatMemoryProvider = &quot;chatMemoryProviderXiaozhi&quot;,</span></span><br><span class="line"><span class="meta">        tools = &quot;appointmentTools&quot;,</span></span><br><span class="line"><span class="meta">        contentRetriever = &quot;contentRetrieverXiaozhiPincone&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">XiaozhiAgent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@SystemMessage(fromResource = &quot;zhaozhi-prompt-template.txt&quot;)</span></span><br><span class="line">    Flux&lt;String&gt; <span class="title function_">chat</span><span class="params">(<span class="meta">@MemoryId</span> Long memoryId, <span class="meta">@UserMessage</span> String userMessage)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改<code>XiaozhiController</code>中<code>chat</code>方法的返回值为<code>Flux&lt;String&gt;</code>，并添加<code>produces</code>属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Operation(summary = &quot;对话&quot;)</span></span><br><span class="line"><span class="meta">@PostMapping(value = &quot;/chat&quot;, produces = &quot;text/stream;charset=utf-8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Flux&lt;String&gt; <span class="title function_">chat</span><span class="params">(<span class="meta">@RequestBody</span> ChatForm chatForm)</span>  &#123;</span><br><span class="line">    <span class="keyword">return</span> xiaozhiAgent.chat(chatForm.getMemoryId(), chatForm.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、测试">3、测试</h3><h2 id="十五、项目实战-运行前端工程">十五、项目实战-运行前端工程</h2><h3 id="1、安装Node-js">1、安装Node.js</h3><p>Node.js是一个基于JavaScript引擎的服务器端环境，前端项目在开发环境下要基于Node.js来运行</p><p>安装：node-v18.17.1-x64.msi</p><h3 id="2、配置npm镜像">2、配置npm镜像</h3><p>打开命令行，配置依赖的下载使用阿里镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h3 id="3、运行前端项目">3、运行前端项目</h3><p>进入项目目录，执行下面的命令启动项目：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> xiaozhi<span class="literal">-ui</span></span><br><span class="line">npm i</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">Langchain</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>英语学习01-名词</title>
    <link href="https://yjyrichard.github.io/posts/b5c6903b.html"/>
    <id>https://yjyrichard.github.io/posts/b5c6903b.html</id>
    <published>2025-05-29T11:17:42.829Z</published>
    <updated>2025-05-29T12:33:17.515Z</updated>
    
    <content type="html"><![CDATA[<h1>英语学习01 🚀✨</h1><p><strong>梅花香自苦寒来</strong></p><p><em>In order to feel alive, I have to do things that make me feel uncomfortable, because growth cannot bloom in the safety of familiarity. As human beings, we become who we are through challenges— edges that fray our limits, storms that teach us resilience, and unknowns that force us to rewrite our definitions of courage. Comfort may cradle the body, but it starves the soul; only by leaning into discomfort do we meet the raw, unscripted versions of ourselves, sculpted not by ease, but by the friction of becoming.</em></p><blockquote><p>in order to feel alive,<br>i have to do things that make me feel uncomfortable,<br>because…<br>as human beings,<br>we become who we are through challenges.</p></blockquote><p>feel alive 有滋有味的活着</p><p>do things that make me feel uncomfortable 折磨自己</p><p>we become who we are through challenges 高手从磨难中来</p><p>译文：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&quot;为了感受到自己活着，</span><br><span class="line">我必须去做那些让我不适的事，</span><br><span class="line">因为成长无法在熟悉的安全感中绽放。</span><br><span class="line">作为人类，</span><br><span class="line">我们通过挑战成为如今的自己——</span><br><span class="line">磨损边界的峭壁，</span><br><span class="line">教会坚韧的暴雨，</span><br><span class="line">以及迫使我们重写勇气定义的未知。</span><br><span class="line">舒适或许能抚慰身体，</span><br><span class="line">却使灵魂饥渴；</span><br><span class="line">唯有主动迎向不适，</span><br><span class="line">才能遇见未经修饰的、最本真的自我——</span><br><span class="line">它们不是被安逸雕琢，</span><br><span class="line">而是被蜕变时的摩擦铸就。&quot;</span><br></pre></td></tr></table></figure><p>正式进入今日学习 ~</p><hr><h2 id="名词-📚">名词 📚</h2><h3 id="名词的介绍-🧐">名词的介绍 🧐</h3><p>从今天开始我们将进入英语语法的学习，学习完你的英语听，说，读，写都会有全方位的提升。</p><p>我们知道英语语法分为：词法 和 句法</p><p>今天我们先来讲词法 =&gt; <strong>名词</strong> : 或物名称的词</p><p>名词又分为专有名词 和 普通名词两种</p><p>专有名词：人名，地名，机构，组织</p><p>举个栗子：</p><blockquote><p>Michael Jackson</p><p>China  【这里注意 当表达意思为瓷器的时候不能用大写，而是用china】</p><p>the Great Wall</p></blockquote><p>💡 tips(提示) : 为什么the 的t不大写呢？</p><p>🤔 可能会问：什么是实词呀？</p><p>🌟 实词的主要特点</p><ol><li><strong>意义实在</strong> 能明确指向具体事物、动作、状态或性质（如&quot;山、跑、美丽&quot;）。</li><li><strong>独立充当成分</strong> 可单独作主语、谓语、宾语等（如：&quot;太阳升起&quot;中，&quot;太阳&quot;是名词作主语，&quot;升起&quot;是动词作谓语）。</li><li><strong>可被修饰</strong> 能受副词、形容词等修饰（如&quot;快速奔跑&quot;中，“快速&quot;修饰动词&quot;奔跑”）。</li></ol><p>📊 实词的分类</p><ol><li><strong>名词</strong> 表示人、事物、时间、地点等（例：老师、书本、春天、北京）。</li><li><strong>动词</strong> 表示动作、行为、变化（例：思考、生长、成为）。</li><li><strong>形容词</strong> 表示性质、状态（例：纯净、焦虑、鲜红）。</li><li><strong>数词</strong> 表示数量或顺序（例：三、第一、百分之二十）。</li><li><strong>量词</strong> 表示事物或动作的单位（例：个、次、场）。</li><li><strong>代词</strong> 代替名词或名词性成分（例：我、这、谁）。</li></ol><p>📢 实词 vs 虚词</p><table><thead><tr><th></th><th>实词</th><th>虚词</th></tr></thead><tbody><tr><td><strong>意义</strong></td><td>具体（如山、爱、五）</td><td>抽象（如的、吗、因为）</td></tr><tr><td><strong>功能</strong></td><td>独立成句成分</td><td>连接/辅助实词构成语法关系</td></tr><tr><td><strong>数量</strong></td><td>开放类（可无限新增）</td><td>封闭类（数量固定）</td></tr></tbody></table><p>🎯 例句观察</p><p><strong>句子</strong>：“那个穿红裙的女孩轻轻唱了三首歌。”</p><ul><li><strong>实词</strong>：穿（动词）、红裙（名词）、女孩（名词）、唱（动词）、三（数词）、首（量词）、歌（名词）</li><li><strong>虚词</strong>：那个（指示代词中的虚指成分）、地（结构助词）、了（动态助词）</li></ul><p>普通名词分为可数名词和不可数名词</p><p>这里可数和不可数可不是我们脑子中的可不可数，而是要根据英语语法意义来判断</p><p>比如钱 好像我们日常生活中觉得钱是可以数的清，但是我们要从语法意义，语法意义上是不可数的</p><p>💧 可数名词：</p><ul><li>个体名词：apple,dog,desk</li><li>集体名词: family,group,team</li></ul><p>但是还有既可以是个体名词也可以是集体名词的名词，比如：family表示家人的意思的时候就是个体名词，如果当他表示家庭的时候就是集体名词</p><p>咱们举个例子：</p><blockquote><p>One of my families is an actress.(个体)</p><p>I have a big family.（集体）</p></blockquote><p>💧 不可数名词：</p><ul><li>物质名词：water,air ,rice</li><li>抽象名词：love,friendship,health</li></ul><p>那我们要往死里背吗？做题如何区分呢？最容易弄混的就是个体名词和物质名词</p><p>🧠 传授你一个小技巧：</p><p>个体名词咱们是可以想出具体形状的：比如car ,flower</p><p>物质名词：是没有形状的：比如water(你想呀可以是装在长方体是长方体，装在碗里又是另外一个形状了)，air</p><p>🖼️ 总结一下名词的分类：</p><p><img src="https://photo.459122.xyz/i/47b6484eabe2ef20dd25653f3d241083.png" alt="image-20250529194823638"></p><p>📢 注意：</p><blockquote><h3 id="📢-关于「不可数名词」的误解澄清">📢 关于「不可数名词」的误解澄清</h3><p>不可数名词的核心定义是 <strong>“语法上无法直接用数词（如「一、二」）单独计数的名词”</strong>，和「有没有固定形状、能不能描述」<strong>没有直接关系</strong>。</p></blockquote><h3 id="名词变复数-🔄">名词变复数 🔄</h3><p>我们最常见的复数就是+s ,简单举几个例子</p><p>student – students</p><p>one student          250 students</p><p>apple   —  apples</p><p>bag — bags</p><p>但是呢，名词变复数还有3种特殊加法</p><ol><li>以-s,-x,-sh,-ch 结尾的可数名词 复数加es  bus–buses,box–boxes,watch–watches</li><li>以辅音字母加y结尾的词，先把y变成i,再加es country–countries  baby–babies  元音 a e i o u 加y结尾的词，复数加s   toy – toys   monkey – monkeys</li><li>以f ,fe结尾的词，要变f,fe为ves  leaf–leaves  wife–wives  这样的词还有half,self,knife,wolf,shelf,life,thief</li></ol><p>🔥第三点有点难记，来点&quot;咒语&quot;：</p><blockquote><p>半片  树叶  自己黄</p><p>half  leaf    self</p><p>妻子  拿到  去杀狼</p><p>wife knife  wolf</p><p>小偷  架后 逃命亡</p><p>thief  shelf  life</p></blockquote><p>👀注意：有三个特殊的roof – roofs (屋顶)，belif – belifs （信仰）， proof – proofs （证据） ==》 复数直接+s</p><p>前面说完了一般变化和特殊变化，接下来希望学习 =》任性的变化：不按常理出牌的变化</p><p>🤪 <strong>任性一号</strong>：元音字母翻脸</p><p>man --》 men     woman --》women   foot–》 feet 这里注意foot不仅有脚的意思还有英尺的意思。</p><p>😎 <strong>任性二号</strong>：我不变，我不变，我就是不变</p><p>也就是单数和复数都是一样的</p><p>比如fish,单复数都一样，但是如果我们写fishes表示啥呢？这个时候表示的是一群不同的🐟</p><p>sheep，Chinese,deer,Japanese等都是单复数同形的</p><p>🐭 <strong>任性三号</strong>：一只老鼠 mouse vs 好多只老鼠 mice</p><p>🍅 <strong>任性四号</strong>：黑人英雄站在火山口吃土豆西红柿和芒果</p><p>一般情况下以o结尾的名词变复数都是直接加s</p><p>zoo --》 zoos  radio–&gt; radios</p><p>但是咱们的&quot;黑人英雄站在火山口吃土豆西红柿和芒果&quot; 的复数是加es</p><p><img src="https://photo.459122.xyz/i/1347623b8f71c8260662d8357e89f007.png" alt="image-20250529200237295"></p><p>🤫温馨提示：Negro对黑人有侮辱的意思，不要在外说哦！</p><h2 id="🤩-闯关小练习来啦！-🥳">🤩 闯关小练习来啦！ 🥳</h2><p>准备好了吗？让我们来检验一下今天的学习成果吧！💪</p><h3 id="🧩-模块一：名词小侦探-🕵️‍♀️">🧩 模块一：名词小侦探 🕵️‍♀️</h3><p><strong>任务1：火眼金睛辨专名</strong> 👀</p><p>下面的词语中，哪些是专有名词，哪些是普通名词呢？把它们找出来吧！</p><ol><li>Beijing</li><li>dog</li><li>Mrs. Green</li><li>book</li><li>the Yellow River</li><li>happiness</li><li>apple</li><li>Christmas</li></ol><p><strong>任务2：可数不可数，我来分清楚！</strong> ⚖️</p><p>请判断下列普通名词是可数名词 © 还是不可数名词 (U)？</p><ol><li>water ( )</li><li>student ( )</li><li>advice ( )</li><li>car ( )</li><li>rice ( )</li><li>friendship ( )</li><li>idea ( )</li><li>money ( )</li><li>news ( )</li><li>orange ( )</li></ol><h3 id="🪄-模块二：复数魔法棒-🌟">🪄 模块二：复数魔法棒 🌟</h3><p><strong>任务1：小小变形师</strong> ✍️</p><p>请写出下列名词的复数形式：</p><ol><li>box __________</li><li>photo __________</li><li>lady __________</li><li>toy __________</li><li>leaf __________</li><li>roof __________</li><li>man __________</li><li>sheep __________</li><li>Chinese __________</li><li>potato __________</li><li>child __________ (这个是小彩蛋哦，课上没细讲，看看你能不能猜对！)</li><li>foot __________</li><li>watch __________</li><li>half __________</li><li>hero __________</li></ol><p><strong>任务2：句子升级</strong> 🚀</p><p>用所给名词的正确形式（单数或复数）填空，让句子更完整！</p><ol><li>There are many _________ (bus) on the road.</li><li>My mother bought two _________ (kilo) of _________ (apple).</li><li>Look! There are some _________ (deer) in the forest.</li><li>He has three _________ (watch).</li><li>These _________ (woman) are all teachers.</li><li>Can you see the _________ (leaf) on the tree?</li><li>We have many _________ (shelf) in our classroom.</li><li>My _________ (foot) are tired after walking.</li></ol><hr><h2 id="🗝️-答案和超级解析！-🎉">🗝️ 答案和超级解析！ 🎉</h2><p>小侦探，魔法师，做得怎么样呀？来看看标准答案吧！🤩</p><h3 id="🧩-模块一：名词小侦探-🕵️‍♀️-2">🧩 模块一：名词小侦探 🕵️‍♀️</h3><p><strong>任务1：火眼金睛辨专名</strong> 👀</p><ul><li><strong>专有名词 (需要首字母大写哦！)</strong> ✨:<ol><li>Beijing (地名)</li><li>Mrs. Green (人名)</li><li>the Yellow River (地名，记得 “the” 后面的实词首字母要大写！)</li><li>Christmas (节日名称)</li></ol></li><li><strong>普通名词</strong> 🧸:<ol><li>dog</li><li>book</li><li>happiness (抽象名词)</li><li>apple</li></ol></li></ul><p><strong>任务2：可数不可数，我来分清楚！</strong> ⚖️</p><ol><li>water (U) - 💧水是物质名词，没有固定的形状，通常不可数哦！</li><li>student © - 🧑‍🎓学生是一个一个的，可以数清楚！</li><li>advice (U) - 💡建议是抽象的，通常不可数。可以说 a piece of advice (一条建议)。</li><li>car © - 🚗汽车有具体的形状，可以一辆一辆地数！</li><li>rice (U) - 🍚米饭由很多小颗粒组成，是物质名词，通常不可数。</li><li>friendship (U) - ❤️友谊是抽象的情感，不可数。</li><li>idea © - 🤔想法、主意是可以一个一个列出来的，可数！</li><li>money (U) - 💰钱在英语中是不可数名词哦！虽然我们可以数多少元、多少角，但 “money” 这个词本身是不可数的。可以说 some money。</li><li>news (U) - 📰消息、新闻，虽然看起来像复数，但它其实是不可数名词哦！一条新闻是 a piece of news。</li><li>orange © - 🍊橘子是可以一个一个数的！</li></ol><h3 id="🪄-模块二：复数魔法棒-🌟-2">🪄 模块二：复数魔法棒 🌟</h3><p><strong>任务1：小小变形师</strong> ✍️</p><ol><li>box → <strong>boxes</strong> (嘿！以-x结尾，要加-es！🚌)</li><li>photo → <strong>photos</strong> (叮！这是以o结尾但直接加-s的常见词哦！📸)</li><li>lady → <strong>ladies</strong> (规则：辅音字母+y结尾，变y为i再加-es！💃)</li><li>toy → <strong>toys</strong> (规则：元音字母+y结尾，直接加-s！🧸)</li><li>leaf → <strong>leaves</strong> (咒语时刻：“半片树叶自己黄”，f结尾变ves！🍁)</li><li>roof → <strong>roofs</strong> (特别注意！roof是f结尾直接+s的三个特殊词之一！🏠)</li><li>man → <strong>men</strong> (任性一号！元音字母翻脸啦！👨‍🦰 → 👨‍👨‍👦‍👦)</li><li>sheep → <strong>sheep</strong> (任性二号！我就是不变！🐑🐑)</li><li>Chinese → <strong>Chinese</strong> (任性二号！我也是不变！中国人，单复数都一样！🇨🇳)</li><li>potato → <strong>potatoes</strong> (任性四号！英雄爱吃土豆，o结尾加-es！🥔)</li><li>child → <strong>children</strong> (小彩蛋揭晓！这是一个不规则变化，要记住哦！👶 → 👧👦)</li><li>foot → <strong>feet</strong> (任性一号又来啦！元音变化！🦶 → 👣)</li><li>watch → <strong>watches</strong> (以-ch结尾，加-es！🕰️)</li><li>half → <strong>halves</strong> (咒语：“半片树叶自己黄”，f结尾变ves！🌓)</li><li>hero → <strong>heroes</strong> (任性四号！英雄，o结尾加-es！🦸‍♂️)</li></ol><p><strong>任务2：句子升级</strong> 🚀</p><ol><li>There are many <strong>buses</strong> on the road. (路上有很多公交车。bus以s结尾，复数加es。)</li><li>My mother bought two <strong>kilos</strong> of <strong>apples</strong>. (我妈妈买了两公斤苹果。kilo是以o结尾直接加s的；apple是规则复数+s。)</li><li>Look! There are some <strong>deer</strong> in the forest. (看！森林里有一些鹿。deer是单复数同形的哦！)</li><li>He has three <strong>watches</strong>. (他有三块手表。watch以ch结尾，复数加es。)</li><li>These <strong>women</strong> are all teachers. (这些女士都是老师。woman是任性一号，变元音！)</li><li>Can you see the <strong>leaves</strong> on the tree? (你能看见树上的叶子吗？leaf以f结尾，变f为ves。)</li><li>We have many <strong>shelves</strong> in our classroom. (我们的教室里有很多架子。shelf以f结尾，变f为ves，来自咒语“小偷架后逃命亡”。)</li><li>My <strong>feet</strong> are tired after walking. (走路后我的脚累了。foot是任性一号，变元音！)</li></ol><p>棒棒哒！🎉🎉 你已经完成了所有的练习！希望这些小练习能让你对名词的知识掌握得更牢固！继续加油哦！💖</p>]]></content>
    
    
    <summary type="html">名词</summary>
    
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/categories/%E8%8B%B1%E8%AF%AD/"/>
    
    
    <category term="英语" scheme="https://yjyrichard.github.io/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>机器学习期末设计</title>
    <link href="https://yjyrichard.github.io/posts/81c54482.html"/>
    <id>https://yjyrichard.github.io/posts/81c54482.html</id>
    <published>2025-05-28T05:16:50.378Z</published>
    <updated>2025-05-29T12:19:57.874Z</updated>
    
    <content type="html"><![CDATA[<h1>预测锻炼期间燃烧卡路里的数据分析与建模</h1><h2 id="一、确定业务目标">一、确定业务目标</h2><p>本项目旨在通过分析锻炼相关数据，建立模型预测锻炼期间燃烧的卡路里量。这项研究具有重要的现实意义：</p><ol><li><strong>个性化健康管理</strong>：准确预测卡路里消耗可以帮助个人调整锻炼计划，达到健康减重或保持体重的目标。</li><li><strong>健身效果评估</strong>：为健身爱好者提供量化的锻炼效果评估，优化锻炼方案。</li><li><strong>智能健康设备开发</strong>：为智能手环、手表等健康监测设备提供更准确的卡路里消耗算法。</li><li><strong>健康应用支持</strong>：为健康和健身应用提供更精准的能量消耗预测功能。</li></ol><p>本项目的具体目标是：</p><ul><li>分析各项身体指标和运动特征与卡路里消耗的关系</li><li>构建高精度的卡路里消耗预测模型</li><li>评估不同机器学习算法的预测效果</li><li>提供可用于实际应用的预测模型</li></ul><h2 id="二、获取数据">二、获取数据</h2><p>数据来源于Kaggle平台的&quot;Calories Burnt Prediction&quot;数据集。该数据集包含以下文件：</p><ol><li><strong>train.csv</strong>：训练数据集，包含锻炼相关特征和卡路里消耗量</li><li><strong>test.csv</strong>：测试数据集，包含锻炼相关特征，需要预测卡路里消耗量</li><li><strong>sample_submission.csv</strong>：提交格式样例</li></ol><p>数据集包含以下特征：</p><ul><li><strong>id</strong>：记录ID</li><li><strong>Sex</strong>：性别（male/female）</li><li><strong>Age</strong>：年龄</li><li><strong>Height</strong>：身高（厘米）</li><li><strong>Weight</strong>：体重（千克）</li><li><strong>Duration</strong>：锻炼持续时间（分钟）</li><li><strong>Heart_Rate</strong>：心率（次/分钟）</li><li><strong>Body_Temp</strong>：体温（摄氏度）</li><li><strong>Calories</strong>：燃烧的卡路里（仅在训练集中提供）</li></ul><p>这个是一个当前正在举办的比赛，地址：<a href="https://www.kaggle.com/competitions/playground-series-s5e5/overview">Predict Calorie Expenditure | Kaggle</a></p><h2 id="三、数据预处理和探索性分析">三、数据预处理和探索性分析</h2><h3 id="3-1-数据预处理">3.1 数据预处理</h3><p>数据预处理阶段包括以下步骤：</p><ol><li><p><strong>数据加载与检查</strong>：</p><ul><li>加载训练和测试数据集</li><li>检查数据集大小和基本信息</li><li>查看数据类型和统计摘要</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 1. 数据获取</span></span><br><span class="line">train_data, test_data = load_data()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 数据预处理</span></span><br><span class="line">train_data = preprocess_data(train_data)</span><br><span class="line">test_data = preprocess_data(test_data, is_train=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载训练集和测试集数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练数据, 测试数据)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在加载数据...&quot;</span>)</span><br><span class="line">        train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">        test_data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练集大小：<span class="subst">&#123;train_data.shape&#125;</span>, 测试集大小：<span class="subst">&#123;test_data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528101850943.png" alt="image-20250528101850943"></p><p>读取这个数据的前五行：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取数据</span></span><br><span class="line">train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示前五行</span></span><br><span class="line"><span class="built_in">print</span>(train_data.head())</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528101622498.png" alt="image-20250528101622498"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">&quot;正在进行数据预处理...&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据副本，避免修改原始数据</span></span><br><span class="line">df = data.copy()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数据基本信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n数据基本信息:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示数据统计摘要</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n数据统计摘要:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.describe())</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528102208243.png" alt="image-20250528102208243"></p></li><li><p><strong>缺失值处理</strong>：</p><ul><li>检查各特征的缺失值</li><li>使用适当的方法填充缺失值（若有）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检查缺失值</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n检查缺失值:&quot;</span>)</span><br><span class="line">missing_values = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line"><span class="built_in">print</span>(missing_values[missing_values &gt; <span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 处理缺失值（如果有）</span></span><br><span class="line"><span class="keyword">if</span> df.isnull().<span class="built_in">sum</span>().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="comment"># 对数值型特征使用均值填充，分类特征使用众数填充</span></span><br><span class="line">    num_features = df.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">    cat_features = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> num_features:</span><br><span class="line">        <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            df[col].fillna(df[col].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> cat_features:</span><br><span class="line">        <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            df[col].fillna(df[col].mode()[<span class="number">0</span>], inplace=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure></li><li><p><strong>特征编码</strong>：</p><ul><li>将分类特征（如性别）编码为数值形式</li><li>男性编码为1，女性编码为0</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 性别编码：将性别特征转换为数值</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">    df[<span class="string">&#x27;Sex&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除ID列，因为它不是预测的特征</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">    df = df.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示处理后的数据信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n预处理后的数据信息:&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(df.info())</span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528103836338.png" alt="image-20250528103836338"></p></li><li><p><strong>特征工程</strong>：</p><ul><li>使用StandardScaler对数值特征进行标准化处理（模型训练和评估当中）</li><li>使模型训练更稳定，提高收敛速度</li></ul></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 特征工程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建新特征以提高模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 预处理后的数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 包含新特征的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行特征工程...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程前数据形状: <span class="subst">&#123;data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录原始特征列表</span></span><br><span class="line">        original_features = df.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 创建BMI特征（体重指数）</span></span><br><span class="line">        df[<span class="string">&#x27;BMI&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / ((df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 创建心率与年龄的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] / df[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 创建锻炼强度指标</span></span><br><span class="line">        df[<span class="string">&#x27;Exercise_Intensity&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] * df[<span class="string">&#x27;Duration&#x27;</span>] / <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 创建体温与心率的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>] = df[<span class="string">&#x27;Body_Temp&#x27;</span>] / df[<span class="string">&#x27;Heart_Rate&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 体重与身高的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Weight_Height_Ratio&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / (df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取新创建的特征列表</span></span><br><span class="line">        new_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> df.columns <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> original_features]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程完成，创建了 <span class="subst">&#123;<span class="built_in">len</span>(new_features)&#125;</span> 个新特征:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> new_features:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - <span class="subst">&#123;feature&#125;</span>: 均值=<span class="subst">&#123;df[feature].mean():<span class="number">.4</span>f&#125;</span>, 标准差=<span class="subst">&#123;df[feature].std():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程后数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528104847152.png" alt="image-20250528104847152"></p><h3 id="3-2-探索性数据分析">3.2 探索性数据分析</h3><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 探索性数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploratory_data_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行探索性数据分析</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要分析的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行探索性数据分析...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 对于大数据集，可以使用采样减少计算量</span></span><br><span class="line">        sample_size = <span class="built_in">min</span>(<span class="number">10000</span>, <span class="built_in">len</span>(data))</span><br><span class="line">        data_sample = data.sample(n=sample_size, random_state=<span class="number">42</span>) <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用<span class="subst">&#123;<span class="string">&#x27;采样数据&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> <span class="string">&#x27;完整数据&#x27;</span>&#125;</span>进行可视化分析，样本大小: <span class="subst">&#123;<span class="built_in">len</span>(data_sample)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分阶段执行可视化</span></span><br><span class="line">        plot_basic_distributions(data_sample)</span><br><span class="line">        plot_correlations(data_sample)</span><br><span class="line">        plot_feature_relationships(data_sample)</span><br><span class="line">        plot_categorical_analysis(data_sample)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;探索性数据分析完成，图表已保存到 &#x27;plots&#x27; 文件夹&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;探索性数据分析过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p>探索性数据分析阶段包括以下内容：</p><ol><li><p><strong>目标变量分析</strong>：</p><ul><li>卡路里消耗的分布情况</li><li>异常值检测</li></ul></li><li><p><strong>特征分析</strong>：</p><ul><li>各特征的分布情况</li><li>箱线图检查异常值</li></ul></li><li><p><strong>相关性分析</strong>：</p><ul><li>特征间的相关性热力图</li><li>各特征与卡路里消耗的相关性</li></ul></li><li><p><strong>特征与目标变量的关系</strong>：</p><ul><li>各特征与卡路里消耗的散点图</li><li>性别对卡路里消耗的影响</li><li>年龄与卡路里消耗的关系</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_basic_distributions</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制基本分布图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成基本分布图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 目标变量分布</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.histplot(data[<span class="string">&#x27;Calories&#x27;</span>], kde=<span class="literal">True</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;卡路里&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;频率&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/calories_distribution.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 特征分布图（在一个图中展示所有数值特征）</span></span><br><span class="line">        numerical_features = data.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">        numerical_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> numerical_features <span class="keyword">if</span> col != <span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        fig, axes = plt.subplots(nrows=(<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>), </span><br><span class="line">                                ncols=<span class="number">3</span>, figsize=(<span class="number">15</span>, <span class="number">3</span>*((<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>))))</span><br><span class="line">        axes = axes.flatten()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, feature <span class="keyword">in</span> <span class="built_in">enumerate</span>(numerical_features):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(axes):</span><br><span class="line">                sns.histplot(data[feature], kde=<span class="literal">True</span>, ax=axes[i])</span><br><span class="line">                axes[i].set_title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 分布&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐藏未使用的子图</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(axes)):</span><br><span class="line">            axes[j].set_visible(<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_distributions.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;基本分布图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成基本分布图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/calories_distribution.png" alt=""></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/feature_distributions.png" alt=""></p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_correlations</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制相关性分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成相关性分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 相关性热力图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">10</span>))</span><br><span class="line">        correlation_matrix = data.corr()</span><br><span class="line">        sns.heatmap(correlation_matrix, annot=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, fmt=<span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征相关性热力图&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/correlation_heatmap.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征与目标变量的相关性条形图</span></span><br><span class="line">        correlations = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].drop(<span class="string">&#x27;Calories&#x27;</span>).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">        sns.barplot(x=correlations.values, y=correlations.index)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征与卡路里消耗的相关性&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;相关系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_target_correlation.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;相关性分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成相关性分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528105807741.png" alt="image-20250528105807741"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528110104710.png" alt="image-20250528110104710"></p><p>发现新特征没啥用，后续训练模型的时候也就没使用这些新的特征。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_feature_relationships</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制特征关系图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成特征关系图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 只为相关性最高的前5个特征生成散点图</span></span><br><span class="line">        correlation_with_target = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].<span class="built_in">abs</span>().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        top_features = correlation_with_target.index[<span class="number">1</span>:<span class="number">6</span>]  <span class="comment"># 排除Calories自身</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> tqdm(top_features, desc=<span class="string">&quot;生成特征散点图&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">                sns.scatterplot(x=feature, y=<span class="string">&#x27;Calories&#x27;</span>, data=data, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">                plt.title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 与卡路里消耗的关系&#x27;</span>)</span><br><span class="line">                plt.savefig(<span class="string">f&#x27;plots/<span class="subst">&#123;feature&#125;</span>_vs_calories.png&#x27;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  生成 <span class="subst">&#123;feature&#125;</span> 散点图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 继续处理下一个特征</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成一个包含所有重要特征的配对图</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在生成特征配对图（这可能需要一些时间）...&quot;</span>)</span><br><span class="line">            sns.pairplot(data[<span class="built_in">list</span>(top_features) + [<span class="string">&#x27;Calories&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>]], </span><br><span class="line">                        hue=<span class="string">&#x27;Sex&#x27;</span>, </span><br><span class="line">                        diag_kind=<span class="string">&#x27;kde&#x27;</span>,</span><br><span class="line">                        plot_kws=&#123;<span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">                        height=<span class="number">2.5</span>)</span><br><span class="line">            plt.savefig(<span class="string">&#x27;plots/features_pairplot.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  生成特征配对图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;特征关系图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成特征关系图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528110659212.png" alt="image-20250528110659212"></p><p>它直观验证了 <strong>“时长是卡路里消耗的核心驱动”</strong>，同时暴露了 <strong>“性别影响弱”</strong> 和 <strong>“异常点风险”</strong>。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528110952874.png" alt="image-20250528110952874"></p><p><strong>心率是卡路里消耗的核心驱动</strong></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111148683.png" alt="image-20250528111148683"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111234824.png" alt="image-20250528111234824"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111310170.png" alt="image-20250528111310170"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111347335.png" alt="image-20250528111347335"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">plot_categorical_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制分类特征分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成分类特征分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Sex&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同性别的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/sex_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建年龄分组</span></span><br><span class="line">        data_copy = data.copy()</span><br><span class="line">        data_copy[<span class="string">&#x27;Age_Group&#x27;</span>] = pd.cut(data_copy[<span class="string">&#x27;Age&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">100</span>], labels=[<span class="string">&#x27;&lt;30&#x27;</span>, <span class="string">&#x27;30-45&#x27;</span>, <span class="string">&#x27;45-60&#x27;</span>, <span class="string">&#x27;&gt;60&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 年龄组与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Age_Group&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data_copy, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同年龄组的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/age_group_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;分类特征分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成分类特征分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111535038.png" alt="image-20250528111535038"></p><p><strong>性别单独对卡路里消耗的区分度极弱</strong></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528111609986.png" alt="image-20250528111613739"></p><p><strong>年龄对卡路里消耗的影响随性别变化，且高龄组存在特殊高消耗模式</strong></p><h2 id="四、建模和模型评价">四、建模和模型评价</h2><h3 id="4-1-建模策略">4.1 建模策略</h3><p>我们选择了以下四种回归算法进行建模：</p><ol><li><p><strong>决策树回归</strong>：</p><ul><li>优点：易于理解和解释，可捕捉非线性关系</li><li>缺点：可能过拟合，预测精度有限</li></ul></li><li><p><strong>随机森林回归</strong>：</p><ul><li>优点：集成多个决策树，降低方差，提高稳定性</li><li>缺点：计算开销大，模型解释性较差</li></ul></li><li><p><strong>XGBoost回归</strong>：</p><ul><li>优点：梯度提升框架，处理复杂非线性关系效果好</li><li>缺点：调参复杂，计算资源需求高</li></ul></li><li><p><strong>线性回归</strong>：</p><ul><li>优点：简单易懂，计算效率高</li><li>缺点：无法捕捉复杂的非线性关系</li></ul></li></ol><h3 id="4-2-模型训练与评估">4.2 模型训练与评估</h3><p>对于每个模型，我们采用以下步骤：</p><ol><li>将数据分割为训练集（80%）和验证集（20%）</li><li>使用训练集训练模型</li><li>在验证集上评估模型性能</li><li>比较不同模型的性能指标</li></ol><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/%E5%AF%BC%E5%87%BA%E5%9B%BE%E7%89%87.png" alt="导出图片"></p><p>评估指标包括：</p><ul><li><strong>均方误差（MSE）</strong></li><li><strong>均方根误差（RMSE）</strong></li><li><strong>平均绝对误差（MAE）</strong></li><li><strong>决定系数（R²）</strong></li></ul><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515154202938.png" alt="image-20250515154202938"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515154219339.png" alt="image-20250515154219339"></p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">卡路里消耗预测 - 数据分析课程设计</span></span><br><span class="line"><span class="string">本代码用于预测锻炼期间燃烧了多少卡路里</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler, OneHotEncoder</span><br><span class="line"><span class="keyword">from</span> sklearn.compose <span class="keyword">import</span> ColumnTransformer</span><br><span class="line"><span class="keyword">from</span> sklearn.pipeline <span class="keyword">import</span> Pipeline</span><br><span class="line"><span class="keyword">from</span> sklearn.impute <span class="keyword">import</span> SimpleImputer</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">from</span> xgboost <span class="keyword">import</span> XGBRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time  <span class="comment"># 导入时间模块</span></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm  <span class="comment"># 导入tqdm用于进度显示</span></span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子，确保结果可重现</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">use_sampling=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;开始卡路里消耗预测数据分析...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1. 数据获取</span></span><br><span class="line">    train_data, test_data = load_data()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 数据预处理</span></span><br><span class="line">    train_data = preprocess_data(train_data)</span><br><span class="line">    test_data = preprocess_data(test_data, is_train=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 特征工程（新增步骤）</span></span><br><span class="line">    train_data = feature_engineering(train_data)</span><br><span class="line">    test_data = feature_engineering(test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3.1 绘制工程特征与目标变量的关系（仅使用训练集）</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;正在可视化工程特征与目标变量的关系...&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">        os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 获取工程特征列表</span></span><br><span class="line">    engineered_features = [<span class="string">&#x27;BMI&#x27;</span>, <span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>, <span class="string">&#x27;Exercise_Intensity&#x27;</span>, </span><br><span class="line">                          <span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>, <span class="string">&#x27;Weight_Height_Ratio&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算工程特征与目标变量的相关性</span></span><br><span class="line">    feature_correlations = train_data[engineered_features + [<span class="string">&#x27;Calories&#x27;</span>]].corr()[<span class="string">&#x27;Calories&#x27;</span>].drop(<span class="string">&#x27;Calories&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 绘制相关性条形图</span></span><br><span class="line">    plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">    sns.barplot(x=feature_correlations.values, y=feature_correlations.index)</span><br><span class="line">    plt.title(<span class="string">&#x27;工程特征与卡路里消耗的相关性&#x27;</span>)</span><br><span class="line">    plt.xlabel(<span class="string">&#x27;相关系数&#x27;</span>)</span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    plt.savefig(<span class="string">&#x27;plots/engineered_features_correlation.png&#x27;</span>)</span><br><span class="line">    plt.close()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 探索性数据分析</span></span><br><span class="line">    exploratory_data_analysis(train_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 特征与目标变量分离</span></span><br><span class="line">    X_train, y_train = train_data.drop(<span class="string">&#x27;Calories&#x27;</span>, axis=<span class="number">1</span>), train_data[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6. 建模和模型评价</span></span><br><span class="line">    sample_limit = <span class="number">100000</span> <span class="keyword">if</span> use_sampling <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 如果使用采样，设置为10万条记录</span></span><br><span class="line">    best_model, best_score = model_training_and_evaluation(X_train, y_train, sample_limit)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 7. 使用最佳模型进行预测并生成提交文件</span></span><br><span class="line">    generate_submission(best_model, test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;卡路里消耗预测数据分析完成！&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载训练集和测试集数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练数据, 测试数据)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在加载数据...&quot;</span>)</span><br><span class="line">        train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">        test_data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练集大小：<span class="subst">&#123;train_data.shape&#125;</span>, 测试集大小：<span class="subst">&#123;test_data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_data</span>(<span class="params">data, is_train=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对数据进行预处理</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要处理的数据</span></span><br><span class="line"><span class="string">        is_train (bool): 是否为训练数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 预处理后的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行数据预处理...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本，避免修改原始数据</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据基本信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据基本信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据统计摘要</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据统计摘要:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.describe())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查缺失值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n检查缺失值:&quot;</span>)</span><br><span class="line">        missing_values = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="built_in">print</span>(missing_values[missing_values &gt; <span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理缺失值（如果有）</span></span><br><span class="line">        <span class="keyword">if</span> df.isnull().<span class="built_in">sum</span>().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 对数值型特征使用均值填充，分类特征使用众数填充</span></span><br><span class="line">            num_features = df.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">            cat_features = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> num_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> cat_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mode()[<span class="number">0</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别编码：将性别特征转换为数值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df[<span class="string">&#x27;Sex&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除ID列，因为它不是预测的特征</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df = df.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示处理后的数据信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预处理后的数据信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据预处理过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 探索性数据分析</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploratory_data_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    进行探索性数据分析</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要分析的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行探索性数据分析...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># 对于大数据集，可以使用采样减少计算量（可选）</span></span><br><span class="line">        sample_size = <span class="built_in">min</span>(<span class="number">10000</span>, <span class="built_in">len</span>(data))</span><br><span class="line">        data_sample = data.sample(n=sample_size, random_state=<span class="number">42</span>) <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> data</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用<span class="subst">&#123;<span class="string">&#x27;采样数据&#x27;</span> <span class="keyword">if</span> <span class="built_in">len</span>(data) &gt; <span class="number">10000</span> <span class="keyword">else</span> <span class="string">&#x27;完整数据&#x27;</span>&#125;</span>进行可视化分析，样本大小: <span class="subst">&#123;<span class="built_in">len</span>(data_sample)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分阶段执行可视化</span></span><br><span class="line">        plot_basic_distributions(data_sample)</span><br><span class="line">        plot_correlations(data_sample)</span><br><span class="line">        plot_feature_relationships(data_sample)</span><br><span class="line">        plot_categorical_analysis(data_sample)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;探索性数据分析完成，图表已保存到 &#x27;plots&#x27; 文件夹&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;探索性数据分析过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_basic_distributions</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制基本分布图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成基本分布图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 目标变量分布</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.histplot(data[<span class="string">&#x27;Calories&#x27;</span>], kde=<span class="literal">True</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;卡路里&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;频率&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/calories_distribution.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 特征分布图（在一个图中展示所有数值特征）</span></span><br><span class="line">        numerical_features = data.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">        numerical_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> numerical_features <span class="keyword">if</span> col != <span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        fig, axes = plt.subplots(nrows=(<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>), </span><br><span class="line">                                ncols=<span class="number">3</span>, figsize=(<span class="number">15</span>, <span class="number">3</span>*((<span class="built_in">len</span>(numerical_features)//<span class="number">3</span>) + (<span class="number">1</span> <span class="keyword">if</span> <span class="built_in">len</span>(numerical_features)%<span class="number">3</span> &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span>))))</span><br><span class="line">        axes = axes.flatten()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> i, feature <span class="keyword">in</span> <span class="built_in">enumerate</span>(numerical_features):</span><br><span class="line">            <span class="keyword">if</span> i &lt; <span class="built_in">len</span>(axes):</span><br><span class="line">                sns.histplot(data[feature], kde=<span class="literal">True</span>, ax=axes[i])</span><br><span class="line">                axes[i].set_title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 分布&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 隐藏未使用的子图</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(i+<span class="number">1</span>, <span class="built_in">len</span>(axes)):</span><br><span class="line">            axes[j].set_visible(<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_distributions.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;基本分布图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成基本分布图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_correlations</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制相关性分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成相关性分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 相关性热力图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">10</span>))</span><br><span class="line">        correlation_matrix = data.corr()</span><br><span class="line">        sns.heatmap(correlation_matrix, annot=<span class="literal">True</span>, cmap=<span class="string">&#x27;coolwarm&#x27;</span>, fmt=<span class="string">&#x27;.2f&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征相关性热力图&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/correlation_heatmap.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征与目标变量的相关性条形图</span></span><br><span class="line">        correlations = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].drop(<span class="string">&#x27;Calories&#x27;</span>).sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">8</span>))</span><br><span class="line">        sns.barplot(x=correlations.values, y=correlations.index)</span><br><span class="line">        plt.title(<span class="string">&#x27;特征与卡路里消耗的相关性&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;相关系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/feature_target_correlation.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;相关性分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成相关性分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_feature_relationships</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制特征关系图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成特征关系图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 只为相关性最高的前5个特征生成散点图</span></span><br><span class="line">        correlation_with_target = data.corr()[<span class="string">&#x27;Calories&#x27;</span>].<span class="built_in">abs</span>().sort_values(ascending=<span class="literal">False</span>)</span><br><span class="line">        top_features = correlation_with_target.index[<span class="number">1</span>:<span class="number">6</span>]  <span class="comment"># 排除Calories自身</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> tqdm(top_features, desc=<span class="string">&quot;生成特征散点图&quot;</span>):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">                sns.scatterplot(x=feature, y=<span class="string">&#x27;Calories&#x27;</span>, data=data, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">                plt.title(<span class="string">f&#x27;<span class="subst">&#123;feature&#125;</span> 与卡路里消耗的关系&#x27;</span>)</span><br><span class="line">                plt.savefig(<span class="string">f&#x27;plots/<span class="subst">&#123;feature&#125;</span>_vs_calories.png&#x27;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;  生成 <span class="subst">&#123;feature&#125;</span> 散点图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">                plt.close()</span><br><span class="line">                <span class="keyword">continue</span>  <span class="comment"># 继续处理下一个特征</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 生成一个包含所有重要特征的配对图</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;正在生成特征配对图（这可能需要一些时间）...&quot;</span>)</span><br><span class="line">            sns.pairplot(data[<span class="built_in">list</span>(top_features) + [<span class="string">&#x27;Calories&#x27;</span>, <span class="string">&#x27;Sex&#x27;</span>]], </span><br><span class="line">                        hue=<span class="string">&#x27;Sex&#x27;</span>, </span><br><span class="line">                        diag_kind=<span class="string">&#x27;kde&#x27;</span>,</span><br><span class="line">                        plot_kws=&#123;<span class="string">&#x27;alpha&#x27;</span>: <span class="number">0.6</span>&#125;,</span><br><span class="line">                        height=<span class="number">2.5</span>)</span><br><span class="line">            plt.savefig(<span class="string">&#x27;plots/features_pairplot.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  生成特征配对图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;特征关系图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成特征关系图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">plot_categorical_analysis</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    绘制分类特征分析图</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成分类特征分析图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Sex&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同性别的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/sex_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建年龄分组</span></span><br><span class="line">        data_copy = data.copy()</span><br><span class="line">        data_copy[<span class="string">&#x27;Age_Group&#x27;</span>] = pd.cut(data_copy[<span class="string">&#x27;Age&#x27;</span>], bins=[<span class="number">0</span>, <span class="number">30</span>, <span class="number">45</span>, <span class="number">60</span>, <span class="number">100</span>], labels=[<span class="string">&#x27;&lt;30&#x27;</span>, <span class="string">&#x27;30-45&#x27;</span>, <span class="string">&#x27;45-60&#x27;</span>, <span class="string">&#x27;&gt;60&#x27;</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 年龄组与卡路里消耗关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.boxplot(x=<span class="string">&#x27;Age_Group&#x27;</span>, y=<span class="string">&#x27;Calories&#x27;</span>, data=data_copy, hue=<span class="string">&#x27;Sex&#x27;</span>)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同年龄组的卡路里消耗分布&#x27;</span>)</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/age_group_vs_calories.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;分类特征分析图生成完成&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成分类特征分析图时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        plt.close(<span class="string">&#x27;all&#x27;</span>)  <span class="comment"># 确保关闭所有图形，防止内存泄漏</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型训练和评估</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">model_training_and_evaluation</span>(<span class="params">X, y, sample_limit=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    训练多个模型并评估性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (DataFrame): 特征数据，包括原始特征和通过特征工程创建的新特征</span></span><br><span class="line"><span class="string">        y (Series): 目标变量（卡路里消耗量）</span></span><br><span class="line"><span class="string">        sample_limit (int, optional): 可选的数据采样限制，如果指定，将随机采样数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳得分)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行模型训练和评估...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 可选的数据采样</span></span><br><span class="line">        <span class="keyword">if</span> sample_limit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(X) &gt; sample_limit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;数据集较大，进行随机采样（<span class="subst">&#123;sample_limit&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(X)&#125;</span>条记录）...&quot;</span>)</span><br><span class="line">            sample_idx = np.random.choice(<span class="built_in">len</span>(X), sample_limit, replace=<span class="literal">False</span>)</span><br><span class="line">            X = X.iloc[sample_idx].copy()</span><br><span class="line">            y = y.iloc[sample_idx].copy()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;采样后数据形状: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;使用完整数据集: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割数据为训练集和验证集</span></span><br><span class="line">        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">        X_val_scaled = scaler.transform(X_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存特征名称，用于后续的特征重要性分析</span></span><br><span class="line">        feature_names = X.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义要训练的模型</span></span><br><span class="line">        models = &#123;</span><br><span class="line">            <span class="string">&quot;决策树回归&quot;</span>: DecisionTreeRegressor(random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&quot;随机森林回归&quot;</span>: RandomForestRegressor(</span><br><span class="line">                random_state=<span class="number">42</span>, </span><br><span class="line">                n_estimators=<span class="number">50</span>,     <span class="comment"># 减少树的数量（从100减少到50）</span></span><br><span class="line">                max_depth=<span class="number">20</span>,        <span class="comment"># 限制树的最大深度</span></span><br><span class="line">                min_samples_split=<span class="number">10</span>,<span class="comment"># 增加分裂所需的最小样本数</span></span><br><span class="line">                n_jobs=-<span class="number">1</span>,           <span class="comment"># 使用所有可用的CPU核心</span></span><br><span class="line">                verbose=<span class="number">1</span>            <span class="comment"># 显示训练进度</span></span><br><span class="line">            ),</span><br><span class="line">            <span class="string">&quot;XGBoost回归&quot;</span>: XGBRegressor(random_state=<span class="number">42</span>),</span><br><span class="line">            <span class="string">&quot;线性回归&quot;</span>: LinearRegression()</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 用于存储各模型评估结果</span></span><br><span class="line">        results = &#123;&#125;</span><br><span class="line">        best_model = <span class="literal">None</span></span><br><span class="line">        best_score = <span class="built_in">float</span>(<span class="string">&#x27;inf&#x27;</span>)  <span class="comment"># 使用RMSE作为评估指标，值越小越好</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练和评估每个模型</span></span><br><span class="line">        <span class="keyword">for</span> name, model <span class="keyword">in</span> models.items():</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n正在训练 <span class="subst">&#123;name&#125;</span> 模型...&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 训练模型</span></span><br><span class="line">            start_time = time.time()</span><br><span class="line">            model.fit(X_train_scaled, y_train)</span><br><span class="line">            end_time = time.time()</span><br><span class="line">            training_time = end_time - start_time</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 在验证集上进行预测</span></span><br><span class="line">            y_pred = model.predict(X_val_scaled)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 计算评估指标</span></span><br><span class="line">            mse = mean_squared_error(y_val, y_pred)</span><br><span class="line">            rmse = np.sqrt(mse)</span><br><span class="line">            mae = mean_absolute_error(y_val, y_pred)</span><br><span class="line">            r2 = r2_score(y_val, y_pred)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 存储结果</span></span><br><span class="line">            results[name] = &#123;</span><br><span class="line">                <span class="string">&#x27;MSE&#x27;</span>: mse,</span><br><span class="line">                <span class="string">&#x27;RMSE&#x27;</span>: rmse,</span><br><span class="line">                <span class="string">&#x27;MAE&#x27;</span>: mae,</span><br><span class="line">                <span class="string">&#x27;R²&#x27;</span>: r2,</span><br><span class="line">                <span class="string">&#x27;model&#x27;</span>: model,</span><br><span class="line">                <span class="string">&#x27;training_time&#x27;</span>: training_time</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 输出评估结果</span></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span> 评估结果:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  均方误差 (MSE): <span class="subst">&#123;mse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  平均绝对误差 (MAE): <span class="subst">&#123;mae:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  训练时间: <span class="subst">&#123;training_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 更新最佳模型</span></span><br><span class="line">            <span class="keyword">if</span> rmse &lt; best_score:</span><br><span class="line">                best_score = rmse</span><br><span class="line">                best_model = model</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比较模型性能并可视化</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较:&quot;</span>)</span><br><span class="line">        metrics = [<span class="string">&#x27;MSE&#x27;</span>, <span class="string">&#x27;RMSE&#x27;</span>, <span class="string">&#x27;MAE&#x27;</span>, <span class="string">&#x27;R²&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> metric <span class="keyword">in</span> metrics:</span><br><span class="line">            plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">            model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">            <span class="keyword">if</span> metric == <span class="string">&#x27;R²&#x27;</span>:</span><br><span class="line">                <span class="comment"># R²越高越好</span></span><br><span class="line">                metric_values = [results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">                colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> val == <span class="built_in">max</span>([results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> metric_values]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="comment"># 其他指标越低越好</span></span><br><span class="line">                metric_values = [results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">                colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> val == <span class="built_in">min</span>([results[name][metric] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> val <span class="keyword">in</span> metric_values]</span><br><span class="line">            </span><br><span class="line">            plt.bar(model_names, metric_values, color=colors)</span><br><span class="line">            plt.title(<span class="string">f&#x27;不同模型的<span class="subst">&#123;metric&#125;</span>比较&#x27;</span>)</span><br><span class="line">            plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">            plt.ylabel(metric)</span><br><span class="line">            plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">            plt.tight_layout()</span><br><span class="line">            plt.savefig(<span class="string">f&#x27;plots/model_comparison_<span class="subst">&#123;metric&#125;</span>.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 可视化模型训练时间</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        training_times = [results[name][<span class="string">&#x27;training_time&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> t == <span class="built_in">min</span>(training_times) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> t <span class="keyword">in</span> training_times]</span><br><span class="line">        </span><br><span class="line">        plt.bar(model_names, training_times, color=colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;不同模型的训练时间比较&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;训练时间 (秒)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/model_comparison_training_time.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 时间-性能权衡分析（RMSE/时间）</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        rmse_values = [results[name][<span class="string">&#x27;RMSE&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        efficiency = [rmse / time <span class="keyword">for</span> rmse, time <span class="keyword">in</span> <span class="built_in">zip</span>(rmse_values, training_times)]</span><br><span class="line">        colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> e == <span class="built_in">min</span>(efficiency) <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> e <span class="keyword">in</span> efficiency]</span><br><span class="line">        </span><br><span class="line">        plt.bar(model_names, efficiency, color=colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;模型效率分析 (RMSE/训练时间)&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;效率指标 (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/model_comparison_efficiency.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析特征重要性（仅对支持特征重要性的模型）</span></span><br><span class="line">        best_model_name = [name <span class="keyword">for</span> name, res <span class="keyword">in</span> results.items() <span class="keyword">if</span> res[<span class="string">&#x27;model&#x27;</span>] == best_model][<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\n最佳模型是: <span class="subst">&#123;best_model_name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最佳RMSE: <span class="subst">&#123;best_score:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分析最佳模型的特征重要性</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(best_model, <span class="string">&#x27;feature_importances_&#x27;</span>):</span><br><span class="line">            plt.figure(figsize=(<span class="number">12</span>, <span class="number">8</span>))</span><br><span class="line">            importances = best_model.feature_importances_</span><br><span class="line">            indices = np.argsort(importances)[::-<span class="number">1</span>]</span><br><span class="line">            </span><br><span class="line">            plt.title(<span class="string">f&#x27;<span class="subst">&#123;best_model_name&#125;</span>模型的特征重要性&#x27;</span>)</span><br><span class="line">            plt.bar(<span class="built_in">range</span>(X.shape[<span class="number">1</span>]), importances[indices], align=<span class="string">&#x27;center&#x27;</span>)</span><br><span class="line">            plt.xticks(<span class="built_in">range</span>(X.shape[<span class="number">1</span>]), [feature_names[i] <span class="keyword">for</span> i <span class="keyword">in</span> indices], rotation=<span class="number">90</span>)</span><br><span class="line">            plt.tight_layout()</span><br><span class="line">            plt.savefig(<span class="string">&#x27;plots/best_model_feature_importance.png&#x27;</span>)</span><br><span class="line">            plt.close()</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n特征重要性排序:&quot;</span>)</span><br><span class="line">            <span class="keyword">for</span> i, idx <span class="keyword">in</span> <span class="built_in">enumerate</span>(indices):</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;i+<span class="number">1</span>&#125;</span>. <span class="subst">&#123;feature_names[idx]&#125;</span>: <span class="subst">&#123;importances[idx]:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存最佳模型</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;models&#x27;</span>):</span><br><span class="line">                os.makedirs(<span class="string">&#x27;models&#x27;</span>)</span><br><span class="line">            joblib.dump(best_model, <span class="string">&#x27;models/best_model.pkl&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\n最佳模型已保存到: models/best_model.pkl&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;保存模型时出错: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_model, best_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;模型训练和评估过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成提交文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_submission</span>(<span class="params">model, test_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用训练好的模型生成提交文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model: 训练好的模型</span></span><br><span class="line"><span class="string">        test_data (DataFrame): 测试数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成提交文件...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存测试集的ID</span></span><br><span class="line">        test_ids = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_test_scaled = scaler.fit_transform(test_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        predictions = model.predict(X_test_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保预测值为非负数（卡路里不可能为负）</span></span><br><span class="line">        predictions = np.maximum(predictions, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建提交文件</span></span><br><span class="line">        submission = pd.DataFrame(&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: test_ids,</span><br><span class="line">            <span class="string">&#x27;Calories&#x27;</span>: predictions</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        submission.to_csv(<span class="string">&#x27;submission.csv&#x27;</span>, index=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提交文件已生成: submission.csv，包含 <span class="subst">&#123;<span class="built_in">len</span>(submission)&#125;</span> 个预测结果&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示预测值的基本统计信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预测结果统计信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最小值: <span class="subst">&#123;predictions.<span class="built_in">min</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最大值: <span class="subst">&#123;predictions.<span class="built_in">max</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;平均值: <span class="subst">&#123;predictions.mean():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;中位数: <span class="subst">&#123;np.median(predictions):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;标准差: <span class="subst">&#123;predictions.std():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成提交文件过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征工程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建新特征以提高模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 预处理后的数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 包含新特征的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行特征工程...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程前数据形状: <span class="subst">&#123;data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录原始特征列表</span></span><br><span class="line">        original_features = df.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 创建BMI特征（体重指数）</span></span><br><span class="line">        df[<span class="string">&#x27;BMI&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / ((df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 创建心率与年龄的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] / df[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 创建锻炼强度指标</span></span><br><span class="line">        df[<span class="string">&#x27;Exercise_Intensity&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] * df[<span class="string">&#x27;Duration&#x27;</span>] / <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 创建体温与心率的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>] = df[<span class="string">&#x27;Body_Temp&#x27;</span>] / df[<span class="string">&#x27;Heart_Rate&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 体重与身高的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Weight_Height_Ratio&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / (df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取新创建的特征列表</span></span><br><span class="line">        new_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> df.columns <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> original_features]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程完成，创建了 <span class="subst">&#123;<span class="built_in">len</span>(new_features)&#125;</span> 个新特征:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> new_features:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - <span class="subst">&#123;feature&#125;</span>: 均值=<span class="subst">&#123;df[feature].mean():<span class="number">.4</span>f&#125;</span>, 标准差=<span class="subst">&#123;df[feature].std():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程后数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># 是否使用数据采样来加速训练（开发阶段设为True，最终模型训练设为False）</span></span><br><span class="line">    USE_SAMPLING = <span class="literal">False</span></span><br><span class="line">    main(use_sampling=USE_SAMPLING) </span><br></pre></td></tr></table></figure><h2 id="五、模型优化">五、模型优化</h2><h3 id="5-1-超参数调优">5.1 超参数调优</h3><p>针对不同算法，我们使用网格搜索或随机搜索进行超参数调优：</p><ol><li><p><strong>决策树优化</strong>：</p><ul><li>参数：max_depth, min_samples_split, min_samples_leaf, max_features</li><li>使用GridSearchCV进行网格搜索</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_decision_tree</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化决策树回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化决策树回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格 - 适度减少参数空间但保留关键选项</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>],  <span class="comment"># 恢复None选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>]  <span class="comment"># 保留所有特征选择方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型</span></span><br><span class="line">        dt = DecisionTreeRegressor(random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对于决策树，恢复使用GridSearchCV以确保找到最优参数</span></span><br><span class="line">        <span class="comment"># 决策树训练速度相对较快，即使数据量大也可接受网格搜索</span></span><br><span class="line">        grid_search = GridSearchCV(</span><br><span class="line">            estimator=dt,</span><br><span class="line">            param_grid=param_grid,</span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        grid_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树网格搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = grid_search.best_params_</span><br><span class="line">        best_dt = grid_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_dt.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_dt.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;决策树 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/dt_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_dt, <span class="string">&#x27;models/decision_tree_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_dt, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化决策树模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>随机森林优化</strong>：</p><ul><li>参数：n_estimators, max_depth, min_samples_split, min_samples_leaf, max_features</li><li>使用RandomizedSearchCV进行随机搜索</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_random_forest</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化随机森林回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化随机森林回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于随机森林计算开销大，即使数据量大也使用随机搜索而非网格搜索</span></span><br><span class="line">        param_distributions = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>],  <span class="comment"># 恢复200作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],  <span class="comment"># 恢复None和30选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],  <span class="comment"># 恢复10作为选项</span></span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],  <span class="comment"># 恢复4作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>],  <span class="comment"># 恢复log2作为选项</span></span><br><span class="line">            <span class="string">&#x27;bootstrap&#x27;</span>: [<span class="literal">True</span>],  <span class="comment"># 使用bootstrap抽样</span></span><br><span class="line">            <span class="string">&#x27;max_samples&#x27;</span>: [<span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>]  <span class="comment"># 控制每棵树使用的样本比例</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU</span></span><br><span class="line">        rf = RandomForestRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索 - 增加n_iter以提高搜索质量</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=rf,</span><br><span class="line">            param_distributions=param_distributions,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 恢复原始的20次尝试以提高搜索质量</span></span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_rf = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_rf.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_rf.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;随机森林 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/rf_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_rf, <span class="string">&#x27;models/random_forest_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_rf, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化随机森林模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></li><li><p><strong>XGBoost优化</strong>：</p><ul><li>参数：n_estimators, max_depth, learning_rate, subsample, colsample_bytree, gamma</li><li>使用RandomizedSearchCV进行随机搜索</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_xgboost</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化XGBoost回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化XGBoost回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">            <span class="string">&#x27;learning_rate&#x27;</span>: [<span class="number">0.01</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.2</span>],</span><br><span class="line">            <span class="string">&#x27;subsample&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;colsample_bytree&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;gamma&#x27;</span>: [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU和更快的tree_method</span></span><br><span class="line">        xgb_model = xgb.XGBRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>, tree_method=<span class="string">&#x27;hist&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=xgb_model,</span><br><span class="line">            param_distributions=param_grid,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 尝试20种组合</span></span><br><span class="line">            cv=<span class="number">5</span>,</span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_xgb = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_xgb.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_xgb.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;XGBoost - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/xgb_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_xgb, <span class="string">&#x27;models/xgboost_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_xgb, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化XGBoost模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>线性回归</strong>：</p><ul><li>线性回归没有需要调优的超参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_linear_regression</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化线性回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练好的模型, None, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化线性回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 线性回归没有超参数需要调优，直接训练模型</span></span><br><span class="line">        lr = LinearRegression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        lr.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线性回归训练耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = lr.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制系数</span></span><br><span class="line">        coefficients = lr.coef_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=coefficients, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;线性回归 - 特征系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/lr_coefficients.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(lr, <span class="string">&#x27;models/linear_regression.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lr, <span class="literal">None</span>, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化线性回归模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-2-特征重要性分析">5.2 特征重要性分析</h3><p>通过分析各模型的特征重要性，我们发现：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515152921306.png" alt="image-20250515152921306"></p><h3 id="5-3-优化后的模型比较">5.3 优化后的模型比较</h3><p>我们对比了所有优化后的模型性能：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">compare_optimized_models</span>(<span class="params">results</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    比较优化后的模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        results (dict): 包含各模型结果的字典</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: 基于RMSLE的最佳模型名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;比较优化后的模型性能...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取模型名称和评估指标</span></span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        rmse_values = [results[name][<span class="string">&#x27;rmse&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        rmsle_values = [results[name][<span class="string">&#x27;rmsle&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSE的最佳模型</span></span><br><span class="line">        best_rmse_idx = np.argmin(rmse_values)</span><br><span class="line">        rmse_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSLE的最佳模型（竞赛评估指标）</span></span><br><span class="line">        best_rmsle_idx = np.argmin(rmsle_values)</span><br><span class="line">        rmsle_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmse_values, color=rmse_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSE)&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmse.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSLE比较图（竞赛评估指标）</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmsle_values, color=rmsle_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSLE) - 竞赛评估指标&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSLE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmsle.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出比较结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSE):&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmse_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSLE) - 竞赛评估指标:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmsle_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果RMSE和RMSLE选出的最佳模型不同，输出说明</span></span><br><span class="line">        <span class="keyword">if</span> best_rmse_idx != best_rmsle_idx:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n注意: 基于RMSE的最佳模型是 <span class="subst">&#123;model_names[best_rmse_idx]&#125;</span>，而基于RMSLE的最佳模型是 <span class="subst">&#123;model_names[best_rmsle_idx]&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;由于竞赛使用RMSLE作为评估指标，我们将选择基于RMSLE的最佳模型。&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回基于RMSLE的最佳模型名称</span></span><br><span class="line">        <span class="keyword">return</span> model_names[best_rmsle_idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;比较优化后的模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153858400.png" alt="image-20250515153858400"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153916182.png" alt="image-20250515153916182"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153934775.png" alt="image-20250515153934775"></p><p>优化的完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">卡路里消耗预测 - 模型优化</span></span><br><span class="line"><span class="string">本代码用于优化预测模型的超参数</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV, RandomizedSearchCV, cross_val_score</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.tree <span class="keyword">import</span> DecisionTreeRegressor</span><br><span class="line"><span class="keyword">from</span> sklearn.ensemble <span class="keyword">import</span> RandomForestRegressor</span><br><span class="line"><span class="keyword">import</span> xgboost <span class="keyword">as</span> xgb</span><br><span class="line"><span class="keyword">from</span> sklearn.linear_model <span class="keyword">import</span> LinearRegression</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  <span class="comment"># 设置中文字体</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>    <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子，确保结果可重现</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rmsle</span>(<span class="params">y_true, y_pred</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    计算Root Mean Squared Logarithmic Error (RMSLE)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        y_true: 真实值</span></span><br><span class="line"><span class="string">        y_pred: 预测值</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        float: RMSLE值</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 确保输入值为正数（避免对负数取对数）</span></span><br><span class="line">    y_true = np.maximum(y_true, <span class="number">0</span>)</span><br><span class="line">    y_pred = np.maximum(y_pred, <span class="number">0</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算RMSLE</span></span><br><span class="line">    <span class="keyword">return</span> np.sqrt(np.mean(np.power(np.log1p(y_pred) - np.log1p(y_true), <span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_preprocessed_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载预处理后的训练数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (X_train, X_val, y_train, y_val) - 训练特征、验证特征、训练目标、验证目标</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 加载训练数据</span></span><br><span class="line">        train_data = pd.read_csv(<span class="string">&#x27;train.csv&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 数据预处理</span></span><br><span class="line">        <span class="comment"># 删除id列</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> train_data.columns:</span><br><span class="line">            train_data.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别编码</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> train_data.columns:</span><br><span class="line">            train_data[<span class="string">&#x27;Sex&#x27;</span>] = train_data[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分离特征和目标变量</span></span><br><span class="line">        X = train_data.drop(<span class="string">&#x27;Calories&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">        y = train_data[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割数据为训练集和验证集</span></span><br><span class="line">        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">        X_val_scaled = scaler.transform(X_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存scaler，用于后续预测</span></span><br><span class="line">        joblib.dump(scaler, <span class="string">&#x27;scaler.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> X_train_scaled, X_val_scaled, y_train, y_val</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载和预处理数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_decision_tree</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化决策树回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化决策树回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格 - 适度减少参数空间但保留关键选项</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">20</span>, <span class="number">25</span>],  <span class="comment"># 恢复None选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],</span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],</span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>]  <span class="comment"># 保留所有特征选择方法</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型</span></span><br><span class="line">        dt = DecisionTreeRegressor(random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 对于决策树，恢复使用GridSearchCV以确保找到最优参数</span></span><br><span class="line">        <span class="comment"># 决策树训练速度相对较快，即使数据量大也可接受网格搜索</span></span><br><span class="line">        grid_search = GridSearchCV(</span><br><span class="line">            estimator=dt,</span><br><span class="line">            param_grid=param_grid,</span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        grid_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树网格搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = grid_search.best_params_</span><br><span class="line">        best_dt = grid_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_dt.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;决策树最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_dt.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;决策树 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/dt_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_dt, <span class="string">&#x27;models/decision_tree_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_dt, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化决策树模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_random_forest</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化随机森林回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化随机森林回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 由于随机森林计算开销大，即使数据量大也使用随机搜索而非网格搜索</span></span><br><span class="line">        param_distributions = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">150</span>, <span class="number">200</span>],  <span class="comment"># 恢复200作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="literal">None</span>, <span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>],  <span class="comment"># 恢复None和30选项，对大数据集可能有益</span></span><br><span class="line">            <span class="string">&#x27;min_samples_split&#x27;</span>: [<span class="number">2</span>, <span class="number">5</span>, <span class="number">10</span>],  <span class="comment"># 恢复10作为选项</span></span><br><span class="line">            <span class="string">&#x27;min_samples_leaf&#x27;</span>: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>],  <span class="comment"># 恢复4作为选项</span></span><br><span class="line">            <span class="string">&#x27;max_features&#x27;</span>: [<span class="string">&#x27;auto&#x27;</span>, <span class="string">&#x27;sqrt&#x27;</span>, <span class="string">&#x27;log2&#x27;</span>],  <span class="comment"># 恢复log2作为选项</span></span><br><span class="line">            <span class="string">&#x27;bootstrap&#x27;</span>: [<span class="literal">True</span>],  <span class="comment"># 使用bootstrap抽样</span></span><br><span class="line">            <span class="string">&#x27;max_samples&#x27;</span>: [<span class="number">0.7</span>, <span class="number">0.8</span>, <span class="number">0.9</span>]  <span class="comment"># 控制每棵树使用的样本比例</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU</span></span><br><span class="line">        rf = RandomForestRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索 - 增加n_iter以提高搜索质量</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=rf,</span><br><span class="line">            param_distributions=param_distributions,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 恢复原始的20次尝试以提高搜索质量</span></span><br><span class="line">            cv=<span class="number">3</span>,  <span class="comment"># 保持减少的交叉验证折数以节省时间</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_rf = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_rf.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;随机森林最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_rf.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;随机森林 - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/rf_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_rf, <span class="string">&#x27;models/random_forest_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_rf, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化随机森林模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_xgboost</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化XGBoost回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳参数, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化XGBoost回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 参数网格</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;n_estimators&#x27;</span>: [<span class="number">50</span>, <span class="number">100</span>, <span class="number">200</span>],</span><br><span class="line">            <span class="string">&#x27;max_depth&#x27;</span>: [<span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>],</span><br><span class="line">            <span class="string">&#x27;learning_rate&#x27;</span>: [<span class="number">0.01</span>, <span class="number">0.05</span>, <span class="number">0.1</span>, <span class="number">0.2</span>],</span><br><span class="line">            <span class="string">&#x27;subsample&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;colsample_bytree&#x27;</span>: [<span class="number">0.8</span>, <span class="number">0.9</span>, <span class="number">1.0</span>],</span><br><span class="line">            <span class="string">&#x27;gamma&#x27;</span>: [<span class="number">0</span>, <span class="number">0.1</span>, <span class="number">0.2</span>]</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 基础模型 - 添加n_jobs参数使用多核CPU和更快的tree_method</span></span><br><span class="line">        xgb_model = xgb.XGBRegressor(random_state=<span class="number">42</span>, n_jobs=-<span class="number">1</span>, tree_method=<span class="string">&#x27;hist&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机搜索</span></span><br><span class="line">        random_search = RandomizedSearchCV(</span><br><span class="line">            estimator=xgb_model,</span><br><span class="line">            param_distributions=param_grid,</span><br><span class="line">            n_iter=<span class="number">20</span>,  <span class="comment"># 尝试20种组合</span></span><br><span class="line">            cv=<span class="number">5</span>,</span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,</span><br><span class="line">            n_jobs=-<span class="number">1</span>,</span><br><span class="line">            verbose=<span class="number">1</span>,</span><br><span class="line">            random_state=<span class="number">42</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        random_search.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost随机搜索耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = random_search.best_params_</span><br><span class="line">        best_xgb = random_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = best_xgb.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;XGBoost最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制特征重要性</span></span><br><span class="line">        feature_importances = best_xgb.feature_importances_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=feature_importances, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;XGBoost - 特征重要性&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/xgb_feature_importance.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(best_xgb, <span class="string">&#x27;models/xgboost_best.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_xgb, best_params, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化XGBoost模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">optimize_linear_regression</span>(<span class="params">X_train, X_val, y_train, y_val</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    优化线性回归模型</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X_train, X_val, y_train, y_val: 训练和验证数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练好的模型, None, 验证集RMSE, 验证集RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始优化线性回归模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 线性回归没有超参数需要调优，直接训练模型</span></span><br><span class="line">        lr = LinearRegression()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 开始计时</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练</span></span><br><span class="line">        lr.fit(X_train, y_train)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 结束计时</span></span><br><span class="line">        end_time = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;线性回归训练耗时: <span class="subst">&#123;end_time - start_time:<span class="number">.2</span>f&#125;</span> 秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上评估</span></span><br><span class="line">        y_pred = lr.predict(X_val)</span><br><span class="line">        rmse = np.sqrt(mean_squared_error(y_val, y_pred))</span><br><span class="line">        r2 = r2_score(y_val, y_pred)</span><br><span class="line">        rmsle_score = rmsle(y_val, y_pred)  <span class="comment"># 计算RMSLE</span></span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSE: <span class="subst">&#123;rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集R²: <span class="subst">&#123;r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;验证集RMSLE: <span class="subst">&#123;rmsle_score:<span class="number">.4</span>f&#125;</span> (竞赛评估指标)&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制系数</span></span><br><span class="line">        coefficients = lr.coef_</span><br><span class="line">        features = [<span class="string">&#x27;Sex&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>, <span class="string">&#x27;Height&#x27;</span>, <span class="string">&#x27;Weight&#x27;</span>, <span class="string">&#x27;Duration&#x27;</span>, <span class="string">&#x27;Heart_Rate&#x27;</span>, <span class="string">&#x27;Body_Temp&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.barplot(x=coefficients, y=features)</span><br><span class="line">        plt.title(<span class="string">&#x27;线性回归 - 特征系数&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/lr_coefficients.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存模型</span></span><br><span class="line">        joblib.dump(lr, <span class="string">&#x27;models/linear_regression.joblib&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> lr, <span class="literal">None</span>, rmse, rmsle_score</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;优化线性回归模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compare_optimized_models</span>(<span class="params">results</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    比较优化后的模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        results (dict): 包含各模型结果的字典</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        str: 基于RMSLE的最佳模型名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;比较优化后的模型性能...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 提取模型名称和评估指标</span></span><br><span class="line">        model_names = <span class="built_in">list</span>(results.keys())</span><br><span class="line">        rmse_values = [results[name][<span class="string">&#x27;rmse&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        rmsle_values = [results[name][<span class="string">&#x27;rmsle&#x27;</span>] <span class="keyword">for</span> name <span class="keyword">in</span> model_names]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSE的最佳模型</span></span><br><span class="line">        best_rmse_idx = np.argmin(rmse_values)</span><br><span class="line">        rmse_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 找出基于RMSLE的最佳模型（竞赛评估指标）</span></span><br><span class="line">        best_rmsle_idx = np.argmin(rmsle_values)</span><br><span class="line">        rmsle_colors = [<span class="string">&#x27;green&#x27;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&#x27;blue&#x27;</span> <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(model_names))]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmse_values, color=rmse_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSE)&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmse.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSLE比较图（竞赛评估指标）</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.bar(model_names, rmsle_values, color=rmsle_colors)</span><br><span class="line">        plt.title(<span class="string">&#x27;优化后的模型性能比较 (RMSLE) - 竞赛评估指标&#x27;</span>)</span><br><span class="line">        plt.xlabel(<span class="string">&#x27;模型&#x27;</span>)</span><br><span class="line">        plt.ylabel(<span class="string">&#x27;RMSLE (越低越好)&#x27;</span>)</span><br><span class="line">        plt.xticks(rotation=<span class="number">45</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        plt.savefig(<span class="string">&#x27;plots/optimized_models_comparison_rmsle.png&#x27;</span>)</span><br><span class="line">        plt.close()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出比较结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSE):&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmse_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmse_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n模型性能比较 (RMSLE) - 竞赛评估指标:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> i, name <span class="keyword">in</span> <span class="built_in">enumerate</span>(model_names):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;rmsle_values[i]:<span class="number">.4</span>f&#125;</span>&quot;</span> + (<span class="string">&quot; (最佳)&quot;</span> <span class="keyword">if</span> i == best_rmsle_idx <span class="keyword">else</span> <span class="string">&quot;&quot;</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果RMSE和RMSLE选出的最佳模型不同，输出说明</span></span><br><span class="line">        <span class="keyword">if</span> best_rmse_idx != best_rmsle_idx:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;\n注意: 基于RMSE的最佳模型是 <span class="subst">&#123;model_names[best_rmse_idx]&#125;</span>，而基于RMSLE的最佳模型是 <span class="subst">&#123;model_names[best_rmsle_idx]&#125;</span>。&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;由于竞赛使用RMSLE作为评估指标，我们将选择基于RMSLE的最佳模型。&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 返回基于RMSLE的最佳模型名称</span></span><br><span class="line">        <span class="keyword">return</span> model_names[best_rmsle_idx]</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;比较优化后的模型时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_submission_with_best_model</span>(<span class="params">best_model_name</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用最佳模型生成提交文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        best_model_name (str): 最佳模型的名称</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;使用最佳模型 <span class="subst">&#123;best_model_name&#125;</span> 生成提交文件...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载最佳模型</span></span><br><span class="line">        model_file = <span class="string">f&#x27;models/<span class="subst">&#123;best_model_name&#125;</span>.joblib&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(model_file):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;错误：找不到模型文件 <span class="subst">&#123;model_file&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        </span><br><span class="line">        best_model = joblib.load(model_file)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载测试数据</span></span><br><span class="line">        test_data = pd.read_csv(<span class="string">&#x27;test.csv&#x27;</span>)</span><br><span class="line">        test_ids = test_data[<span class="string">&#x27;id&#x27;</span>].copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预处理测试数据</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> test_data.columns:</span><br><span class="line">            test_data.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>, inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> test_data.columns:</span><br><span class="line">            test_data[<span class="string">&#x27;Sex&#x27;</span>] = test_data[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载scaler</span></span><br><span class="line">        scaler = joblib.load(<span class="string">&#x27;scaler.joblib&#x27;</span>)</span><br><span class="line">        X_test_scaled = scaler.transform(test_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        predictions = best_model.predict(X_test_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建提交文件</span></span><br><span class="line">        submission = pd.DataFrame(&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: test_ids,</span><br><span class="line">            <span class="string">&#x27;Calories&#x27;</span>: predictions</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        submission_file = <span class="string">f&#x27;submission_<span class="subst">&#123;best_model_name&#125;</span>.csv&#x27;</span></span><br><span class="line">        submission.to_csv(submission_file, index=<span class="literal">False</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提交文件已生成: <span class="subst">&#123;submission_file&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成提交文件过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    主函数</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始模型优化流程...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存模型和图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;models&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;models&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载预处理后的数据</span></span><br><span class="line">        X_train, X_val, y_train, y_val = load_preprocessed_data()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 优化各模型并存储结果</span></span><br><span class="line">        results = &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 决策树</span></span><br><span class="line">        dt_model, dt_params, dt_rmse, dt_rmsle = optimize_decision_tree(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;decision_tree_best&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: dt_model, <span class="string">&#x27;params&#x27;</span>: dt_params, <span class="string">&#x27;rmse&#x27;</span>: dt_rmse, <span class="string">&#x27;rmsle&#x27;</span>: dt_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机森林</span></span><br><span class="line">        rf_model, rf_params, rf_rmse, rf_rmsle = optimize_random_forest(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;random_forest_best&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: rf_model, <span class="string">&#x27;params&#x27;</span>: rf_params, <span class="string">&#x27;rmse&#x27;</span>: rf_rmse, <span class="string">&#x27;rmsle&#x27;</span>: rf_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># XGBoost</span></span><br><span class="line">        xgb_model, xgb_params, xgb_rmse, xgb_rmsle = optimize_xgboost(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;xgboost_best&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: xgb_model, <span class="string">&#x27;params&#x27;</span>: xgb_params, <span class="string">&#x27;rmse&#x27;</span>: xgb_rmse, <span class="string">&#x27;rmsle&#x27;</span>: xgb_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 线性回归</span></span><br><span class="line">        lr_model, lr_params, lr_rmse, lr_rmsle = optimize_linear_regression(X_train, X_val, y_train, y_val)</span><br><span class="line">        results[<span class="string">&#x27;linear_regression&#x27;</span>] = &#123;<span class="string">&#x27;model&#x27;</span>: lr_model, <span class="string">&#x27;params&#x27;</span>: lr_params, <span class="string">&#x27;rmse&#x27;</span>: lr_rmse, <span class="string">&#x27;rmsle&#x27;</span>: lr_rmsle&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 比较优化后的模型</span></span><br><span class="line">        best_model_name = compare_optimized_models(results)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用最佳模型生成提交文件</span></span><br><span class="line">        generate_submission_with_best_model(best_model_name)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型优化流程完成！&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制流程图的代码（由于Mermaid需要在Markdown中呈现，这里只生成文本文件）</span></span><br><span class="line">        generate_flow_diagrams()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;模型优化过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_flow_diagrams</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    生成各算法的流程图文本文件</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 决策树流程图</span></span><br><span class="line">    dt_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; E[定义参数网格]</span></span><br><span class="line"><span class="string">    E --&gt; F[创建决策树基础模型]</span></span><br><span class="line"><span class="string">    F --&gt; G[使用GridSearchCV进行网格搜索]</span></span><br><span class="line"><span class="string">    G --&gt; H[获取最佳参数]</span></span><br><span class="line"><span class="string">    H --&gt; I[使用最佳参数训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征重要性]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存最佳模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#eeeeee,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机森林流程图</span></span><br><span class="line">    rf_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; E[定义参数分布]</span></span><br><span class="line"><span class="string">    E --&gt; F[创建随机森林基础模型]</span></span><br><span class="line"><span class="string">    F --&gt; G[使用RandomizedSearchCV进行随机搜索]</span></span><br><span class="line"><span class="string">    G --&gt; H[获取最佳参数]</span></span><br><span class="line"><span class="string">    H --&gt; I[使用最佳参数训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征重要性]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存最佳模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#eeeeee,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># XGBoost流程图</span></span><br><span class="line">    xgb_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; E[定义参数网格]</span></span><br><span class="line"><span class="string">    E --&gt; F[创建XGBoost基础模型]</span></span><br><span class="line"><span class="string">    F --&gt; G[使用RandomizedSearchCV进行随机搜索]</span></span><br><span class="line"><span class="string">    G --&gt; H[获取最佳参数]</span></span><br><span class="line"><span class="string">    H --&gt; I[使用最佳参数训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征重要性]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存最佳模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#eeeeee,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 线性回归流程图</span></span><br><span class="line">    lr_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载数据]</span></span><br><span class="line"><span class="string">    B --&gt; C[数据预处理]</span></span><br><span class="line"><span class="string">    C --&gt; D[特征缩放]</span></span><br><span class="line"><span class="string">    D --&gt; F[创建线性回归模型]</span></span><br><span class="line"><span class="string">    F --&gt; I[训练模型]</span></span><br><span class="line"><span class="string">    I --&gt; J[在验证集上评估]</span></span><br><span class="line"><span class="string">    J --&gt; K[计算RMSE和R²]</span></span><br><span class="line"><span class="string">    K --&gt; K1[计算RMSLE（竞赛评估指标）]</span></span><br><span class="line"><span class="string">    K1 --&gt; L[绘制特征系数]</span></span><br><span class="line"><span class="string">    L --&gt; M[保存模型]</span></span><br><span class="line"><span class="string">    M --&gt; N[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style N fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style K1 fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style M fill:#b5ead7,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 模型比较流程图</span></span><br><span class="line">    compare_flow = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">```mermaid</span></span><br><span class="line"><span class="string">flowchart TD</span></span><br><span class="line"><span class="string">    A[开始] --&gt; B[加载所有优化后的模型]</span></span><br><span class="line"><span class="string">    B --&gt; C[计算每个模型的RMSE]</span></span><br><span class="line"><span class="string">    C --&gt; D[计算每个模型的RMSLE]</span></span><br><span class="line"><span class="string">    D --&gt; E[绘制RMSE比较图]</span></span><br><span class="line"><span class="string">    E --&gt; F[绘制RMSLE比较图]</span></span><br><span class="line"><span class="string">    F --&gt; G[基于RMSLE选择最佳模型]</span></span><br><span class="line"><span class="string">    G --&gt; H[使用最佳模型生成提交文件]</span></span><br><span class="line"><span class="string">    H --&gt; I[结束]</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    style A fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style I fill:#f9d5e5,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style D fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style F fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">    style G fill:#ffcc99,stroke:#333,stroke-width:2px</span></span><br><span class="line"><span class="string">```</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存流程图文本</span></span><br><span class="line">    os.makedirs(<span class="string">&#x27;flowcharts&#x27;</span>, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/decision_tree_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(dt_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/random_forest_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(rf_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/xgboost_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(xgb_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/linear_regression_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(lr_flow)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flowcharts/model_comparison_flow.md&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(compare_flow)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;流程图文本文件已生成在 &#x27;flowcharts&#x27; 文件夹中&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main() </span><br></pre></td></tr></table></figure><h2 id="六、模型应用">六、模型应用</h2><h3 id="6-1-最终模型选择">6.1 最终模型选择</h3><p>XGBoost</p><h3 id="6-2-模型实际应用场景">6.2 模型实际应用场景</h3><p>该预测模型可应用于以下场景：</p><ol><li>健身应用中的卡路里消耗预测功能</li><li>智能手表、手环等可穿戴设备的能量消耗算法</li><li>个性化健身计划制定工具</li><li>健康管理系统的锻炼评估组件</li></ol><h2 id="七、数据分析结论">七、数据分析结论</h2><h3 id="7-1-主要发现">7.1 主要发现</h3><p>通过本项目的数据分析和建模，我们得出以下主要发现：同上面</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515153934775.png" alt=""></p><p>代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> FontProperties</span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> mpl</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 尝试设置中文字体</span></span><br><span class="line">    font = FontProperties(fname=<span class="string">r&quot;C:\Windows\Fonts\SimHei.ttf&quot;</span>, size=<span class="number">14</span>)</span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;SimHei&#x27;</span>]  </span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;警告: 未能设置中文字体，图表中的中文可能显示为方块&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模型性能数据</span></span><br><span class="line">models = [<span class="string">&#x27;XGBoost&#x27;</span>, <span class="string">&#x27;随机森林&#x27;</span>, <span class="string">&#x27;决策树&#x27;</span>, <span class="string">&#x27;线性回归&#x27;</span>]  <span class="comment"># 调整顺序，确保随机森林显示正确</span></span><br><span class="line">rmse_scores = [<span class="number">3.6246</span>, <span class="number">3.7526</span>, <span class="number">5.9721</span>, <span class="number">11.0588</span>]  <span class="comment"># 对应调整顺序</span></span><br><span class="line">r2_scores = [<span class="number">0.9966</span>, <span class="number">0.9964</span>, <span class="number">0.9908</span>, <span class="number">0.9684</span>]  <span class="comment"># 对应调整顺序</span></span><br><span class="line">rmsle_scores = [<span class="number">0.0622</span>, <span class="number">0.0627</span>, <span class="number">0.0896</span>, <span class="number">0.5652</span>]  <span class="comment"># 对应调整顺序</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建DataFrame以便于数据处理</span></span><br><span class="line">results_df = pd.DataFrame(&#123;</span><br><span class="line">    <span class="string">&#x27;模型&#x27;</span>: models,</span><br><span class="line">    <span class="string">&#x27;RMSE&#x27;</span>: rmse_scores,</span><br><span class="line">    <span class="string">&#x27;R平方&#x27;</span>: r2_scores,</span><br><span class="line">    <span class="string">&#x27;RMSLE (竞赛评估指标)&#x27;</span>: rmsle_scores</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印比较表格</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;模型性能比较表：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(results_df.to_string(index=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找出每个指标的最佳模型</span></span><br><span class="line">best_rmse_model = models[np.argmin(rmse_scores)]</span><br><span class="line">best_r2_model = models[np.argmax(r2_scores)]</span><br><span class="line">best_rmsle_model = models[np.argmin(rmsle_scores)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n各指标最佳模型：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;RMSE 最低的模型: <span class="subst">&#123;best_rmse_model&#125;</span> (RMSE = <span class="subst">&#123;<span class="built_in">min</span>(rmse_scores):<span class="number">.4</span>f&#125;</span>)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;R平方 最高的模型: <span class="subst">&#123;best_r2_model&#125;</span> (R平方 = <span class="subst">&#123;<span class="built_in">max</span>(r2_scores):<span class="number">.4</span>f&#125;</span>)&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;RMSLE 最低的模型: <span class="subst">&#123;best_rmsle_model&#125;</span> (RMSLE = <span class="subst">&#123;<span class="built_in">min</span>(rmsle_scores):<span class="number">.4</span>f&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算各模型的综合排名</span></span><br><span class="line"><span class="comment"># 为每个指标计算排名（RMSE和RMSLE越低越好，R²越高越好）</span></span><br><span class="line">rmse_rank = np.argsort(rmse_scores).argsort()</span><br><span class="line">r2_rank = np.argsort(-np.array(r2_scores)).argsort()  <span class="comment"># 负号使得R²越高排名越靠前</span></span><br><span class="line">rmsle_rank = np.argsort(rmsle_scores).argsort()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算平均排名</span></span><br><span class="line">avg_rank = (rmse_rank + r2_rank + rmsle_rank) / <span class="number">3.0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加排名信息到DataFrame</span></span><br><span class="line">results_df[<span class="string">&#x27;RMSE排名&#x27;</span>] = rmse_rank + <span class="number">1</span>  <span class="comment"># +1使排名从1开始</span></span><br><span class="line">results_df[<span class="string">&#x27;R平方排名&#x27;</span>] = r2_rank + <span class="number">1</span></span><br><span class="line">results_df[<span class="string">&#x27;RMSLE排名&#x27;</span>] = rmsle_rank + <span class="number">1</span></span><br><span class="line">results_df[<span class="string">&#x27;平均排名&#x27;</span>] = avg_rank + <span class="number">1</span></span><br><span class="line">results_df = results_df.sort_values(<span class="string">&#x27;平均排名&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n综合排名（考虑所有指标）：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(results_df[[<span class="string">&#x27;模型&#x27;</span>, <span class="string">&#x27;RMSE排名&#x27;</span>, <span class="string">&#x27;R平方排名&#x27;</span>, <span class="string">&#x27;RMSLE排名&#x27;</span>, <span class="string">&#x27;平均排名&#x27;</span>]].to_string(index=<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义更好的颜色方案</span></span><br><span class="line">colors = [<span class="string">&#x27;#3498db&#x27;</span>, <span class="string">&#x27;#2ecc71&#x27;</span>, <span class="string">&#x27;#9b59b6&#x27;</span>, <span class="string">&#x27;#e74c3c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 可视化比较</span></span><br><span class="line">plt.figure(figsize=(<span class="number">18</span>, <span class="number">12</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. RMSE比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>)</span><br><span class="line">ax1 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;RMSE&#x27;</span>, data=results_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型RMSE比较（越低越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;RMSE&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Y轴的最大值，用于计算标签位置</span></span><br><span class="line">y_max = <span class="built_in">max</span>(rmse_scores) * <span class="number">1.15</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, y_max)  <span class="comment"># 设置Y轴范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(rmse_scores):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max * <span class="number">0.02</span>)  <span class="comment"># 柱子顶部上方2%的位置</span></span><br><span class="line">    ax1.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.4</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. R平方比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>)</span><br><span class="line">ax2 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;R平方&#x27;</span>, data=results_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型R平方比较（越高越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;R平方&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Y轴范围，从0.95开始以突出差异</span></span><br><span class="line">y_min_r2 = <span class="built_in">min</span>(r2_scores) * <span class="number">0.99</span></span><br><span class="line">y_max_r2 = <span class="number">1.001</span></span><br><span class="line">plt.ylim(y_min_r2, y_max_r2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子顶部上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(r2_scores):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max_r2 - v) * <span class="number">0.3</span>  <span class="comment"># 柱子顶部上方</span></span><br><span class="line">    ax2.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.4</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. RMSLE比较（竞赛评估指标）</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">ax3 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;RMSLE (竞赛评估指标)&#x27;</span>, data=results_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型RMSLE比较（竞赛评估指标，越低越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;RMSLE&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取Y轴的最大值，用于计算标签位置</span></span><br><span class="line">y_max_rmsle = <span class="built_in">max</span>(rmsle_scores) * <span class="number">1.15</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, y_max_rmsle)  <span class="comment"># 设置Y轴范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(rmsle_scores):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max_rmsle * <span class="number">0.02</span>)  <span class="comment"># 柱子顶部上方2%的位置</span></span><br><span class="line">    ax3.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.4</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 综合排名比较</span></span><br><span class="line">plt.subplot(<span class="number">2</span>, <span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line">sorted_df = results_df.sort_values(<span class="string">&#x27;平均排名&#x27;</span>, ascending=<span class="literal">True</span>)</span><br><span class="line">ax4 = sns.barplot(x=<span class="string">&#x27;模型&#x27;</span>, y=<span class="string">&#x27;平均排名&#x27;</span>, data=sorted_df, hue=<span class="string">&#x27;模型&#x27;</span>, palette=colors, legend=<span class="literal">False</span>)</span><br><span class="line">plt.title(<span class="string">&#x27;各模型综合排名（越低越好）&#x27;</span>, fontproperties=font, fontsize=<span class="number">14</span>)</span><br><span class="line">plt.ylabel(<span class="string">&#x27;平均排名&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line">plt.xlabel(<span class="string">&#x27;模型&#x27;</span>, fontsize=<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置Y轴范围</span></span><br><span class="line">y_max_rank = <span class="number">5</span></span><br><span class="line">plt.ylim(<span class="number">0</span>, y_max_rank)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在柱状图上添加数值标签 - 统一在柱子上方</span></span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">enumerate</span>(sorted_df[<span class="string">&#x27;平均排名&#x27;</span>]):</span><br><span class="line">    <span class="comment"># 统一在柱子上方显示标签</span></span><br><span class="line">    label_height = v + (y_max_rank * <span class="number">0.05</span>)  <span class="comment"># 柱子顶部上方5%的位置</span></span><br><span class="line">    ax4.text(i, label_height, <span class="string">f&#x27;<span class="subst">&#123;v:<span class="number">.2</span>f&#125;</span>&#x27;</span>, ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>, fontsize=<span class="number">10</span>, color=<span class="string">&#x27;black&#x27;</span>, fontweight=<span class="string">&#x27;bold&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.grid(axis=<span class="string">&#x27;y&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>, alpha=<span class="number">0.7</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加总体标题</span></span><br><span class="line">plt.suptitle(<span class="string">&#x27;卡路里消耗预测模型性能比较&#x27;</span>, fontsize=<span class="number">18</span>, fontproperties=font, y=<span class="number">0.98</span>)</span><br><span class="line">plt.tight_layout(rect=[<span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">0.95</span>])  <span class="comment"># 调整布局，为总标题留出空间</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存图表</span></span><br><span class="line">plt.savefig(<span class="string">&#x27;模型性能比较.png&#x27;</span>, dpi=<span class="number">300</span>, bbox_inches=<span class="string">&#x27;tight&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示图表</span></span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 最终结论</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\n最终结论：&quot;</span>)</span><br><span class="line">best_model = results_df.iloc[<span class="number">0</span>][<span class="string">&#x27;模型&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;综合各项指标，<span class="subst">&#123;best_model&#125;</span>模型表现最优。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> best_model == <span class="string">&quot;XGBoost&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">具体优势：</span></span><br><span class="line"><span class="string">1. XGBoost模型RMSE最低（3.6246），意味着预测误差最小</span></span><br><span class="line"><span class="string">2. R平方值最高（0.9966），说明模型解释了约99.66%的目标变量方差</span></span><br><span class="line"><span class="string">3. RMSLE值最低（0.0622），在竞赛评估指标上表现最佳</span></span><br><span class="line"><span class="string">4. 综合排名第一</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">推荐在最终提交中使用XGBoost模型预测结果。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> best_model == <span class="string">&quot;随机森林&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">具体优势：</span></span><br><span class="line"><span class="string">1. 随机森林模型RMSE仅次于XGBoost（3.7526）</span></span><br><span class="line"><span class="string">2. R平方值接近XGBoost（0.9964）</span></span><br><span class="line"><span class="string">3. RMSLE值仅略高于XGBoost（0.0627）</span></span><br><span class="line"><span class="string">4. 综合排名第二，但与XGBoost非常接近</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">推荐在最终提交中使用随机森林模型预测结果，或与XGBoost模型结果进行集成。</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>) </span><br></pre></td></tr></table></figure><h3 id="7-2-未来改进方向">7.2 未来改进方向</h3><p>本项目还可在以下方面进行改进：</p><ol><li>收集更多维度的数据，如锻炼类型、强度等</li><li>尝试更多高级算法，如神经网络、集成学习等</li><li>引入时间序列特征，考虑锻炼连续性的影响</li><li>结合领域知识，开发更专业的特征工程方法</li></ol><p>上周刚搜到神经网络 今天上课就要求写了 哈哈哈哈…</p><p>那来看看神经网络代码：</p><p>说一下大概干了什么事情：</p><ol><li>神经网络建模与优化：</li></ol><ul><li><p>模型选择：我选择了Scikit-learn库中的MLPRegressor（多层感知机回归器）作为主要的神经网络模型。</p></li><li><p>数据标准化：由于神经网络对输入特征的尺度非常敏感，在将数据送入模型前，我们使用了StandardScaler对所有特征进行了标准化处理。</p></li><li><p>基准建立与调优：首先，我们训练了一个基础配置的神经网络模型，以了解其大致性能。然后，为了找到最优的模型配置，我们采用了网格搜索（GridSearchCV）的方法，对神经网络的关键超参数（如隐藏层结构、激活函数、正则化强度和初始学习率）进行了系统的调优。调优过程中使用了3折交叉验证，并以负均方误差作为评估标准。</p></li><li><p>性能评估：对于调优后的最佳神经网络模型，我们在独立的验证集上评估了其性能，主要关注的指标包括均方根误差（RMSE）、R²决定系数以及均方根对数误差（RMSLE）。脚本中还计算了这些指标，并将它们与一个预先训练好的XGBoost模型的性能进行了对比。</p></li></ul><p>2.结果可视化与分析：为了更直观地理解模型性能，脚本生成了多种可视化图表。包括：</p><ul><li><p>不同模型（基础神经网络、调优后神经网络、XGBoost）在各项评估指标上的对比条形图。</p></li><li><p>调优后神经网络的预测值与实际值的对比散点图。</p></li><li><p>模型预测残差的分布图和残差与预测值的关系图，用于分析模型的偏差和潜在问题。</p></li></ul><p>3.模型应用与输出：最后，利用训练好的最佳神经网络模型和相应的特征缩放器，对测试数据集进行预测，并生成了符合竞赛提交格式要求的CSV文件。</p><p>具体分析：</p><p><code>train_neural_network</code> 函数</p><p>一开始也是数据分割与标准化，这里可以看下面的完整代码，可以说一下的是：神经网络对输入特征的尺度非常敏感。如果特征尺度差异很大，训练过程可能会变得缓慢且不稳定。<code>StandardScaler</code>将每个特征转换为均值为0，标准差为1的分布。<strong>注意</strong>：缩放器（<code>scaler</code>）是在训练集上<code>fit_transform</code>的，然后用同样的缩放器在验证集（以及后续的测试集）上<code>transform</code>，以避免数据泄露。</p><h3 id="基线模型训练">基线模型训练</h3><p>首先，训练了一个具有基础配置的<code>MLPRegressor</code>，以建立一个性能基准。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># ...</span></span><br><span class="line">    base_nn = MLPRegressor(</span><br><span class="line">        hidden_layer_sizes=(<span class="number">100</span>,),  <span class="comment"># 一个隐藏层，100个神经元</span></span><br><span class="line">        activation=<span class="string">&#x27;relu&#x27;</span>,          <span class="comment"># ReLU激活函数</span></span><br><span class="line">        solver=<span class="string">&#x27;adam&#x27;</span>,              <span class="comment"># Adam优化器</span></span><br><span class="line">        alpha=<span class="number">0.0001</span>,               <span class="comment"># L2正则化参数</span></span><br><span class="line">        max_iter=<span class="number">500</span>,               <span class="comment"># 增加最大迭代次数</span></span><br><span class="line">        early_stopping=<span class="literal">True</span>,        <span class="comment"># 启用早停机制</span></span><br><span class="line">        validation_fraction=<span class="number">0.1</span>,    <span class="comment"># 用于早停的验证集比例</span></span><br><span class="line">        tol=<span class="number">1e-4</span>,                   <span class="comment"># 收敛容忍度</span></span><br><span class="line">        random_state=<span class="number">42</span>,</span><br><span class="line">        verbose=<span class="literal">True</span>                <span class="comment"># 显示训练进度</span></span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">    start_time = time.time()</span><br><span class="line">    base_nn.fit(X_train_scaled, y_train)</span><br><span class="line">    base_training_time = time.time() - start_time</span><br><span class="line">    </span><br><span class="line">    y_pred_base = base_nn.predict(X_val_scaled)</span><br><span class="line">    base_mse = mean_squared_error(y_val, y_pred_base)</span><br><span class="line">    base_rmse = np.sqrt(base_mse)</span><br><span class="line">    base_mae = mean_absolute_error(y_val, y_pred_base)</span><br><span class="line">    base_r2 = r2_score(y_val, y_pred_base)</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">基础神经网络模型评估结果:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;base_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;base_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>关键参数解释：</p><ul><li><code>hidden_layer_sizes=(100,)</code>: 定义了一个包含100个神经元的隐藏层。</li><li><code>activation='relu'</code>: 使用ReLU作为激活函数，它有助于缓解梯度消失问题。</li><li><code>solver='adam'</code>: Adam是一种高效的优化算法。</li><li><code>alpha=0.0001</code>: L2正则化参数，用于防止过拟合。</li><li><code>max_iter=500</code>: 最大迭代次数。</li><li><code>early_stopping=True</code>: 早停机制，当验证集性能不再提升时停止训练，防止过拟合。</li></ul><p>训练完成后，模型在验证集上进行评估，计算RMSE（均方根误差）和R²（决定系数）等指标。</p><h3 id="追求卓越：超参数调优-GridSearchCV">追求卓越：超参数调优 (<code>GridSearchCV</code>)</h3><p>为了获得更好的性能，脚本使用<code>GridSearchCV</code>进行超参数调优。这会自动尝试参数网格中的不同组合，并通过交叉验证找到最佳配置。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">   param_grid = &#123;</span><br><span class="line">       <span class="string">&#x27;hidden_layer_sizes&#x27;</span>: [(<span class="number">50</span>,), (<span class="number">100</span>,), (<span class="number">50</span>, <span class="number">25</span>)],  <span class="comment"># 不同的网络结构</span></span><br><span class="line">       <span class="string">&#x27;activation&#x27;</span>: [<span class="string">&#x27;relu&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>],                   <span class="comment"># 不同的激活函数</span></span><br><span class="line">       <span class="string">&#x27;alpha&#x27;</span>: [<span class="number">0.0001</span>, <span class="number">0.001</span>, <span class="number">0.01</span>],                   <span class="comment"># 不同的正则化强度</span></span><br><span class="line">       <span class="string">&#x27;learning_rate_init&#x27;</span>: [<span class="number">0.001</span>, <span class="number">0.01</span>]               <span class="comment"># 不同的学习率</span></span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   nn_model = MLPRegressor(</span><br><span class="line">       solver=<span class="string">&#x27;adam&#x27;</span>, max_iter=<span class="number">500</span>, early_stopping=<span class="literal">True</span>,</span><br><span class="line">       validation_fraction=<span class="number">0.1</span>, tol=<span class="number">1e-4</span>, random_state=<span class="number">42</span>, verbose=<span class="literal">False</span></span><br><span class="line">   )</span><br><span class="line">   </span><br><span class="line">   grid_search = GridSearchCV(</span><br><span class="line">       estimator=nn_model, param_grid=param_grid, cv=<span class="number">3</span>,</span><br><span class="line">       scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>, n_jobs=-<span class="number">1</span>, verbose=<span class="number">2</span></span><br><span class="line">   )</span><br><span class="line">   </span><br><span class="line">   grid_search.fit(X_train_scaled, y_train)</span><br><span class="line">   </span><br><span class="line">   best_params = grid_search.best_params_</span><br><span class="line">   best_model = grid_search.best_estimator_</span><br><span class="line">   <span class="built_in">print</span>(<span class="string">f&quot;最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">   <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><code>GridSearchCV</code>会尝试<code>param_grid</code>中定义的所有超参数组合。这里：</p><ul><li><code>cv=3</code>: 表示使用3折交叉验证。</li><li><code>scoring='neg_mean_squared_error'</code>: 评估指标为负均方误差（因为GridSearchCV试图最大化得分，而我们希望最小化MSE）。</li><li><code>n_jobs=-1</code>: 使用所有可用的CPU核心并行计算。</li></ul><h3 id="最佳模型评估与比较">最佳模型评估与比较</h3><p>找到最佳超参数后，用最佳模型<code>best_model</code>在验证集上进行预测和评估。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">    y_pred_best = best_model.predict(X_val_scaled)</span><br><span class="line">    best_mse = mean_squared_error(y_val, y_pred_best)</span><br><span class="line">    best_rmse = np.sqrt(best_mse)</span><br><span class="line">    best_mae = mean_absolute_error(y_val, y_pred_best)</span><br><span class="line">    best_r2 = r2_score(y_val, y_pred_best)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算RMSLE (Root Mean Squared Logarithmic Error)</span></span><br><span class="line">    <span class="comment"># RMSLE = sqrt( (1/n) * sum( (log(pred_i + 1) - log(actual_i + 1))^2 ) )</span></span><br><span class="line">    <span class="comment"># 添加1是为了避免log(0)的问题，并且因为卡路里消耗量通常是正数</span></span><br><span class="line">    base_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val) - np.log1p(y_pred_base), <span class="number">2</span>))) <span class="comment"># 修正：y_val和y_pred_base都应+1</span></span><br><span class="line">    best_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val) - np.log1p(y_pred_best), <span class="number">2</span>))) <span class="comment"># 修正：y_val和y_pred_best都应+1</span></span><br><span class="line">    <span class="comment"># 更正后的RMSLE计算 (如脚本中所示，但y_pred_base也应+1):</span></span><br><span class="line">    <span class="comment"># base_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + 1) - np.log1p(y_pred_base + 1), 2)))</span></span><br><span class="line">    <span class="comment"># best_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + 1) - np.log1p(y_pred_best + 1), 2)))</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;</span></span><br><span class="line"><span class="string">最佳神经网络模型评估结果:&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;best_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;best_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p>我把前面四个模型最好的模型也就是XGBoost与之对比,引入了<code>XGBOOST_RMSE</code>, <code>XGBOOST_R2</code>, <code>XGBOOST_RMSLE</code>这些常量，它们代表了一个预先训练好的XGBoost模型的性能指标。这允许我将神经网络模型的性能与一个强大的基准模型进行比较。RMSLE（均方根对数误差）是另一个重要的回归评估指标，尤其适用于目标变量数量级跨度较大或我们更关注预测百分比误差的情况。</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124744490.png" alt="image-20250528124744490"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124806904.png" alt="image-20250528124806904"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124835120.png" alt="image-20250528124835120"></p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528124855657.png" alt="image-20250528124855657"></p><h3 id="深入洞察：预测结果可视化">深入洞察：预测结果可视化</h3><p>为了更深入地理解模型的行为，我做了以下可视化图表：</p><ol><li><strong>预测值 vs. 实际值</strong>:</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">   <span class="comment"># 随机选择100个样本点进行可视化</span></span><br><span class="line">   sample_indices = np.random.choice(<span class="built_in">len</span>(y_val), <span class="built_in">min</span>(<span class="number">100</span>, <span class="built_in">len</span>(y_val)), replace=<span class="literal">False</span>)</span><br><span class="line">   y_val_sample = y_val.iloc[sample_indices]</span><br><span class="line">   y_pred_sample = y_pred_best[sample_indices]</span><br><span class="line">   </span><br><span class="line">   plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">   plt.scatter(y_val_sample, y_pred_sample, alpha=<span class="number">0.7</span>)</span><br><span class="line">   plt.plot([y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], [y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], <span class="string">&#x27;r--&#x27;</span>) <span class="comment"># 对角线</span></span><br><span class="line">   <span class="comment"># ... 设置标题和标签 ...</span></span><br><span class="line">   show_figure(plt.gcf())</span><br><span class="line">   <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125033313.png" alt="image-20250528125033313"></p><p><strong>残差分布</strong>: 残差是实际值与预测值之差。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...</span></span><br><span class="line">   residuals = y_val - y_pred_best</span><br><span class="line">   plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">   sns.histplot(residuals, kde=<span class="literal">True</span>) <span class="comment"># 直方图和核密度估计</span></span><br><span class="line">   plt.axvline(x=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>) <span class="comment"># 零点线</span></span><br><span class="line">   <span class="comment"># ... 设置标题和标签 ...</span></span><br><span class="line">   show_figure(plt.gcf())</span><br><span class="line">   <span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125132720.png" alt="image-20250528125132720"></p><p><strong>残差 vs. 预测值</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">plt.scatter(y_pred_best, residuals, alpha=<span class="number">0.7</span>)</span><br><span class="line">plt.axhline(y=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>) <span class="comment"># 水平零线</span></span><br><span class="line"><span class="comment"># ... 设置标题和标签 ...</span></span><br><span class="line">show_figure(plt.gcf())</span><br><span class="line"><span class="comment"># ...</span></span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125224921.png" alt="image-20250528125224921"></p><h3 id="模型保存">模型保存</h3><p>训练和调优完成后，将最佳模型和特征缩放器保存到磁盘，以便将来重用，而无需重新训练。(详细见下面完整代码) 后面还有一个生成竞赛的提交文件的代码</p><p>完整代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">卡路里消耗预测 - 神经网络模型实现</span></span><br><span class="line"><span class="string">本代码使用Scikit-learn的MLPRegressor实现神经网络模型预测锻炼期间燃烧的卡路里</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line"><span class="keyword">from</span> sklearn.model_selection <span class="keyword">import</span> train_test_split, GridSearchCV</span><br><span class="line"><span class="keyword">from</span> sklearn.preprocessing <span class="keyword">import</span> StandardScaler</span><br><span class="line"><span class="keyword">from</span> sklearn.metrics <span class="keyword">import</span> mean_squared_error, r2_score, mean_absolute_error</span><br><span class="line"><span class="keyword">from</span> sklearn.neural_network <span class="keyword">import</span> MLPRegressor</span><br><span class="line"><span class="keyword">import</span> warnings</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> joblib</span><br><span class="line"><span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line"><span class="keyword">import</span> platform</span><br><span class="line"></span><br><span class="line"><span class="comment"># XGBoost模型的性能指标（基于之前的训练结果）</span></span><br><span class="line">XGBOOST_RMSE = <span class="number">3.6246</span>    <span class="comment"># XGBoost模型的均方根误差</span></span><br><span class="line">XGBOOST_R2 = <span class="number">0.9966</span>      <span class="comment"># XGBoost模型的R²值</span></span><br><span class="line">XGBOOST_RMSLE = <span class="number">0.0622</span>   <span class="comment"># XGBoost模型的均方根对数误差</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置中文显示</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 使用更可靠的方式设置中文字体</span></span><br><span class="line">    <span class="keyword">import</span> matplotlib.font_manager <span class="keyword">as</span> fm</span><br><span class="line">    <span class="keyword">import</span> platform</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 常见中文字体列表，按照可用性顺序排列</span></span><br><span class="line">    chinese_fonts = [</span><br><span class="line">        <span class="string">&#x27;SimHei&#x27;</span>, <span class="string">&#x27;Microsoft YaHei&#x27;</span>, <span class="string">&#x27;SimSun&#x27;</span>, <span class="string">&#x27;STSong&#x27;</span>, <span class="string">&#x27;WenQuanYi Zen Hei&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;AR PL UMing CN&#x27;</span>, <span class="string">&#x27;AR PL UKai CN&#x27;</span>, <span class="string">&#x27;KaiTi&#x27;</span>, <span class="string">&#x27;FangSong&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设置rcParams</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;axes.unicode_minus&#x27;</span>] = <span class="literal">False</span>  <span class="comment"># 解决保存图像是负号&#x27;-&#x27;显示为方块的问题</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 检查已有字体</span></span><br><span class="line">    system_fonts = <span class="built_in">set</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> fm.fontManager.ttflist])</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;系统内可用字体数量: <span class="subst">&#123;<span class="built_in">len</span>(system_fonts)&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 查找可用的中文字体</span></span><br><span class="line">    available_chinese_font = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">for</span> font <span class="keyword">in</span> chinese_fonts:</span><br><span class="line">        <span class="keyword">if</span> font <span class="keyword">in</span> system_fonts:</span><br><span class="line">            available_chinese_font = font</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;找到可用中文字体: <span class="subst">&#123;font&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> available_chinese_font:</span><br><span class="line">        plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [available_chinese_font] + plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]</span><br><span class="line">        CHINESE_FONTS_AVAILABLE = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 尝试重建字体缓存</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;未找到中文字体，尝试重建字体缓存...&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">from</span> matplotlib.font_manager <span class="keyword">import</span> _rebuild</span><br><span class="line">            _rebuild()</span><br><span class="line">            <span class="comment"># 重新检查字体</span></span><br><span class="line">            system_fonts = <span class="built_in">set</span>([f.name <span class="keyword">for</span> f <span class="keyword">in</span> fm.fontManager.ttflist])</span><br><span class="line">            <span class="keyword">for</span> font <span class="keyword">in</span> chinese_fonts:</span><br><span class="line">                <span class="keyword">if</span> font <span class="keyword">in</span> system_fonts:</span><br><span class="line">                    available_chinese_font = font</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;重建缓存后找到可用中文字体: <span class="subst">&#123;font&#125;</span>&quot;</span>)</span><br><span class="line">                    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [available_chinese_font] + plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>]</span><br><span class="line">                    CHINESE_FONTS_AVAILABLE = <span class="literal">True</span></span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;重建字体缓存失败，图表中文将使用FontProperties方式处理&quot;</span>)</span><br><span class="line">            CHINESE_FONTS_AVAILABLE = <span class="literal">False</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="comment"># 如果设置失败，使用默认字体，不显示中文</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;字体设置失败，错误信息: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 恢复默认设置</span></span><br><span class="line">    plt.rcParams[<span class="string">&#x27;font.sans-serif&#x27;</span>] = [<span class="string">&#x27;Arial&#x27;</span>]</span><br><span class="line">    <span class="comment"># 修改图表标题和标签为英文</span></span><br><span class="line">    CHINESE_FONTS_AVAILABLE = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置matplotlib参数，使图表直接显示</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;interactive&#x27;</span>] = <span class="literal">True</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.figsize&#x27;</span>] = (<span class="number">10</span>, <span class="number">6</span>)  <span class="comment"># 设置默认图表大小</span></span><br><span class="line">plt.rcParams[<span class="string">&#x27;figure.dpi&#x27;</span>] = <span class="number">100</span>  <span class="comment"># 设置默认DPI</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 忽略警告</span></span><br><span class="line">warnings.filterwarnings(<span class="string">&#x27;ignore&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机种子，确保结果可重现</span></span><br><span class="line">np.random.seed(<span class="number">42</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个辅助函数，用于在条形图上显示数值</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_value_labels</span>(<span class="params">ax, spacing=<span class="number">5</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    在条形图上添加数值标签</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        ax: matplotlib轴对象</span></span><br><span class="line"><span class="string">        spacing: 标签与条形顶部的距离</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 对于ax中的每个条形</span></span><br><span class="line">    <span class="keyword">for</span> rect <span class="keyword">in</span> ax.patches:</span><br><span class="line">        <span class="comment"># 获取条形的高度</span></span><br><span class="line">        height = rect.get_height()</span><br><span class="line">        <span class="comment"># 在条形顶部添加文本</span></span><br><span class="line">        ax.annotate(<span class="string">f&#x27;<span class="subst">&#123;height:<span class="number">.4</span>f&#125;</span>&#x27;</span>,  <span class="comment"># 文本内容</span></span><br><span class="line">                    xy=(rect.get_x() + rect.get_width() / <span class="number">2</span>, height),  <span class="comment"># 文本位置</span></span><br><span class="line">                    xytext=(<span class="number">0</span>, spacing),  <span class="comment"># 文本偏移</span></span><br><span class="line">                    textcoords=<span class="string">&quot;offset points&quot;</span>,  <span class="comment"># 偏移类型</span></span><br><span class="line">                    ha=<span class="string">&#x27;center&#x27;</span>, va=<span class="string">&#x27;bottom&#x27;</span>)  <span class="comment"># 对齐方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个函数，用于显示图表</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show_figure</span>(<span class="params">fig, filename=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    显示图表</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        fig: matplotlib图表对象</span></span><br><span class="line"><span class="string">        filename: 可选参数，被忽略</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    plt.tight_layout()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 显示图表</span></span><br><span class="line">    plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一个辅助函数，用于在绘图时使用中文字体</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">use_chinese_font</span>(<span class="params">ax, title=<span class="literal">None</span>, xlabel=<span class="literal">None</span>, ylabel=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    为图表设置中文字体</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        ax: matplotlib轴对象</span></span><br><span class="line"><span class="string">        title: 标题文本</span></span><br><span class="line"><span class="string">        xlabel: x轴标签文本</span></span><br><span class="line"><span class="string">        ylabel: y轴标签文本</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># 如果没有可用的中文字体，尝试使用FontProperties</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="comment"># 尝试几个常用中文字体</span></span><br><span class="line">        font_paths = [</span><br><span class="line">            <span class="comment"># 系统字体路径</span></span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/truetype/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/chinese/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/windows/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/usr/share/fonts/opentype/noto/NotoSansCJK-Regular.ttc&#x27;</span>,</span><br><span class="line">            <span class="comment"># Windows常用路径</span></span><br><span class="line">            <span class="string">&#x27;C:/Windows/Fonts/SimHei.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;C:/Windows/Fonts/simhei.ttf&#x27;</span>,</span><br><span class="line">            <span class="comment"># Mac常用路径</span></span><br><span class="line">            <span class="string">&#x27;/Library/Fonts/Arial Unicode.ttf&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/System/Library/Fonts/PingFang.ttc&#x27;</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试找到可用的字体文件</span></span><br><span class="line">        font_prop = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> font_path <span class="keyword">in</span> font_paths:</span><br><span class="line">            <span class="keyword">if</span> os.path.exists(font_path):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    font_prop = fm.FontProperties(fname=font_path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;使用字体文件: <span class="subst">&#123;font_path&#125;</span>&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 如果仍然没有找到字体，使用系统默认字体</span></span><br><span class="line">        <span class="keyword">if</span> font_prop <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;无法找到中文字体文件，将尝试使用系统默认字体&quot;</span>)</span><br><span class="line">            font_prop = fm.FontProperties()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 设置标题和标签</span></span><br><span class="line">        <span class="keyword">if</span> title:</span><br><span class="line">            ax.set_title(title, fontproperties=font_prop)</span><br><span class="line">        <span class="keyword">if</span> xlabel:</span><br><span class="line">            ax.set_xlabel(xlabel, fontproperties=font_prop)</span><br><span class="line">        <span class="keyword">if</span> ylabel:</span><br><span class="line">            ax.set_ylabel(ylabel, fontproperties=font_prop)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># 如果有可用的中文字体，直接设置标题和标签</span></span><br><span class="line">        <span class="keyword">if</span> title:</span><br><span class="line">            ax.set_title(title)</span><br><span class="line">        <span class="keyword">if</span> xlabel:</span><br><span class="line">            ax.set_xlabel(xlabel)</span><br><span class="line">        <span class="keyword">if</span> ylabel:</span><br><span class="line">            ax.set_ylabel(ylabel)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 主函数</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>(<span class="params">use_sampling=<span class="literal">False</span></span>):</span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;开始卡路里消耗预测神经网络模型训练...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Starting calorie consumption prediction neural network model training...&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 1. 数据获取</span></span><br><span class="line">    train_data, test_data = load_data()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 2. 数据预处理</span></span><br><span class="line">    train_data = preprocess_data(train_data)</span><br><span class="line">    test_data = preprocess_data(test_data, is_train=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 3. 特征工程</span></span><br><span class="line">    train_data = feature_engineering(train_data)</span><br><span class="line">    test_data = feature_engineering(test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 4. 特征与目标变量分离</span></span><br><span class="line">    X_train, y_train = train_data.drop(<span class="string">&#x27;Calories&#x27;</span>, axis=<span class="number">1</span>), train_data[<span class="string">&#x27;Calories&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 5. 神经网络模型训练和评估</span></span><br><span class="line">    sample_limit = <span class="number">100000</span> <span class="keyword">if</span> use_sampling <span class="keyword">else</span> <span class="literal">None</span>  <span class="comment"># 如果使用采样，设置为10万条记录</span></span><br><span class="line">    best_nn_model, best_nn_score, best_r2, best_rmsle = train_neural_network(X_train, y_train, sample_limit)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 6. 使用最佳模型进行预测并生成提交文件</span></span><br><span class="line">    generate_submission(best_nn_model, test_data)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 7. 输出神经网络与XGBoost模型的比较结果</span></span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n=== 神经网络与XGBoost模型性能比较 ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;模型性能指标比较：&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;模型名称&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;R²&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSLE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n=== Neural Network vs XGBoost Model Performance Comparison ===&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Model Performance Metrics:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;Model Name&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;R²&#x27;</span>:&lt;<span class="number">10</span>&#125;</span> <span class="subst">&#123;<span class="string">&#x27;RMSLE&#x27;</span>:&lt;<span class="number">10</span>&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;神经网络(调优后)&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;best_nn_score:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_r2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_rmsle:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;XGBoost&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;XGBOOST_RMSE:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_R2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_RMSLE:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;Neural Network (Tuned)&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;best_nn_score:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_r2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;best_rmsle:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;<span class="subst">&#123;<span class="string">&#x27;XGBoost&#x27;</span>:&lt;<span class="number">20</span>&#125;</span> <span class="subst">&#123;XGBOOST_RMSE:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_R2:&lt;<span class="number">10.4</span>f&#125;</span> <span class="subst">&#123;XGBOOST_RMSLE:&lt;<span class="number">10.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 比较结果分析</span></span><br><span class="line">    nn_better_rmse = best_nn_score &lt; XGBOOST_RMSE</span><br><span class="line">    nn_better_r2 = best_r2 &gt; XGBOOST_R2</span><br><span class="line">    nn_better_rmsle = best_rmsle &lt; XGBOOST_RMSLE</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;\n结论:&quot;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&quot;\nConclusion:&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> nn_better_rmse <span class="keyword">and</span> nn_better_r2 <span class="keyword">and</span> nn_better_rmsle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;神经网络模型在所有指标上均优于XGBoost模型。&quot;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&quot;Neural Network model outperforms XGBoost model on all metrics.&quot;</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="keyword">not</span> nn_better_rmse <span class="keyword">and</span> <span class="keyword">not</span> nn_better_r2 <span class="keyword">and</span> <span class="keyword">not</span> nn_better_rmsle:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;XGBoost模型在所有指标上均优于神经网络模型。&quot;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&quot;XGBoost model outperforms Neural Network model on all metrics.&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;模型性能比较：&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSE: <span class="subst">&#123;<span class="string">&#x27;神经网络&#x27;</span> <span class="keyword">if</span> nn_better_rmse <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> 模型表现更好&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- R²: <span class="subst">&#123;<span class="string">&#x27;神经网络&#x27;</span> <span class="keyword">if</span> nn_better_r2 <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> 模型表现更好&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSLE: <span class="subst">&#123;<span class="string">&#x27;神经网络&#x27;</span> <span class="keyword">if</span> nn_better_rmsle <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> 模型表现更好&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Model performance comparison:&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSE: <span class="subst">&#123;<span class="string">&#x27;Neural Network&#x27;</span> <span class="keyword">if</span> nn_better_rmse <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> model performs better&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- R²: <span class="subst">&#123;<span class="string">&#x27;Neural Network&#x27;</span> <span class="keyword">if</span> nn_better_r2 <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> model performs better&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;- RMSLE: <span class="subst">&#123;<span class="string">&#x27;Neural Network&#x27;</span> <span class="keyword">if</span> nn_better_rmsle <span class="keyword">else</span> <span class="string">&#x27;XGBoost&#x27;</span>&#125;</span> model performs better&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n卡路里消耗预测神经网络模型训练完成！&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nCalorie consumption prediction neural network model training completed!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载数据</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">load_data</span>():</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    加载训练集和测试集数据，支持本地路径和Kaggle路径</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (训练数据, 测试数据)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在加载数据...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义可能的数据路径</span></span><br><span class="line">        possible_train_paths = [</span><br><span class="line">            <span class="string">&#x27;/kaggle/input/playground-series-s5e5/train.csv&#x27;</span>,  <span class="comment"># Kaggle路径</span></span><br><span class="line">            <span class="string">&#x27;train.csv&#x27;</span>  <span class="comment"># 本地路径</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        possible_test_paths = [</span><br><span class="line">            <span class="string">&#x27;/kaggle/input/playground-series-s5e5/test.csv&#x27;</span>,  <span class="comment"># Kaggle路径</span></span><br><span class="line">            <span class="string">&#x27;test.csv&#x27;</span>  <span class="comment"># 本地路径</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试加载训练数据</span></span><br><span class="line">        train_data = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> possible_train_paths:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">                    train_data = pd.read_csv(path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;path&#125;</span> 加载训练数据&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;尝试从 <span class="subst">&#123;path&#125;</span> 加载训练数据失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> train_data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">&quot;无法找到训练数据文件，请确保train.csv存在于正确位置&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试加载测试数据</span></span><br><span class="line">        test_data = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> possible_test_paths:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">                    test_data = pd.read_csv(path)</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;path&#125;</span> 加载测试数据&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;尝试从 <span class="subst">&#123;path&#125;</span> 加载测试数据失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> test_data <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">&quot;无法找到测试数据文件，请确保test.csv存在于正确位置&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;训练集大小：<span class="subst">&#123;train_data.shape&#125;</span>, 测试集大小：<span class="subst">&#123;test_data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> train_data, test_data</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;加载数据时出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据预处理</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">preprocess_data</span>(<span class="params">data, is_train=<span class="literal">True</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    对数据进行预处理</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 需要处理的数据</span></span><br><span class="line"><span class="string">        is_train (bool): 是否为训练数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 预处理后的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行数据预处理...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本，避免修改原始数据</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据基本信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据基本信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示数据统计摘要</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n数据统计摘要:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.describe())</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 检查缺失值</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n检查缺失值:&quot;</span>)</span><br><span class="line">        missing_values = df.isnull().<span class="built_in">sum</span>()</span><br><span class="line">        <span class="built_in">print</span>(missing_values[missing_values &gt; <span class="number">0</span>])</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 处理缺失值（如果有）</span></span><br><span class="line">        <span class="keyword">if</span> df.isnull().<span class="built_in">sum</span>().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 对数值型特征使用均值填充，分类特征使用众数填充</span></span><br><span class="line">            num_features = df.select_dtypes(include=[<span class="string">&#x27;float64&#x27;</span>, <span class="string">&#x27;int64&#x27;</span>]).columns</span><br><span class="line">            cat_features = df.select_dtypes(include=[<span class="string">&#x27;object&#x27;</span>]).columns</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> num_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mean(), inplace=<span class="literal">True</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">for</span> col <span class="keyword">in</span> cat_features:</span><br><span class="line">                <span class="keyword">if</span> df[col].isnull().<span class="built_in">sum</span>() &gt; <span class="number">0</span>:</span><br><span class="line">                    df[col].fillna(df[col].mode()[<span class="number">0</span>], inplace=<span class="literal">True</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 性别编码：将性别特征转换为数值</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;Sex&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df[<span class="string">&#x27;Sex&#x27;</span>] = df[<span class="string">&#x27;Sex&#x27;</span>].<span class="built_in">map</span>(&#123;<span class="string">&#x27;male&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;female&#x27;</span>: <span class="number">0</span>&#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 删除ID列，因为它不是预测的特征</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;id&#x27;</span> <span class="keyword">in</span> df.columns:</span><br><span class="line">            df = df.drop(<span class="string">&#x27;id&#x27;</span>, axis=<span class="number">1</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示处理后的数据信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预处理后的数据信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(df.info())</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;数据预处理过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特征工程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">feature_engineering</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    创建新特征以提高模型性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        data (DataFrame): 预处理后的数据</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        DataFrame: 包含新特征的数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行特征工程...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程前数据形状: <span class="subst">&#123;data.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建数据副本</span></span><br><span class="line">        df = data.copy()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 记录原始特征列表</span></span><br><span class="line">        original_features = df.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 创建BMI特征（体重指数）</span></span><br><span class="line">        df[<span class="string">&#x27;BMI&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / ((df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>) ** <span class="number">2</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 创建心率与年龄的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Heart_Rate_Age_Ratio&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] / df[<span class="string">&#x27;Age&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 创建锻炼强度指标</span></span><br><span class="line">        df[<span class="string">&#x27;Exercise_Intensity&#x27;</span>] = df[<span class="string">&#x27;Heart_Rate&#x27;</span>] * df[<span class="string">&#x27;Duration&#x27;</span>] / <span class="number">100</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 创建体温与心率的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Temp_Heart_Ratio&#x27;</span>] = df[<span class="string">&#x27;Body_Temp&#x27;</span>] / df[<span class="string">&#x27;Heart_Rate&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 体重与身高的比率</span></span><br><span class="line">        df[<span class="string">&#x27;Weight_Height_Ratio&#x27;</span>] = df[<span class="string">&#x27;Weight&#x27;</span>] / (df[<span class="string">&#x27;Height&#x27;</span>]/<span class="number">100</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取新创建的特征列表</span></span><br><span class="line">        new_features = [col <span class="keyword">for</span> col <span class="keyword">in</span> df.columns <span class="keyword">if</span> col <span class="keyword">not</span> <span class="keyword">in</span> original_features]</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程完成，创建了 <span class="subst">&#123;<span class="built_in">len</span>(new_features)&#125;</span> 个新特征:&quot;</span>)</span><br><span class="line">        <span class="keyword">for</span> feature <span class="keyword">in</span> new_features:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;  - <span class="subst">&#123;feature&#125;</span>: 均值=<span class="subst">&#123;df[feature].mean():<span class="number">.4</span>f&#125;</span>, 标准差=<span class="subst">&#123;df[feature].std():<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程后数据形状: <span class="subst">&#123;df.shape&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> df</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;特征工程过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 神经网络模型训练和评估</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">train_neural_network</span>(<span class="params">X, y, sample_limit=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    训练神经网络模型并评估性能</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        X (DataFrame): 特征数据</span></span><br><span class="line"><span class="string">        y (Series): 目标变量（卡路里消耗量）</span></span><br><span class="line"><span class="string">        sample_limit (int, optional): 可选的数据采样限制，如果指定，将随机采样数据</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        tuple: (最佳模型, 最佳得分, 最佳R², 最佳RMSLE)</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在进行神经网络模型训练和评估...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建保存图形的文件夹</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;plots&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;plots&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 可选的数据采样</span></span><br><span class="line">        <span class="keyword">if</span> sample_limit <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">and</span> <span class="built_in">len</span>(X) &gt; sample_limit:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;数据集较大，进行随机采样（<span class="subst">&#123;sample_limit&#125;</span>/<span class="subst">&#123;<span class="built_in">len</span>(X)&#125;</span>条记录）...&quot;</span>)</span><br><span class="line">            sample_idx = np.random.choice(<span class="built_in">len</span>(X), sample_limit, replace=<span class="literal">False</span>)</span><br><span class="line">            X = X.iloc[sample_idx].copy()</span><br><span class="line">            y = y.iloc[sample_idx].copy()</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;采样后数据形状: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;使用完整数据集: X=<span class="subst">&#123;X.shape&#125;</span>, y=<span class="subst">&#123;<span class="built_in">len</span>(y)&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 分割数据为训练集和验证集</span></span><br><span class="line">        X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=<span class="number">0.2</span>, random_state=<span class="number">42</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 特征缩放（神经网络对特征缩放非常敏感）</span></span><br><span class="line">        scaler = StandardScaler()</span><br><span class="line">        X_train_scaled = scaler.fit_transform(X_train)</span><br><span class="line">        X_val_scaled = scaler.transform(X_val)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存特征名称，用于后续分析</span></span><br><span class="line">        feature_names = X.columns.tolist()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 1. 首先创建一个基础神经网络模型，了解性能基线</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n训练基础神经网络模型...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建基础神经网络模型</span></span><br><span class="line">        <span class="comment"># hidden_layer_sizes=(100,): 一个隐藏层，包含100个神经元</span></span><br><span class="line">        <span class="comment"># activation=&#x27;relu&#x27;: 使用ReLU激活函数，这是目前最常用的激活函数，计算效率高且能解决梯度消失问题</span></span><br><span class="line">        <span class="comment"># solver=&#x27;adam&#x27;: 使用Adam优化器，一种自适应学习率的优化算法，适合大多数问题</span></span><br><span class="line">        <span class="comment"># alpha=0.0001: L2正则化参数，用于防止过拟合</span></span><br><span class="line">        <span class="comment"># max_iter=500: 最大迭代次数，增加以确保收敛</span></span><br><span class="line">        <span class="comment"># early_stopping=True: 启用早停机制，在验证集性能不再提升时停止训练</span></span><br><span class="line">        <span class="comment"># validation_fraction=0.1: 用于早停的验证集比例</span></span><br><span class="line">        <span class="comment"># tol=1e-4: 收敛容忍度，增加可以放宽收敛条件</span></span><br><span class="line">        <span class="comment"># random_state=42: 随机种子，确保结果可重现</span></span><br><span class="line">        base_nn = MLPRegressor(</span><br><span class="line">            hidden_layer_sizes=(<span class="number">100</span>,),  <span class="comment"># 一个隐藏层，100个神经元</span></span><br><span class="line">            activation=<span class="string">&#x27;relu&#x27;</span>,          <span class="comment"># ReLU激活函数</span></span><br><span class="line">            solver=<span class="string">&#x27;adam&#x27;</span>,              <span class="comment"># Adam优化器</span></span><br><span class="line">            alpha=<span class="number">0.0001</span>,               <span class="comment"># L2正则化参数</span></span><br><span class="line">            max_iter=<span class="number">500</span>,               <span class="comment"># 增加最大迭代次数</span></span><br><span class="line">            early_stopping=<span class="literal">True</span>,        <span class="comment"># 启用早停机制</span></span><br><span class="line">            validation_fraction=<span class="number">0.1</span>,    <span class="comment"># 用于早停的验证集比例</span></span><br><span class="line">            tol=<span class="number">1e-4</span>,                   <span class="comment"># 收敛容忍度</span></span><br><span class="line">            random_state=<span class="number">42</span>,</span><br><span class="line">            verbose=<span class="literal">True</span>                <span class="comment"># 显示训练进度</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 训练基础模型</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        base_nn.fit(X_train_scaled, y_train)</span><br><span class="line">        base_training_time = time.time() - start_time</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 在验证集上进行预测</span></span><br><span class="line">        y_pred_base = base_nn.predict(X_val_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算评估指标</span></span><br><span class="line">        base_mse = mean_squared_error(y_val, y_pred_base)</span><br><span class="line">        base_rmse = np.sqrt(base_mse)</span><br><span class="line">        base_mae = mean_absolute_error(y_val, y_pred_base)</span><br><span class="line">        base_r2 = r2_score(y_val, y_pred_base)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出基础模型评估结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n基础神经网络模型评估结果:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方误差 (MSE): <span class="subst">&#123;base_mse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;base_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  平均绝对误差 (MAE): <span class="subst">&#123;base_mae:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;base_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  训练时间: <span class="subst">&#123;base_training_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 2. 接下来，通过网格搜索寻找最佳超参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n正在进行神经网络超参数调优...&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;这个过程可能需要一些时间，请耐心等待...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义参数网格</span></span><br><span class="line">        <span class="comment"># hidden_layer_sizes: 隐藏层的结构，例如(50,)表示一个隐藏层有50个神经元，(50, 25)表示两个隐藏层，分别有50和25个神经元</span></span><br><span class="line">        <span class="comment"># activation: 激活函数，常用的有&#x27;relu&#x27;、&#x27;tanh&#x27;和&#x27;logistic&#x27;</span></span><br><span class="line">        <span class="comment"># alpha: L2正则化参数，用于防止过拟合</span></span><br><span class="line">        <span class="comment"># learning_rate_init: 初始学习率，控制权重更新的步长</span></span><br><span class="line">        param_grid = &#123;</span><br><span class="line">            <span class="string">&#x27;hidden_layer_sizes&#x27;</span>: [(<span class="number">50</span>,), (<span class="number">100</span>,), (<span class="number">50</span>, <span class="number">25</span>)],  <span class="comment"># 不同的网络结构</span></span><br><span class="line">            <span class="string">&#x27;activation&#x27;</span>: [<span class="string">&#x27;relu&#x27;</span>, <span class="string">&#x27;tanh&#x27;</span>],                   <span class="comment"># 不同的激活函数</span></span><br><span class="line">            <span class="string">&#x27;alpha&#x27;</span>: [<span class="number">0.0001</span>, <span class="number">0.001</span>, <span class="number">0.01</span>],                   <span class="comment"># 不同的正则化强度</span></span><br><span class="line">            <span class="string">&#x27;learning_rate_init&#x27;</span>: [<span class="number">0.001</span>, <span class="number">0.01</span>]               <span class="comment"># 不同的学习率</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建一个基础模型用于网格搜索</span></span><br><span class="line">        nn_model = MLPRegressor(</span><br><span class="line">            solver=<span class="string">&#x27;adam&#x27;</span>,      <span class="comment"># 使用Adam优化器</span></span><br><span class="line">            max_iter=<span class="number">500</span>,       <span class="comment"># 增加最大迭代次数</span></span><br><span class="line">            early_stopping=<span class="literal">True</span>, <span class="comment"># 启用早停机制</span></span><br><span class="line">            validation_fraction=<span class="number">0.1</span>, <span class="comment"># 用于早停的验证集比例</span></span><br><span class="line">            tol=<span class="number">1e-4</span>,           <span class="comment"># 收敛容忍度</span></span><br><span class="line">            random_state=<span class="number">42</span>,</span><br><span class="line">            verbose=<span class="literal">False</span>       <span class="comment"># 不显示训练进度，因为GridSearchCV会训练多个模型</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用网格搜索寻找最佳参数</span></span><br><span class="line">        <span class="comment"># 注意：这里使用了较少的参数组合以减少计算时间，实际应用中可以尝试更多组合</span></span><br><span class="line">        grid_search = GridSearchCV(</span><br><span class="line">            estimator=nn_model,</span><br><span class="line">            param_grid=param_grid,</span><br><span class="line">            cv=<span class="number">3</span>,               <span class="comment"># 3折交叉验证</span></span><br><span class="line">            scoring=<span class="string">&#x27;neg_mean_squared_error&#x27;</span>,  <span class="comment"># 使用负MSE作为评分标准（越高越好）</span></span><br><span class="line">            n_jobs=-<span class="number">1</span>,          <span class="comment"># 使用所有可用的CPU核心</span></span><br><span class="line">            verbose=<span class="number">2</span>           <span class="comment"># 显示详细信息</span></span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 执行网格搜索</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        grid_search.fit(X_train_scaled, y_train)</span><br><span class="line">        grid_search_time = time.time() - start_time</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 获取最佳参数和模型</span></span><br><span class="line">        best_params = grid_search.best_params_</span><br><span class="line">        best_model = grid_search.best_estimator_</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n网格搜索完成!&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最佳参数: <span class="subst">&#123;best_params&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;网格搜索耗时: <span class="subst">&#123;grid_search_time:<span class="number">.2</span>f&#125;</span>秒&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用最佳模型在验证集上进行预测</span></span><br><span class="line">        y_pred_best = best_model.predict(X_val_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算最佳模型的评估指标</span></span><br><span class="line">        best_mse = mean_squared_error(y_val, y_pred_best)</span><br><span class="line">        best_rmse = np.sqrt(best_mse)</span><br><span class="line">        best_mae = mean_absolute_error(y_val, y_pred_best)</span><br><span class="line">        best_r2 = r2_score(y_val, y_pred_best)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 输出最佳模型评估结果</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n最佳神经网络模型评估结果:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方误差 (MSE): <span class="subst">&#123;best_mse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  均方根误差 (RMSE): <span class="subst">&#123;best_rmse:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  平均绝对误差 (MAE): <span class="subst">&#123;best_mae:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;  R² 分数: <span class="subst">&#123;best_r2:<span class="number">.4</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 3. 可视化基础模型和最佳模型的性能比较</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n正在生成模型性能比较图...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 准备数据</span></span><br><span class="line">        models = [<span class="string">&#x27;Base Neural Network&#x27;</span>, <span class="string">&#x27;Tuned Neural Network&#x27;</span>, <span class="string">&#x27;XGBoost&#x27;</span>]</span><br><span class="line">        mse_values = [base_mse, best_mse, XGBOOST_RMSE**<span class="number">2</span>]  <span class="comment"># 由于有RMSE值，计算MSE = RMSE^2</span></span><br><span class="line">        rmse_values = [base_rmse, best_rmse, XGBOOST_RMSE]</span><br><span class="line">        r2_values = [base_r2, best_r2, XGBOOST_R2]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 计算RMSLE (如果基础模型和最佳模型没有RMSLE，可以简单计算一个近似值)</span></span><br><span class="line">        <span class="comment"># 注意：这只是一个简单近似，实际上RMSLE的计算需要对数转换</span></span><br><span class="line">        base_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + <span class="number">1</span>) - np.log1p(y_pred_base + <span class="number">1</span>), <span class="number">2</span>)))</span><br><span class="line">        best_rmsle = np.sqrt(np.mean(np.power(np.log1p(y_val + <span class="number">1</span>) - np.log1p(y_pred_best + <span class="number">1</span>), <span class="number">2</span>)))</span><br><span class="line">        rmsle_values = [base_rmsle, best_rmsle, XGBOOST_RMSLE]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制MSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, mse_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型MSE比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;MSE Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;MSE (越低越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;MSE (Lower is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_mse_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, rmse_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型RMSE比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSE Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;RMSE (越低越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSE (Lower is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_rmse_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制R²比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, r2_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型R²比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;R² Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;R² (越高越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;R² (Higher is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_r2_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制RMSLE比较图</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">12</span>, <span class="number">6</span>))</span><br><span class="line">        bars = plt.bar(models, rmsle_values, color=[<span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;red&#x27;</span>])</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络与XGBoost模型RMSLE比较&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSLE Comparison: Neural Network vs XGBoost&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;RMSLE (越低越好)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;RMSLE (Lower is better)&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        <span class="comment"># 高亮XGBoost条形</span></span><br><span class="line">        bars[<span class="number">2</span>].set_alpha(<span class="number">0.7</span>)</span><br><span class="line">        add_value_labels(plt.gca())</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;models_rmsle_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 4. 可视化预测结果与实际值的对比</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 随机选择100个样本点进行可视化</span></span><br><span class="line">        sample_indices = np.random.choice(<span class="built_in">len</span>(y_val), <span class="built_in">min</span>(<span class="number">100</span>, <span class="built_in">len</span>(y_val)), replace=<span class="literal">False</span>)</span><br><span class="line">        y_val_sample = y_val.iloc[sample_indices]</span><br><span class="line">        y_pred_sample = y_pred_best[sample_indices]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 绘制散点图</span></span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        plt.scatter(y_val_sample, y_pred_sample, alpha=<span class="number">0.7</span>)</span><br><span class="line">        plt.plot([y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], [y_val_sample.<span class="built_in">min</span>(), y_val_sample.<span class="built_in">max</span>()], <span class="string">&#x27;r--&#x27;</span>)</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络模型预测值与实际值对比&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Neural Network Prediction vs Actual Values&#x27;</span>,</span><br><span class="line">                        xlabel=<span class="string">&#x27;实际卡路里消耗&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Actual Calories&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;预测卡路里消耗&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Predicted Calories&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;neural_network_prediction_comparison.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 5. 可视化残差分布</span></span><br><span class="line">        residuals = y_val - y_pred_best</span><br><span class="line">        </span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        sns.histplot(residuals, kde=<span class="literal">True</span>)</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络模型残差分布&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Neural Network Residual Distribution&#x27;</span>,</span><br><span class="line">                        xlabel=<span class="string">&#x27;残差 (实际值 - 预测值)&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Residual (Actual - Predicted)&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;频率&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Frequency&#x27;</span>)</span><br><span class="line">        plt.axvline(x=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;neural_network_residual_distribution.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 6. 可视化残差与预测值的关系</span></span><br><span class="line">        plt.figure(figsize=(<span class="number">10</span>, <span class="number">6</span>))</span><br><span class="line">        plt.scatter(y_pred_best, residuals, alpha=<span class="number">0.7</span>)</span><br><span class="line">        plt.axhline(y=<span class="number">0</span>, color=<span class="string">&#x27;r&#x27;</span>, linestyle=<span class="string">&#x27;--&#x27;</span>)</span><br><span class="line">        ax = plt.gca()</span><br><span class="line">        use_chinese_font(ax, </span><br><span class="line">                        title=<span class="string">&#x27;神经网络模型残差与预测值的关系&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Neural Network Residuals vs Predicted Values&#x27;</span>,</span><br><span class="line">                        xlabel=<span class="string">&#x27;预测卡路里消耗&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Predicted Calories&#x27;</span>,</span><br><span class="line">                        ylabel=<span class="string">&#x27;残差&#x27;</span> <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE <span class="keyword">else</span> <span class="string">&#x27;Residual&#x27;</span>)</span><br><span class="line">        plt.tight_layout()</span><br><span class="line">        show_figure(plt.gcf(), <span class="string">&#x27;neural_network_residual_vs_prediction.png&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存最佳模型</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&#x27;models&#x27;</span>):</span><br><span class="line">            os.makedirs(<span class="string">&#x27;models&#x27;</span>)</span><br><span class="line">        joblib.dump(best_model, <span class="string">&#x27;models/best_nn_model.pkl&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n最佳神经网络模型已保存到: models/best_nn_model.pkl&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存特征缩放器，用于后续预测</span></span><br><span class="line">        joblib.dump(scaler, <span class="string">&#x27;models/nn_scaler.pkl&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;特征缩放器已保存到: models/nn_scaler.pkl&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> best_model, best_rmse, best_r2, best_rmsle</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;神经网络模型训练和评估过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成提交文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_submission</span>(<span class="params">model, test_data</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    使用训练好的模型生成提交文件</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        model: 训练好的模型</span></span><br><span class="line"><span class="string">        test_data (DataFrame): 测试数据</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;正在生成提交文件...&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 定义可能的测试数据路径</span></span><br><span class="line">        possible_test_paths = [</span><br><span class="line">            <span class="string">&#x27;/kaggle/input/playground-series-s5e5/test.csv&#x27;</span>,  <span class="comment"># Kaggle路径</span></span><br><span class="line">            <span class="string">&#x27;test.csv&#x27;</span>  <span class="comment"># 本地路径</span></span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 尝试读取测试集ID</span></span><br><span class="line">        test_ids = <span class="literal">None</span></span><br><span class="line">        <span class="keyword">for</span> path <span class="keyword">in</span> possible_test_paths:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">                    test_ids = pd.read_csv(path)[<span class="string">&#x27;id&#x27;</span>]</span><br><span class="line">                    <span class="built_in">print</span>(<span class="string">f&quot;成功从 <span class="subst">&#123;path&#125;</span> 读取测试集ID&quot;</span>)</span><br><span class="line">                    <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;尝试从 <span class="subst">&#123;path&#125;</span> 读取测试集ID失败: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> test_ids <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">raise</span> FileNotFoundError(<span class="string">&quot;无法找到测试数据文件，请确保test.csv存在于正确位置&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 加载保存的特征缩放器</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            scaler = joblib.load(<span class="string">&#x27;models/nn_scaler.pkl&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;已加载保存的特征缩放器&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;未找到保存的特征缩放器，将创建新的缩放器&quot;</span>)</span><br><span class="line">            scaler = StandardScaler()</span><br><span class="line">            X_test_scaled = scaler.fit_transform(test_data)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="comment"># 使用加载的scaler转换测试数据</span></span><br><span class="line">            X_test_scaled = scaler.transform(test_data)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 预测</span></span><br><span class="line">        predictions = model.predict(X_test_scaled)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 确保预测值为非负数（卡路里不可能为负）</span></span><br><span class="line">        predictions = np.maximum(predictions, <span class="number">0</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 创建提交文件</span></span><br><span class="line">        submission = pd.DataFrame(&#123;</span><br><span class="line">            <span class="string">&#x27;id&#x27;</span>: test_ids,</span><br><span class="line">            <span class="string">&#x27;Calories&#x27;</span>: predictions</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 保存为CSV文件</span></span><br><span class="line">        submission.to_csv(<span class="string">&#x27;submission_nn.csv&#x27;</span>, index=<span class="literal">False</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;提交文件已生成: submission_nn.csv，包含 <span class="subst">&#123;<span class="built_in">len</span>(submission)&#125;</span> 个预测结果&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 显示预测值的基本统计信息</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\n预测结果统计信息:&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最小值: <span class="subst">&#123;predictions.<span class="built_in">min</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;最大值: <span class="subst">&#123;predictions.<span class="built_in">max</span>():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;平均值: <span class="subst">&#123;predictions.mean():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;中位数: <span class="subst">&#123;np.median(predictions):<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;标准差: <span class="subst">&#123;predictions.std():<span class="number">.2</span>f&#125;</span>&quot;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;生成提交文件过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">raise</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 程序入口</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 直接运行主函数，不进行命令行参数解析</span></span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;开始执行神经网络模型训练，与XGBoost模型性能比较...&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Starting neural network model training and comparison with XGBoost model performance...&quot;</span>)</span><br><span class="line">        main(use_sampling=<span class="literal">False</span>)</span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;程序执行完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Program execution completed!&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">if</span> CHINESE_FONTS_AVAILABLE:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;程序执行过程中出错：<span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Error during program execution: <span class="subst">&#123;e&#125;</span>&quot;</span>) </span><br></pre></td></tr></table></figure><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125435302.png" alt="image-20250521154842937"></p><p>最后还有一个报告：</p><p>太长了我截取一部分：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250528125654490.png" alt="image-20250528125654490"></p><p>说明了什么呢？<br>一、训练过程监控<br>Iteration 9-15<br>loss = 6.75 → 5.65：模型预测误差逐渐减小<br>Validation score: 0.996 → 0.997：模型在验证集上表现稳定优化<br>二、停止训练原因<br>连续10次迭代验证分提升不足0.0001<br>这是防止无效训练的自动保护（类似考试连续10次成绩波动小于1分时终止复习）<br>可能暗示当前模型已达到最佳状态<br>三、性能评估指标<br>指标含义当前值评价标准<br>MSE平均平方误差13.23值越小越好<br>RMSE误差的实际量级3.64可比对真实数据范围<br>MAE平均绝对误差2.16忽略误差方向更直观<br>R²模型解释数据变化的程度0.9966接近1为完美拟合<br>四、实际意义举例<br>假设预测卡路里消耗：</p><p>当真实消耗是 300千卡 时：<br>预测值可能在 300±3.64千卡 范围内（RMSE范围）<br>模型能解释 99.66% 的数据波动（R²接近满分）<br>总结<br>该模型已达到极优性能（R²&gt;0.99）。训练耗时23秒属于高效范畴，适合生产环境部署。</p><h2 id="附录">附录</h2><h3 id="代码说明">代码说明</h3><p>本项目代码分为以下几个部分：</p><ol><li><strong>calories_prediction.py</strong>：主程序，包含数据加载、预处理、探索性分析、建模和评估</li><li><strong>model_optimization.py</strong>：模型优化代码，包含超参数调优和最佳模型选择</li></ol><h3 id="算法流程图">算法流程图</h3><p>决策树流程图</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150503097.png" alt="image-20250515150503097"></p><p>随机森林：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150549532.png" alt="image-20250515150549532"></p><p>XGBoost:</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150627021.png" alt="image-20250515150627021"></p><p>线性回归：</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150722380.png" alt="image-20250515150722380"></p><p>模型比较流程图</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515150818433.png" alt="image-20250515150818433"></p><p>提交后排名</p><p><img src="https://bilibili123.oss-cn-beijing.aliyuncs.com/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B%E8%AE%BE%E8%AE%A1blog.assets/image-20250515123850765.png" alt="image-20250515123850765"></p>]]></content>
    
    
    <summary type="html">预测锻炼期间燃烧卡路里的数据分析与建模</summary>
    
    
    
    <category term="机器学习" scheme="https://yjyrichard.github.io/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
    <category term="机器学习" scheme="https://yjyrichard.github.io/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>神经网络</title>
    <link href="https://yjyrichard.github.io/posts/7ca31f7.html"/>
    <id>https://yjyrichard.github.io/posts/7ca31f7.html</id>
    <published>2025-05-25T16:03:16.485Z</published>
    <updated>2025-05-29T12:19:57.868Z</updated>
    
    <content type="html"><![CDATA[<h2 id="01-从函数到神经网络">01 从函数到神经网络</h2><p>deepseek最近火出圈了<br>不过可能不少人有这样的两难困境:既不想一直看一些几分钟的快餐视频.因为不论看多少,很多问题还是搞不明白,但是又不想花太多时间从头开始学,因为整个AI的知识体系实在是太庞大了。那么我们就好好的了解一下<br>我们直接进入正题吧<br>现在你要做的唯一一件事就是清空大脑<br>忘掉所有你曾经熟悉的或不熟悉的概念<br>然后在你脑海中就只留我们这趟旅行的出发点：函数<br>后面所有一切的前提是你要相信这个世界上的所有逻辑或知识都可以用一个函数来表示<br>“Functions Describe The world~ &quot;<br>那我们只需要将现实世界抽象为符号,再设置好一些运算规则,也就是函数最后算出来结果,反过来解释现实世界就可以了,比如说输入直角三角形的两个边长,根据勾股定理就可以得到斜边的边长,再比如输入物体的质量和加速度<br>根据牛顿第二定律就可以得到物体施加的力,这就是人工智能早期的思路:<strong>符号主义</strong></p><p>但这条路走到头了,很多问题,人类实在是想不出怎么写成一个明确的函数<br>从上帝视角看,就是人类还是太菜了,比如说一个简简单单的识别一张图片是否是猫<br>对人类来说可能简单到爆炸,但是要让计算机运行一段程序来识别,那一下子就变成了一个史诗级难题,就连有着明确语法规则和词典的翻译函数,尚且没有办法做到足够丝滑,那更别说复杂多变的人类智能了,那既然不知道这个函数长什么样,怎么办呢,那就别硬找了,换个思路<br>我们先从一个简单的例子入手,比如我们知道一些X和Y的值(X:1 2 3  Y:2 4 6),我们想找到Y和X的函数关系,你有什么办法呢,有人说,这不就是Y等于2X吗,傻子都能看出来没错,这就是符号主义的思想<br>觉得世间万物都能找到背后明确的规律<br>但假如我们一开始没有找到这个规律,怎么办呢?<br>比如说下面这组数字就不能一眼看出来<br>那就用人类有史以来最具智慧的办法猜<br>我们先把这个XY放到坐标轴上，先随便猜一下，比如说函数关系就是Y等于X<br>也就是这里的W和B分别是一和零，然后我们一点点调整这个W和B<br>使得这条直线越来越贴近真实数据<br>最后呢发现完全吻合了，行就它了<br>但有的时候可能很难找到完全吻合的函数<br>那可怎么办呢?<br>没事那就简化一下问题<br>大差不差,能近似就行了,别要求那么多<br>我们的做法仍然是一点一点调整,W和B看差不多的时候就停下来,这就是现代人工智能的思路:<strong>猜和简化问题</strong><br>说白了实际上就是人类摆烂了,承认自己太菜了,找不到精确的函数了,那就找一个从结果上看大差不差的函数<br>然后连蒙带猜,逐渐逼近真实答案就好了,这种区别于早期人工智能符号主义的新思想叫做<strong>连接主义</strong><br>我们不再追求找到那个精确的函数关系，而是通过简化函数，并试图寻找一个足够接近真实答案的近似解<br>有人说这连蒙带猜的靠谱吗？一看就不是什么正路子。没错！<br>在连接主义成为主流之前<br>很多人工智能的专家也是这么想的<br>但就是这样靠连蒙带猜的办法<br>我们居然可以用很少的参数<br>轻松实现手写数字识别这样的任务<br>正是这种方式在很多地方证明了它的有效性<br>人们才开始重视起来<br>回到正题<br>刚刚我们举的例子都比较简单<br>只用直线方程就可以表示了<br>但假如数据稍稍变化一下<br>就会发现<br>不论怎么调整<br>这里的W和B好像都无法接近真实的数据<br>那这个时候就需要让这条直线弯一弯了<br>那换句话说<br>就是我们需要从原来的线性函数<br>进化到非线性函数了<br>那我们就来研究一下<br>怎么把原来这个原本线性的函数<br>变成非线性的呢<br>很简单<br>在这个函数最外层<br>再套一个非线性的运算就可以了<br>比如平方 比如sin 比如e<br>这就是激活函数<br>它的目的 就是把原本死气沉沉的线性关系给盘活了<br>变成了变化能力更强的非线性关系嗯<br>听到非线性关系的同学<br>千万不要害怕<br>常用的激活函数都简单到爆炸 但是就是能起到很好的效果<br>好了回到这个新的函数形式<br>我们之前仅仅有一个输入的变量<br>就是X<br>但实际上呢可能有很多输入<br>所以这里的每一个X都要对应一个W<br>像这样<br>再者呢有的时候只套一层激活函数<br>还是没有办法达到很好的效果<br>也就是说这个曲线弯的还不够灵活</p><p><img src="https://photo.459122.xyz/i/2591bd1808bb3ddd34a656186a798bd7.png" alt="image-20250521202432295"></p><p>那这要怎么办呢<br>很简单<br>我们把刚刚这一大坨当做一个整体<br>在此基础之上再进行一次线性变换<br>然后再套上一个激活函数<br>这样就可以无限的套娃下去了<br>那通过这样的方式<br>我们就可以构造出非常非常复杂的线性关系<br>而且理论上可以逼近任意的连续函数</p><p><img src="https://photo.459122.xyz/i/b4ad5fa4d1c6200055a05d421e90cb33.png" alt="image-20250521202516116"></p><p>当然了<br>这样写下去实在是太让人头大了<br>普通人看个两层<br>估计脑子就炸了<br>所以我们得换一种更傻瓜的更直观的形式<br>那回到最初的形式<br>我们把这样一个线性变换<br>套一个激活函数化成下面这样</p><p><img src="https://photo.459122.xyz/i/4d558a8b13286567809e0b1b0f3a983a.png" alt="image-20250521202555194"></p><p>左边是输入层<br>只有一个输入X<br>右边是输出层<br>只有一个输出Y<br>我们把这里的每一个小圈圈叫做一个神经元<br>当然这里我不建议你把它跟生物的神经元<br>先类比<br>因为他们两个其实一毛钱关系都没有<br>看似很形象<br>但实际上反而会影响理解<br>总之就是这样<br>两个圈圈一连就表示上面一个函数关系<br>那刚刚我们说输入可能有多个<br>所以对应的变化就是输入层变成了多个<br>像这样<br>我们还说可以继续在外层不断的套线性变换<br>再套激活函数<br>那么每套一层就相当于神经元水平方向<br>又扩展了一个<br>当然扩展之后呢<br>中间这一层就不再是最终的输出了<br>而是包裹在了一个很复杂的函数变换之中<br>看不到<br>我们管它叫做隐藏层<br>而整个这一大坨神经元互相连接<br>形成的网络结构就叫做神经网络</p><p><img src="https://photo.459122.xyz/i/b260dc3ea01c7336b6803e720650d0ea.png" alt="image-20250521202651748"></p><p>接下来我们看一下函数和神经网络的对应关系<br>首先有两个输入变量<br>一个是X1<br>另一个是X2<br>它们构成了输入层<br>然后X1X2进行一次线性变换<br>再进行一次激活函数<br>就得到了隐藏层a<br>这个a对应的就是上面这一大坨表达式<br>那我们把它当做一个整体<br>继续进行一次线性变换和一次激活函数<br>这就计算出了最终的输出层y<br>重新再看一下这个过程<br>从神经网络的这个图来看的话<br>似乎就像是一个信号<br>从左到右传播了过去<br>那这个过程就叫做神经网络的前向传播</p><p><img src="https://photo.459122.xyz/i/e72c2edbe2035287e97f3527205c50ab.png" alt="image-20250521202743469"></p><p>但是实际上呢就是一点点分步骤<br>把一个函数的值计算出来了而已<br>神经网络的每一层神经元都可以无限增加<br>同时呢隐藏层的层数也可以无限增加<br>那进而就可以构成一个<br>非常非常复杂的非线性函数了<br>虽然这个函数可能非常复杂<br>但是我们的目标却非常简单和明确<br>就是根据已知的一组X和Y的值<br>猜出所有这里的W和B都是多少</p><p><img src="https://photo.459122.xyz/i/e4a5dd94bac21e01407203ecfa26e4b8.png" alt="image-20250521202823501"></p><p>当然了<br>我们一开始举的例子非常简单<br>光靠肉眼法就能慢慢猜出答案了<br>但是现在有这么多参数可能就无法凭感觉猜了<br>那这要怎么办呢<br>欲知后事如何<br>且听下回分解</p><p>回顾一下这个内容非常简单<br>我们从一个最开始的信念函数开始讲起<br>早期的人工智能<br>相信可以找到精确的函数来表示一切<br>但因为这个世界实在太复杂了<br>所以人们就放弃了转向寻找一个足够接近真实答案的近似解<br>那我们通过寻找一个线性关系来举例,如何去猜测W和B的值<br>后来发现线性关系太过简单,不足以描述更复杂的关系,于是引入了非线性的激活函数<br>通过线性变换和非线性激活函数的不断组合<br>和套娃可以表达很复杂的关系,但是呢写成函数看太恶心了,所以就化成了神经网络这种形式<br>那恭喜你<br>从函数到神经网络的这条路已经被你搞懂了<br>剩下的所有乱七八糟的知识<br>都仅仅是为了算出这个W和B而已</p><h2 id="02-如何计算神经网络的参数">02 如何计算神经网络的参数</h2><p>我们直接进入今天的主题<br>看看如何计算这个W和B<br>那我们先别搞那么复杂的非线性函<br>先从最简单的一个线性函数入手<br>首先第一个问题就是什么样的W和B是好的？<br>答案其实很简单<br>我们的目标是让这个函数的输出结果尽可能地接近真实数据<br>因此好的W和B就是能够使得函数的尽可能拟和真实数据的那一组参数<br>那接下来第二个问题<br>什么叫拟合得好<br>先别想那么多</p><p><img src="https://photo.459122.xyz/i/812626a99c522fae808f652147eb7a7a.png" alt="image-20250521203531802"></p><p>从直觉上理解这条线就拟合得挺好<br>左边的这个就拟合得不好<br>那第三个问题就自然浮出水面了<br>怎么用数学语言表达<br>刚刚我说的这个直觉上的理解呢<br>很简单<br>我们可以在每个数据点上画一条竖<br>使其与拟合的直线相交<br>由于这里的每个点的纵坐标<br>表示的就是真实数据<br>我们用Y来表示落在直线上的点<br>表示预测数据<br>我们用y hat来表示</p><p><img src="https://photo.459122.xyz/i/31b5289a3eb30bddd10160004a8f9e05.png" alt="image-20250521203624697"></p><p>那么这条线段的长度<br>就是真实值与预测值的误差<br>为了评估整体的拟合效果<br>我们可以将所有这些线段的长度加<br>这样呢就得到了预测数据与真实数之间的总的差异<br>也就可以反映当前这个线性函数与真实数据的拟合度</p><p><img src="https://photo.459122.xyz/i/2e830b0c074b9a19f038d9f2091b1434.png" alt="image-20250521203704257"></p><p>而这个表示预测数据与真实数据误<br>我们叫它损失函数<br>我们着重看一下这个公式<br>这个绝对值有些讨厌<br>数学优化时不太友好<br>我们做数学题时<br>往往最讨厌碰到这种带绝对值的问<br>要各种分类讨论啊<br>想想就头疼<br>所以我们改造下<br>用平方来代替<br>一来呢解决了绝对值不平滑的问题<br>二来呢也放大了误差较大的值的影<br>然后我们再根据样本的数量平均一下<br>消除样本数量大小的影响<br>那最终得到这个公式就叫做均方误差</p><p><img src="https://photo.459122.xyz/i/dee5f4ea2a4986b563822638db9f57a3.png" alt="image-20250521203752879"></p><p>而均方误差就是用来表示损失函数一种<br>我们把损失函数记作L那从参数的视<br>它就是一个关于W和B的一个函数</p><p><img src="./%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E3%80%90%E7%A7%91%E6%99%AE%E5%90%91%E3%80%91.assets/image-20250521203819061.png" alt="image-20250521203819061"></p><p>好先不要过于陷入这个公式的细节<br>那还记得我们要干啥</p><p><img src="https://photo.459122.xyz/i/df55c72c143d616a4ec047a1629e4de4.png" alt="image-20250521203853848"></p><p>损失函数表示的是真实值与预测差距<br>而我们的目的呢就是让这个误差最小的w和b<br>也就是找到可以让这个损失函数L最小<br>那个W和B那怎么求解呢<br>自然就是用我们初中就学过的<br>让其导数等于零求极值点的过程<br>我们先不上公式<br>通过一个具体的例子来说<br>假设我们就四个样本数据<br>就是简简单单的11223344这样<br>然后我们的线性模型也简单点<br>把B去掉<br>只保留一个W<br>其实呢就是一个简单的经过原点的一条直线Y等于WX这个时候我们展开一下损失函数<br>把y heat值代入进来<br>把求和符号展开<br>然后再把上面这组XY的数据带进来<br>平方展开再化简好<br>那化简之后我们就可以清晰的看到<br>这就是一个简简单单的关于W的一个<br>接下来对W求导<br>再让其导数等于零<br>就可以求出W等于一了</p><p><img src="./%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E3%80%90%E7%A7%91%E6%99%AE%E5%90%91%E3%80%91.assets/image-20250521204022426.png" alt="image-20250521204022426"></p><p>代入回原直线函数<br>此时Y等于X就是让损失函数最小<br>也就是最拟合真实数据的那条直线</p><p>回过头再来看一下这个损失函数<br>它实际上呢是一条开口向上的抛物<br>刚刚其实就在寻找这个最低点<br>采用的办法就是让导数等于零<br>不过我们此时的模型是简单的线性函数<br>而且只保留了W而忽略了B<br>而如果此时把B算进来<br>那就需要求关于W和B两个变量的<br>损失函数的最小值了<br>这个时候损失函数的图像就是一个三维图像是一个开口向上的这个碗状形状</p><p><img src="https://photo.459122.xyz/i/e791c7d75a305bc04965139af2642931.png" alt="image-20250521204113092"></p><p>我们的目标同样也是找到这个二元函数最小值<br>所对应的那个W和B<br>而多元函数求最小值的问题就不再是倒数了<br>而是要让每个参数的偏导数等于零<br>偏导数在这里就不展开了<br>不过可能不少人学偏导数的时候都<br>其实很简单<br>对W求偏导<br>就是把B当作常数和一元函数求导就<br>在三维图像中就是这样<br>相当于只看到这个切面上的二维函<br>同样对于B也是如此。<br>那么刚刚这个通过寻找一个线性函<br>来拟和X和Y的关系<br>就是机器学习中最基本的一种分析方法：<strong>线性回归</strong><br>回到之前讲的神经网络<br>神经网络是一个通过线性函数和非线性激活函数不断组合形成的一个非常复杂的非线性函数<br>那么它对应的损失函数则是更复杂的非线性函数<br>往往呢不能像刚刚那样通过让导数等于零直接求出最小值<br>那怎么办呢？<br>人们的解决办法也非常的简单粗暴<br>就是一点点试<br>具体怎么试呢？<br>假如此时W和B的值均为五<br>损失函数计算结果是十<br>我们来看一下<br>尝试把W增加一个单位变成六<br>再次计算损失函数<br>发现结果是九<br>那就说明W的这次调整是对的<br>让损失函数变小了<br>再尝试把B增加一变成六<br>发现损失函数增加了二<br>变成了11<br>说明B的增大会让误差变大<br>那我们就反过来把B往小的调整<br>让损失函数继续变小<br>那如此循环往复不断调整就可以了<br>总之我们每次都看下当前状况<br>调整W或B对损失函数的影响<br>然后每次呢把参数向着让损失函数</p><p><img src="https://photo.459122.xyz/i/0873e5a9500bf7c4f1084b7eb6d2787c.png" alt="image-20250521204322611"></p><p>那个方向调整一点点<br>直到让损失函数足够小，那具体怎么调？</p><p>回到最初始的状态<br>W变化一点点，使得损失函数会变化多少？<br>这其实就是损失函数对W的偏导数<br>对B来说同样也是如此<br>而我们要做的就是<br>让W和B不断往偏导数的反方向去变<br>那具体变化的快慢呢<br>再增加一个系数来控制<br>我们叫它学习率</p><p><img src="https://photo.459122.xyz/i/f25c33cbf0aba3f8acc8a4aaeab96541.png" alt="image-20250521204416292"></p><p>这些偏导数所构成的向量就叫做梯度</p><p><img src="https://photo.459122.xyz/i/05bfff2a58aeabff84e6e08442ed5e1c.png" alt="image-20250521204500187"></p><p>而不断变化W和B让损失函数逐渐减小的一个过程，进而求出最终的W和B，这个过程就叫做梯度下降<br>嗯不少材料在介绍梯度下降时<br>可能经常会用到人们下山这个过程<br>但我倒是觉得直接看公式也挺直观<br>没必要好了<br>这个公式很好理解<br>但是关键就在于这个偏导数该怎么求？<br>在之前的线性回归问题中<br>偏导数就是一个一元二次函数<br>求导非常简单<br>但是在神经网络中<br>函数本身就是一个复杂到变态的非线性函数<br>那更别说损失函数了<br>直接求导可能就不太好求了<br>那怎么办呢<br>其实也很简单<br>虽然神经网络整体所代表的函数很复杂<br>但是层与层之间的关系却是非常简单<br>我们就用上面这个麻雀虽小<br>但五脏俱全的一个简单的神经网络来举例子<br>只有一个输入和一个输出<br>而且中间的隐藏层也只有一个神经元<br>首先我们根据输入X的值计算出隐藏层a的值<br>这里的G就是随便一个激活函数<br>比如说sigma的无所谓<br>然后呢再根据A的值计算出输出层y hat<br>然后再根据y hat的值以及真实值Y计算出损失函数<br>那这里损失函数就用均方误差了<br>而且由于只有一个输出数据<br>所以说我把求和符号也省去了<br>这个神经网络结构中一共有四个参<br>要通过梯度下降的方式逐渐求解<br>那之前也说了<br>关键问题就是求出L对他们的偏导数<br>那我们直接拿最难的w1来举例<br>如何求出L对W的偏导数呢<br>其实很简单<br>从偏导数要表达的意思出发一下就能想明白<br>其实我们就想看w1变化一点点<br>会使得L变化多少了<br>那我们就先看W1变化<br>一个单位会使得A变化多少<br>再看看a变化一个单位会使得y head<br>然后再看y hat的变化<br>一个单位会使L变化多少<br>每一个都是一个简单的偏导数<br>那把这三者乘起来<br>就知道W变化一个单位会使得L变化多少了</p><p><img src="https://photo.459122.xyz/i/066be2071a653e646e97431e57108646.png" alt="image-20250521204746002"></p><p>如果实在想不明白的话<br>可以联想一下齿轮怎么计算</p><p><img src="https://photo.459122.xyz/i/53efd157167bf7998edb304d4ed889c9.png" alt="image-20250521204830024"></p><p>第一个转一圈会使得最后一个齿轮<br>其实就是乘起来吧<br>那这种偏导数的计算方式就叫做链式法则<br>其实就是微积分中的复合函数求导<br>由于我们可以从右向左依次求导<br>然后逐步更新每一层的参数<br>直到把所有的神经网络的参数都更新一次<br>在计算前一层时用到的一些偏导数<br>后面也会用到<br>所以说不用计算那么多<br>而是让这些值从右向左一点点传播<br>我们把这样一个过程形象地称之为<strong>反向传播</strong><br>那结合之前的知识<br>我们通过前向传播<br>根据输入X计算出输出Y<br>然后再通过反向传播计算出损失函树<br>关于每个参数的梯度</p><p><img src="https://photo.459122.xyz/i/de8a083980b8a229087678bca97fecf0.png" alt="image-20250521204925053"></p><p>然后每个参数都向着梯度的反方向<br>这就构成了神经网络的一次训练<br>而神经网络经过多轮这样的训练<br>里面的参数都一点一点的变化<br>直到让损失函数足够小</p><p><img src="https://photo.459122.xyz/i/febf9188f23760a3962fedf5a5cda9c6.png" alt="image-20250521204944396"></p><p>也就是找到了我们想要的那个函数<br>虽然听起来很简单<br>但是面对真实问题时<br>往往却存在着各种各样的难题<br>具体会遇到什么样的难题<br>又该采取什么样的办法去解决呢<br>欲知后事如何<br>且听下回分解<br>回顾一下：<br>为了找到一组W和B来拟合真实数据<br>我们定义了损失函数<br>并且通过制定让损失函数最小化这<br>来计算W和B的值<br>接下来我们通过简单的线性回归问题<br>可以直接让损失函数的导数等于零<br>一步就求到W和B<br>但神经网络的复杂性<br>让我们没有办法直接得到W和B的解<br>只能通过一点点往偏导数的反方向<br>调整每个参数来慢慢逼近真实答案<br>这个方法就叫做梯度下降<br>而由于神经网络的层数较多<br>直接求偏导数非常困难<br>因此可以逐层求导<br>间接得到最终的偏导数<br>这就是链式法则<br>而通过链式法则求导并逐层更新参<br>这个过程就叫做反向传播<br>那不断的前向传播，反向传播，这就构成了神经网络的训练过程</p><h2 id="03-调教神经网络怎么就这么难呢？">03 调教神经网络怎么就这么难呢？</h2><p>我们知道神经网络的本质就是线性变换套上一个激活函数不断组合而成的一个非常复杂的非线性函数，并且巧妙地通过梯度下降一点一点地计算出神经网络中一组合适的参数，那这样看起来其实不是神经网络只有足够大，什么问题都能解决了？</p><p><img src="https://photo.459122.xyz/i/91e559774a4b634c08277ca28d4ac16a.png" alt="image-20250521205132364"></p><p>理论上是这样。</p><p>这一幅图你觉得那边拟合的好呢?</p><p><img src="https://photo.459122.xyz/i/1f0f11b4aab13e4f4539818886aa4a13.png" alt="image-20250521205418285"></p><p>如果从损失值最小来看，右边的好，但是根据直觉来看右边这个好像好的有点太过了。结果可能是只适合训练数据，对于新数据的预测反而不如左边的准</p><p><img src="https://photo.459122.xyz/i/1afada9fb751cc38cd4f8e43a1f6ce2c.png" alt="image-20250521205559524"></p><p>这种在训练数据上表现得很完美但是在测试数据上表现得很糟糕的现象我们叫它过拟合。而在没见过的数据上的表现能力我们叫它泛化能力。那为什么会过拟合呢？是因为训练数据本身是一个很简单的规律，但是模型太复杂了，把那些噪声和随机波动也给学会了，这该怎么办？自然就是简化一下模型的复杂度了，比如这个案例中你使用一个非常复杂的神经网络来训练效果甚至不如线性模型好，还可以增大数据量，这样模型也会变得相对简单了，但是有的时候我们确实无法手机或者说懒得收集更多的数据，怎么办？那就在原有的数据中创造更多的数据，比如在图像处理中，我们可以对图像进行旋转，翻转，裁剪，加噪声等操作</p><p><img src="https://photo.459122.xyz/i/968762c875ba281d9b9379f91bade928.png" alt="image-20250521210101561"></p><p>创造出更多的新的训练样本，这就叫做数据增强。</p><p>这样不仅仅能够产生更多的数据还刚好训练了一个让模型不因为输入的一点点小的变化而对结果产生很大的波动，这就是增强了模型的鲁棒性（Robostness）.</p><p>刚刚是从数据和模型的本身入手来防止过拟合。那有没有可能从训练过程入手组阻止过拟合的发生呢？</p><p>其实训练过程就是不断调整参数的过程，只要让参数不要过分的朝着过拟合的方向发展就可以了。</p><p><img src="https://photo.459122.xyz/i/8adc4dc6a032084207201454761b3b5f.png" alt="image-20250521210351147"></p><p>有一个简单到你都不相信的方法就是提前终止训练过程，差不多就行了，但是这种方法还是太粗糙了。那有没有什么方法可以直接抑制参数的野蛮增长呢？非常简单，你想想参数是怎么被训练出来的，是不是通过让参数往损失函数变小的方向不断调整，也就是梯度下降，那我们可以在损失函数中把参数本身的值加上去，这样在参数往调大了调时，如果让损失函数减小的没有那么多，导致新的损失函数反而是变大了，那么此时的调整就是不合适的，因此一定程度上一直了参数的野蛮生长</p><p><img src="https://photo.459122.xyz/i/dde4cf57892788f7bb15be7c7d3f3181.png" alt="image-20250521210757072"></p><p>除了可以用参数的绝对值之和之外，我们还可以用参数的平方和，这样参数大的时候抑制能力就更强了</p><p>我们把这一项叫做惩罚项，把通过这种向损失函数中添加权重惩罚项，抑制其野蛮增长的方法叫做正则化</p><p>上面绝对值相加的叫L1正则化，下面平方和相加的叫L2正则化</p><p>然后和之前梯度下降时增加学习率控制下降力度一样我们也增加一个参数来控制惩罚项的力度，我们叫它正则化系数，而这些控制参数的参数，我们以后统称为超参数</p><p>那为什么简简单单的公式叫什么L1正则化，L2正则化呢？因为绝对值之和叫做L1范数，而平方和的平方根叫做L2范数，这是向量空间中范数的概念</p><p><img src="https://photo.459122.xyz/i/4a91e7f2a427103a15a541d48e378f76.png" alt="image-20250521211051814"></p><p>总之这些参数都只是为了抑制参数的野蛮增长罢了</p><p>除了这种方式以外还有一种简单到发指但是就是效果显著的方法</p><p>想想看，我们的目的时为了防止让模型过于依赖某几个参数</p><p>举个形象的例子，加入神经网络的参数是一支军队，里面有好多普通士兵，但是其中混入了一支战斗力极强的战士</p><p>如果每次训练都有战士主导战局，那么你会误认为这整体战斗力很强，一旦遇到特殊情况那就会败北，这就是过度依赖少量参数的典型表现，那怎么办呢？我们可以在训练的过程中每次都随机丢弃一部分参数让战士偶尔缺席，这样模型就必须习惯去依赖大部分士兵从而避免了在某些关键参数上过度依赖的风险，虽然听起来玄学但是确实十分有效，这种方法叫dropout,这个方法是大名鼎鼎的神经学之父辛顿提出的。</p><p>除此之外模型还会遇到其他问题比如梯度小时，也就是网络越深，梯度反向传播时会越来越小导致参数更新困难，梯度爆炸，梯度数值越来越大，参数的调整幅度失去了控制。收敛速度过慢，可能陷入局部最优或者来回震荡，计算开销过大，数据规模量太庞大了，每次完整的前向传播和反向传播都非常耗时。每个问题，人们都想了各种办法来解决。比如用梯度裁剪来解决梯度的更新过大，用合理的网络结构比如残差网络来防止深层网络的梯度衰减，用合理的权重初始化和将输入数据归一化让梯度分布更平滑，用动量法，RMSprompt,Adam等自适应优化器来加速收敛，减少震荡，用mini-batch把巨量的训练数据分割成几个小批次来降低单次的计算开销，这里的每个概念展开都是一个全新的世界</p><p><img src="https://photo.459122.xyz/i/de8d52fbe515983381de48df5c4414d6.png" alt="image-20250521221946107"></p><p>但是它们都是为了让训练过程更好罢了</p><p><img src="https://photo.459122.xyz/i/7eb4772f2dbf405670651c1591aa4d56.png" alt="image-20250521223926584"></p><h2 id="04-神经网络中永远也搞不明白的矩阵和CNN">04 神经网络中永远也搞不明白的矩阵和CNN</h2><p>我们直接进入主题<br>一个最简单的神经网络，就是Y等于WX加B套上一个激活函数<br>那如果输入变成了两个，那么就是两个W和两个X<br>如果输入变成了三个，那么就是三个W和三个X<br>以此类推</p><p><img src="https://photo.459122.xyz/i/1efe063a04a45f05abace4262afb9110.png" alt="image-20250525231901089"></p><p>我就不写了<br>那如果输出变成两个<br>再来一行公式就可以了<br>那这里的W的标号保证不一样<br>能区分开就行</p><p><img src="https://photo.459122.xyz/i/eafecd482f4f811785444ab0c25ab9fd.png" alt="image-20250525231930237"></p><p>比如说这个W12<br>就表示第一个神经元的第二个参数<br>好你发现一个问题没有<br>就是这样写下去的话<br>太麻烦了<br>要是神经元多了的话，公式密密麻麻的，没有数学的简洁之美<br>那这怎么办呢？<br>别急<br>现在我们的注意力放在这个公式上<br>注意看啊，我要变形了<br><img src="https://photo.459122.xyz/i/c068ef9b34518adf8c6ca9e7f34fdde1.png" alt="image-20250525232007741"></p><p>其实就是把加减乘除替换成了矩阵运算的写法<br>这里先忽略一下激活函数哈<br>重点看中间这个矩阵的乘法<br>矩阵乘法很简单<br>我们错个位<br>就是这一行W的元素<br>分别和X这一列的元素相乘<br>并求和<br>得到的结果呢放到这里<br>那同样对于第二行也是如此</p><p>回到刚刚<br>我们现在把这些矩阵都替换成新的字母<br>这里我们用大写的Y表示<br>这里用大写的W表示<br>这里用大写的X表示<br>这里用小写的B来表示</p><p><img src="https://photo.459122.xyz/i/c96b16970572eea06f6e0617e5fc4c40.png" alt="image-20250525232057332"></p><p>那么整个公式就化简成了这个样子</p><p><img src="https://photo.459122.xyz/i/12456247d70ef52fac547b1b41ce3725.png" alt="image-20250525232108728"></p><p>不过现在还有个问题<br>就是神经元的层并没有体现在公式中<br>那假如神经元再多几层怎么办呢？<br>那我们此时抽象一下<br>也别分什么XY和隐藏层了<br>就通通用字母a来表示<br>那输入层就当做第零层<br>用A中括号零来表示<br>以此类推</p><p>那么第一层的公式就是这样<br>第二层的公式就是这样<br>第三层的公式就是这样</p><p><img src="https://photo.459122.xyz/i/238a079d3c1e56019b35ce4afc03d634.png" alt="image-20250525232138692"></p><p>我们用L表示在第几层<br>那么最终的通用公式就是这个样子</p><p><img src="https://photo.459122.xyz/i/6bcbe942a3153b2283bdb33cae9352ab.png" alt="image-20250525232157117"></p><p>每一层的神经元的值都是上一层的函数<br>那我们费了这么大劲<br>简化这个公式有啥用呢<br>一方面是公式简单了<br>也更抽象了,有利于我们进一步讨论更深的问题,另一方面是麻烦的加减乘除替换成了矩阵运算<br>可以充分利用GPU的并行计算的特性,加速神经网络的训练和推理过程,这就不仅仅是秀写法上的一个操作了<br>那回到这个公式和神经网络结构,可以看到这里的每个神经元<br>都与前一层的所有神经元相连,当然我们一直认为这是理所应当的<br>但它其实只是神经网络结构中的一种叫做全连接层</p><p><img src="https://photo.459122.xyz/i/58269cd4e857a66f36a58b96774f33c1.png" alt="image-20250525232307356"></p><p>也就是说还有其他不是全连接的结构吗?<br>别急<br>我们先来看一下全连接层的问题<br>假如我们现在要做个图像识别的模型<br>假如输入是个30×30的灰度图像<br>那么平铺展开后<br>喂给输入层的就是900个神经元<br>假如下一层的神经元的数量是1000个<br>那么这个全连接层的总参数量就达到了90万</p><p><img src="https://photo.459122.xyz/i/6fb023fc608ce1092d29a3f081b1e934.png" alt="image-20250525232333495"></p><p>这太大了<br>另外呢这里仅仅是把输入的图片平铺展开<br>无法保留像素之间的空间关系<br>图片稍稍动一下<br>可能所有神经元都和原来完全不同<br>但从图片整体上看<br>可能仅仅是平移或者变暗<br>这就是不能很好地理解图像的局部模式<br>那怎么办呢?<br>我们随便在这个图像中取一个3×3的矩阵<br>这里面的数值就是颜色的灰度值<br>然后我们再来一个固定的矩阵<br>比如这样把这两个矩阵进行这样的一个运算<br>46×0加上75×-1<br>加上82×0<br>也就是把每个对应位置处的值相乘并求和</p><p><img src="https://photo.459122.xyz/i/38b4bde711496706697aa2aee85d21d3.png" alt="image-20250525232424806"></p><p>最终得到一个值是250<br>然后我们再选取一个地方再次进行这样的运算<br>最终我们把这种运算方式遍历划过原图像的每个地方<br>得出的数值形成一个新的图像</p><p><img src="https://photo.459122.xyz/i/37a3574870f5220b48db80a7262eae4b.png" alt="image-20250525232443112"></p><p>那这种方式叫做卷积运算</p><p><img src="https://photo.459122.xyz/i/6873a4912b1d526ac57e2ed0021c5482.png" alt="image-20250525232513024"></p><p>而刚刚我们这个固定的矩阵叫做卷积核<br>卷积核不是一个新的概念<br>在传统的图像处理领域<br>卷积核是已知的<br>可以达到一定的图像处理效果<br>比如模糊效果<br>浮雕效果<br>轮廓效果以及刚刚的锐化效果等等<br>就是PS的常规操作嘛<br>那在深度学习领域<br>卷积核的值就是未知的<br>和神经网络中的其他参数一样<br>是被训练出来的一组值<br>那回到刚刚的经典神经网络结构<br>其实就是把其中一个全连接层替换成了卷积层<br>这就大大的减少了权重参数的数量<br>同时还能更有效地捕捉到<br>图片中的一些局部特征<br>可谓是一举两得<br>而从公式上看</p><p><img src="https://photo.459122.xyz/i/b65e817439d1f23265554798ce6f20dd.png" alt="image-20250525232602503"></p><p>其实就是把原来的矩阵的标准乘法及差乘替换成了卷积运算<br>那接下来我们的神经网络<br>就不用再画成一个一个的小圈了<br>而用更抽象更简洁的图来表示<br>像这样在图像识别的神经网络结构中<br>除了卷积层外<br>通常还有池化层作用<br>是对卷积层后的特征图像进行降维减少计算量同时呢保留主要特征<br>这里的卷积层,池化层,全连接层都可以有多个<br>而这种适用于图像识别领域的神经网络结构</p><p><img src="https://photo.459122.xyz/i/cd0d2a1a307e08cb805499aec7251c5c.png" alt="image-20250525232649478"></p><p>就叫做卷积神经网络CNN<br>之前我们展示的手写数字识别的CNN可视化<br>就是这样的网络结构,最开始是一个输入层<br>我们写了一个数字六,然后是卷积层,池化层,再卷积层,再池化层<br>然后第一个全连接层<br>第二个全连接层<br>最终输出识别出是六</p><p><img src="https://photo.459122.xyz/i/46419b50fcc116cf171b8b464eab24bb.png" alt="image-20250525232726717"></p><p>而使用卷积神经网络非常方便可视化<br>我们可以看到训练过程中所训练出的卷积核<br>从原始图像中提取了什么样的特征<br>虽然这些都是中间隐藏层的事情<br>但是却能神奇地观察出一些实际意义<br>这也是卷积神经网络让人着迷的地方<br>好我们来回顾一下今天讲的内容<br>非常简单<br>我们把之前一个一个加减乘除很麻烦的写法<br>写成了矩阵的形式<br>一是为了方便讨论<br>比如刚刚介绍CNN的时候<br>就从公式直接看出<br>就是差乘变成了卷积运算而已<br>二是可以更好的利用GPU的并行计算提高效率<br>那接下来我们把之前默认的那种<br>所有神经元都连起来的形式叫做全连接<br>进而呢通过图像识别这个任务<br>意识到了全世界的局限性<br>接下来我们通过卷积运算<br>代替了全连接层的标准矩阵乘法<br>一方面使得训练参数大大的减少<br>另外一方面也更有利于提取图像的局部特征<br>这就解决了我们一开始说的问题<br>最后我们把神经网络结构再次抽象一个层次<br>原来我们画的各种小圈圈<br>在更高的视角下<br>其实就是个全连接层而已<br>那么这些全连接层,卷积层,池化层的组合就构成了卷积神经网络CNN<br>当然卷积神经网络CNN也只是神经网络结构中的一种<br>而且呢它有一个致命的局限性就是它主要用于静态数据比如说图片<br>那么如果我们要处理的是时间序列,文本,语音视频等动态数据<br>就需要引入另外一种神经网络结构了,它可以说是现在我们大语言模型的鼻祖了<br>好我们用了四个视频的内容<br>终于把前面所需要铺垫的知识<br>从头到尾给推出来了<br>那下个视频开始<br>我们就可以坐着我们这几个视频搭载的火箭<br>冲刺到现代AI技术的最前沿<br>请大家做好战斗准备</p><h2 id="05-语言居然可以被计算出来？从-RNN-到-Transformer">05 语言居然可以被计算出来？从 RNN 到 Transformer</h2><p>给你几个字<br>让你生成下一个字<br>给你一句话<br>让你判断每个词的褒贬<br>如果把这些设计成一个神经网络的函数<br>来实现这个功能<br>你该怎么做呢？先别急<br>要想把这些文字作为输入参数<br>首先得把这些文字变成计算机能够识别的数字<br>这个过程就叫做编码<br>那具体怎么编码呢<br>有两种极端的方式<br>一种是只用一个数字标识来代表每个词<br>比如1代表我<br>2代表你3568代表地球等等<br>你的词表有多大<br>数字标识的范围就要有多大<br>这样的缺点非常明显<br>就是维度太低了<br>相当于一个一维的向量<br>而且数字标识本身对语言理解没有任何意义<br>无法灵活地衡量词和词之间的相关性<br>那另一种极端的方式是<br>准备一个超级超级大的向量<br>每个词只有向量中一个位置是1<br>剩下的都是零</p><p><img src="https://photo.459122.xyz/i/8345cb6afedbd2d5f8300996afb0abcb.png" alt="image-20250525233554105"></p><p>这种编码方式叫做one hot<br>翻译过来叫独热编码<br>one hot的缺点也非常明显<br>就是维度太高了<br>而且非常稀疏<br>假如此表中有10万个词<br>那么这就是一个10万维度的向量<br>而且每个向量之间都是正交的<br>所以词和词之间仍然无法找到相关性<br>那如果把向量中每个位置都看作一个特征的话<br>这里就相当于每个特征都是非常死板的<br>是或者否维度太高不好<br>维度太低也不好<br>那简单了<br>弄一个不高不低的就好喽<br>这种方式就叫做词嵌入 word embedding<br>通过磁嵌入的方式所得到的磁向量<br>维度不高也不低<br>每个位置数依然可以理解为某一个特征<br>只不过这是训练出来的<br>不是我们人定的</p><p><img src="https://photo.459122.xyz/i/1203e73a5c262a3f99d645e4bf1b1055.png" alt="image-20250525233700713"></p><p>所以特征是什么<br>可能我们人类完全无法理解<br>那为什么这种方式可以表示词和词之间<br>语义上的相关性呢?<br>我们可以用两个向量的点击或余弦相似度<br>来表示向量之间的相关性<br>进而表示两个词语之间的相关性</p><p><img src="https://photo.459122.xyz/i/1bf3194df3b5895cd42f29d40af0f7a6.png" alt="image-20250525233725719"></p><p>这就将自然语言之间的联系<br>转化为了可以用数学公式计算出来的方式很关键<br>同时一些数学上的计算结果<br>也能反映出一些现实中很神奇的解释<br>比如一个训练好的词嵌入矩阵<br>可能会使得桌子减去椅子等于鼠标减去键盘</p><p><img src="https://photo.459122.xyz/i/67660d7c3638b925ae9b631cc4688efa.png" alt="image-20250525233806254"></p><p>你可以暂停下来<br>体会一下这里面蕴含的有趣的深意<br>把所有词向量组成了一个大矩阵<br>这个大的矩阵就叫做嵌入矩阵<br>这里的每一列就表示一个词向量<br>像刚刚说的这个矩阵<br>不是我们人类手动给每个词赋值而形成的<br>是通过深度学习的方法训练出来的<br>比如比较经典的方式就是word2back<br>这里就不展开讲解了<br>你就当做已经有了一个这样的嵌入矩阵<br>每一个可能的词语<br>都可以从这里找到对应的词向量<br>这些词向量的维度非常高<br>所以它所在的空间的维度也非常高<br>这个空间就叫做潜空间<br>我们人类对二维空间很好理解<br>最多到三维空间也还行<br>再往上就想象不出来了<br>那么这些词在高维前空间中的相对位置关系<br>虽然可以通过点击或余弦相似度算出来<br>但最好有一种直观的方式<br>能让我们亲眼可视化的看到<br>哪怕不那么准确也行<br>于是便有了一些方法将这个潜空间降维<br>投影到二维或三维的坐标系中</p><p><img src="https://photo.459122.xyz/i/594e48da793c229b6a8c568994ff9920.png" alt="image-20250525233937998"></p><p>来直观的可视化不同词语之间的距离<br>还是非常有趣的</p><p><img src="https://photo.459122.xyz/i/cf1b2e5ac33f1cfae5ee9f86b01eebdb.png" alt="image-20250525233957662"></p><p>好了<br>有关词嵌入和嵌入矩阵<br>我们就先聊到这里<br>这时每个词都可以编码成向量<br>然后送到神经网络输入端的神经元中了</p><p><img src="https://photo.459122.xyz/i/a72b71c4adbf6dbb91845526d08a45c2.png" alt="image-20250525234017983"></p><p>我们再来看看最初的需求：输入一句话输出每个单词的褒贬性</p><p><img src="https://photo.459122.xyz/i/37b2d7ff2ddd37ab18b30a02720f8d58.png" alt="image-20250525234033257"></p><p>这里有12345  5个词<br>通过词嵌入<br>把每个词变成一个300维的磁向量<br>那么输入端就要一共有1500个神经元</p><p><img src="https://photo.459122.xyz/i/9e0b1c78876ee27669f7f94c85f95f02.png" alt="image-20250525234106849"></p><p>这样行不行呢<br>当然可以<br>但是有两个问题<br>一个是输入层太大了<br>而且会随着一句话中词语数量多少而变化<br>是变长的，不确定的<br>另一个是无法体现词语的先后顺序<br>仅仅是把它们非常生硬的平铺展开成了一个非常大的向量，一股脑地送入了输入层<br>这就好比我们之前说的图像识别领域<br>把一张图片的所有像素点展开成一个大向量<br>一股脑地送入输入层<br>一个道理<br>这样既增加了神经元的个数<br>又不能很好地抽象出特征和关联<br>有点费力不讨好<br>那在CNN中<br>我们是通过卷积操作提取了图像的特征<br>那么在自然语言处理领域<br>我们可以通过什么办法？<br>既能解决词语之间的先后顺序问题<br>又能降低输入层的参数量呢？<br>首先我们还是用经典的神经网络<br>但不要输入一句话<br>而是输入一个词<br>输出就是这个词是褒义还是贬义<br>当然这里的字母都表示矩阵就不再赘述了<br>这时假设第二个词来了<br>也是经过一样的神经网络，很简单<br>那此时我们用尖括号表示是第几个词<br>这样就有了顺序关系<br>那现在的问题是<br>第二个词的计算过程<br>完全没有让第一个词的任何信息参与进来<br>那这该怎么办呢</p><p><img src="https://photo.459122.xyz/i/6ac79c6a1dc41584acf94178d83637fc.png" alt="image-20250525234241853"></p><p>答案已经写在脸上了<br>那就让他参与进来就好喽<br>那可以这样<br>我们让第一个词经过非线性变换后<br>别急着直接输出<br>结果先输出到一个隐藏状态H1<br>然后再经过一次非线性变换得到输出Y1<br>接下来这个隐藏状态H1的值和第二个词X2<br>一起参与运算<br>那同理对第二个词的流程也是一样<br>先输出一个隐藏状态H2<br>然后继续往下传递<br>那这样的话呢<br>前面的词的信息就这样不断的往下传递</p><p><img src="https://photo.459122.xyz/i/0c57e9eda103fd024b4f3dadcf245a62.png" alt="image-20250525234322191"></p><p>直到传到最后一句话的最后一个词那里<br>这样就把一句话中<br>所有的词的信息都囊括进来了<br>当然这里的W就要有所区分了</p><p><img src="https://photo.459122.xyz/i/18ce7b083ecc01d4492d9f90b0c64204.png" alt="image-20250525234355487"></p><p>有专门针对磁向量的WXH矩阵<br>有专门针对隐藏状态的WHH矩阵<br>以及最终计算输出结果的WHY矩阵<br>那同样对于偏执向B也是如此<br>把这个图简化一下<br>那这就是循环神经网络RNN</p><p><img src="https://photo.459122.xyz/i/6dc595a7e4d8a35ad8b5db41a3b3b8f2.png" alt="image-20250525234409069"></p><p>当然了<br>还会有个图这样画<br>那这个RN模型就具备了理解词和词之间<br>先后顺序的能力<br>那这样就可以解决<br>判断一句话中各个单词的褒贬词性<br>给出一句话<br>不断生成下一个字<br>以及翻译等多种自然语言处理的工作了<br>那如果你还有些懵的话<br>我们再把矩阵展开来看看<br>首先第一个词X1和权重矩阵WXH相乘<br>得到第一个词的隐藏状态<br>H1准备往后传<br>H1和权重矩阵WHY相乘<br>得到第一个词的输出结果Y1这时候计算第二个词<br>同样要和权重矩阵WXH相乘<br>但注意这个时候要把第一个词的隐藏状态加到输入向量里拼接起来<br>同时权重矩阵也增加一个WHH最终计算出第二个词的隐藏状态H2准备继续往后传<br>那后面的流程就一样了</p><p><img src="https://photo.459122.xyz/i/06b386000e882e46a76c09a5dc0a46c9.png" alt="image-20250525234544512"></p><p>最后看一下公式<br>其实非常简单<br>和经典的神经网络相比</p><p><img src="https://photo.459122.xyz/i/16856c40a5c50dfc02ca8ebfd542a493.png" alt="image-20250525234558252"></p><p>就是多了一个前一时刻的隐藏状态而已<br>回顾一下<br>其实本期的内容非常简单<br>我们想处理自然语言的一系列问题<br>首先就要把词转换成计算机能够识别的数字<br>这个过程叫编码<br>通过编码词而形成的向量叫做词向量<br>编码词向量有多种方式<br>其中一种是准备一个词表大小的向量<br>只有一个位置是一<br>这种方式叫做one hot及独热编码<br>这种编码方式维度太高<br>词之间缺乏相关性<br>所以另一种更有效的方式叫做词嵌入<br>词嵌入所需要经过训练而得到的矩阵<br>叫做嵌入矩阵<br>磁向量之间的相关性<br>可以用点击或余弦相似度来计算<br>有了磁向量之后<br>就可以输入到神经网络进行各种训练了<br>经典的神经网络无法表达词的先后顺序<br>因此我们增加了一个隐藏状态<br>在词和词之间传递，不同的词<br>使用不同的时间步T来表示<br>那这个不同于经典神经网络的结构<br>就叫做循环神经网络RNN<br>当然RNN还有两个非常严重的问题<br>1.信息会随着时间步的增多而逐渐丢失<br>无法捕捉长期依赖<br>而有的语句恰恰是距离很远的地方<br>起到了关键性的作用<br>2.RNN必须按顺序处理<br>每个时间步依赖上一个时间步的隐藏状态<br>的计算结果<br>那为了解决这些问题<br>人们使用GRU和LSTM改进了传统的RNN</p><p><img src="https://photo.459122.xyz/i/1f020846a78f0f08e5c016e2512c1d12.png" alt="image-20250525234737971"></p><p>但是这些仍然是建立在让信息一点一点<br>按照时间簿传递的思路来解决<br>只能缓解而无法根治<br>那我们是否有一种可以彻底抛弃这种顺序计算<br>直接一眼把全部信息尽收眼底的新方案呢<br>有的那就是transformer</p><h2 id="06-Transformer-其实是个简单到令人困惑的模型">06 Transformer 其实是个简单到令人困惑的模型</h2><p>用神经网络做个翻译任务<br>I love you Baby<br>我爱你宝贝儿<br>先用词嵌入的方式把每个词转换成一个词向量<br>简单点<br>假设维度就是六<br>如果把每个词直接丢到一个全连接神经网络中<br>那每个词都没有上下文的信息且长度只能一一对应<br>不太行<br>如果用循环神经网络RNN又面临串行计算<br>而且如果句子太长<br>也会导致长期依赖困难的问题也不太行<br>那这也不行<br>那也不行<br>可咋整呢?<br>小孩子才做选择<br>成年人全都不要直接发明一个全新的方案<br>跟我走<br>首先我们给每个词一个位置编码<br>表示这个词出现在整个句子中的位置<br>具体怎么计算<br>再说</p><p>把位置编码加到原来的词向量里<br>现在这个词就有了位置信息<br>但此时每个词还没有其他词的上下文信息<br>也就是注意不到其他词的存在<br>那怎么办呢<br>接着看<br>别眨眼</p><blockquote><p>QKV分别是查询（query）、键（key）、值（value），刚刚问大模型是这么回答的，不清楚有没有错误，明白原理的大佬帮忙指正: 1. Query：当前需要处理的词（比如翻译到中文的「苹果」）。 2. Key：句子中每个词的「身份标识」（比如英文单词 “apple”、“red”、“eat” 的含义特征）。 3. Value：这些词实际携带的语义信息（比如 “apple” 对应水果、公司等含义）。</p></blockquote><p>首先我们用一个WQ矩阵和第一个词向量相乘<br>得到维度不变的Q1向量<br>这里的WQ矩阵是可以通过训练过程学习的一组权重值<br>同理我们用wk矩阵和第一个词向量相乘得到K1<br>再用WV矩阵得到V1<br>接着对其他词向量也和相同的WQKV矩阵相乘<br>分别得到自己对应的QKV1向量</p><p><img src="https://photo.459122.xyz/i/de39a66bd96c37fb8392ba0fb7677abf.png" alt="image-20250525235101479"></p><p><img src="https://photo.459122.xyz/i/5bb0cf0eedb836853ed7b6fac6cb02ef.png" alt="image-20250525235117721"></p><p>当然实际在计算机GPU中运算的时候<br>是通过拼接而成的大矩阵做乘法<br>并不是像我们刚刚那样一步一步计算的<br>得到的直接就是包含所有词向量的QKV矩阵</p><p>不过为了理解<br>我们解释的时候还是拆成一个个的词向量<br>现在原来的词向量已经分别通过线性变换<br>映射成了QKV</p><p>维度和原来是一样的<br>接下来我们让Q1和K2做点击<br>这表示在第一个词的视角里<br>第一个词和第二个词的相似度是多少<br>同理依次和K3做点击表示和第三个词的相似度<br>和K4做点击表示和第四个词的相似度<br>最后呢也补上一个和自己做点击表示和自己的相似度<br>那拿到这些相似度的系数后</p><p><img src="https://photo.459122.xyz/i/7b9a9b9fa0978dda0b027331a61e707c.png" alt="image-20250525235224109"></p><p>分别和V向量相乘</p><p><img src="https://photo.459122.xyz/i/c6895b291c7310388cb259c0291e1e04.png" alt="image-20250525235241089"></p><p>再相加得到A1<br>那此时这个A1就表示在第一个词的视角下<br>按照和它相似度大小按权重把每个词的词向量都加到了一块儿<br>那这就把全部上下文的信息都包含在第一个词当中了而且是用第一个词的视角来看的<br>同理其他几个词也按照这种方式，那么此时每个词都把其他词的词向量按照和自己的相似度权重加到了自己的词向量中</p><p>好<br>那这里的什么QKV都是中间的计算过程了<br>我们从全局视角看<br>现在就是把最初的输入的词向量经过一番处理<br>变成了一组新的词向量<br>不一样的是呢<br>这组新的词向量中<br>每一个都是包含了位置信息和其他词<br>上下文信息的一组新的词向量</p><p><img src="https://photo.459122.xyz/i/ab87d38e05b67fc6c53f95e1b070b83a.png" alt="image-20250525235334042"></p><p>这就是注意力机制attention做的事情<br>我们再进一步优化下<br>有的时候一个词和另一个词的关系<br>可能从不同的视角看是不一样的<br>对于注意力机制来说，如果只通过一种方式计算一次相关性<br>灵活性就会大大降低<br>所以我们做些改进<br>之前我们是每个词计算一组QKV<br>现在我们在这个QKV基础上<br>再经过两个权重矩阵变成两组QKV<br>给每个词两个学习机会</p><p><img src="https://photo.459122.xyz/i/7e8682627c6b4adeb6c039d7359ebdb7.png" alt="image-20250525235414626"></p><p>学习到不同的要计算相似度QQV<br>来增加语言的灵活性<br>这里的每组QKV成为一个头 head<br>接下来在每个头里面的QQV<br>仍然经过刚刚的注意力层的运算<br>得到A向量<br>然后把两个A向量拼接起来<br>得到了和刚刚一样的结构<br>而对于刚刚的注意力机制attention<br>这种方式就叫做多头注意力Multi head attention<br>而我们刚刚举的例子就是两个头的情况</p><p>好<br>那我现在要恭喜你<br>已经把transformer架构<br>最核心的逻辑都搞清楚了</p><p><img src="https://photo.459122.xyz/i/ead1b8bb5cd9902d9881b6329ca00902.png" alt="image-20250525235456217"></p><p>你信不信不信的话<br>我们对照一下transformer的经典论文<br>中的架构图来看看<br>首先第一步就是把输入的内容<br>通过词嵌入的方式转换成词向量矩阵<br>对应的就是这里<br>第二步加入位置信息<br>其实就是再加个形状一样的矩阵<br>对应的就是这里<br>第三步经过多头注意力的处理<br>输出的矩阵维度和输入没有变化<br>给每个词向量增加了上下文信息<br>对应的就是这里<br>后面还有一步添加了残差网络和归一化处理是为了解决梯度消失并且让分布更加稳定而做的优化<br>我们刚刚没有展开这块儿<br>那对应的就是这里<br>同时我们也可以看到<br>整个transformer的标准架构中<br>最主要的就是多头注意力的处理<br>相当于我们把这些部分的逻辑都搞明白了<br>快给自己鼓鼓掌吧<br>下面深入到多头注意力机制的细节部分<br>我们再看看</p><p><img src="https://photo.459122.xyz/i/7719c96f2755296647df2dcb100c40db.png" alt="image-20250525235609581"></p><p>如果是不分多头的单头注意力<br>那么就是先让Q和K相乘<br>得到一个相似度系数的一个矩阵<br>然后再和V相乘<br>最终得到了包含上下文信息的磁向量矩阵<br>省略了中间的缩放掩码和一层soft max处理<br>再看右边的多头注意力情况</p><p>首先QKV分别经过线性变换<br>拆分成多组<br>相当于给了多次机会学习到不同的相似度关系<br>依次经过注意力机制运算后<br>把运算结果拼接起来<br>是不是完全一样呢<br>不过我们讲解的时候还省略了一次线性变换<br>即多头结果并不是简单的拼接起来<br>还需要再次经过一层权重矩阵的乘法<br>这时候再看两个核心公式就很好理解了<br>所谓注意力运算就是QK矩阵相乘经过缩放<br>在经过soft max层处理</p><p><img src="https://photo.459122.xyz/i/e872a51a8bb7221e24422e0e9a047849.png" alt="image-20250525235647356"></p><p>最后和V相乘<br>对于多头情况<br>就是先将QKV矩阵<br>经过多个权重矩阵拆分到多个头中<br>分别经过注意力机制的运算<br>最后合并起来<br>再经过一次矩阵运算<br>得到了输出</p><p>再回过头来看下这个全局的图<br>左边的部分叫做编码器<br>右边的部分叫做解码器</p><p>你实在不愿意叫也没关系<br>假设这个是用于翻译的任务<br>我们训练这个神经网络的过程是<br>首先输入要翻译的文本<br>I love you baby<br>然后经过词嵌入引入位置编码<br>经过多头注意力残差和归一化处理<br>接着送入一个全连接神经网络<br>再残差和归一化处理<br>结果送入解码器的一个多头注意力机制的两个输入中作为KV矩阵<br>再看右边解码器的部分输出是翻译后的文本<br>我爱你宝贝儿<br>同样经过此嵌入<br>引入位置编码<br>经过多头注意力<br>然后残差和归一化处理下<br>然后送入上面说的多头注意力的一个输入中<br>作为Q矩阵和刚刚从编码器中送入的KV矩阵<br>再经过多头注意力残差归一化<br>再全连接神经网络<br>再残差归一化<br>最后再经过一层线性变换的神经网络<br>投射到此表向量中<br>最后用soft max层转化为概率<br>这就代表预测的下一个词在词表中的概率分布<br>那我们取概率最高的就是下一个词应该是什么<br>这里有一个小的不同<br>就是有个掩码</p><p><img src="https://photo.459122.xyz/i/7c99c4160e2be201f2acc967d7b91744.png" alt="image-20250525235842641"></p><p>这个掩码的作用是真正推理<br>翻译时是一个词一个词翻译的<br>比如说这个时候翻译到我下一个词应该是爱<br>所以输出我的时候是看不到后面的词的<br>这就需要掩码来把后面的词遮挡住<br>以便训练的时候模拟真实推理场景时的过程<br>比如当此时输入是i love you baby<br>输出只有一个词<br>我的时候经过这个神经网络<br>最后上方输出词表的概率分布<br>我们想要的结果就是I字的概率值最大<br>如果训练时有偏差<br>那么就计算损失函数<br>再反向传播<br>调整transformer结构中的各种权重矩阵<br>直到学习好为止<br>总的来说<br>transformer确实是个特别简单的架构<br>原文中也是这样说的<br>尤其是当你有了基础的神经网络知识之后<br>如果你看了这个系列之前的视频<br>那就只有多头注意力<br>这一层是陌生的<br>但是它其实拆解之后也是各种矩阵相乘呀<br>相加呀<br>这种操作罢了<br>那其余的词嵌入位置<br>编码残差归一化<br>经典神经网络<br>soft max层等等<br>都是我们之前的视频中已经了解过的概念<br>把这些老东西拼凑拼凑就诞生了<br>我们现在大模型技术的鼻祖transformer<br>那GBT的底层其实就是transform的一半<br>即只有解码器的部分<br>也不翻译<br>谁只管看前面的词<br>猜下一个词<br>别看他来回的猜词猜词<br>猜着猜着就变成了聊天写代码<br>解数学题的全能选手了<br>那transformer的架构来源于经典的论文<br>Attention is all you need<br>本期视频的内容理解之后再去看这篇论文<br>你就会发现非常非常非常容易理解<br>因为它本身就是一个很简单的架构<br>也正因为简单粗暴<br>但是效果却出奇的好<br>所以才会广为流传<br>并成为现代大模型的基础</p><p>本文内容源自B站系列视频 <a href="https://www.bilibili.com/video/BV1wXQhY8EJ6?vd_source=b0f2742e7b4a2838ad4d1870af693bc1">https://www.bilibili.com/video/BV1wXQhY8EJ6?vd_source=b0f2742e7b4a2838ad4d1870af693bc1</a></p>]]></content>
    
    
    <summary type="html">神经网络科普</summary>
    
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>计算机组成原理之概述篇</title>
    <link href="https://yjyrichard.github.io/posts/8d03c736.html"/>
    <id>https://yjyrichard.github.io/posts/8d03c736.html</id>
    <published>2025-05-17T06:17:12.904Z</published>
    <updated>2025-05-17T13:30:17.786Z</updated>
    
    <content type="html"><![CDATA[<h1>计算机组成原理之概述篇</h1><p>环境说明：</p><p>Linux环境： VMWare WorkStation + Linux虚拟机</p><p>编程语言：C++，Python</p><ul><li><p>计算机的发展简史</p></li><li><p>计算机的分类</p></li><li><p>计算机的体系结构</p></li><li><p>计算机的层次与编程</p></li><li><p>计算机的计算单位</p></li><li><p>计算机的字符与编码集</p></li><li><p>计算机发展的四个阶段</p></li><li><p>微型计算机的发展历史</p></li></ul><h3 id="计算机发展简史">计算机发展简史</h3><p>计算机发展的四个阶段</p><p><img src="https://photo.459122.xyz/i/39322952f5f26ff5e33a512271e7f6c9.png" alt="image-20250517112441335"></p><p><strong>第一个阶段：电子管计算机</strong></p><p>第二次世界大战时电子管计算机产生的催化剂。</p><blockquote><p>英国为了解密德国海军的密文</p></blockquote><p>ENIAC 埃尼阿克  战争使用了飞机和火箭，打得准则需要计算射击参数 设计参数需要几千次运算才能计算出来，没有计算机前，需要人手算。缺点：集成度小，空间占用大等。</p><p><strong>第二阶段：晶体管计算机</strong></p><p>贝尔实验室的三个科学家发明了晶体管</p><p>在很多的电路中我们还是可以看到晶体管</p><p>著名的晶体管计算机：TX-0  PDP-1</p><p>集成度相对较高</p><p><strong>第三阶段：集成电路计算机</strong></p><p>德州仪器的工程师发明了集成电路（IC） 计算机具备进入千家万户的条件</p><p>IBM =》 7904 ，1401 这两款计算机主打功能不同，相互无法兼容，不愿意投入两组人力。</p><p>IBM推出兼容的产品System/360 =&gt; 操作系统的雏形</p><p><strong>第四个阶段：超大规模集成电路计算机</strong></p><p>一个芯片集成了上百万的晶体管</p><p>速度更快体积更小价格更低、用途丰富</p><p>乔布斯 Apple 和 Apple二代</p><p><strong>第五个阶段：未来的计算机（畅想）</strong></p><p>生物计算机</p><p>量子计算机</p><blockquote><p>“集成度”指的是在单位面积或体积内集成的晶体管数量。 集成度越高，代表着芯片尺寸可以更小，或者在相同尺寸的芯片上可以容纳更多的元件，从而实现更多的功能和更高的性能。</p><p>在计算机发展史中：</p><ul><li><strong>电子管计算机</strong>：使用电子管作为主要的逻辑元件。电子管体积大、功耗高、产生的热量多，因此一台计算机需要成千上万个电子管，占据巨大的空间。 这导致了电子管计算机的集成度非常小。</li><li><strong>晶体管计算机</strong>：晶体管取代了电子管。晶体管体积小、功耗低、速度更快。 这使得在相同的空间内可以容纳更多的逻辑元件，因此晶体管计算机的集成度相对于电子管计算机有了显著提高。</li></ul><p>简单来说，集成度的提高是计算机体积越来越小、性能越来越强、功耗越来越低的关键因素之一。 电子管到晶体管的转变是计算机集成度提升的一个重要里程碑。 后来集成电路（IC）以及超大规模集成电路（VLSI）的出现，更是将集成度推向了新的高度，使得数百万甚至数十亿个晶体管可以集成在一个小小的芯片上。</p></blockquote><h3 id="个人-微型-计算机的发展历史">个人(微型)计算机的发展历史</h3><p>从第三个阶段开始的</p><p>受限于性能 单核CPU</p><blockquote><p>单核CPU：</p><p>1971-1973 500KHz频率的微型计算机（字长8位）</p><p>1973-1978 高于1MHz频率的微型计算机（字长8位）</p><p>1978-1985 500MHz频率的微型计算机（字长16位）</p><p>1985-2000 高于1GHz频率的微型计算机（字长32位）</p><p>200-现在 高于2GHz频率的微型计算机（字长64位）</p></blockquote><p>可能有朋友不太明白上面的Hz以及字长</p><p>这里简单说一下：</p><p><strong>Hz (赫兹)</strong></p><p>Hz 是频率的单位，全称是赫兹 (Hertz)。它表示的是<strong>每秒钟周期性事件发生的次数</strong>。</p><p>在 CPU（中央处理器）的语境下，Hz 用来衡量<strong>时钟频率</strong> (Clock Speed 或 Clock Rate)。CPU 内部有一个时钟发生器，它会产生规律性的电脉冲信号，就像一个节拍器一样，指挥 CPU 的各个部件协同工作。</p><ul><li><strong>1 Hz</strong> 就代表 CPU 的时钟每秒钟跳动 1 次。</li><li><strong>KHz (千赫兹)</strong>：1 KHz = 1000 Hz，代表 CPU 时钟每秒钟跳动 1000 次。</li><li><strong>MHz (兆赫兹)</strong>：1 MHz = 1,000,000 Hz (一百万赫兹)，代表 CPU 时钟每秒钟跳动一百万次。</li><li><strong>GHz (吉赫兹)</strong>：1 GHz = 1,000,000,000 Hz (十亿赫兹)，代表 CPU 时钟每秒钟跳动十亿次。</li></ul><p>简单来说，<strong>CPU 的时钟频率越高 (Hz 值越大)，意味着 CPU 在单位时间内能够执行更多的基本操作，通常也就意味着 CPU 的运算速度越快，性能越强。</strong> 你给出的数据中，从 500KHz 到高于 2GHz，就反映了 CPU 运行速度的巨大提升。</p><p><strong>字长 (Word Length / Word Size)</strong></p><p>字长指的是 <strong>CPU 一次能够处理的二进制数据的位数 (bits)</strong>。你可以把它想象成 CPU 用来思考和处理信息的基本单位的“宽度”。</p><ul><li><strong>位 (bit)</strong>：计算机中数据的最小单位，只能是 0 或 1。</li><li><strong>字节 (Byte)</strong>：通常 1 字节 = 8 位。</li></ul><p>字长决定了以下几个方面：</p><ol><li><strong>CPU 内部寄存器的大小</strong>：寄存器是 CPU 内部用来临时存储数据的高速存储单元。字长是多少位，通常寄存器就能存储多少位的数据。</li><li><strong>CPU 一次能处理的数据量</strong>：例如，一个 8 位字长的 CPU，一次可以处理 8 位的数据；一个 64 位字长的 CPU，一次可以处理 64 位的数据。显然，字长越大，CPU 一次能处理的数据就越多，效率也就越高。</li><li><strong>内存寻址能力</strong>：CPU 需要通过地址来访问内存中的数据。字长的大小会影响 CPU 能够直接访问的内存空间大小。例如，一个 32 位字长的 CPU，理论上最大可以寻址 2<sup>32</sup> 字节 (约 4GB) 的内存空间。而 64 位字长的 CPU，其寻址能力则大大增加。</li></ol><p>你给出的数据中：</p><ul><li><strong>8 位字长</strong>：CPU 一次能处理 8 位二进制数。</li><li><strong>16 位字长</strong>：CPU 一次能处理 16 位二进制数。</li><li><strong>32 位字长</strong>：CPU 一次能处理 32 位二进制数。</li><li><strong>64 位字长</strong>：CPU 一次能处理 64 位二进制数。</li></ul><p><strong>总结一下：</strong></p><ul><li><strong>Hz (频率)</strong> 关系到 CPU 的<strong>运算速度快慢</strong>。</li><li><strong>字长</strong> 关系到 CPU <strong>一次能处理多少数据</strong>以及<strong>能管理多大的内存空间</strong>。</li></ul><p>这两个参数都是衡量 CPU 性能的重要指标。随着技术的发展，CPU 的频率越来越高，字长也越来越大，从而带来了计算机性能的飞速提升。</p><p>摩尔定律</p><p>集成电路的性能，每18-24个月就会提升一倍</p><p>但是在21世纪这个定律慢慢失效了，因为随着芯片的发展，电路越来越复杂，热损耗也越来越高，无法解决这样的问题所以慢慢也就失效了。</p><p>进而发展了多核CPU</p><blockquote><p>多核CPU ：</p><p>2005 ： Intel 奔腾系列双核CPU，AMD速龙系列</p><p>2006 ： Intel酷睿四核CPU</p><p>Intel 酷睿系列十六核CPU</p><p>Intel 至强系列五十核CPU</p></blockquote><p>主要是从CPU的角度来看待</p><h4 id="计算机的分类">计算机的分类</h4><p><strong>超级计算机</strong></p><ul><li>功能最强，运算速度最快，存储容量最大的计算机</li><li>多用于国家高科技领域和尖端技术研究</li></ul><p>标记它们的运算速度的单位是TFlop/s</p><p>1TFlop/s=每秒一万亿次浮点计算</p><p>Intel® Core™ i7-6700k CPU @ 4.00GHz:44.87GFlop/s</p><p><strong>大型计算机</strong></p><p>又称之为大型机，大型主机，主机等</p><p>具有高性能，可处理大量数据与复杂的运算</p><p>在大型机市场领域，IBM占据很大的份额</p><p>COBOL编程语言</p><p>IBM Z9这台打星际是NASA最后一台打星际 Red Hat Enterprise Linux 大型机造价高昂</p><p>去“IOE”是阿里巴巴提出的概念</p><p>代表了高维护费用的存储系统</p><p>不够灵活，伸缩性若</p><p>“去IOE”行动：I（IBM），O（Oracle）E(EMC)</p><p>阿里2008年提出去“IOE运动”，于是在2009年成立了阿里云</p><p><strong>迷你计算机（服务器）</strong></p><p>也称之为小型机，普通服务器</p><p>不需要特殊的空调场所</p><p>具备不错的算力，可以完成较复杂的运算</p><blockquote><p>普通服务器以及替代了传统的大型机，成为大规模企业计算的中枢</p></blockquote><p><strong>工作站</strong></p><p>高端的通用微型计算机，提供比个人计算机更强大的性能</p><p>类似于普通台式电脑，体积较大，但性能强劲</p><p><strong>微型计算机</strong></p><p>又称之为个人计算机，最为普通的一类计算机</p><p>麻雀虽小，五脏俱全</p><p>从构成的本质上来讲，个人计算机与前面的分类无异</p><h3 id="计算机的体系与结构">计算机的体系与结构</h3><h4 id="冯诺依曼体系">冯诺依曼体系</h4><blockquote><p>将程序指令和数据一起存储的计算机设计概念结构</p></blockquote><p>早期计算机仅含固定用途程序=》改变程序得更改结构，重新设计电路=》[坑爹啊，不能先打会游戏然后再写代码]=》把程序存储起来并设计通用电路 =&gt; 存储程序指令设计通用电路</p><p>必须有一个存储器</p><p>必须有一个控制器</p><p>必须有一个运算器</p><p>必须有输入设备</p><p>必须有输出设备</p><p>现代计算机都是冯诺依曼机</p><p>能够把需要的程序和数据送至计算机</p><p>能够长期记忆程序，数据，中间结果以及最终运算结果的能力</p><p>能够具备算术，逻辑运算和数据传送等数据加工处理的能力</p><p>能够按照要求把处理结果输出给用户</p><p><img src="https://photo.459122.xyz/i/c5a7143ae0626a984e7d250191d48364.png" alt="image-20250517123626089"></p><p>冯诺依曼瓶颈</p><p>CPU和存储器速率之间的问题无法调和</p><p>因为CPU速度极快，但是存储器速度很慢,这样会导致CPU经常空转等待数据传输。那么如何解决？</p><p>没有什么是加一层解决不了的，有的话就再加一层。</p><h4 id="现代计算机的结构">现代计算机的结构</h4><p>现代计算机在冯诺依曼机体系结构基础上进行修改</p><p>解决CPU与存储设备之间的性能差异问题</p><p><img src="https://photo.459122.xyz/i/3368a3b8aad4e3e21f8d288ae6c5affd.png" alt="image-20250517133715037"></p><p>存储器 之前是磁带硬盘现在增加了更告诉的设备：内存，CPU的寄存器作为缓存，这样速度更快了</p><blockquote><p>可以理解为以及存储器为核心</p></blockquote><h3 id="计算机的层次与编程语言">计算机的层次与编程语言</h3><p>程序翻译与程序解释</p><p>人类语言：我是一名学生</p><p>计算机：01011100101…</p><blockquote><p>需要进行语言之间的转换</p></blockquote><p>较为高级的计算机语言L1</p><p>较为低级的计算机语言L0</p><p>那什么是程序翻译？</p><p>程序翻译就是L1进行程序逻辑描述，通过编译器生成较为低级的计算机语言L0（计算机实际执行的语言）</p><p>那什么是程序解释？</p><p>L1进行程序逻辑描述然后L1作为输入通过解释器来使用L0语言实现另外一个程序（较为低级的计算机语言L0）</p><p>计算机执行的指令都是L0</p><p>翻译过程生成新的L0程序，解释过程不生成新的L0程序</p><p>解释过程由L0编写的解释器去解释L1程序</p><p>常见的程序翻译型语言：C/C++,Object-C,Golang</p><p>常见的程序解释型语言：Python,Php,JavaScript</p><p>翻译+解释型语言：Java C#  Java程序编译为JVM字节码然后再通过解释器来解释为机器码</p><p><img src="https://photo.459122.xyz/i/9aa98b80ef8c1d5f24cc76106190dbae.png" alt="image-20250517134517562"></p><p><strong>硬件逻辑层</strong>：</p><p>门，触发器等逻辑电路组成</p><p>属于电子工程的领域</p><p><strong>微程序机器层</strong>：</p><p>编程语言是微指令集</p><p>微指令所组成的微程序直接交由硬件执行</p><p><strong>传统机器层</strong>：</p><p>编程语言是CPU指令集（机器指令）</p><p>编程语言和硬件是直接相关</p><p>不同架构的CPU使用不同的CPU指令集</p><p>一条机器指令对应一个微程序</p><p>一个微程序对应一组微指令</p><p><strong>操作系统层</strong>：</p><p>向上提供了简易的操作界面</p><p>向下对接了指令系统，管理硬件资源</p><p>操作系统层是软件和硬件之间的适配层</p><p><strong>汇编语言层：</strong></p><p>汇编语言是汇编语言</p><p>汇编语言可以翻译为可直接执行的机器语言</p><p>完成翻译的过程就是汇编器</p><p><strong>高级语言层</strong>：</p><p>编程语言为广大程序员所接受的高级语言</p><p>高级语言的类别非常多，有几百种</p><p>常见的高级语言有：Python,Java，C/C++，Golang</p><p><strong>应用层</strong>：</p><p>满足计算机针对某种用途而专门设计：word,Excel,Powerpoint</p><p>分层的目的是便于理解</p><h3 id="计算机的计算单位">计算机的计算单位</h3><p>容量单位</p><p>速度单位</p><p>容量单位 768M光盘  4G内存  2T硬盘</p><p>在物理层面，高低电平记录信息</p><p>理论上只认识0/1两种状态</p><p>0/1能够表示的内容太少了，需要更大的容量表示方法  0/1称为bit(比特位)</p><table><thead><tr><th style="text-align:left">属性</th><th style="text-align:left">bit</th><th style="text-align:left">Byte</th><th style="text-align:left">KB</th><th style="text-align:left">MB</th><th style="text-align:left">GB</th><th style="text-align:left">TB</th><th style="text-align:left">PB</th><th style="text-align:left">EB</th></tr></thead><tbody><tr><td style="text-align:left"><strong>名字</strong></td><td style="text-align:left">比特位</td><td style="text-align:left">字节</td><td style="text-align:left">千字节</td><td style="text-align:left">兆字节</td><td style="text-align:left">吉字节</td><td style="text-align:left">太字节</td><td style="text-align:left">拍字节</td><td style="text-align:left">艾字节</td></tr><tr><td style="text-align:left"><strong>比例</strong></td><td style="text-align:left">-</td><td style="text-align:left">8 bits</td><td style="text-align:left">1024 B</td><td style="text-align:left">1024 KB</td><td style="text-align:left">1024 MB</td><td style="text-align:left">1024 GB</td><td style="text-align:left">1024 TB</td><td style="text-align:left">1024 PB</td></tr><tr><td style="text-align:left"><strong>常见设备</strong></td><td style="text-align:left">门电路</td><td style="text-align:left">-</td><td style="text-align:left">寄存器</td><td style="text-align:left">高速缓存</td><td style="text-align:left">内存/硬盘</td><td style="text-align:left">硬盘</td><td style="text-align:left">云硬盘</td><td style="text-align:left">数据仓库</td></tr></tbody></table><p>字节：1Byte = 8bit</p><p>1G内存，可以存储多少字节的数据？可以存储多少比特数据？</p><p>1G = 1024^3 Bytes = 1024^3*8bits</p><p>为什么网上买的移动硬盘500G，格式化之后就只剩下465G了？</p><p>硬盘上一般用10进位标记容量</p><p>(500*1000^3)/ 1024^3  约等于 465</p><p>宽带中 2M宽带，4M宽带，100M宽带是什么意思?这里是容量吗？不是 是速度</p><p><strong>网络速度</strong></p><p>为什么电信拉的100M光纤，测试峰值速度只有12M每秒？</p><p>网络常用单位是Mbps</p><p>100M/s = 100Mbps = 100Mbit/s</p><p>100Mbit/s = (100/8)MB/s = 12.5 MB/S</p><p><strong>CPU速度</strong></p><p>CPU的速度一般体现再CPU的时钟频率</p><p>CPU的时钟频率的单位一般是赫兹（Hz）</p><p>主流CPU的时钟频率都在2GHz以上</p><p>Hz其实就是秒分之一</p><p>并不是描述计算机领域所专有的单位</p><p>它是每秒钟的周期性变动重复次数的计量</p><p>2GHz = 2*1000^3 Hz = 每秒20亿次</p><p>计算机的字符与编码集</p><p>字符编码集的历史</p><p>中文编码集</p><p>这个部分可以去搜一下：这里简明扼要的说一下:</p><p>兼容全球阿字符集是Unicode</p><p>Unicode定义了世界通用的符号集，UTF-*实现了编码</p><p>UTF-8是以字节为单位对Unicode进行编码</p><p>Windows系统默认使用GBK编码</p><p>编程推荐使用UTF-8编码</p>]]></content>
    
    
    <summary type="html">计算机组成原理</summary>
    
    
    
    <category term="计算机组成原理" scheme="https://yjyrichard.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
    
    <category term="计算机组成原理" scheme="https://yjyrichard.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://yjyrichard.github.io/posts/0.html"/>
    <id>https://yjyrichard.github.io/posts/0.html</id>
    <published>2025-05-16T15:25:28.718Z</published>
    <updated>2025-05-17T13:30:17.791Z</updated>
    
    <content type="html"><![CDATA[<p>—</p><p>title: Git实战: git工作流程</p><p>description: git协同开发</p><p>mathjax: true</p><p>tags:</p><p>- git</p><p>categories:</p><p>- git</p><p>date: 2025-05-17 00:42:00</p><p>updated: 2025-05-17 00:42:00</p><p>—</p><h1>Git实战: git工作流程</h1><p>大家好！今天我们来聊聊 Git。很多刚接触 Git 或者团队协作不久的开发者，对于如何正确、高效地使用 Git 分支进行开发可能会有些困惑。最近就有朋友问到：</p><blockquote><p>“我不是很会用 Git，我想问我开发的时候是不是 clone 下来代码之后在 <code>develop</code> 分支上新建一个分支，比方说是 <code>feature-auth</code>，然后我开发完以后我是不是在本地把 <code>feature-auth</code> 分支上的内容 Merge 到 <code>develop</code> 分支，然后把 <code>develop</code> 分支推到 GitHub 上去？”</p></blockquote><p>这是一个非常好的问题，也代表了很多开发者的实际操作场景。答案是：<strong>是的，这个思路是正确的，并且是 Git 中一种非常常见且推荐的工作模式，我们通常称之为“功能分支工作流”（Feature Branch Workflow）。</strong></p><p>下面我们就来详细拆解一下这个流程，并补充一些最佳实践。</p><h3 id="功能分支工作流：一步步解析">功能分支工作流：一步步解析</h3><p>假设我们的目标是开发一个新的用户认证功能（<code>feature-auth</code>）。</p><p><strong>1. 克隆代码库</strong></p><p>首先，你需要将远程的代码库克隆到你的本地机器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> &lt;repository-url&gt;</span><br></pre></td></tr></table></figure><p><strong>2. 切换到主开发分支（通常是 <code>develop</code>）</strong></p><p>大多数项目会有一个主要的开发分支，比如 <code>develop</code> 或者 <code>main</code>。确保你基于这个最新的分支来创建你的功能分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br></pre></td></tr></table></figure><p><strong>3. 拉取最新代码（重要！）</strong></p><p>在创建新分支之前，务必确保你的本地 <code>develop</code> 分支是最新的，同步远程仓库的最新变更。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure><p><strong>4. 创建并切换到你的功能分支</strong></p><p>现在，从最新的 <code>develop</code> 分支创建你的功能分支 <code>feature-auth</code>。<code>-b</code> 参数会同时创建并切换到新分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-auth</span><br></pre></td></tr></table></figure><p><strong>5. 在功能分支上安心开发</strong></p><p>所有的代码编写、修改、调试都在 <code>feature-auth</code> 分支上进行。你可以随时提交你的更改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ...编写代码...</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 实现用户登录基础功能&quot;</span></span><br><span class="line"><span class="comment"># ...继续编写代码...</span></span><br><span class="line">git add .</span><br><span class="line">git commit -m <span class="string">&quot;feat: 增加JWT令牌生成&quot;</span></span><br></pre></td></tr></table></figure><p><strong>6. 开发完成，准备合并回 <code>develop</code></strong></p><p>当你的功能开发测试完毕，就可以准备将其合并回 <code>develop</code> 分支了。这里有两种主要的方式：</p><p><strong>方式一：本地合并后推送 (如提问者所述)</strong></p><p>这是提问者描述的流程，完全可行。</p><ul><li><p><strong>a. (推荐) 先将 <code>develop</code> 的最新更改同步到你的功能分支：</strong><br>为了避免在合并到 <code>develop</code> 时产生过多冲突，或者确保你的功能是基于最新的 <code>develop</code> 代码，可以先将 <code>develop</code> 的最新代码合并到你的 <code>feature-auth</code> 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop      <span class="comment"># 切换回 develop 分支</span></span><br><span class="line">git pull origin develop   <span class="comment"># 拉取 develop 最新代码</span></span><br><span class="line">git checkout feature-auth <span class="comment"># 切换回你的功能分支</span></span><br><span class="line">git merge develop         <span class="comment"># 将 develop 合并到 feature-auth</span></span><br><span class="line">                          <span class="comment"># 如果有冲突，此时在 feature-auth 分支解决</span></span><br></pre></td></tr></table></figure><p><em>或者，有些团队更喜欢使用 <code>rebase</code> 来保持提交历史的线性：</em></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ... 前两步同上 ...</span></span><br><span class="line">git checkout feature-auth</span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure><p><em>注意：如果你的 <code>feature-auth</code> 分支已经推送到远程，<code>rebase</code> 后需要强制推送 (<code>git push -f</code>)，请谨慎使用并确保团队成员了解其影响。</em></p></li></ul><p><code>git merge</code> 和 <code>git rebase</code> 的详细区别和适用场景：</p><p>我们先来详细聊聊 <code>git merge</code> 和 <code>git rebase</code> 的区别与适用场景，力求通俗易懂。</p><p>想象一下，你和你的同事都在基于项目的同一个版本（比如 <code>develop</code> 分支的某个提交点）开始各自开发新功能。你开发了 <code>feature-A</code>，同事开发了 <code>feature-B</code>。</p><p>现在，你们都完成了各自的功能，需要将这些代码合并回 <code>develop</code> 分支。</p><h3 id="git-merge：忠实记录，汇聚合流"><code>git merge</code>：忠实记录，汇聚合流</h3><p><code>git merge</code> 的核心思想是：<strong>将两个分支的最新快照（以及从共同祖先开始的历程）整合到一起，并创建一个新的“合并提交”（merge commit）来记录这次整合。</strong></p><p><strong>它是如何工作的？</strong></p><p>假设 <code>develop</code> 分支在你开始开发 <code>feature-A</code> 后，也有了新的提交。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">A</span><span class="literal">---</span><span class="comment">B</span><span class="literal">---</span><span class="comment">C feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">     <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G develop</span></span><br></pre></td></tr></table></figure><p>当你执行 <code>git checkout develop</code> 然后 <code>git merge feature-A</code> 时：</p><ol><li>Git 会找到 <code>feature-A</code> 和 <code>develop</code> 分支的共同祖先（上图中的 <code>E</code>）。</li><li>它会把 <code>feature-A</code> 分支上的所有更改（<code>A</code>, <code>B</code>, <code>C</code> 相对于 <code>E</code> 的更改）和 <code>develop</code> 分支自共同祖先以来的更改（<code>F</code>, <code>G</code> 相对于 <code>E</code> 的更改）合并起来。</li><li>如果顺利，它会创建一个新的提交 <code>H</code>（合并提交）在 <code>develop</code> 分支上。这个提交 <code>H</code> 会有两个父提交：<code>G</code> (来自 <code>develop</code>) 和 <code>C</code> (来自 <code>feature-A</code>)。</li></ol><p>历史记录会变成这样：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">A</span><span class="literal">---</span><span class="comment">B</span><span class="literal">---</span><span class="comment">C feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">     <span class="comment">/         \</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G</span><span class="literal">---</span><span class="comment">H develop</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>保留历史：</strong> 它完整地保留了分支的原始提交历史。你可以清晰地看到 <code>feature-A</code> 是如何被合并进来的，以及它在合并前的所有提交。</li><li><strong>非线性历史：</strong> 合并提交会引入额外的提交点，使得提交历史图看起来像一个分叉然后汇合的图形，不是一条直线。</li><li><strong>简单直接：</strong> 对于理解和操作来说，<code>merge</code> 相对简单。</li></ul><p><strong>适用场景：</strong></p><ol><li><strong>合并公共分支：</strong> 当你将一个功能分支合并回主要的共享分支（如 <code>develop</code>, <code>main</code>, <code>master</code>）时，使用 <code>merge</code> 是非常常见的。它清晰地记录了功能的集成点。</li><li><strong>保留分支的上下文：</strong> 如果你希望明确地看到一个功能分支的完整开发脉络以及它何时被合并，<code>merge</code> 能够提供这种信息。</li><li><strong>团队协作：</strong> 当多个人在同一个分支上工作并需要合并彼此的工作时（虽然通常推荐在各自的特性分支上工作），<code>merge</code> 是标准做法。</li></ol><p><strong>通俗比喻：</strong></p><p>想象两条河流（分支）各自流淌，当它们需要汇合时，<code>git merge</code> 就像是在汇合点建造了一个新的交汇处（合并提交），两条河的水都流向了这个交汇处，并且我们能清楚地看到是哪两条河汇入的。</p><h3 id="git-rebase：重新上演，线性历史"><code>git rebase</code>：重新上演，线性历史</h3><p><code>git rebase</code> 的核心思想是：<strong>将你的分支上的提交“重新播放”或“重新应用”到另一个分支的顶端。</strong> 它会修改你的提交历史，使其看起来像是在目标分支的最新提交之后直接进行的开发。</p><p><strong>它是如何工作的？</strong></p><p>还是上面的例子：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">      <span class="comment">A</span><span class="literal">---</span><span class="comment">B</span><span class="literal">---</span><span class="comment">C feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">     <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G develop</span></span><br></pre></td></tr></table></figure><p>当你检出 <code>feature-A</code> 分支 (<code>git checkout feature-A</code>) 然后执行 <code>git rebase develop</code> 时：</p><ol><li>Git 会找到 <code>feature-A</code> 和 <code>develop</code> 分支的共同祖先（<code>E</code>）。</li><li>它会“暂存”<code>feature-A</code> 分支上从共同祖先之后的所有提交（<code>A</code>, <code>B</code>, <code>C</code>）。</li><li>它会将 <code>feature-A</code> 分支的指针移动到 <code>develop</code> 分支的最新提交（<code>G</code>）。</li><li>然后，它会把之前暂存的提交（<code>A</code>, <code>B</code>, <code>C</code>）逐个重新应用到 <code>develop</code> 分支的顶端，生成新的提交 <code>A'</code>, <code>B'</code>, <code>C'</code>。这些新的提交虽然内容和 <code>A, B, C</code> 一样，但是它们的 SHA-1 哈希值是不同的，因为它们的父提交变了。</li></ol><p>历史记录会变成这样：</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">              <span class="comment">A&#x27;</span><span class="literal">--</span><span class="comment">B&#x27;</span><span class="literal">--</span><span class="comment">C&#x27; feature</span><span class="literal">-</span><span class="comment">A</span></span><br><span class="line">             <span class="comment">/</span></span><br><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G develop</span></span><br></pre></td></tr></table></figure><p>现在，<code>feature-A</code> 分支看起来就像是直接从 <code>develop</code> 分支的最新状态（<code>G</code>）开始开发的。</p><p>之后，如果你想把 <code>feature-A</code> 合并到 <code>develop</code>，通常会切换到 <code>develop</code> 分支，然后执行 <code>git merge feature-A</code>。由于 <code>feature-A</code> 的基底已经是 <code>develop</code> 的最新提交，这次合并会是一个“快进合并”（Fast-forward merge），不会产生新的合并提交，<code>develop</code> 分支指针直接指向 <code>C'</code>。</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">D</span><span class="literal">---</span><span class="comment">E</span><span class="literal">---</span><span class="comment">F</span><span class="literal">---</span><span class="comment">G</span><span class="literal">---</span><span class="comment">A&#x27;</span><span class="literal">--</span><span class="comment">B&#x27;</span><span class="literal">--</span><span class="comment">C&#x27; develop</span><span class="string">,</span> <span class="comment">feature</span><span class="literal">-</span><span class="comment">A</span></span><br></pre></td></tr></table></figure><p><strong>特点：</strong></p><ul><li><strong>线性历史：</strong> <code>rebase</code> 的主要目的是创建一条干净、线性的提交历史。项目历史看起来像是一条直线，更容易阅读和理解。</li><li><strong>修改历史：</strong> <code>rebase</code> 会重写提交历史。原始的提交（<code>A, B, C</code>）实际上被废弃了（或者说变成了悬空提交，最终会被垃圾回收），取而代之的是新的提交（<code>A', B', C'</code>）。</li><li><strong>潜在风险：</strong> <strong>永远不要对已经推送到公共仓库并被其他人使用的分支执行 <code>rebase</code>！</strong> 因为它改变了提交历史，如果其他人基于旧的历史进行开发，再次同步时会导致非常混乱的局面和大量的冲突。</li></ul><p><strong>适用场景：</strong></p><ol><li><p>保持本地功能分支更新：</p><p>在你的本地功能分支上开发时，定期rebase到目标分支（如develop）的最新版本，可以帮助你及早发现和解决冲突，并保持你的功能分支与主线同步。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout feature-A</span><br><span class="line">git fetch origin develop <span class="comment"># 获取远程 develop 的最新代码，但不合并</span></span><br><span class="line">git rebase origin/develop <span class="comment"># 将 feature-A 的提交 rebase 到最新的 origin/develop 之上</span></span><br></pre></td></tr></table></figure></li><li><p><strong>清理本地提交历史：</strong> 在将本地功能分支推送到远程或创建 Pull Request 之前，可以使用交互式 <code>rebase</code> (<code>git rebase -i</code>) 来整理、合并、编辑你的提交，使提交历史更清晰、更有意义。</p></li><li><p><strong>个人分支或短期分支：</strong> 当你独自在一个分支上工作，并且希望在合并前拥有一个干净的历史记录时。</p></li></ol><p><strong>通俗比喻：</strong></p><p>想象你在写一本书的某个章节（你的功能分支），而主编辑也在同时修订书的其他部分（<code>develop</code> 分支）。当你写完一部分，发现编辑已经更新了书的前面章节。</p><ul><li><code>git merge</code> 就像是你把你的章节直接加到书的末尾，并加个批注说“这是基于旧版前言写的章节，现在和新版前言一起放进来了”。</li><li><code>git rebase</code> 就像是你拿起编辑修订后的最新版本，然后把你的章节内容，在新的基础上重新誊写一遍，让它看起来就像是你从一开始就是基于最新版本写的。</li></ul><h3 id="总结：merge-vs-rebase">总结：<code>merge</code> vs <code>rebase</code></h3><table><thead><tr><th style="text-align:left">特性</th><th style="text-align:left"><code>git merge</code></th><th style="text-align:left"><code>git rebase</code></th></tr></thead><tbody><tr><td style="text-align:left"><strong>目标</strong></td><td style="text-align:left">合并分支，保留历史</td><td style="text-align:left">创建线性历史，整合变更</td></tr><tr><td style="text-align:left"><strong>历史记录</strong></td><td style="text-align:left">非线性（产生合并提交），保留分支的确切历史</td><td style="text-align:left">线性（重写提交），使历史更简洁</td></tr><tr><td style="text-align:left"><strong>提交ID</strong></td><td style="text-align:left">保留原始提交ID，新增一个合并提交ID</td><td style="text-align:left">原始提交ID被改变，生成新的提交ID</td></tr><tr><td style="text-align:left"><strong>冲突解决</strong></td><td style="text-align:left">在合并提交时一次性解决所有冲突</td><td style="text-align:left">在每个被重新应用的提交上都可能需要解决冲突</td></tr><tr><td style="text-align:left"><strong>安全性</strong></td><td style="text-align:left">对公共分支安全</td><td style="text-align:left"><strong>不要在公共/共享分支上使用</strong>，除非你非常清楚后果</td></tr><tr><td style="text-align:left"><strong>简单性</strong></td><td style="text-align:left">概念和操作相对简单</td><td style="text-align:left">概念稍复杂，操作需要更小心</td></tr></tbody></table><p><strong>何时选择？</strong></p><ul><li><strong>当你希望保留分支的精确历史记录，并且不介意历史图谱中出现合并提交时，使用 <code>git merge</code>。</strong> 这是将功能分支合并到 <code>develop</code> 或 <code>main</code> 分支的默认和安全方式。</li><li><strong>当你希望在将本地更改推送到远程或合并到主分支之前，清理你的提交历史，使其变得线性且易于阅读时，可以在你的本地（私有）分支上使用 <code>git rebase</code>。</strong></li><li>在将你的功能分支与主开发分支（如 <code>develop</code>）同步时：<ul><li>如果你想把 <code>develop</code> 的最新更改集成到你的功能分支，<code>git rebase develop</code> (在你的功能分支上执行) 是一个好选择，它能让你的功能分支保持在 <code>develop</code> 的最前端，减少最终合并回 <code>develop</code> 时的复杂性。</li><li><code>git merge develop</code> (在你的功能分支上执行) 也可以，但会在你的功能分支历史上创建一个合并提交。</li></ul></li></ul><p>许多团队会结合使用两者：在本地特性分支上使用 <code>rebase</code> 来保持更新和清理提交，然后使用 <code>merge</code> (通常是通过 Pull Request) 将特性分支合并到主开发分支，并保留一个合并提交来标记功能的集成。</p><p>记住黄金法则：<strong>只对尚未推送到公共仓库的本地分支执行 <code>rebase</code>。</strong></p><p>如果你看完还是似懂非懂那我就再举一个例子：</p><blockquote><p>假设我们的主开发分支是 <code>develop</code>。</p><p><strong>场景：</strong> 你需要开发一个新功能 <code>feature-logging</code>。</p><p><strong>详细步骤和代码示例：</strong></p><p><strong>Phase 1: 开始新功能开发，并保持与 <code>develop</code> 同步 (使用 <code>rebase</code>)</strong></p><ol><li><p><strong>确保你的 <code>develop</code> 分支是最新的：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到 develop 分支</span></span><br><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从远程仓库拉取最新的 develop 分支代码</span></span><br><span class="line"><span class="comment"># (假设你的远程仓库名为 origin)</span></span><br><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure><p>这能确保你基于最新的代码创建功能分支。</p></li><li><p><strong>创建你的功能分支 <code>feature-logging</code>：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从当前的 develop 分支创建并切换到新的 feature-logging 分支</span></span><br><span class="line">git checkout -b feature-logging</span><br></pre></td></tr></table></figure><p>现在你位于 <code>feature-logging</code> 分支，可以开始编码了。</p></li><li><p><strong>进行一些开发提交：</strong><br>假设你添加了日志模块并做了一些修改。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># (你在这里编写代码，比如创建 logging_service.py)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Initial logging setup&quot;</span> &gt; logging_service.py</span><br><span class="line">git add logging_service.py</span><br><span class="line">git commit -m <span class="string">&quot;feat: Add initial logging service&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># (继续编写代码，比如更新 main.py 以使用日志服务)</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;import logging_service&quot;</span> &gt; main.py</span><br><span class="line">git add main.py</span><br><span class="line">git commit -m <span class="string">&quot;feat: Integrate logging in main module&quot;</span></span><br></pre></td></tr></table></figure><p>你的 <code>feature-logging</code> 分支现在有了一些你自己的提交。</p></li><li><p><strong>与此同时，<code>develop</code> 分支可能有了新的提交：</strong><br>可能你的同事合并了其他功能或修复了 bug 到 <code>develop</code> 分支。<br>为了模拟这个，我们假设 <code>develop</code> 分支有了一个新提交。<br><em>(在真实场景中，这会通过其他人推送到远程 <code>develop</code> 分支发生)</em></p></li><li><p><strong>在将你的功能推送到远程或准备合并之前，用 <code>rebase</code> 更新你的 <code>feature-logging</code> 分支：</strong><br>这是关键步骤，目的是将你的本地提交“叠加”在最新的 <code>develop</code> 分支之上，保持线性历史并及早处理冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 确保你的本地 develop 分支副本是最新的</span></span><br><span class="line">git checkout develop</span><br><span class="line">git pull origin develop <span class="comment"># 获取 develop 的最新更改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 切换回你的功能分支</span></span><br><span class="line">git checkout feature-logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 将 feature-logging rebase 到最新的 develop 分支上</span></span><br><span class="line"><span class="comment"># 这会把你 feature-logging 分支上独有的提交 (上面两个 &quot;feat: ...&quot; 提交)</span></span><br><span class="line"><span class="comment"># 重新在最新的 develop 分支的顶端播放一遍</span></span><br><span class="line">git rebase develop</span><br></pre></td></tr></table></figure><ul><li>发生了什么？<ul><li>Git 会找到 <code>feature-logging</code> 和 <code>develop</code> 的共同祖先。</li><li>它会“暂存”你在 <code>feature-logging</code> 上独有的提交（“Add initial logging service”, “Integrate logging in main module”）。</li><li>然后，它将 <code>feature-logging</code> 分支指向 <code>develop</code> 分支的最新提交。</li><li>最后，它将你暂存的提交逐个应用到新的基点上。你的提交哈希值会改变，因为它们的父提交变了。</li></ul></li><li><strong>冲突处理：</strong> 如果在 <code>rebase</code> 过程中发生冲突 (比如 <code>develop</code> 上的新更改和你本地的更改修改了同一行代码)，<code>rebase</code> 会暂停，让你解决冲突。解决后，使用 <code>git add &lt;conflicted-file&gt;</code> 然后 <code>git rebase --continue</code>。如果想中止 <code>rebase</code>，可以使用 <code>git rebase --abort</code>。</li><li><strong>黄金法则体现：</strong> 此时，<code>feature-logging</code> 分支<strong>只存在于你的本地仓库</strong>。你还没有把它推送到远程共享给其他人。所以，即使提交历史被“重写”了（提交哈希变了），也不会影响到其他人。这是安全的。</li></ul></li><li><p><strong>(可选) 清理你的本地提交历史 (交互式 Rebase)：</strong><br>在 <code>rebase</code> 到 <code>develop</code> 之后，或者在你觉得需要整理提交时，可以使用交互式 <code>rebase</code> 来合并、修改、排序你的本地提交，让它们更清晰。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 假设你想整理 feature-logging 上的最近2个提交</span></span><br><span class="line">git rebase -i HEAD~2</span><br></pre></td></tr></table></figure><p>这会打开一个编辑器，让你选择如何处理这些提交 (比如 <code>pick</code>, <code>squash</code>, <code>reword</code>, <code>edit</code> 等)。<br>例如，你可以将两个小的提交 <code>squash</code> (压缩) 成一个更有意义的提交。<br><strong>再次强调：</strong> 这也是在本地分支上进行的操作，推送前进行。</p></li></ol><p><strong>Phase 2: 功能完成，准备合并到 <code>develop</code> (通常通过 Pull Request 和 <code>merge</code>)</strong></p><ol><li><p><strong>推送你的功能分支到远程仓库：</strong><br>当你对 <code>feature-logging</code> 分支满意，并且它已经基于最新的 <code>develop</code> (通过 <code>rebase</code>) 并且提交历史也干净了，就可以推送它了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一次推送本地的 feature-logging 分支到远程 origin</span></span><br><span class="line">git push -u origin feature-logging</span><br></pre></td></tr></table></figure><p>如果之前已经推送过，并且因为 <code>rebase</code> 修改了历史，你可能需要强制推送 (<code>git push --force-with-lease origin feature-logging</code>)。<strong>但要非常小心，只有当你确定这个分支没有其他人正在使用时才能这样做。</strong> 如果是通过 Pull Request 工作流，通常在 PR 创建后，后续的 <code>rebase</code> 和 <code>push</code> 会更新 PR。</p></li><li><p><strong>创建 Pull Request (PR) / Merge Request (MR)：</strong><br>在 GitHub, GitLab, Bitbucket 等平台上，你会从 <code>feature-logging</code> 分支向 <code>develop</code> 分支创建一个 Pull Request。<br>你的团队成员会审查你的代码。</p></li><li><p><strong>合并 Pull Request (通常使用 <code>merge</code> 策略)：</strong><br>一旦 PR 被批准，通常会通过平台的 “Merge” 按钮来合并。大多数平台默认或推荐使用<strong>合并提交 (merge commit)</strong> 的方式来合并。</p><p>如果是在本地手动模拟这个合并（不推荐用于团队共享的 <code>develop</code> 分支，通常由 PR 系统处理）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 切换到目标分支 develop</span></span><br><span class="line">git checkout develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 确保 develop 是最新的</span></span><br><span class="line">git pull origin develop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 合并 feature-logging 分支到 develop</span></span><br><span class="line"><span class="comment"># 使用 --no-ff 确保即使可以快进合并，也创建一个合并提交</span></span><br><span class="line"><span class="comment"># 这保留了 feature-logging 分支存在的明确记录</span></span><br><span class="line">git merge --no-ff feature-logging</span><br></pre></td></tr></table></figure><p>这时，<code>develop</code> 分支的历史图会显示一个合并提交，清楚地表明 <code>feature-logging</code> 在何时被集成进来。由于 <code>feature-logging</code> 之前已经 <code>rebase</code> 到了 <code>develop</code> 的最新版本，所以它的提交会整齐地排列在 <code>develop</code> 的历史之上，然后通过一个合并提交连接起来。</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># develop 分支历史可能看起来像这样 (简化版):</span><br><span class="line"># ... --- OldCommit1 --- OldCommit2 (develop 之前的状态)</span><br><span class="line">#           \</span><br><span class="line">#            --- FeatureCommitA<span class="string">&#x27; --- FeatureCommitB&#x27;</span> (来自 rebase 后的 feature-logging) --- MergeCommit (合并 feature-logging 到 develop)</span><br><span class="line">#</span><br><span class="line"># 或者更准确地说，因为 rebase 使得 feature-logging 的基底是 develop 的最新提交：</span><br><span class="line">#</span><br><span class="line"># D1---D2---D3 (develop)</span><br><span class="line">#             \</span><br><span class="line">#              F1<span class="string">&#x27;---F2&#x27;</span> (feature-logging, rebased onto D3)</span><br><span class="line">#</span><br><span class="line"># 当合并时，使用 --no-ff:</span><br><span class="line">#</span><br><span class="line"># D1---D2---D3------------------M (develop after merge)</span><br><span class="line">#             \               /</span><br><span class="line">#              F1<span class="string">&#x27;---F2&#x27;</span>------ (feature-logging)</span><br><span class="line">#</span><br><span class="line"># M 是合并提交。F1<span class="string">&#x27;, F2&#x27;</span> 是 rebase 后的 feature-logging 的提交。</span><br></pre></td></tr></table></figure></li><li><p><strong>推送合并后的 <code>develop</code> 分支：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></li><li><p><strong>删除已被合并的本地和远程功能分支 (可选)：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-logging      <span class="comment"># 删除本地分支</span></span><br><span class="line">git push origin --delete feature-logging <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure></li></ol><p><strong>为什么这个流程好？</strong></p><ul><li><code>rebase</code> 的好处：<ul><li><strong>线性历史：</strong> 在 <code>feature-logging</code> 被合并到 <code>develop</code> 之前，它的历史是相对于 <code>develop</code> 的线性历史，易于理解。</li><li><strong>及早发现冲突：</strong> 定期将 <code>develop</code> 的更改 <code>rebase</code> 到你的功能分支，可以让你在本地、小范围内解决冲突，而不是等到最后合并时面对一个巨大的冲突。</li><li><strong>干净的提交：</strong> 交互式 <code>rebase</code> 允许你整理提交，使它们更有意义。</li></ul></li><li><code>merge</code> (带 <code>--no-ff</code> 或通过 PR) 的好处：<ul><li><strong>保留上下文：</strong> 合并提交清晰地标记了一个功能分支的完成和集成点。你可以从 <code>develop</code> 的历史中轻易看出某个功能是什么时候合并进来的。</li><li><strong>不改写公共历史：</strong> <code>develop</code> 分支的历史不会被改写，这对于团队协作至关重要。</li></ul></li></ul><p><strong>总结黄金法则的体现：</strong></p><ul><li><strong><code>git rebase feature-logging develop</code> (或者 <code>git rebase develop</code> 在 <code>feature-logging</code> 分支上时)：</strong> 这是在 <code>feature-logging</code> 分支上操作的，并且是在你<strong>推送这个分支供他人审查/使用之前</strong>。这是安全的，因为它只修改了你本地的、尚未公开的提交历史。</li><li><strong>一旦 <code>feature-logging</code> 被推送到远程并可能被其他人拉取，或者一旦基于它创建了 Pull Request，就应该避免对这个已公开的分支再执行 <code>rebase</code></strong> (除非你和团队有明确的约定，并且知道如何处理强制推送带来的影响)。如果需要集成 <code>develop</code> 的新更改，此时更安全的做法是在 <code>feature-logging</code> 分支上 <code>git merge develop</code>，或者等待 PR 合并。</li></ul><p>这个流程结合了两者的优点，使得单个功能的开发历史保持整洁，同时主分支的集成点清晰可追溯。</p></blockquote><ul><li><p><strong>b. 切换到 <code>develop</code> 分支并合并：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git merge feature-auth    <span class="comment"># 将 feature-auth 分支合并到 develop</span></span><br><span class="line">                          <span class="comment"># 如果步骤 a 未做或 develop 在此期间又有更新，此处可能产生冲突，需解决</span></span><br></pre></td></tr></table></figure></li><li><p><strong>c. 推送 <code>develop</code> 分支到远程：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin develop</span><br></pre></td></tr></table></figure></li><li><p><strong>d. (可选) 删除功能分支：</strong><br>合并完成后，如果不再需要，可以删除本地和远程的功能分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git branch -d feature-auth          <span class="comment"># 删除本地分支</span></span><br><span class="line">git push origin --delete feature-auth <span class="comment"># 删除远程分支</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>方式二：通过 Pull Request (PR) / Merge Request (MR) 合并 (更推荐)</strong></p><p>这是目前团队协作中更为主流和推荐的方式，尤其是在使用 GitHub, GitLab, Bitbucket 等平台时。</p><ul><li><p><strong>a. 将你的功能分支推送到远程仓库：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin feature-auth</span><br></pre></td></tr></table></figure></li><li><p><strong>b. 在 Git 平台创建 Pull Request：</strong><br>打开你的 GitHub (或类似平台) 仓库页面，你会看到一个提示，可以从 <code>feature-auth</code> 分支创建一个到 <code>develop</code> 分支的 Pull Request (PR)。</p></li><li><p><strong>c. 代码审查与讨论：</strong><br>PR 提供了一个非常好的代码审查（Code Review）机会。团队成员可以查看你的代码变更，提出修改建议，进行讨论。自动化检查（如单元测试、代码风格检查）通常也会在此时运行。</p></li><li><p><strong>d. 合并 PR：</strong><br>一旦 PR 通过审查并得到批准，通常由拥有权限的成员（或者你自己）通过平台的界面点击“Merge Pull Request”按钮。平台会自动将 <code>feature-auth</code> 的代码合并到 <code>develop</code> 分支。</p></li><li><p><strong>e. 更新本地 <code>develop</code> 分支：</strong><br>PR 合并后，远程的 <code>develop</code> 分支已经更新了。你需要将这些变更同步到你的本地 <code>develop</code> 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout develop</span><br><span class="line">git pull origin develop</span><br></pre></td></tr></table></figure></li><li><p><strong>f. (可选) 删除功能分支：</strong> 同方式一。</p></li></ul><h3 id="为什么推荐-Pull-Request-工作流？">为什么推荐 Pull Request 工作流？</h3><p>虽然本地合并简单直接，但 Pull Request 工作流带来了诸多好处：</p><ul><li><strong>代码审查：</strong> 这是最重要的优点之一。其他开发者可以审查你的代码，帮助发现潜在问题、提出改进建议，从而提高代码质量。</li><li><strong>讨论与协作：</strong> PR 提供了一个围绕代码变更进行讨论的集中场所。</li><li><strong>自动化集成：</strong> 可以集成 CI/CD 工具，在合并前自动运行测试、检查代码风格等。</li><li><strong>更清晰的合并历史：</strong> 许多平台在合并 PR 时会创建一个合并提交，使得追踪功能何时被并入主线更加清晰。</li><li><strong>权限控制：</strong> 可以设置分支保护规则，例如要求 PR 必须通过审查才能合并。</li></ul><p>还有一个问题： 为什么会产生冲突以及如何优雅地解决 Git 合并冲突?</p><p><strong>为什么会产生冲突？</strong></p><p>Git 合并冲突发生在 Git 无法自动决定如何合并两个分支上的更改时。当两个不同的分支修改了同一个文件的同一部分，或者一个分支删除了一个文件而另一个分支修改了它时，Git 就会感到困惑。</p><p>主要原因包括：</p><ol><li><strong>并发修改同一行/区域：</strong><ul><li><strong>场景：</strong> 你在你的 <code>feature-A</code> 分支修改了 <code>config.txt</code> 的第 5 行。与此同时，你的同事在 <code>feature-B</code> 分支也修改了 <code>config.txt</code> 的第 5 行。</li><li><strong>冲突：</strong> 当试图将 <code>feature-A</code> 和 <code>feature-B</code> 合并到 <code>develop</code> 分支（或者一个合并到另一个）时，Git 不知道应该保留哪个版本的第 5 行，或者如何组合它们。</li></ul></li><li><strong>一个分支修改文件，另一个分支删除同一文件：</strong><ul><li><strong>场景：</strong> 你在 <code>feature-cleanup</code> 分支删除了一个不再需要的旧文件 <code>old_utils.py</code>。但你的同事在 <code>feature-add-doc</code> 分支为 <code>old_utils.py</code> 添加了文档。</li><li><strong>冲突：</strong> 当合并时，Git 不确定是应该保留被修改的文件（因为它有新内容），还是应该执行删除操作。</li></ul></li><li><strong>合并不同历史的分支时，对同一文件有不同的演变：</strong><ul><li>这种情况更复杂，但本质上还是归结于 Git 在某个文件的特定部分看到了来自不同源头的、无法自动调和的更改。</li></ul></li></ol><p><strong>如何优雅地解决 Git 合并冲突？</strong></p><p>“优雅地”解决冲突意味着：</p><ul><li><strong>准确性：</strong> 确保最终合并的代码是正确的，并且包含了所有预期的更改。</li><li><strong>清晰性：</strong> 解决冲突的过程和结果应该是易于理解的。</li><li><strong>最小化干扰：</strong> 尽快解决冲突，避免阻塞其他人的工作。</li><li><strong>沟通：</strong> 如果冲突涉及他人的代码，与他们沟通以确保解决方案是双方都同意的。</li></ul><p>以下是解决冲突的步骤和一些技巧：</p><p><strong>步骤：</strong></p><ol><li><p><strong>开始合并操作：</strong><br>假设你当前在 <code>main</code> 分支，想要合并 <code>feature</code> 分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git checkout main</span><br><span class="line">git pull origin main   <span class="comment"># 确保 main 是最新的</span></span><br><span class="line">git merge feature</span><br></pre></td></tr></table></figure><p>如果出现冲突，Git 会在终端提示，并且 <code>git status</code> 会显示哪些文件处于冲突状态。</p></li><li><p><strong>识别冲突文件：</strong><br>运行 <code>git status</code>。它会列出 “Unmerged paths”（未合并的路径），这些就是包含冲突的文件。</p><figure class="highlight fsharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Unmerged paths<span class="operator">:</span></span><br><span class="line">  (<span class="keyword">use</span> <span class="string">&quot;git add &lt;file&gt;...&quot;</span> <span class="keyword">to</span> mark resolution)</span><br><span class="line">    both modified<span class="operator">:</span>   config.txt</span><br></pre></td></tr></table></figure></li><li><p><strong>打开冲突文件并解决冲突：</strong><br>Git 会在冲突的文件中用特殊的标记来标示冲突区域：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD (Current Change)</span><br><span class="line"># 这是你当前分支 (例如 main) 的内容</span><br><span class="line">port = 8080</span><br><span class="line">=======</span><br><span class="line"># 这是你正在合并的分支 (例如 feature) 的内容</span><br><span class="line">port = 9000</span><br><span class="line">host = &quot;localhost&quot;</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature (Incoming Change)</span><br></pre></td></tr></table></figure><ul><li><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>：表示冲突区域的开始，后面是当前分支 (HEAD 指向的分支) 的内容。</li><li><code>=======</code>：分隔了两个分支的冲突内容。</li><li><code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</code>：表示冲突区域的结束，后面是被合并分支 (例如 <code>feature</code>) 的内容。</li></ul><p><strong>你的任务是：</strong></p><ul><li>仔细阅读冲突标记之间的代码。</li><li>决定你想要保留哪个版本，或者如何将两个版本结合起来。</li><li><strong>手动编辑文件，删除 <code>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</code>、<code>=======</code>、<code>&gt;&gt;&gt;&gt;&gt;&gt;&gt; branch-name</code> 这些标记，并保留或修改代码，使其成为你期望的最终版本。</strong></li></ul><p>例如，如果你决定保留 <code>feature</code> 分支的端口号，并也想保留 <code>host</code> 设置，你可以修改成：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port = 9000</span><br><span class="line">host = &quot;localhost&quot;</span><br></pre></td></tr></table></figure><p>或者，如果你想保留 <code>main</code> 的端口并添加 <code>host</code>：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">port = 8080</span><br><span class="line">host = &quot;localhost&quot;</span><br></pre></td></tr></table></figure><p><strong>关键是你要做出决定并清理掉 Git 的标记。</strong></p></li><li><p><strong>使用可视化合并工具 (可选但推荐)：</strong><br>许多 IDE (如 Visual Studio Code) 和专门的 Git GUI 客户端 (如 GitKraken, Sourcetree) 提供了强大的三向合并 (three-way merge) 工具。这些工具通常会并排显示你的版本、对方的版本以及共同祖先的版本，并提供一个结果窗格让你更方便地选择和组合更改。</p><p>在 VS Code 中，当检测到冲突时，它通常会在文件名旁边显示标记，并且在编辑器中提供 “Accept Current Change”, “Accept Incoming Change”, “Accept Both Changes”, “Compare Changes” 等便捷操作。</p></li><li><p><strong>标记冲突已解决：</strong><br>在你手动编辑并保存了所有冲突文件后，你需要告诉 Git 你已经解决了这些冲突：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;resolved-file-1&gt; &lt;resolved-file-2&gt; ...</span><br><span class="line"><span class="comment"># 或者，如果你解决了所有冲突文件</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><p><code>git status</code> 现在应该显示这些文件为 “Changes to be committed”。</p></li><li><p><strong>完成合并：</strong><br>一旦所有冲突都已解决并暂存 (staged)，就可以提交合并了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit</span><br></pre></td></tr></table></figure><p>Git 通常会自动为你生成一个合并提交信息，例如 “Merge branch ‘feature’ into main”。你可以修改它，但通常默认的就足够了。<br><strong>注意：</strong> 如果你是在 <code>rebase</code> 过程中遇到冲突，解决后使用 <code>git rebase --continue</code> 而不是 <code>git commit</code>。</p></li><li><p><strong>测试！</strong><br>合并后，务必运行测试（单元测试、集成测试等）以确保你的更改没有破坏任何东西，并且合并后的代码按预期工作。</p></li></ol><p><strong>优雅解决冲突的技巧：</strong></p><ul><li><p>经常拉取和变基/合并：</p><ul><li>如果你在特性分支上工作，定期从主开发分支（如 <code>develop</code> 或 <code>main</code>）<code>pull</code> (如果主分支是共享的，通常是 <code>pull --rebase</code> 到你的特性分支，或者 <code>merge</code> 主分支到你的特性分支) 可以帮助你及早发现并解决小冲突，而不是等到最后面对一个巨大的冲突。</li></ul></li><li><p>小而专注的提交和分支：</p><ul><li>较小的、逻辑上独立的提交和分支通常更容易合并，因为它们涉及的更改范围较小。</li></ul></li><li><p>沟通，沟通，再沟通：</p><ul><li>如果你看到一个冲突，并且不确定如何正确解决它，特别是当它涉及到其他人的代码时，<strong>立即与相关同事沟通</strong>。他们最了解自己的更改意图。一起查看冲突可以更快、更准确地解决问题。</li></ul></li><li><p>理解更改的意图：</p><ul><li>不要仅仅机械地选择“我的”或“他们的”代码。尝试理解每个更改试图实现什么。有时，正确的解决方案是两者的结合，或者是一个全新的方案。</li></ul></li><li><p>使用 <code>git log --merge -p &lt;file&gt;</code>：</p><ul><li>在合并冲突后，但在解决之前，这个命令可以显示导致冲突的具体提交以及它们对文件的更改。这有助于理解冲突的来源。</li><li><code>git diff &lt;file&gt;</code> 也可以显示冲突标记。</li></ul></li><li><p>不要害怕 <code>git merge --abort</code>：</p><ul><li><p>如果你在解决冲突的过程中感到困惑或搞砸了，只要你还没有</p><p>git commit(或git rebase --continue)，你通常可以安全地中止合并：</p><p>git merge --abort</p><p>这会将你的分支恢复到合并之前的状态，你可以重新尝试。对于rebase，使用git rebase --abort。</p></li></ul></li><li><p>利用 IDE 的合并工具：</p><ul><li>VS Code 等现代 IDE 内置了非常好的冲突解决界面，可以让你逐个处理冲突点，选择接受当前更改、传入更改或两者都接受，甚至手动编辑结果。这通常比直接在文本编辑器中处理原始冲突标记更直观。</li></ul></li></ul><p><strong>示例：</strong></p><p>假设 <code>main</code> 分支的 <code>app.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main 分支</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server on port 8000&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server()</span><br></pre></td></tr></table></figure><p><code>feature</code> 分支的 <code>app.py</code> (基于 <code>main</code> 的某个旧版本创建并修改)：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feature 分支</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">debug_mode=<span class="literal">False</span></span>):</span><br><span class="line">    port = <span class="number">8080</span></span><br><span class="line">    <span class="keyword">if</span> debug_mode:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server in DEBUG mode on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server(debug_mode=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>当你尝试 <code>git merge feature</code> (在 <code>main</code> 分支上)：</p><ol><li><p>Git 会报告 <code>app.py</code> 冲突。</p></li><li><pre><code>app.py<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">内容会变成：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line"><span class="comment"># main 分支</span></span><br><span class="line">def start_server():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Starting server on port 8000&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server()</span><br><span class="line">=======</span><br><span class="line"><span class="comment"># feature 分支</span></span><br><span class="line">def start_server(<span class="attribute">debug_mode</span>=<span class="literal">False</span>):</span><br><span class="line">   <span class="built_in"> port </span>= 8080</span><br><span class="line">    <span class="keyword">if</span> debug_mode:</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Starting server in DEBUG mode on port &#123;port&#125;&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(f<span class="string">&quot;Starting server on port &#123;port&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server(<span class="attribute">debug_mode</span>=<span class="literal">True</span>)</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature</span><br></pre></td></tr></table></figure></code></pre></li><li><p>解决：</p><p>你需要决定最终的start_server函数和调用。也许你想要feature分支的函数定义，但保留main分支的简单调用，或者更新调用以使用新参数。</p><p>假设你决定采用 feature分支的函数，并让它默认以非调试模式启动：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 解决后的 app.py</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">start_server</span>(<span class="params">debug_mode=<span class="literal">False</span></span>):</span><br><span class="line">    port = <span class="number">8080</span> <span class="comment"># 或者你决定用 8000，或者从配置读取</span></span><br><span class="line">    <span class="keyword">if</span> debug_mode:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server in DEBUG mode on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Starting server on port <span class="subst">&#123;port&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">start_server() <span class="comment"># 决定默认不以 debug 模式启动</span></span><br></pre></td></tr></table></figure></li><li><p>然后 <code>git add app.py</code> 和 <code>git commit</code>。</p></li></ol><p>通过遵循这些步骤和技巧，你可以更自信和有效地处理 Git 合并冲突。</p><h3 id="总结">总结</h3><p>所以，最初提问的 Git 操作流程是完全正确的，并且是功能分支开发的基础。在此基础上，引入 Pull Request 的概念会让团队协作更加规范和高效。</p><p>选择哪种方式取决于你的团队规模、项目复杂度和协作习惯。但无论如何，清晰的分支策略是高效 Git 使用的关键。</p><p>希望这篇博客对你有所帮助！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;—&lt;/p&gt;
&lt;p&gt;title: Git实战: git工作流程&lt;/p&gt;
&lt;p&gt;description: git协同开发&lt;/p&gt;
&lt;p&gt;mathjax: true&lt;/p&gt;
&lt;p&gt;tags:&lt;/p&gt;
&lt;p&gt;- git&lt;/p&gt;
&lt;p&gt;categories:&lt;/p&gt;
&lt;p&gt;- git</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>你的皮肤是如何精心设计的？它为何是人体最大的器官？【皮肤真相】</title>
    <link href="https://yjyrichard.github.io/posts/d1d9e1a.html"/>
    <id>https://yjyrichard.github.io/posts/d1d9e1a.html</id>
    <published>2025-05-15T16:42:00.000Z</published>
    <updated>2025-05-15T16:42:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1>你的皮肤是如何精心设计的？它为何是人体最大的器官？【皮肤真相】</h1><p>皮肤，不是王者荣耀里28块八，加十点攻击的那个<br>而是让你饱受掉皮，粉刺，暗斑，黑头，青春痘之苦<br>还贼费钱的那个</p><p><img src="https://photo.459122.xyz/i/116e29ad683f7493c514d7646c2b98eb.png" alt="image-20250512122727405"></p><p>人类辛辛苦苦进化了1000多万年<br>身体各个组织都在发挥着积极的效用<br>总不会闲来无事<br>进化出这么玩意儿来给自己添堵吧？<br>事实上，皮肤才是人体最大的器官<br>这套压扁了约1.7平方米<br>占人体体重约16%的器官<br>是如何精心设计的？<br>它究竟有哪些隐藏的功能？<br>我们又该如何维护和保养？<br>这听起来很复杂<br>但实际并不简单</p><p><img src="https://photo.459122.xyz/i/6b7aa3414bad4fafbec5820b856d957c.png" alt="image-20250512122807455"></p><p>今天就让我们一起走进皮肤的真相<br>人体的皮肤很薄<br>一枚硬币的厚度约2mm<br>而皮肤大概是0.5到4mm<br>所以我们经常会用“肤浅”来夸一个博主学识渊博<br>人体的皮肤中<br>眼睑的部分最薄，脚后跟的皮肤最厚<br>皮肤的上层是表皮层</p><p><img src="https://photo.459122.xyz/i/cd86fc866fff476c0e9822550d65f16e.png" alt="image-20250512122908593"></p><p>表皮层的最上面是我们熟悉的角质层<br>角质层主要是由多层没有细胞核的死亡细胞组成<br>这也意味着所谓的肌肤之亲，不过是死亡细胞的触碰，没什么好羡慕的<br>老话里经常用不死也要脱层皮来形容受伤严重<br>但事实上你每时每刻都在蜕皮<br>人体每分钟会脱落上万的表皮细胞<br>当这些细胞脱落时<br>位于基底层的细胞就会被推上来<br>形成新的角质层<br>这样循环往复28天后<br>你的整个表皮层就会焕然一新</p><p><img src="https://photo.459122.xyz/i/0cbe2d573e4f87097ec465587043a27f.png" alt="image-20250512123014888"></p><p>大扫除的时候，我们经常疑惑<br>不知道哪里来这么多灰尘<br>实际上你清扫的极有可能是自己的碎片<br>这样周而复始的更新<br>加上拉伸强度超过钢筋的胶原纤维<br>保证了人类在生长和变胖的过程中<br>不会把自己胀破<br>但并不是所有的动物都有这样的天赋<br>对于一些爬行动物而言<br>它们外层的皮肤不能跟随他们一起生长，所以它们需要一次性脱落整个表皮层【蛇】<br>角质层的细胞内含有角蛋白<br>它有助于减少水分的增发<br>甚至能够吸收水分<br>所以冬天泡澡的时候<br>很多人会出现皮肤起皱的现象</p><p>表皮层的下面是真皮层<br>里面驻扎着皮肤里所有的活跃系统<br>血管淋巴管<br>神经纤维<br>毛囊根部<br>汗腺和皮脂腺</p><p><img src="https://photo.459122.xyz/i/800e27131fdad1db9277709142d4176e.png" alt="image-20250512123133922"></p><p>皮脂腺可以分泌油脂<br>覆盖在皮肤的表面<br>这帮助我们保持皮肤柔软<br>让许多外来生物站不住脚<br>同时也减少了皮下水分的增发<br>保持皮肤的湿润<br>所以当别人再说你油腻的时候<br>请表示感谢<br>因为那不是骂而是夸【柔软，健康，水润】，皮脂腺的数量以头部面部胸背部居多<br>这也是为什么这些地方容易长痘<br>头发总是油油的<br>在头顶招摇<br>对于所有的哺乳动物而言<br>一旦感受到寒冷<br>毛囊周围的肌肉就会收缩<br>这个过程被称作立毛<br>茂密的毛发能够截流靠近皮肤的那层空气<br>阻碍空气的流通<br>从而减少热量的损失<br>这是北极熊<br>可以在零下60度的环境下生存的原因<br>但用毛发御寒有一个重要的前提茂密</p><p>遗憾的是<br>人类在进化的过程中<br>不仅身上的毛少了<br>头上的毛也越来越少了<br>当遭遇寒冷或者土味情话的时候<br>除了起鸡皮疙瘩<br>再没有半点作用<br>人类为什么要放弃毛这么保暖的东西<br>目前还不甚明了<br>有一种假说是为了出汗<br>黑猩猩的汗腺只有人类的一半<br>这使得人类成为大自然里为数不多<br>可以通过全身出汗来调节体温的动物<br>当身体过热的时候<br>汗腺会蒸发汗液<br>并通过200到400万条汗腺渗透到皮肤表面<br>随着汗液的蒸发<br>人体快速冷却<br>使得体温降至安全范围<br>这样出色的散热系统<br>使得人类成为长跑界耐力最强的生物<br>而大多数四足动物靠喘气来散热<br>这跟持续跑动中的均匀呼吸互不相容<br>人类体毛的丧失以及汗液的分泌<br>有助于我们对温度最敏感的器官：<br>大脑显著变大<br>换句话说<br>你这么聪明<br>可能是因为出汗了<br>包裹在真皮中的各种受体<br>让我们拥有感知这个世界的能力触觉<br>但这个我们习以为常的感知构成却并不简单<br>比如麦斯纳小体位于皮肤浅表的真皮层</p><p><img src="https://photo.459122.xyz/i/ed650ef0029b30bea42a55527f072a21.png" alt="image-20250512123424569"></p><p>可以用来感知纹理<br>并检测物体是否划过皮肤<br>在人体的性感带和其他高度敏感的区域<br>最为丰富<br>比如指尖<br>嘴唇舌头以及那些私密位置<br>帕西尼亚小体分布在皮肤<br>较深的真皮层和皮下组织中<br>在传递物体引起的振动信息时最为有效<br>甚至可以检测到<br>微小到0.0001mm的运动<br>这个对我们使用工具很有帮助<br>比如我们使用菜刀切菜的时候<br>哪怕没有直接接触到食材<br>也能根据震动区分所切的食物<br>所有的受体都经过精心的调试<br>好让你感受风<br>感受雨<br>感受爱人的轻抚<br>感受这个世界<br>当然我们的皮肤也并非毫无破绽<br>有时毛孔会因为少数死皮和干枯的皮肤而堵塞<br>形成所谓的粉刺</p><p><img src="https://photo.459122.xyz/i/5535dac752cfbf7eee3f54311217784e.png" alt="image-20250512123525336"></p><p>如果再加上毛囊感染发炎<br>就会出现炎症性丘疹<br>结节囊肿<br>也就是青少年的噩梦<br>痤疮</p><p><img src="https://photo.459122.xyz/i/56c968a2c50337c0fbe75b138e8ce825.png" alt="image-20250512123545369"></p><p>年轻的时候我们的皮脂腺会非常活跃<br>所以青春痘成为很多人正在经历或者<br>逝去的青春<br>青春到逝去后<br>皮肤老化成为大家关切的问题<br>其中最为人熟知和接受的是衰老的自由基理论<br>这种理论认为<br>过度氧化会导致自由基过量<br>加剧胶原蛋白的胶原聚合<br>加速弹性纤维降解<br>导致皮肤张力下降<br>失去弹性和柔软性<br>同时过量自由基可直接降解透明质酸<br>使真皮保水能力和支持力下降<br>导致皮肤出现皱纹<br>干燥角化或光泽<br>那我们该如何保养和维护皮肤呢？<br>护肤品<br>当然除了使用护肤品外<br>我们还需要注意防晒<br>太阳中的紫外线可以帮助人体形成维生素D<br>维生素D有助于形成强壮的骨骼和牙齿<br>调节人体免疫<br>但过量的紫外线会加速皮肤的衰老<br>导致色斑的形成<br>甚至引起皮肤癌<br>户外活动要尽可能避开紫外线<br>最强的上午十点至下午四点午睡<br>在阳光下长时间暴露<br>需要做好各项防晒措施<br>皮肤科有句老话<br>养儿不防老<br>防晒才防老<br>再者是规律作息<br>熬夜可能会导致血管型眶周色素沉淀<br>也就是我们俗称的黑眼圈<br>熬夜和压力还会导致脱发<br>眼袋<br>肤色暗沉<br>油脂分泌异常等皮肤问题<br>最后多吃蔬果<br>多喝水<br>减少压力<br>适量运动<br>这些能够改善人体其他器官的方法<br>同样适用于皮肤<br>因为皮肤本就是人体最大的器官</p><p>视频源地址：【你的皮肤是如何精心设计的？它为何是人体最大的器官？【皮肤真相】】<a href="https://www.bilibili.com/video/BV1nh411E7Qm?vd_source=b0f2742e7b4a2838ad4d1870af693bc1">https://www.bilibili.com/video/BV1nh411E7Qm?vd_source=b0f2742e7b4a2838ad4d1870af693bc1</a></p>]]></content>
    
    
    <summary type="html">皮肤科普</summary>
    
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/categories/%E7%A7%91%E6%99%AE/"/>
    
    
    <category term="科普" scheme="https://yjyrichard.github.io/tags/%E7%A7%91%E6%99%AE/"/>
    
  </entry>
  
  <entry>
    <title>JWT</title>
    <link href="https://yjyrichard.github.io/posts/1bb08f7a.html"/>
    <id>https://yjyrichard.github.io/posts/1bb08f7a.html</id>
    <published>2025-05-13T04:09:03.857Z</published>
    <updated>2025-05-13T04:41:41.244Z</updated>
    
    <content type="html"><![CDATA[<h1>JWT</h1><p><strong>什么是JWT</strong>：</p><p>JSON Web Token（JSON Web令牌）</p><p>是一个开放标准(rfc7519)，它定义了一种紧凑的、自包含的方式，用于在各方之间以JSON对象安全地传输信息。此信息可以验证和信任，因为它是数字签名的。jwt可以使用秘密〈使用HNAC算法）或使用RSA或ECDSA的公钥/私钥对进行签名。</p><p>通过JSON形式作为Web应用中的令牌，用于在各方之间安全地将信息作为JSON对象传输。在数据传输过程中还可以完成数据加密、签名等相关处理。</p><p><strong>JWT作用</strong>：<br>授权：一旦用户登录，每个后续请求将包括JWT，从而允许用户访问该令牌允许的路由，服务和资源。它的开销很小并且可以在不同的域中使用。如：单点登录。<br>信息交换：在各方之间安全地传输信息。JWT可进行签名（如使用公钥/私钥对)，因此可确保发件人。由于签名是使用标头和有效负载计算的，因此还可验证内容是否被篡改。</p><h2 id="1-传统Session">1.传统Session</h2><h3 id="1-1-认证方式">1.1.认证方式</h3><p>http协议本身是一种无状态的协议，如果用户向服务器提供了用户名和密码来进行用户认证，下次请求时，用户还要再一次进行用户认证才行。因为根据http协议，服务器并不能知道是哪个用户发出的请求，所以为了让我们的应用能识别是哪个用户发出的请求，我们只能在服务器存储─份用户登录的信息，这份登录信息会在响应时传递给浏览器，告诉其保存为cookie,以便下次请求时发送给我们的应用，这样应用就能识别请求来自哪个用户。</p><p><img src="https://photo.459122.xyz/i/cedbba6d182b56196909d63492c4ed3b.png" alt="image-20250513113050168"></p><h3 id="1-2-暴露的问题">1.2.暴露的问题</h3><p>用户经过应用认证后，应用都要在服务端做一次记录，以方便用户下次请求的鉴别，通常而言session都是保存在内存中，而随着认证用户的增多，服务端的开销会明显增大；<br>用户认证后，服务端做认证记录，如果认证的记录被保存在内存中的话，用户下次请求还必须要请求在这台服务器上，这样才能拿到授权的资源。在分布式的应用上，限制了负载均衡器的能力。以此限制了应用的扩展能力；<br>session是基于cookie来进行用户识别，cookie如果被截获，用户很容易受到CSRF（跨站伪造请求攻击)攻击；<br>在前后端分离系统中应用解耦后增加了部署的复杂性。通常用户一次请求就要转发多次。如果用session每次携带sessionid到服务<br>器，服务器还要查询用户信息。同时如果用户很多。这些信息存储在服务器内存中，给服务器增加负担。还有就是sessionid就是一个特征值，表达的信息不够丰富。不容易扩展。而且如果你后端应用是多节点部署。那么就需要实现session共享机制。不方便集群应用。</p><p><img src="https://photo.459122.xyz/i/c87606efc52e8cde5aa857da6c4fe450.png" alt="image-20250513113438956"></p><h2 id="2-JWT-运行流程">2.JWT 运行流程</h2><h3 id="2-1-认证流程">2.1.认证流程</h3><p>前端通过Web表单将自己的用户名和密码发送到后端的接口。该过程一般是HTTP的POST请求。建议的方式是通过SSL加密的传输(https协议)，从而避免敏感信息被嗅探。</p><p>后端核对用户名和密码成功后，将用户的id等其他信息作为JWT Payload(负载)，将其与头部分别进行Base64编码拼接后签名，形成一个JWT(Token)。</p><p>后端将JWT字符串作为登录成功的返回结果返回给前端。前端可以将返回的结果保存在localStorage（浏览器本地缓存）或sessionStorage（session缓存）上，退出登录时前端删除保存的JWT即可。</p><p>前端在每次请求时将JWT放入HTTP的Header中的Authorization位。(解决XSS和XSRF问题）HEADER</p><p>后端检查是否存在，如存在验证JWT的有效性。例如，检查签名是否正确﹔检查Token是否过期;检查Token的接收方是否是自己(可选）</p><p>验证通过后后端使用JWT中包含的用户信息进行其他逻辑操作，返回相应结果。</p><h3 id="2-2-JWT优点">2.2.JWT优点</h3><ul><li>简洁(Compact)：可以通过URL，POST参数或者在HTTP header发送，数据量小，传输速度也很快；</li><li>自包含(Self-contained)：负载中包含了所有用户所需要的信息，避免了多次查询数据库；</li><li>Token是以JSON加密的形式保存在客户端，所以JWT是跨语言的，原则上任何web形式都支持。<br>不需要在服务端保存会话信息，特别适用于分布式微服务。</li></ul><h2 id="3-JWT结构">3.JWT结构</h2><p>就是令牌token，是一个String字符串，由3部分组成，中间用点隔开</p><p>令牌组成：</p><ol><li>标头（Header）</li><li>有效载荷（Payload）</li><li>签名（Signature）<br>token格式：head.payload.singurater 如：xxxxx.yyyy.zzzz</li></ol><p>Header：有令牌的类型和所使用的签名算法，如HMAC、SHA256、RSA；使用Base64编码组成；（Base64是一种编码，不是一种加密过程，可以被翻译成原来的样子）</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;alg&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;HS256&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;JWT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Payload ：有效负载，包含声明；声明是有关实体（通常是用户）和其他数据的声明，不放用户敏感的信息，如密码。同样使用Base64编码</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;sub&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;123&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;John Do&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;admin&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>Signature ：前面两部分都使用Base64进行编码，前端可以解开知道里面的信息。Signature需要使用编码后的header和payload<br>加上我们提供的一个密钥，使用header中指定的签名算法(HS256)进行签名。签名的作用是保证JWT没有被篡改过</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HMACSHA256(base64UrlEncode(header) + <span class="string">&quot;.&quot;</span> + base64UrlEncode(payload)<span class="punctuation">,</span> secret);</span><br></pre></td></tr></table></figure><p>**签名目的：**签名的过程实际上是对头部以及负载内容进行签名，防止内容被窜改。如果有人对头部以及负载的内容解码之后进行修改，再进行编码，最后加上之前的签名组合形成新的JWT的话，那么服务器端会判断出新的头部和负载形成的签名和JWT附带上的签名是不一样的。如果要对新的头部和负载进行签名，在不知道服务器加密时用的密钥的话，得出来的签名也是不一样的。</p><p>信息安全问题：Base64是一种编码，是可逆的，适合传递一些非敏感信息；JWT中不应该在负载中加入敏感的数据。如传输用户的ID被知道也是安全的，如密码不能放在JWT中；JWT常用于设计用户认证、授权系统、web的单点登录。</p><p><img src="https://photo.459122.xyz/i/211669cfe0d977e9b769f86d7f008267.png" alt="image-20250513114254471"></p><h2 id="4-JWT使用">4.JWT使用</h2><h3 id="4-1-引入依赖">4.1.引入依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--引入JWT--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.10.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4-2-生成token">4.2.生成token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">HashMap&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">instance.add(Calendar.SECOND,<span class="number">20</span>);</span><br><span class="line"><span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWT.create()</span><br><span class="line">        .withHeader(map) <span class="comment">//可以不设定，就是使用默认的</span></span><br><span class="line">        .withClaim(<span class="string">&quot;userId&quot;</span>,<span class="number">20</span>)<span class="comment">//payload  //自定义用户名</span></span><br><span class="line">        .withClaim(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;zhangsan&quot;</span>)</span><br><span class="line">        .withExpiresAt(instance.getTime()) <span class="comment">//指定令牌过期时间</span></span><br><span class="line">        .sign(Algorithm.HMAC256(<span class="string">&quot;fdahuifeuw78921&quot;</span>));<span class="comment">//签名</span></span><br></pre></td></tr></table></figure><h4 id="4-3-根据令牌和签名解析数据">4.3.根据令牌和签名解析数据</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">JWTVerifier</span> <span class="variable">jwtVerifier</span> <span class="operator">=</span> JWT.require(Algorithm.HMAC256(<span class="string">&quot;fdahuif921&quot;</span>)).build();</span><br><span class="line">        <span class="type">DecodedJWT</span> <span class="variable">decodedJWT</span> <span class="operator">=</span> jwtVerifier.verify(token);</span><br><span class="line">        decodedJWT.getClaim(<span class="string">&quot;userId&quot;</span>).asInt();<span class="comment">//获取负载里面对应的内容</span></span><br><span class="line">        decodedJWT.getClaim(<span class="string">&quot;username&quot;</span>).asString();</span><br><span class="line">        decodedJWT.getExpiresAt();<span class="comment">//获取过期时间</span></span><br></pre></td></tr></table></figure><h4 id="4-4-常见异常信息">4.4.常见异常信息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SignatureVerificationException <span class="comment">//签名不一致异常</span></span><br><span class="line">TokenExpiredException <span class="comment">//令牌过期异常</span></span><br><span class="line">AlgorithmMismatchException <span class="comment">//算法不匹配异常</span></span><br><span class="line">InvalidClaimException <span class="comment">//失效的payload异常（传给客户端后，token被改动，验证不一致）</span></span><br></pre></td></tr></table></figure><h2 id="5-封装工具类">5.封装工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">SIGNATURE</span> <span class="operator">=</span> <span class="string">&quot;token!@#$%^7890&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map //传入payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getToken</span><span class="params">(Map&lt;String,String&gt; map)</span>&#123;</span><br><span class="line">        JWTCreator.<span class="type">Builder</span> <span class="variable">builder</span> <span class="operator">=</span> JWT.create();</span><br><span class="line">        map.forEach((k,v)-&gt;&#123;</span><br><span class="line">            builder.withClaim(k,v);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="type">Calendar</span> <span class="variable">instance</span> <span class="operator">=</span> Calendar.getInstance();</span><br><span class="line">        instance.add(Calendar.SECOND,<span class="number">7</span>);</span><br><span class="line">        builder.withExpiresAt(instance.getTime());</span><br><span class="line">        <span class="keyword">return</span> builder.sign(Algorithm.HMAC256(SIGNATURE)).toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 验证token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">verify</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取token中payload</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> DecodedJWT <span class="title function_">getToken</span><span class="params">(String token)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JWT.require(Algorithm.HMAC256(SIGNATURE)).build().verify(token);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-SpringBoot整合JWT">6.SpringBoot整合JWT</h2><h4 id="6-1-登录时生成token">6.1.登录时生成token</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//controller层接收数据，生成token，并响应</span></span><br><span class="line">Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">userDB</span> <span class="operator">=</span> userService.login(user);</span><br><span class="line">    Map&lt;String,String&gt; payload = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">    payload.put(<span class="string">&quot;id&quot;</span>,userDB.getId());</span><br><span class="line">    payload.put(<span class="string">&quot;name&quot;</span>,userDB.getName());</span><br><span class="line">    <span class="comment">//生成JWT令牌</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> JWTUtils.getToken(payload);</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">true</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;认证成功&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;token&quot;</span>,token);<span class="comment">//响应token</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    map.put(<span class="string">&quot;state&quot;</span>,<span class="string">&quot;false&quot;</span>);</span><br><span class="line">    map.put(<span class="string">&quot;msg&quot;</span>,e.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-2-声明一个token拦截器类">6.2.声明一个token拦截器类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.AlgorithmMismatchException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.SignatureVerificationException;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.exceptions.TokenExpiredException;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.databind.ObjectMapper;</span><br><span class="line"><span class="keyword">import</span> com.office.utils.JWTUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * JWT验证拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JWTInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Map&lt;String,Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">//令牌建议是放在请求头中，获取请求头中令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            JWTUtils.verify(token);<span class="comment">//验证令牌</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//放行请求</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (SignatureVerificationException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;无效签名&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (TokenExpiredException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token过期&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (AlgorithmMismatchException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token算法不一致&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            map.put(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;token失效&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(<span class="string">&quot;state&quot;</span>,<span class="literal">false</span>);<span class="comment">//设置状态</span></span><br><span class="line">        <span class="comment">//将map转化成json，response使用的是Jackson</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectMapper</span>().writeValueAsString(map);</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=UTF-8&quot;</span>);</span><br><span class="line">        response.getWriter().print(json);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="6-3-配置拦截器">6.3.配置拦截器</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.office.interceptor.JWTInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">InterceptorConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">JWTInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/user/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">JWT学习</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>模拟</title>
    <link href="https://yjyrichard.github.io/posts/d1f7904c.html"/>
    <id>https://yjyrichard.github.io/posts/d1f7904c.html</id>
    <published>2025-05-07T08:22:45.982Z</published>
    <updated>2025-05-17T15:36:36.987Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://leetcode.cn/problems/two-sum/description/">1. 两数之和 - 力扣（LeetCode）</a></p><blockquote><p>朴素解法 由于我们每次要从数组中找两个数。 因此一个很简单的思路是：使用两重循环枚举下标 i 和 j ，分别代表要找的两个数。 然后判断 nums[i] + nums[j] == target 是否成立。 另外为了防止得到重复的解，我们需要在第一层循环中让 i 从 0 开始，到 n - 2 结束（确保能取 到下一位数作为 j ）；在第二层循环中让 j 从 i + 1 开始，到 n - 1 结束。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums,<span class="type">int</span> t)&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> nums.length;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;n-<span class="number">1</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i+<span class="number">1</span>;j&lt;n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(t==nums[i]+nums[j])<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;i,j&#125;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度O($n^2$)</p><p>哈希表</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] twoSum(<span class="type">int</span>[] nums,<span class="type">int</span> t)&#123;</span><br><span class="line">        Map&lt;Integer,Integer&gt;map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i&lt;nums.length;i++)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> nums[i],b = t-a;</span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(b))<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;map.get(b),i&#125;;</span><br><span class="line">            map.put(a,i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/add-two-numbers/description/">2. 两数相加 - 力扣（LeetCode）</a></p><p>朴素解法（哨兵技巧） 这是道模拟题，模拟人工竖式做加法的过程： 从最低位至最高位，逐位相加，如果和大于等于 10，则保留个位数字，同时向前一位进 1 如果 最高位有进位，则需在最前面补 1。 做有关链表的题目，有个常用技巧：添加一个虚拟头结点（哨兵），帮助简化边界情况的判断。 代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> ListNode <span class="title function_">addTwoNumbers</span><span class="params">(ListNode l1,ListNode l2)</span>&#123;</span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">dummy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ListNode</span>(<span class="number">0</span>);<span class="comment">//哨兵</span></span><br><span class="line">        <span class="type">ListNode</span> <span class="variable">tmp</span> <span class="operator">=</span> dummy;</span><br><span class="line">        <span class="type">int</span> <span class="variable">t</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(l1!=<span class="literal">null</span> || l2!=<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> l1!=<span class="literal">null</span> ? l1.val : <span class="number">0</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">b</span> <span class="operator">=</span> l2!=<span class="literal">null</span> ? l2.val : <span class="number">0</span>;</span><br><span class="line">            t = a + b + t;</span><br><span class="line">            tmp.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(t % <span class="number">10</span>);</span><br><span class="line">            t/=<span class="number">10</span>;</span><br><span class="line">            <span class="keyword">if</span>(l1!=<span class="literal">null</span>)l1=l1.next;</span><br><span class="line">            <span class="keyword">if</span>(l2!=<span class="literal">null</span>)l2=l2.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t&gt;<span class="number">0</span>) tmp.next = <span class="keyword">new</span> <span class="title class_">ListNode</span>(t);</span><br><span class="line">        <span class="keyword">return</span> dummy.next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">刷题</summary>
    
    
    
    <category term="算法与数据结构" scheme="https://yjyrichard.github.io/categories/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="算法与数据结构" scheme="https://yjyrichard.github.io/tags/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（5）</title>
    <link href="https://yjyrichard.github.io/posts/f13443ca.html"/>
    <id>https://yjyrichard.github.io/posts/f13443ca.html</id>
    <published>2025-05-06T07:02:44.802Z</published>
    <updated>2025-05-06T07:13:08.400Z</updated>
    
    <content type="html"><![CDATA[<h1>6，行为型模式</h1><h2 id="6-5-状态模式">6.5 状态模式</h2><h3 id="6-5-1-概述">6.5.1 概述</h3><p>【例】通过按钮来控制一个电梯的状态，一个电梯有开门状态，关门状态，停止状态，运行状态。每一种状态改变，都有可能要根据其他状态来更新处理。例如，如果电梯门现在处于运行时状态，就不能进行开门操作，而如果电梯门是停止状态，就可以执行开门操作。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/d4df17c360905176ed6af237f0c8c93c.png" alt="状态模式前"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILift</span> &#123;</span><br><span class="line">    <span class="comment">//电梯的4个状态</span></span><br><span class="line">    <span class="comment">//开门状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">OPENING_STATE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//关门状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">CLOSING_STATE</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line">    <span class="comment">//运行状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">RUNNING_STATE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="comment">//停止状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">STOPPING_STATE</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置电梯的状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯的动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Lift</span> <span class="keyword">implements</span> <span class="title class_">ILift</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> state;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setState</span><span class="params">(<span class="type">int</span> state)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = state;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行关门动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯关门了。。。&quot;</span>);<span class="comment">//只有开门状态可以关闭电梯门，可以对应电梯状态表来看</span></span><br><span class="line">                <span class="built_in">this</span>.setState(CLOSING_STATE);<span class="comment">//关门之后电梯就是关闭状态了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //已经是关门状态，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //运行时电梯门是关着的，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                <span class="comment">//do nothing //停止时电梯也是关着的，不能关门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行开门动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:<span class="comment">//门已经开了，不能再开门了</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//关门状态，门打开:</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯门打开了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(OPENING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing 运行时电梯不能开门</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯门开了。。。&quot;</span>);<span class="comment">//电梯停了，可以开门了</span></span><br><span class="line">                <span class="built_in">this</span>.setState(OPENING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行运行动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE:<span class="comment">//电梯不能开着门就走</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//门关了，可以运行了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(RUNNING_STATE);<span class="comment">//现在是运行状态</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:</span><br><span class="line">                <span class="comment">//do nothing 已经是运行状态了</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                System.out.println(<span class="string">&quot;电梯开始运行了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(RUNNING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行停止动作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (<span class="built_in">this</span>.state) &#123;</span><br><span class="line">            <span class="keyword">case</span> OPENING_STATE: <span class="comment">//开门的电梯已经是是停止的了(正常情况下)</span></span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> CLOSING_STATE:<span class="comment">//关门时才可以停止</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯停止了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(STOPPING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> RUNNING_STATE:<span class="comment">//运行时当然可以停止了</span></span><br><span class="line">                System.out.println(<span class="string">&quot;电梯停止了。。。&quot;</span>);</span><br><span class="line">                <span class="built_in">this</span>.setState(STOPPING_STATE);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> STOPPING_STATE:</span><br><span class="line">                <span class="comment">//do nothing</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Lift</span> <span class="variable">lift</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Lift</span>();</span><br><span class="line">        lift.setState(ILift.STOPPING_STATE);<span class="comment">//电梯是停止的</span></span><br><span class="line">        lift.open();<span class="comment">//开门</span></span><br><span class="line">        lift.close();<span class="comment">//关门</span></span><br><span class="line">        lift.run();<span class="comment">//运行</span></span><br><span class="line">        lift.stop();<span class="comment">//停止</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>问题分析：</p><ul><li>使用了大量的switch…case这样的判断（if…else也是一样)，使程序的可阅读性变差。</li><li>扩展性很差。如果新加了断电的状态，我们需要修改上面判断逻辑</li></ul><p><strong>定义：</strong></p><p>对有状态的对象，把复杂的“判断逻辑”提取到不同的状态对象中，允许状态对象在其内部状态发生改变时改变其行为。</p><h3 id="6-5-2-结构">6.5.2 结构</h3><p>状态模式包含以下主要角色。</p><ul><li>环境（Context）角色：也称为上下文，它定义了客户程序需要的接口，维护一个当前状态，并将与状态相关的操作委托给当前状态对象来处理。</li><li>抽象状态（State）角色：定义一个接口，用以封装环境对象中的特定状态所对应的行为。</li><li>具体状态（Concrete  State）角色：实现抽象状态所对应的行为。</li></ul><h3 id="6-5-3-案例实现">6.5.3 案例实现</h3><p>对上述电梯的案例使用状态模式进行改进。类图如下：</p><p><img src="https://photo.459122.xyz/i/c98b154cd52da60f4135cbddc6577bbf.png" alt="状态模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象状态类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line">    <span class="comment">//定义一个环境角色，也就是封装状态的变化引起的功能变化</span></span><br><span class="line">    <span class="keyword">protected</span> Context context;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setContext</span><span class="params">(Context context)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.context = context;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯开门动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯关门动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯运行动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯停止动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开启状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OpenningState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开启当然可以关闭了，我就想测试一下电梯门开关功能</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯门开启...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.closeingState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门不能开着就跑，这里什么也不做</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开门状态已经是停止的了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RunningState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//运行的时候开电梯门？你疯了！电梯不会给你开的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关闭？这是肯定了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;<span class="comment">//虽然可以关门，但这个动作不归我执行</span></span><br><span class="line">        <span class="comment">//do nothing</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这是在运行状态下要实现的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯正在运行...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//这个事绝对是合理的，光运行不停止还有谁敢做这个电梯？！估计只有上帝了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.stoppingState);</span><br><span class="line">        <span class="built_in">super</span>.context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//停止状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StoppingState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止状态，开门，那是要的！</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.openningState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;<span class="comment">//虽然可以关门，但这个动作不归我执行</span></span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.closeingState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止状态再跑起来，正常的很</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//状态修改</span></span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.runningState);</span><br><span class="line">        <span class="comment">//动作委托为CloseState来执行，也就是委托给了ClosingState子类执行这个动作</span></span><br><span class="line">        <span class="built_in">super</span>.context.getLiftState().run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//停止状态是怎么发生的呢？当然是停止方法执行了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯停止了...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClosingState</span> <span class="keyword">extends</span> <span class="title class_">LiftState</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//电梯门关闭，这是关闭状态要实现的动作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;电梯门关闭...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关了再打开，逗你玩呢，那这个允许呀</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.openningState);</span><br><span class="line">        <span class="built_in">super</span>.context.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关了就跑，这是再正常不过了</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.runningState);</span><br><span class="line">        <span class="built_in">super</span>.context.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//电梯门关着，我就不按楼层</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.context.setLiftState(Context.stoppingState);</span><br><span class="line">        <span class="built_in">super</span>.context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//环境角色</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Context</span> &#123;</span><br><span class="line">    <span class="comment">//定义出所有的电梯状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">OpenningState</span> <span class="variable">openningState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OpenningState</span>();<span class="comment">//开门状态，这时候电梯只能关闭</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">ClosingState</span> <span class="variable">closeingState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClosingState</span>();<span class="comment">//关闭状态，这时候电梯可以运行、停止和开门</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">RunningState</span> <span class="variable">runningState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RunningState</span>();<span class="comment">//运行状态，这时候电梯只能停止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">StoppingState</span> <span class="variable">stoppingState</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StoppingState</span>();<span class="comment">//停止状态，这时候电梯可以开门、运行</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个当前电梯状态</span></span><br><span class="line">    <span class="keyword">private</span> LiftState liftState;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> LiftState <span class="title function_">getLiftState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.liftState;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setLiftState</span><span class="params">(LiftState liftState)</span> &#123;</span><br><span class="line">        <span class="comment">//当前环境改变</span></span><br><span class="line">        <span class="built_in">this</span>.liftState = liftState;</span><br><span class="line">        <span class="comment">//把当前的环境通知到各个实现类中</span></span><br><span class="line">        <span class="built_in">this</span>.liftState.setContext(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">open</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.run();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.liftState.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line">        context.setLiftState(<span class="keyword">new</span> <span class="title class_">ClosingState</span>());</span><br><span class="line"></span><br><span class="line">        context.open();</span><br><span class="line">        context.close();</span><br><span class="line">        context.run();</span><br><span class="line">        context.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-5-4-优缺点">6.5.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。</li></ul><p><strong>2，缺点：</strong></p><ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li><li>状态模式对&quot;开闭原则&quot;的支持并不太好。</li></ul><h3 id="6-5-5-使用场景">6.5.5 使用场景</h3><ul><li>当一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为时，就可以考虑使用状态模式。</li><li>一个操作中含有庞大的分支结构，并且这些分支决定于对象的状态时。</li></ul><h2 id="6-6-观察者模式">6.6 观察者模式</h2><h3 id="6-6-1-概述">6.6.1 概述</h3><p><strong>定义：</strong></p><p>又被称为发布-订阅（Publish/Subscribe）模式，它定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主题对象。这个主题对象在状态变化时，会通知所有的观察者对象，使他们能够自动更新自己。</p><h3 id="6-6-2-结构">6.6.2 结构</h3><p>在观察者模式中有如下角色：</p><ul><li>Subject：抽象主题（抽象被观察者），抽象主题角色把所有观察者对象保存在一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供一个接口，可以增加和删除观察者对象。</li><li>ConcreteSubject：具体主题（具体被观察者），该角色将有关状态存入具体观察者对象，在具体主题的内部状态发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，是观察者的抽象类，它定义了一个更新接口，使得在得到主题更改通知时更新自己。</li><li>ConcrereObserver：具体观察者，实现抽象观察者定义的更新接口，以便在得到主题更改通知时更新自身的状态。</li></ul><h3 id="6-6-3-案例实现">6.6.3 案例实现</h3><p>【例】微信公众号</p><p>在使用微信公众号时，大家都会有这样的体验，当你关注的公众号中有新内容更新的话，它就会推送给关注公众号的微信用户端。我们使用观察者模式来模拟这样的场景，微信用户就是观察者，微信公众号是被观察者，有多个的微信用户关注了程序猿这个公众号。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/c5bda9f9a69400d2bbe747bcc79393b3.png" alt="观察者模式"></p><p>代码如下：</p><p>定义抽象观察者类，里面定义一个更新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体观察者类，微信用户是观察者，里面实现了更新的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WeixinUser</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line">    <span class="comment">// 微信用户名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">WeixinUser</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        System.out.println(name + <span class="string">&quot;-&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象主题类，提供了attach、detach、notify三个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//增加订阅者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除订阅者</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//通知订阅者更新消息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>微信公众号是具体主题（具体被观察者），里面存储了订阅该公众号的微信用户，并实现了抽象主题中的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubscriptionSubject</span> <span class="keyword">implements</span> <span class="title class_">Subject</span> &#123;</span><br><span class="line">    <span class="comment">//储存订阅公众号的微信用户</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Observer&gt; weixinUserlist = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Observer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">attach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        weixinUserlist.add(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">detach</span><span class="params">(Observer observer)</span> &#123;</span><br><span class="line">        weixinUserlist.remove(observer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">notify</span><span class="params">(String message)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Observer observer : weixinUserlist) &#123;</span><br><span class="line">            observer.update(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SubscriptionSubject mSubscriptionSubject=<span class="keyword">new</span> <span class="title class_">SubscriptionSubject</span>();</span><br><span class="line">        <span class="comment">//创建微信用户</span></span><br><span class="line">        WeixinUser user1=<span class="keyword">new</span> <span class="title class_">WeixinUser</span>(<span class="string">&quot;孙悟空&quot;</span>);</span><br><span class="line">        WeixinUser user2=<span class="keyword">new</span> <span class="title class_">WeixinUser</span>(<span class="string">&quot;猪悟能&quot;</span>);</span><br><span class="line">        WeixinUser user3=<span class="keyword">new</span> <span class="title class_">WeixinUser</span>(<span class="string">&quot;沙悟净&quot;</span>);</span><br><span class="line">        <span class="comment">//订阅公众号</span></span><br><span class="line">        mSubscriptionSubject.attach(user1);</span><br><span class="line">        mSubscriptionSubject.attach(user2);</span><br><span class="line">        mSubscriptionSubject.attach(user3);</span><br><span class="line">        <span class="comment">//公众号更新发出消息给订阅的微信用户</span></span><br><span class="line">        mSubscriptionSubject.notify(<span class="string">&quot;xxx的专栏更新了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-6-4-优缺点">6.6.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>被观察者发送通知，所有注册的观察者都会收到信息【可以实现广播机制】</li></ul><p><strong>2，缺点：</strong></p><ul><li>如果观察者非常多的话，那么所有的观察者收到被观察者发送的通知会耗时</li><li>如果被观察者有循环依赖的话，那么被观察者发送通知会使观察者循环调用，会导致系统崩溃</li></ul><h3 id="6-6-5-使用场景">6.6.5 使用场景</h3><ul><li>对象间存在一对多关系，一个对象的状态发生改变会影响其他对象。</li><li>当一个抽象模型有两个方面，其中一个方面依赖于另一方面时。</li></ul><h3 id="6-6-6-JDK中提供的实现">6.6.6 JDK中提供的实现</h3><p>在 Java 中，通过 java.util.Observable 类和 java.util.Observer 接口定义了观察者模式，只要实现它们的子类就可以编写观察者模式实例。</p><p><strong>1，Observable类</strong></p><p>Observable 类是抽象目标类（被观察者），它有一个 Vector 集合成员变量，用于保存所有要通知的观察者对象，下面来介绍它最重要的 3 个方法。</p><ul><li><p>void addObserver(Observer o) 方法：用于将新的观察者对象添加到集合中。</p></li><li><p>void notifyObservers(Object arg) 方法：调用集合中的所有观察者对象的 update方法，通知它们数据发生改变。通常越晚加入集合的观察者越先得到通知。</p></li><li><p>void setChange() 方法：用来设置一个 boolean 类型的内部标志，注明目标对象发生了变化。当它为true时，notifyObservers() 才会通知观察者。</p></li></ul><p><strong>2，Observer 接口</strong></p><p>Observer 接口是抽象观察者，它监视目标对象的变化，当目标对象发生变化时，观察者得到通知，并调用 update 方法，进行相应的工作。</p><p>【例】警察抓小偷</p><p>警察抓小偷也可以使用观察者模式来实现，警察是观察者，小偷是被观察者。代码如下：</p><p>小偷是一个被观察者，所以需要继承Observable类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thief</span> <span class="keyword">extends</span> <span class="title class_">Observable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Thief</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">steal</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;小偷：我偷东西了，有没有人来抓我！！！&quot;</span>);</span><br><span class="line">        <span class="built_in">super</span>.setChanged(); <span class="comment">//changed  = true</span></span><br><span class="line">        <span class="built_in">super</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>警察是一个观察者，所以需要让其实现Observer接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Policemen</span> <span class="keyword">implements</span> <span class="title class_">Observer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Policemen</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Observable o, Object arg)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;警察：&quot;</span> + ((Thief) o).getName() + <span class="string">&quot;，我已经盯你很久了，你可以保持沉默，但你所说的将成为呈堂证供！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建小偷对象</span></span><br><span class="line">        <span class="type">Thief</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thief</span>(<span class="string">&quot;隔壁老王&quot;</span>);</span><br><span class="line">        <span class="comment">//创建警察对象</span></span><br><span class="line">        <span class="type">Policemen</span> <span class="variable">p</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Policemen</span>(<span class="string">&quot;小李&quot;</span>);</span><br><span class="line">        <span class="comment">//让警察盯着小偷</span></span><br><span class="line">        t.addObserver(p);</span><br><span class="line">        <span class="comment">//小偷偷东西</span></span><br><span class="line">        t.steal();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-7-中介者模式">6.7 中介者模式</h2><h3 id="6-7-1-概述">6.7.1 概述</h3><p>一般来说，同事类之间的关系是比较复杂的，多个同事类之间互相关联时，他们之间的关系会呈现为复杂的网状结构，这是一种过度耦合的架构，即不利于类的复用，也不稳定。例如在下左图中，有六个同事类对象，假如对象1发生变化，那么将会有4个对象受到影响。如果对象2发生变化，那么将会有5个对象受到影响。也就是说，同事类之间直接关联的设计是不好的。</p><p>如果引入中介者模式，那么同事类之间的关系将变为星型结构，从下右图中可以看到，任何一个类的变动，只会影响的类本身，以及中介者，这样就减小了系统的耦合。一个好的设计，必定不会把所有的对象关系处理逻辑封装在本类中，而是使用一个专门的类来管理那些不属于自己的行为。</p><p><img src="https://photo.459122.xyz/i/48db2bce0f4fdb087c5007dc4838125e.png" alt="image-20200214110924010"></p><p><strong>定义：</strong></p><p>又叫调停模式，定义一个中介角色来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互。</p><h3 id="6-7-2-结构">6.7.2 结构</h3><p>中介者模式包含以下主要角色：</p><ul><li><p>抽象中介者（Mediator）角色：它是中介者的接口，提供了同事对象注册与转发同事对象信息的抽象方法。</p></li><li><p>具体中介者（ConcreteMediator）角色：实现中介者接口，定义一个 List 来管理同事对象，协调各个同事角色之间的交互关系，因此它依赖于同事角色。</p></li><li><p>抽象同事类（Colleague）角色：定义同事类的接口，保存中介者对象，提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能。</p></li><li><p>具体同事类（Concrete Colleague）角色：是抽象同事类的实现者，当需要与其他同事对象交互时，由中介者对象负责后续的交互。</p></li></ul><h3 id="6-7-3-案例实现">6.7.3 案例实现</h3><p>【例】租房</p><p>现在租房基本都是通过房屋中介，房主将房屋托管给房屋中介，而租房者从房屋中介获取房屋信息。房屋中介充当租房者与房屋所有者之间的中介者。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/89633c57547c32fd5fad2459c43f8f7f.png" alt="中介者模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//抽象中介者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">//申明一个联络方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message,Person person)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象同事类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="keyword">protected</span> Mediator mediator;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name,Mediator mediator)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.mediator = mediator;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体同事类 房屋拥有者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HouseOwner</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HouseOwner</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.constact(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房主&quot;</span> + name +<span class="string">&quot;获取到的信息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体同事类 承租人</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Tenant</span> <span class="keyword">extends</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Tenant</span><span class="params">(String name, Mediator mediator)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(name, mediator);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//与中介者联系</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        mediator.constact(message, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取信息</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">(String message)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;租房者&quot;</span> + name +<span class="string">&quot;获取到的信息：&quot;</span> + message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//中介机构</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MediatorStructure</span> <span class="keyword">extends</span> <span class="title class_">Mediator</span> &#123;</span><br><span class="line">    <span class="comment">//首先中介结构必须知道所有房主和租房者的信息</span></span><br><span class="line">    <span class="keyword">private</span> HouseOwner houseOwner;</span><br><span class="line">    <span class="keyword">private</span> Tenant tenant;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HouseOwner <span class="title function_">getHouseOwner</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> houseOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHouseOwner</span><span class="params">(HouseOwner houseOwner)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.houseOwner = houseOwner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Tenant <span class="title function_">getTenant</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTenant</span><span class="params">(Tenant tenant)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tenant = tenant;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">constact</span><span class="params">(String message, Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (person == houseOwner) &#123;          <span class="comment">//如果是房主，则租房者获得信息</span></span><br><span class="line">            tenant.getMessage(message);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;       <span class="comment">//反正则是房主获得信息</span></span><br><span class="line">            houseOwner.getMessage(message);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//一个房主、一个租房者、一个中介机构</span></span><br><span class="line">        <span class="type">MediatorStructure</span> <span class="variable">mediator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MediatorStructure</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//房主和租房者只需要知道中介机构即可</span></span><br><span class="line">        <span class="type">HouseOwner</span> <span class="variable">houseOwner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HouseOwner</span>(<span class="string">&quot;张三&quot;</span>, mediator);</span><br><span class="line">        <span class="type">Tenant</span> <span class="variable">tenant</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Tenant</span>(<span class="string">&quot;李四&quot;</span>, mediator);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//中介结构要知道房主和租房者</span></span><br><span class="line">        mediator.setHouseOwner(houseOwner);</span><br><span class="line">        mediator.setTenant(tenant);</span><br><span class="line"></span><br><span class="line">        tenant.constact(<span class="string">&quot;需要租三室的房子&quot;</span>);</span><br><span class="line">        houseOwner.constact(<span class="string">&quot;我这有三室的房子，你需要租吗？&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-7-4-优缺点">6.7.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>松散耦合</p><p>中介者模式通过把多个同事对象之间的交互封装到中介者对象里面，从而使得同事对象之间松散耦合，基本上可以做到互补依赖。这样一来，同事对象就可以独立地变化和复用，而不再像以前那样“牵一处而动全身”了。</p></li><li><p>集中控制交互</p><p>多个同事对象的交互，被封装在中介者对象里面集中管理，使得这些交互行为发生变化的时候，只需要修改中介者对象就可以了，当然如果是已经做好的系统，那么就扩展中介者对象，而各个同事类不需要做修改。</p></li><li><p>一对多关联转变为一对一的关联</p><p>没有使用中介者模式的时候，同事对象之间的关系通常是一对多的，引入中介者对象以后，中介者对象和同事对象的关系通常变成双向的一对一，这会让对象的关系更容易理解和实现。</p></li></ul><p><strong>2，缺点：</strong></p><p>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</p><h3 id="6-7-5-使用场景">6.7.5 使用场景</h3><ul><li>系统中对象之间存在复杂的引用关系，系统结构混乱且难以理解。</li><li>当想创建一个运行于多个类之间的对象，又不想生成新的子类时。</li></ul><h2 id="6-8-迭代器模式">6.8 迭代器模式</h2><h3 id="6-8-1-概述">6.8.1 概述</h3><p><strong>定义：</strong></p><p>提供一个对象来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。</p><h3 id="6-8-2-结构">6.8.2 结构</h3><p>迭代器模式主要包含以下角色：</p><ul><li><p>抽象聚合（Aggregate）角色：定义存储、添加、删除聚合元素以及创建迭代器对象的接口。</p></li><li><p>具体聚合（ConcreteAggregate）角色：实现抽象聚合类，返回一个具体迭代器的实例。</p></li><li><p>抽象迭代器（Iterator）角色：定义访问和遍历聚合元素的接口，通常包含 hasNext()、next() 等方法。</p></li><li><p>具体迭代器（Concretelterator）角色：实现抽象迭代器接口中所定义的方法，完成对聚合对象的遍历，记录遍历的当前位置。</p></li></ul><h3 id="6-8-3-案例实现">6.8.3 案例实现</h3><p>【例】定义一个可以存储学生对象的容器对象，将遍历该容器的功能交由迭代器实现，涉及到的类如下：</p><p><img src="https://photo.459122.xyz/i/862e613c738c291780531da64674e8d3.png" alt="迭代器模式"></p><p>代码如下：</p><p>定义迭代器接口，声明hasNext、next方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentIterator</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span>;</span><br><span class="line">    Student <span class="title function_">next</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体的迭代器类，重写所有的抽象方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentIteratorImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentIterator</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StudentIteratorImpl</span><span class="params">(List&lt;Student&gt; list)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list = list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position &lt; list.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Student <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Student</span> <span class="variable">currentStudent</span> <span class="operator">=</span> list.get(position);</span><br><span class="line">        position ++;</span><br><span class="line">        <span class="keyword">return</span> currentStudent;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象容器类，包含添加元素，删除元素，获取迭代器对象的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentAggregate</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeStudent</span><span class="params">(Student student)</span>;</span><br><span class="line"></span><br><span class="line">    StudentIterator <span class="title function_">getStudentIterator</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体的容器类，重写所有的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentAggregateImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentAggregate</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Student&gt;();  <span class="comment">// 学生列表</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.add(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeStudent</span><span class="params">(Student student)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.list.remove(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> StudentIterator <span class="title function_">getStudentIterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentIteratorImpl</span>(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-8-4-优缺点">6.8.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>它支持以不同的方式遍历一个聚合对象，在同一个聚合对象上可以定义多种遍历方式。在迭代器模式中只需要用一个不同的迭代器来替换原有迭代器即可改变遍历算法，我们也可以自己定义迭代器的子类以支持新的遍历方式。</li><li>迭代器简化了聚合类。由于引入了迭代器，在原有的聚合对象中不需要再自行提供数据遍历等方法，这样可以简化聚合类的设计。</li><li>在迭代器模式中，由于引入了抽象层，增加新的聚合类和迭代器类都很方便，无须修改原有代码，满足 “开闭原则” 的要求。</li></ul><p><strong>2，缺点：</strong></p><p>增加了类的个数，这在一定程度上增加了系统的复杂性。</p><h3 id="6-8-5-使用场景">6.8.5 使用场景</h3><ul><li>当需要为聚合对象提供多种遍历方式时。</li><li>当需要为遍历不同的聚合结构提供一个统一的接口时。</li><li>当访问一个聚合对象的内容而无须暴露其内部细节的表示时。</li></ul><h3 id="6-8-6-JDK源码解析">6.8.6 JDK源码解析</h3><p>迭代器模式在JAVA的很多集合类中被广泛应用，接下来看看JAVA源码中是如何使用迭代器模式的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">Iterator&lt;String&gt; iterator = list.iterator(); <span class="comment">//list.iterator()方法返回的肯定是Iterator接口的子实现类对象</span></span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    System.out.println(iterator.next());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看完这段代码是不是很熟悉，与我们上面代码基本类似。单列集合都使用到了迭代器，我们以ArrayList举例来说明</p><ul><li>List：抽象聚合类</li><li>ArrayList：具体的聚合类</li><li>Iterator：抽象迭代器</li><li>list.iterator()：返回的是实现了 <code>Iterator</code> 接口的具体迭代器对象</li></ul><p>具体的来看看 ArrayList的代码实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArrayList</span>&lt;E&gt; <span class="keyword">extends</span> <span class="title class_">AbstractList</span>&lt;E&gt;</span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">List</span>&lt;E&gt;, RandomAccess, Cloneable, java.io.Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;E&gt; <span class="title function_">iterator</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Itr</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">Itr</span> <span class="keyword">implements</span> <span class="title class_">Iterator</span>&lt;E&gt; &#123;</span><br><span class="line">        <span class="type">int</span> cursor;       <span class="comment">// 下一个要返回元素的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">lastRet</span> <span class="operator">=</span> -<span class="number">1</span>; <span class="comment">// 上一个返回元素的索引</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">expectedModCount</span> <span class="operator">=</span> modCount;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断是否还有元素</span></span><br><span class="line">        <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hasNext</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> cursor != size;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取下一个元素</span></span><br><span class="line">        <span class="keyword">public</span> E <span class="title function_">next</span><span class="params">()</span> &#123;</span><br><span class="line">            checkForComodification();</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> cursor;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= size)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchElementException</span>();</span><br><span class="line">            Object[] elementData = ArrayList.<span class="built_in">this</span>.elementData;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ConcurrentModificationException</span>();</span><br><span class="line">            cursor = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这部分代码还是比较简单，大致就是在 <code>iterator</code> 方法中返回了一个实例化的 <code>Iterator</code> 对象。Itr是一个内部类，它实现了 <code>Iterator</code> 接口并重写了其中的抽象方法。</p><blockquote><p>注意：</p><p>​当我们在使用JAVA开发的时候，想使用迭代器模式的话，只要让我们自己定义的容器类实现<code>java.util.Iterable</code>并实现其中的iterator()方法使其返回一个 <code>java.util.Iterator</code> 的实现类就可以了。</p></blockquote><h2 id="6-9-访问者模式">6.9 访问者模式</h2><h3 id="6-9-1-概述">6.9.1 概述</h3><p><strong>定义：</strong></p><p>封装一些作用于某种数据结构中的各元素的操作，它可以在不改变这个数据结构的前提下定义作用于这些元素的新的操作。</p><h3 id="6-9-2-结构">6.9.2 结构</h3><p>访问者模式包含以下主要角色:</p><ul><li>抽象访问者（Visitor）角色：定义了对每一个元素<code>（Element）</code>访问的行为，它的参数就是可以访问的元素，它的方法个数理论上来讲与元素类个数（Element的实现类个数）是一样的，从这点不难看出，访问者模式要求元素类的个数不能改变。</li><li>具体访问者（ConcreteVisitor）角色：给出对每一个元素类访问时所产生的具体行为。</li><li>抽象元素（Element）角色：定义了一个接受访问者的方法（<code>accept</code>），其意义是指，每一个元素都要可以被访问者访问。</li><li>具体元素（ConcreteElement）角色： 提供接受访问方法的具体实现，而这个具体的实现，通常情况下是使用访问者提供的访问该元素类的方法。</li><li>对象结构（Object Structure）角色：定义当中所提到的对象结构，对象结构是一个抽象表述，具体点可以理解为一个具有容器性质或者复合对象特性的类，它会含有一组元素（<code>Element</code>），并且可以迭代这些元素，供访问者访问。</li></ul><h3 id="6-9-3-案例实现">6.9.3 案例实现</h3><p>【例】给宠物喂食</p><p>现在养宠物的人特别多，我们就以这个为例，当然宠物还分为狗，猫等，要给宠物喂食的话，主人可以喂，其他人也可以喂食。</p><ul><li>访问者角色：给宠物喂食的人</li><li>具体访问者角色：主人、其他人</li><li>抽象元素角色：动物抽象类</li><li>具体元素角色：宠物狗、宠物猫</li><li>结构对象角色：主人家</li></ul><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/28452beecb3e28077832751fd50efe13.png" alt="访问者模式"></p><p>代码如下：</p><p>创建抽象访问者接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建不同的具体访问者角色（主人和其他人），都需要实现 <code>Person</code>接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Owner</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人喂食猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;主人喂食狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Someone</span> <span class="keyword">implements</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Cat cat)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;其他人喂食猫&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">feed</span><span class="params">(Dog dog)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;其他人喂食狗&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义抽象节点 – 宠物</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person person)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义实现<code>Animal</code>接口的 具体节点（元素）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        person.feed(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;好好吃，汪汪汪！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">implements</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        person.feed(<span class="built_in">this</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;好好吃，喵喵喵！！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义对象结构，此案例中就是主人的家</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Home</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Animal&gt; nodeList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Animal&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">action</span><span class="params">(Person person)</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (Animal node : nodeList) &#123;</span><br><span class="line">            node.accept(person);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Animal animal)</span> &#123;</span><br><span class="line">        nodeList.add(animal);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Home</span> <span class="variable">home</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Home</span>();</span><br><span class="line">        home.add(<span class="keyword">new</span> <span class="title class_">Dog</span>());</span><br><span class="line">        home.add(<span class="keyword">new</span> <span class="title class_">Cat</span>());</span><br><span class="line"></span><br><span class="line">        <span class="type">Owner</span> <span class="variable">owner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Owner</span>();</span><br><span class="line">        home.action(owner);</span><br><span class="line"></span><br><span class="line">        <span class="type">Someone</span> <span class="variable">someone</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Someone</span>();</span><br><span class="line">        home.action(someone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-9-4-优缺点">6.9.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>扩展性好</p><p>在不修改对象结构中的元素的情况下，为对象结构中的元素添加新的功能。</p></li><li><p>复用性好</p><p>通过访问者来定义整个对象结构通用的功能，从而提高复用程度。</p></li><li><p>分离无关行为</p><p>通过访问者来分离无关的行为，把相关的行为封装在一起，构成一个访问者，这样每一个访问者的功能都比较单一。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li><p>对象结构变化很困难</p><p>在访问者模式中，每增加一个新的元素类，都要在每一个具体访问者类中增加相应的具体操作，这违背了“开闭原则”。</p></li><li><p>违反了依赖倒置原则</p><p>访问者模式依赖了具体类，而没有依赖抽象类。</p></li></ul><h3 id="6-9-5-使用场景">6.9.5  使用场景</h3><ul><li><p>对象结构相对稳定，但其操作算法经常变化的程序。</p></li><li><p>对象结构中的对象需要提供多种不同且不相关的操作，而且要避免让这些操作的变化影响对象的结构。</p></li></ul><h3 id="6-9-6-扩展">6.9.6 扩展</h3><p>访问者模式用到了一种双分派的技术。</p><p><strong>1，分派：</strong></p><p>变量被声明时的类型叫做变量的静态类型，有些人又把静态类型叫做明显类型；而变量所引用的对象的真实类型又叫做变量的实际类型。比如 <code>Map map = new HashMap()</code> ，map变量的静态类型是 <code>Map</code> ，实际类型是 <code>HashMap</code> 。根据对象的类型而对方法进行的选择，就是分派(Dispatch)，分派(Dispatch)又分为两种，即静态分派和动态分派。</p><p><strong>静态分派(Static Dispatch)</strong> 发生在编译时期，分派根据静态类型信息发生。静态分派对于我们来说并不陌生，方法重载就是静态分派。</p><p><strong>动态分派(Dynamic Dispatch)</strong> 发生在运行时期，动态分派动态地置换掉某个方法。Java通过方法的重写支持动态分派。</p><p><strong>2，动态分派：</strong></p><p>通过方法的重写支持动态分派。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">     <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        a.execute();</span><br><span class="line">        </span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line">        a1.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码的结果大家应该直接可以说出来，这不就是多态吗！运行执行的是子类中的方法。</p><p>Java编译器在编译时期并不总是知道哪些代码会被执行，因为编译器仅仅知道对象的静态类型，而不知道对象的真实类型；而方法的调用则是根据对象的真实类型，而不是静态类型。</p><p><strong>3，静态分派：</strong></p><p>通过方法重载支持静态分派。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Execute</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Dog d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Cat c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Execute</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Execute</span>();</span><br><span class="line">        exe.execute(a);</span><br><span class="line">        exe.execute(a1);</span><br><span class="line">        exe.execute(a2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://photo.459122.xyz/i/4a9e2fc59ec7de1ff61b1d6b30f6f77b.png" alt="image-20200214215446638"></p><p>这个结果可能出乎一些人的意料了，为什么呢？</p><p><strong>重载方法的分派是根据静态类型进行的，这个分派过程在编译时期就完成了。</strong></p><p><strong>4，双分派：</strong></p><p>所谓双分派技术就是在选择一个方法的时候，不仅仅要根据消息接收者（receiver）的运行时区别，还要根据参数的运行时区别。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Execute exe)</span> &#123;</span><br><span class="line">        exe.execute(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Execute exe)</span> &#123;</span><br><span class="line">        exe.execute(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">accept</span><span class="params">(Execute exe)</span> &#123;</span><br><span class="line">        exe.execute(<span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Execute</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Animal a)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Dog d)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">(Cat c)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">d</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">c</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"></span><br><span class="line">        <span class="type">Execute</span> <span class="variable">exe</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Execute</span>();</span><br><span class="line">        a.accept(exe);</span><br><span class="line">        d.accept(exe);</span><br><span class="line">        c.accept(exe);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面代码中，客户端将Execute对象做为参数传递给Animal类型的变量调用的方法，这里完成第一次分派，这里是方法重写，所以是动态分派，也就是执行实际类型中的方法，同时也<code>将自己this作为参数传递进去，这里就完成了第二次分派</code>，这里的Execute类中有多个重载的方法，而传递进行的是this，就是具体的实际类型的对象。</p><p>说到这里，我们已经明白双分派是怎么回事了，但是它有什么效果呢？就是可以实现方法的动态绑定，我们可以对上面的程序进行修改。</p><p>运行结果如下：</p><p><img src="https://photo.459122.xyz/i/2793a938ebd333654892b5548dcc5a94.png" alt="image-20200426233931693"></p><p><strong>双分派实现动态绑定的本质，就是在重载方法委派的前面加上了继承体系中覆盖的环节，由于覆盖是动态的，所以重载就是动态的了。</strong></p><p>总结：</p><blockquote><h3 id="一句话核心"><strong>一句话核心</strong></h3><p><strong>Java 的方法重载（Overload）在编译时根据参数“表面类型”决定调用谁，而非实际对象类型。</strong></p><h3 id="举个通俗例子"><strong>举个通俗例子</strong></h3><p>想象你要寄快递：</p><ul><li><strong>重载（Overload）</strong>：快递员只看箱子<strong>外面写的标签</strong>（比如“水果”），不管里面是苹果还是香蕉，直接按标签分类处理。</li><li><strong>多态/重写（Override）</strong>：快递员会拆开箱子，看里面的<strong>实际物品</strong>（苹果或香蕉），再决定处理方式。</li></ul><p>你的代码中，所有参数变量（a1、a2）的“标签”都是 <code>Animal</code>，所以永远触发 <code>execute(Animal a)</code>。</p><h3 id="如何让代码按实际类型输出？"><strong>如何让代码按实际类型输出？</strong></h3><p><strong>用多态（重写）代替重载</strong>，修改代码如下：</p><h4 id="1-在-Animal-类中定义方法，让子类重写"><strong>1. 在 Animal 类中定义方法，让子类重写</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Animal&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;  <span class="comment">// 重写方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;dog&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cat</span> <span class="keyword">extends</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span> &#123;  <span class="comment">// 重写方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;cat&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-直接调用对象的-execute-方法"><strong>2. 直接调用对象的 execute 方法</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Animal</span>();</span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();  <span class="comment">// 实际类型是 Dog</span></span><br><span class="line">        <span class="type">Animal</span> <span class="variable">a2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();  <span class="comment">// 实际类型是 Cat</span></span><br><span class="line"></span><br><span class="line">        a.execute();   <span class="comment">// 输出 Animal</span></span><br><span class="line">        a1.execute();  <span class="comment">// 输出 dog（实际类型决定）</span></span><br><span class="line">        a2.execute();  <span class="comment">// 输出 cat（实际类型决定）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关键对比表"><strong>关键对比表</strong></h3><table><thead><tr><th><strong>场景</strong></th><th>重载（Overload）</th><th>多态/重写（Override）</th></tr></thead><tbody><tr><td><strong>你的代码</strong></td><td>根据参数<strong>表面类型</strong>（Animal）</td><td>未被使用</td></tr><tr><td><strong>正确做法</strong></td><td>无需多参数重载</td><td>让每个子类<strong>重写</strong>父类方法</td></tr><tr><td><strong>绑定时机</strong></td><td>编译时决定</td><td>运行时根据实际对象类型决定</td></tr><tr><td><strong>核心区别</strong></td><td>方法名相同，参数列表<strong>必须不同</strong></td><td>方法名、参数列表<strong>完全相同</strong></td></tr></tbody></table><h3 id="记忆口诀"><strong>记忆口诀</strong></h3><ul><li><strong>重载看表面，重写看里面。</strong></li><li><strong>编译写死类型，运行才玩真实。</strong></li></ul></blockquote><blockquote><p>在 Java 中，<strong>重载（Overload）</strong> 和 <strong>重写（Override）</strong> 是两种完全不同的机制，核心区别在于 <strong>绑定时机</strong> 和 <strong>设计目的</strong>。以下是两者的详细对比：</p><h3 id="一、核心区别对比表"><strong>一、核心区别对比表</strong></h3><table><thead><tr><th><strong>特性</strong></th><th><strong>重载（Overload）</strong></th><th><strong>重写（Override）</strong></th></tr></thead><tbody><tr><td><strong>定义</strong></td><td>同一个类中，方法名相同但<strong>参数列表不同</strong>。</td><td>子类重新定义父类中<strong>同名、同参数</strong>的方法。</td></tr><tr><td><strong>绑定时机</strong></td><td><strong>编译时</strong>（静态绑定）</td><td><strong>运行时</strong>（动态绑定）</td></tr><tr><td><strong>多态性</strong></td><td>无关（本质是不同方法）</td><td>实现多态的核心机制</td></tr><tr><td><strong>作用域</strong></td><td>同一个类或父子类中均可</td><td>必须是父子类（或接口实现类）</td></tr><tr><td><strong>返回值类型</strong></td><td>可以不同</td><td>必须相同或为父类返回值的子类（协变返回）</td></tr><tr><td><strong>访问权限</strong></td><td>可以不同</td><td>子类方法不能比父类更严格（如父类<code>public</code>，子类不能<code>private</code>）</td></tr><tr><td><strong>异常</strong></td><td>可以抛出不同异常</td><td>不能抛出比父类更宽泛的受检异常</td></tr></tbody></table><h3 id="二、通俗理解"><strong>二、通俗理解</strong></h3><h4 id="1-重载（Overload）"><strong>1. 重载（Overload）</strong></h4><ul><li><p><strong>本质</strong>：<strong>方法名称的复用</strong>，解决同一功能需要不同参数的问题。</p></li><li><p><strong>类比</strong>：同一把瑞士军刀，刀头不同（剪刀、螺丝刀、小刀），名字都叫“工具”，但用途不同。</p></li><li><p>示例</p><p>：</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Java<span class="keyword">class</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="built_in">add</span>(<span class="type">int</span> a, <span class="type">int</span> b) &#123; <span class="keyword">return</span> a + b; &#125;</span><br><span class="line">    <span class="type">double</span> <span class="built_in">add</span>(<span class="type">double</span> a, <span class="type">double</span> b) &#123; <span class="keyword">return</span> a + b; &#125; <span class="comment">// 重载：参数类型不同</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="2-重写（Override）"><strong>2. 重写（Override）</strong></h4><ul><li><p><strong>本质</strong>：<strong>方法实现的替换</strong>，子类根据需求覆盖父类行为。</p></li><li><p><strong>类比</strong>：父亲说“赚钱方法是用体力劳动”，儿子说“我的赚钱方法是用脑力劳动”。</p></li><li><p>示例</p><p>：</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Animal</span> &#123;</span><br><span class="line">    void speak() &#123; <span class="type">System</span>.out.println(<span class="string">&quot;Animal sound&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    void speak() &#123; <span class="type">System</span>.out.println(<span class="string">&quot;Woof!&quot;</span>); &#125; <span class="comment">// 重写：实现替换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="三、关键差异场景"><strong>三、关键差异场景</strong></h3><h4 id="场景1：方法调用决定权"><strong>场景1：方法调用决定权</strong></h4><ul><li><p>重载</p><p>：调用哪个方法由</p><p>编译器根据参数静态类型</p><p>决定。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaAnimal a = <span class="built_in">new</span> Dog();</span><br><span class="line">exe.<span class="keyword">execute</span>(a);  // 调用 <span class="keyword">execute</span>(Animal a)，而非 <span class="keyword">execute</span>(Dog d)</span><br></pre></td></tr></table></figure></li><li><p>重写</p><p>：调用哪个方法由</p><p>JVM 根据对象实际类型</p><p>决定。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JavaAnimal a <span class="operator">=</span> new Dog()<span class="comment">;</span></span><br><span class="line">a.speak()<span class="comment">;  // 调用 Dog 的 speak() 方法</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="场景2：继承关系"><strong>场景2：继承关系</strong></h4><ul><li><p>重载</p><p>：可以存在于父子类中（但本质还是不同方法）。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Parent</span> &#123;</span><br><span class="line">    void test(int a) &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    void test(<span class="type">String</span> s) &#123; ... &#125; <span class="comment">// 重载（参数不同），不是重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写</p><p>：必须存在于父子类中，且方法签名完全一致。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Parent</span> &#123;</span><br><span class="line">    void test(int a) &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    void test(int a) &#123; ... &#125; <span class="comment">// 重写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="四、如何选择？"><strong>四、如何选择？</strong></h3><ul><li><strong>用重载</strong>：需要为同一功能提供多种参数组合时（如不同数据类型的加法）。</li><li><strong>用重写</strong>：需要子类定制父类行为时（如不同动物发出不同叫声）。</li></ul><h3 id="五、常见陷阱"><strong>五、常见陷阱</strong></h3><ol><li><p><strong>误把重载当重写</strong></p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Javaclass</span> <span class="type">Parent</span> &#123;</span><br><span class="line">    void test() &#123; ... &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Parent</span> </span>&#123;</span><br><span class="line">    void test(int a) &#123; ... &#125; <span class="comment">// 这是重载，不是重写！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>若想重写，方法签名必须完全一致（无参数）。</li></ul></li><li><p><strong>静态方法不能重写</strong></p><ul><li>静态方法属于类，用 <code>@Override</code> 注解会编译报错。</li><li>若父子类有同名静态方法，实际是隐藏（Hide）而非重写。</li></ul></li></ol><h3 id="总结"><strong>总结</strong></h3><ul><li><strong>重载</strong>：编译时决定，解决“方法功能扩展”。</li><li><strong>重写</strong>：运行时决定，解决“多态行为替换”。</li></ul><p><strong>口诀</strong>：</p><blockquote><p>重载同名不同参，编译绑定不相关； 重写父子同方法，运行多态看真身。</p></blockquote></blockquote><h2 id="6-10-备忘录模式">6.10 备忘录模式</h2><h3 id="6-10-1-概述">6.10.1 概述</h3><p>备忘录模式提供了一种状态恢复的实现机制，使得用户可以方便地回到一个特定的历史步骤，当新的状态无效或者存在问题时，可以使用暂时存储起来的备忘录将状态复原，很多软件都提供了撤销（Undo）操作，如 Word、记事本、Photoshop、IDEA等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 浏览器 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。</p><p><strong>定义：</strong></p><p>又叫快照模式，在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，以便以后当需要时能将该对象恢复到原先保存的状态。</p><h3 id="6-10-2-结构">6.10.2 结构</h3><p>备忘录模式的主要角色如下：</p><ul><li>发起人（Originator）角色：记录当前时刻的内部状态信息，提供创建备忘录和恢复备忘录数据的功能，实现其他业务功能，它可以访问备忘录里的所有信息。</li><li>备忘录（Memento）角色：负责存储发起人的内部状态，在需要的时候提供这些内部状态给发起人。</li><li>管理者（Caretaker）角色：对备忘录进行管理，提供保存与获取备忘录的功能，但其不能对备忘录的内容进行访问与修改。</li></ul><blockquote><p>备忘录有两个等效的接口：</p><ul><li><strong>窄接口</strong>：管理者(Caretaker)对象（和其他发起人对象之外的任何对象）看到的是备忘录的窄接口(narror Interface)，这个窄接口只允许他把备忘录对象传给其他的对象。</li><li><strong>宽接口</strong>：与管理者看到的窄接口相反，发起人对象可以看到一个宽接口(wide Interface)，这个宽接口允许它读取所有的数据，以便根据这些数据恢复这个发起人对象的内部状态。</li></ul></blockquote><h3 id="6-10-3-案例实现">6.10.3 案例实现</h3><p>【例】游戏挑战BOSS</p><p>游戏中的某个场景，一游戏角色有生命力、攻击力、防御力等数据，在打Boss前和后一定会不一样的，我们允许玩家如果感觉与Boss决斗的效果不理想可以让游戏恢复到决斗之前的状态。</p><p>要实现上述案例，有两种方式：</p><ul><li>“白箱”备忘录模式</li><li>“黑箱”备忘录模式</li></ul><h4 id="6-10-3-1-“白箱”备忘录模式">6.10.3.1 “白箱”备忘录模式</h4><p>备忘录角色对任何对象都提供一个接口，即宽接口，备忘录角色的内部所存储的状态就对所有对象公开。类图如下：</p><p><img src="https://photo.459122.xyz/i/1a3928f5c7c99cbec60232a5d03ce376.png" alt="白箱备忘录模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//游戏角色类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameRole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> vit; <span class="comment">//生命力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk; <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def; <span class="comment">//防御力</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//战斗</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存角色状态</span></span><br><span class="line">    <span class="keyword">public</span> RoleStateMemento <span class="title function_">saveState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoleStateMemento</span>(vit, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回复角色状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverState</span><span class="params">(RoleStateMemento roleStateMemento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = roleStateMemento.getVit();</span><br><span class="line">        <span class="built_in">this</span>.atk = roleStateMemento.getAtk();</span><br><span class="line">        <span class="built_in">this</span>.def = roleStateMemento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;角色生命力：&quot;</span> + vit);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色攻击力：&quot;</span> + atk);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色防御力：&quot;</span> + def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//游戏状态存储类(备忘录类)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleStateMemento</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> vit;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RoleStateMemento</span><span class="params">(<span class="type">int</span> vit, <span class="type">int</span> atk, <span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//角色状态管理者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleStateCaretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RoleStateMemento roleStateMemento;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RoleStateMemento <span class="title function_">getRoleStateMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> roleStateMemento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setRoleStateMemento</span><span class="params">(RoleStateMemento roleStateMemento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.roleStateMemento = roleStateMemento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss前------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss前</span></span><br><span class="line">        <span class="type">GameRole</span> <span class="variable">gameRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameRole</span>();</span><br><span class="line">        gameRole.initState();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存进度</span></span><br><span class="line">        <span class="type">RoleStateCaretaker</span> <span class="variable">roleStateCaretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleStateCaretaker</span>();</span><br><span class="line">        roleStateCaretaker.setRoleStateMemento(gameRole.saveState());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss后------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss时，损耗严重</span></span><br><span class="line">        gameRole.fight();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------恢复之前状态------------&quot;</span>);</span><br><span class="line">        <span class="comment">//恢复之前状态</span></span><br><span class="line">        gameRole.recoverState(roleStateCaretaker.getRoleStateMemento());</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分析：白箱备忘录模式是破坏封装性的。但是通过程序员自律，同样可以在一定程度上实现模式的大部分用意。</p></blockquote><h4 id="6-10-3-2-“黑箱”备忘录模式">6.10.3.2 “黑箱”备忘录模式</h4><p>备忘录角色对发起人对象提供一个宽接口，而为其他对象提供一个窄接口。在Java语言中，实现双重接口的办法就是将<strong>备忘录类</strong>设计成<strong>发起人类</strong>的内部成员类。</p><p>将 <code>RoleStateMemento</code> 设为 <code>GameRole</code> 的内部类，从而将 <code>RoleStateMemento</code> 对象封装在 <code>GameRole</code> 里面；在外面提供一个标识接口 <code>Memento</code> 给 <code>RoleStateCaretaker</code> 及其他对象使用。这样 <code>GameRole</code> 类看到的是 <code>RoleStateMemento</code> 所有的接口，而<code>RoleStateCaretaker</code>  及其他对象看到的仅仅是标识接口 <code>Memento</code> 所暴露出来的接口，从而维护了封装型。类图如下：</p><p><img src="https://photo.459122.xyz/i/a5152e1ecf050421e6622e1fbc779c10.png" alt="黑箱备忘录模式"></p><p>代码如下：</p><p>窄接口<code>Memento</code>，这是一个标识接口，因此没有定义出任何的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义发起人类 <code>GameRole</code>，并在内部定义备忘录内部类 <code>RoleStateMemento</code>（该内部类设置为私有的）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line">/游戏角色类</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GameRole</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> vit; <span class="comment">//生命力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> atk; <span class="comment">//攻击力</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> def; <span class="comment">//防御力</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">100</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//战斗</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fight</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.atk = <span class="number">0</span>;</span><br><span class="line">        <span class="built_in">this</span>.def = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//保存角色状态</span></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">saveState</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RoleStateMemento</span>(vit, atk, def);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//回复角色状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">recoverState</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="type">RoleStateMemento</span> <span class="variable">roleStateMemento</span> <span class="operator">=</span> (RoleStateMemento) memento;</span><br><span class="line">        <span class="built_in">this</span>.vit = roleStateMemento.getVit();</span><br><span class="line">        <span class="built_in">this</span>.atk = roleStateMemento.getAtk();</span><br><span class="line">        <span class="built_in">this</span>.def = roleStateMemento.getDef();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stateDisplay</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;角色生命力：&quot;</span> + vit);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色攻击力：&quot;</span> + atk);</span><br><span class="line">        System.out.println(<span class="string">&quot;角色防御力：&quot;</span> + def);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.vit = vit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.atk = atk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.def = def;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">class</span> <span class="title class_">RoleStateMemento</span> <span class="keyword">implements</span> <span class="title class_">Memento</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> vit;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> atk;</span><br><span class="line">        <span class="keyword">private</span> <span class="type">int</span> def;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="title function_">RoleStateMemento</span><span class="params">(<span class="type">int</span> vit, <span class="type">int</span> atk, <span class="type">int</span> def)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.vit = vit;</span><br><span class="line">            <span class="built_in">this</span>.atk = atk;</span><br><span class="line">            <span class="built_in">this</span>.def = def;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getVit</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> vit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setVit</span><span class="params">(<span class="type">int</span> vit)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.vit = vit;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAtk</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> atk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAtk</span><span class="params">(<span class="type">int</span> atk)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.atk = atk;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDef</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> def;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDef</span><span class="params">(<span class="type">int</span> def)</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.def = def;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>负责人角色类 <code>RoleStateCaretaker</code> 能够得到的备忘录对象是以 <code>Memento</code> 为接口的，由于这个接口仅仅是一个标识接口，因此负责人角色不可能改变这个备忘录对象的内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//角色状态管理者类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RoleStateCaretaker</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Memento memento;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Memento <span class="title function_">getMemento</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> memento;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMemento</span><span class="params">(Memento memento)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.memento = memento;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss前------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss前</span></span><br><span class="line">        <span class="type">GameRole</span> <span class="variable">gameRole</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GameRole</span>();</span><br><span class="line">        gameRole.initState();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存进度</span></span><br><span class="line">        <span class="type">RoleStateCaretaker</span> <span class="variable">roleStateCaretaker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RoleStateCaretaker</span>();</span><br><span class="line">        roleStateCaretaker.setMemento(gameRole.saveState());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;------------大战Boss后------------&quot;</span>);</span><br><span class="line">        <span class="comment">//大战Boss时，损耗严重</span></span><br><span class="line">        gameRole.fight();</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">        System.out.println(<span class="string">&quot;------------恢复之前状态------------&quot;</span>);</span><br><span class="line">        <span class="comment">//恢复之前状态</span></span><br><span class="line">        gameRole.recoverState(roleStateCaretaker.getMemento());</span><br><span class="line">        gameRole.stateDisplay();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="6-10-4-优缺点">6.10.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li><li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li><li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li></ul><p><strong>2，缺点：</strong></p><ul><li>资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li></ul><h3 id="6-10-5-使用场景">6.10.5 使用场景</h3><ul><li><p>需要保存与恢复数据的场景，如玩游戏时的中间结果的存档功能。</p></li><li><p>需要提供一个可回滚操作的场景，如 Word、记事本、Photoshop，idea等软件在编辑时按 Ctrl+Z 组合键，还有数据库中事务操作。</p></li></ul>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>设计模式（4）</title>
    <link href="https://yjyrichard.github.io/posts/498824af.html"/>
    <id>https://yjyrichard.github.io/posts/498824af.html</id>
    <published>2025-05-06T06:53:52.058Z</published>
    <updated>2025-05-06T07:13:08.388Z</updated>
    
    <content type="html"><![CDATA[<h1>5，结构型模式</h1><h2 id="5-6-组合模式">5.6 组合模式</h2><h3 id="5-6-1-概述">5.6.1 概述</h3><p><img src="https://photo.459122.xyz/i/3d7b276f6be37cbee62f2f38c99d9382.png" alt="image-20200208180417291"></p><p>​对于这个图片肯定会非常熟悉，上图我们可以看做是一个文件系统，对于这样的结构我们称之为树形结构。在树形结构中可以通过调用某个方法来遍历整个树，当我们找到某个叶子节点后，就可以对叶子节点进行相关的操作。可以将这颗树理解成一个大的容器，容器里面包含很多的成员对象，这些成员对象即可是容器对象也可以是叶子对象。但是由于容器对象和叶子对象在功能上面的区别，使得我们在使用的过程中必须要区分容器对象和叶子对象，但是这样就会给客户带来不必要的麻烦，作为客户而已，它始终希望能够一致的对待容器对象和叶子对象。</p><p><strong>定义：</strong></p><p>​又名部分整体模式，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><h3 id="5-6-2-结构">5.6.2 结构</h3><p>组合模式主要包含三种角色：</p><ul><li>抽象根节点（Component）：定义系统各层次对象的共有方法和属性，可以预先定义一些默认行为和属性。</li><li>树枝节点（Composite）：定义树枝节点的行为，存储子节点，组合树枝节点和叶子节点形成一个树形结构。</li><li>叶子节点（Leaf）：叶子节点对象，其下再无分支，是系统层次遍历的最小单位。</li></ul><h3 id="5-6-3-案例实现">5.6.3 案例实现</h3><p>【例】软件菜单</p><p>如下图，我们在访问别的一些管理系统时，经常可以看到类似的菜单。一个菜单可以包含菜单项（菜单项是指不再包含其他内容的菜单条目），也可以包含带有其他菜单项的菜单，因此使用组合模式描述菜单就很恰当，我们的需求是针对一个菜单，打印出其包含的所有菜单以及菜单项的名称。</p><p><img src="https://photo.459122.xyz/i/daf4da130d9ec4921bd2a0cc50f8fcb6.png" alt="image-20200208182322313"></p><p>要实现该案例，我们先画出类图：</p><p><img src="https://photo.459122.xyz/i/60416d4417f764cc815c720b5d50542d.png" alt="组合模式"></p><p><strong>代码实现：</strong></p><p>不管是菜单还是菜单项，都应该继承自统一的接口，这里姑且将这个统一的接口称为菜单组件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//菜单组件  不管是菜单还是菜单项，都应该继承该类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"><span class="comment">//菜单组件的名称</span></span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="comment">//菜单组件的层级</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="type">int</span> level;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加子菜单  子类是菜单的话下面可以有菜单或者菜单项 如果是菜单项就不可以使用这个方法 父类默认不支持</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移除子菜单</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取指定的子菜单</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取菜单名称</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的MenuComponent定义为抽象类，因为有一些共有的属性和行为要在该类中实现，Menu和MenuItem类就可以只覆盖自己感兴趣的方法，而不用搭理不需要或者不感兴趣的方法，举例来说，Menu类可以包含子菜单，因此需要覆盖add()、remove()、getChild()方法，但是MenuItem就不应该有这些方法。这里给出的默认实现是抛出异常，你也可以根据自己的需要改写默认实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Menu</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//菜单可以有多个子菜单或者子菜单项</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;MenuComponent&gt; menuComponentList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Menu</span><span class="params">(String name,<span class="type">int</span> level)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        menuComponentList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;MenuComponent&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">add</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.add(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(MenuComponent menuComponent)</span> &#123;</span><br><span class="line">        menuComponentList.remove(menuComponent);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> MenuComponent <span class="title function_">getChild</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> menuComponentList.get(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//打印菜单名称</span></span><br><span class="line">        System.out.println(name);</span><br><span class="line">        <span class="comment">//打印菜单或者子菜单项名称</span></span><br><span class="line">        <span class="keyword">for</span> (MenuComponent menuComponent : menuComponentList) &#123;</span><br><span class="line">            menuComponent.print();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Menu类已经实现了除了getName方法的其他所有方法，因为Menu类具有添加菜单，移除菜单和获取子菜单的功能。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MenuItem</span> <span class="keyword">extends</span> <span class="title class_">MenuComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">MenuItem</span><span class="params">(String name,<span class="type">int</span> level)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.level = level;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>; i &lt; level; i++) &#123;</span><br><span class="line">            System.out.print(<span class="string">&quot;--&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MenuItem是菜单项，不能再有子菜单，所以添加菜单，移除菜单和获取子菜单的功能并不能实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建菜单树</span></span><br><span class="line"><span class="type">MeauComponent</span> <span class="variable">menu1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Menu</span>(<span class="string">&quot;菜单管理&quot;</span>,<span class="number">2</span>);</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">menu1.add(<span class="keyword">new</span> <span class="title class_">MenuItem</span>(<span class="string">&quot;展开访问&quot;</span>，<span class="number">3</span>));</span><br><span class="line">。。。</span><br></pre></td></tr></table></figure><h3 id="5-6-4-组合模式的分类">5.6.4 组合模式的分类</h3><p>在使用组合模式时，根据抽象构件类的定义形式，我们可将组合模式分为透明组合模式和安全组合模式两种形式。</p><ul><li><p>透明组合模式</p><p>透明组合模式中，抽象根节点角色中声明了所有用于管理成员对象的方法，比如在示例中 <code>MenuComponent</code> 声明了 <code>add</code>、<code>remove</code> 、<code>getChild</code> 方法，这样做的好处是确保所有的构件类都有相同的接口。透明组合模式也是组合模式的标准形式。</p><p>透明组合模式的缺点是不够安全，因为叶子对象和容器对象在本质上是有区别的，叶子对象不可能有下一个层次的对象，即不可能包含成员对象，因此为其提供 add()、remove() 等方法是没有意义的，这在编译阶段不会出错，但在运行阶段如果调用这些方法可能会出错（如果没有提供相应的错误处理代码）</p></li><li><p>安全组合模式</p><p>在安全组合模式中，在抽象构件角色中没有声明任何用于管理成员对象的方法，而是在树枝节点 <code>Menu</code> 类中声明并实现这些方法。安全组合模式的缺点是不够透明，因为叶子构件和容器构件具有不同的方法，且容器构件中那些用于管理成员对象的方法没有在抽象构件类中定义，因此客户端不能完全针对抽象编程，必须有区别地对待叶子构件和容器构件。</p><p><img src="https://photo.459122.xyz/i/f18b68b9f2c19103c4224b9012d16023.png" alt="组合模式-安全性"></p></li></ul><h3 id="5-6-5-优点">5.6.5 优点</h3><ul><li>组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，它让客户端忽略了层次的差异，方便对整个层次结构进行控制。</li><li>客户端可以一致地使用一个组合结构或其中单个对象，不必关心处理的是单个对象还是整个组合结构，简化了客户端代码。</li><li>在组合模式中增加新的树枝节点和叶子节点都很方便，无须对现有类库进行任何修改，符合“开闭原则”。</li><li>组合模式为树形结构的面向对象实现提供了一种灵活的解决方案，通过叶子节点和树枝节点的递归组合，可以形成复杂的树形结构，但对树形结构的控制却非常简单。</li></ul><h3 id="5-6-6-使用场景">5.6.6 使用场景</h3><p>组合模式正是应树形结构而生，所以组合模式的使用场景就是出现树形结构的地方。比如：文件目录显示，多级目录呈现等树形结构数据的操作。</p><h2 id="5-7-享元模式">5.7 享元模式</h2><h3 id="5-7-1-概述">5.7.1 概述</h3><p><strong>定义：</strong></p><p>​运用共享技术来有效地支持大量细粒度对象的复用。它通过共享已经存在的对象来大幅度减少需要创建的对象数量、避免大量相似对象的开销，从而提高系统资源的利用率。【共享单车】</p><h3 id="5-7-2-结构">5.7.2 结构</h3><p>享元（Flyweight ）模式中存在以下两种状态：</p><ol><li>内部状态，即不会随着环境的改变而改变的可共享部分。</li><li>外部状态，指随环境改变而改变的不可以共享的部分。享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</li></ol><p>享元模式的主要有以下角色：</p><ul><li>抽象享元角色（Flyweight）：通常是一个接口或抽象类，在抽象享元类中声明了具体享元类公共的方法，这些方法可以向外界提供享元对象的内部数据（内部状态），同时也可以通过这些方法来设置外部数据（外部状态）。</li><li>具体享元（Concrete Flyweight）角色 ：它实现了抽象享元类，称为享元对象；在具体享元类中为内部状态提供了存储空间。通常我们可以结合单例模式来设计具体享元类，为每一个具体享元类提供唯一的享元对象。</li><li>非享元（Unsharable Flyweight)角色 ：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。</li><li>享元工厂（Flyweight Factory）角色 ：负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。</li></ul><h3 id="5-7-3-案例实现">5.7.3 案例实现</h3><p>【例】俄罗斯方块</p><p>下面的图片是众所周知的俄罗斯方块中的一个个方块，如果在俄罗斯方块这个游戏中，每个不同的方块都是一个实例对象，这些对象就要占用很多的内存空间，下面利用享元模式进行实现。</p><p><img src="https://photo.459122.xyz/i/8b3903e6f4a8d710603b0441ecf78e62.jpeg" alt="俄罗斯方块"></p><p><strong>先来看类图：</strong></p><p><img src="https://photo.459122.xyz/i/b698f665fd88f261c8ab5a7ca25c982d.png" alt="享元模式"></p><p><strong>代码如下：</strong></p><p>俄罗斯方块有不同的形状，我们可以对这些形状向上抽取出AbstractBox，用来定义共性的属性和行为。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractBox</span> &#123;<span class="comment">//抽象享元角色</span></span><br><span class="line">    <span class="comment">//获取图形的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title function_">getShape</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示图形及颜色 </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">display</span><span class="params">(String color)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;方块形状：&quot;</span> + <span class="built_in">this</span>.getShape() + <span class="string">&quot; 颜色：&quot;</span> + color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来就是定义不同的形状了，IBox类、LBox类、OBox类等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IBox</span> <span class="keyword">extends</span> <span class="title class_">AbstractBox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;I&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LBox</span> <span class="keyword">extends</span> <span class="title class_">AbstractBox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;L&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OBox</span> <span class="keyword">extends</span> <span class="title class_">AbstractBox</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getShape</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;O&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提供了一个工厂类（BoxFactory），用来管理享元对象（也就是AbstractBox子类对象），该工厂类对象只需要一个，所以可以使用单例模式。并给工厂类提供一个获取形状的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BoxFactory</span> &#123;<span class="comment">//工厂类 设计为单例  </span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> HashMap&lt;String, AbstractBox&gt; map;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在构造方法种进行初始化操作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">BoxFactory</span><span class="params">()</span> &#123;</span><br><span class="line">        map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, AbstractBox&gt;();</span><br><span class="line">        <span class="type">AbstractBox</span> <span class="variable">iBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IBox</span>();</span><br><span class="line">        <span class="type">AbstractBox</span> <span class="variable">lBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LBox</span>();</span><br><span class="line">        <span class="type">AbstractBox</span> <span class="variable">oBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OBox</span>();</span><br><span class="line">        map.put(<span class="string">&quot;I&quot;</span>, iBox);</span><br><span class="line">        map.put(<span class="string">&quot;L&quot;</span>, lBox);</span><br><span class="line">        map.put(<span class="string">&quot;O&quot;</span>, oBox);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据名称获取图形对象</span></span><br><span class="line">    <span class="keyword">public</span> AbstractBox <span class="title function_">getShape</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> BoxFactory <span class="title function_">getInstance</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SingletonHolder.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">SingletonHolder</span> &#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">BoxFactory</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BoxFactory</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> AbstractBox <span class="title function_">getBox</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-7-5-优缺点和使用场景">5.7.5 优缺点和使用场景</h3><p><strong>1，优点</strong></p><ul><li>极大减少内存中相似或相同对象数量，节约系统资源，提供系统性能</li><li>享元模式中的外部状态相对独立，且不影响内部状态</li></ul><p><strong>2，缺点：</strong></p><p>为了使对象可以共享，需要将享元对象的部分状态外部化，分离内部状态和外部状态，使程序逻辑复杂</p><p><strong>3，使用场景：</strong></p><ul><li>一个系统有大量相同或者相似的对象，造成内存的大量耗费。</li><li>对象的大部分状态都可以外部化，可以将这些外部状态传入对象中。</li><li>在使用享元模式时需要维护一个存储享元对象的享元池，而这需要耗费一定的系统资源，因此，应当在需要多次重复使用享元对象时才值得使用享元模式。</li></ul><h3 id="5-7-6-JDK源码解析">5.7.6 JDK源码解析</h3><p>Integer类使用了享元模式。我们先看下面的例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i2</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i1和i2对象是否是同一个对象？&quot;</span> + (i1 == i2));</span><br><span class="line"></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> <span class="number">128</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;i3和i4对象是否是同一个对象？&quot;</span> + (i3 == i4));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行上面代码，结果如下：</p><p><img src="https://photo.459122.xyz/i/1a6ad3e565229f7c231fb6243850785d.png" alt="image-20200208212930857"></p><p>为什么第一个输出语句输出的是true，第二个输出语句输出的是false？通过反编译软件进行反编译，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i1</span> <span class="operator">=</span> Integer.valueOf((<span class="type">int</span>)<span class="number">127</span>);</span><br><span class="line">        Integer i2 Integer.valueOf((<span class="type">int</span>)<span class="number">127</span>);</span><br><span class="line">        System.out.println((String)<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append((String)<span class="string">&quot;i1\u548ci2\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f&quot;</span>).append((<span class="type">boolean</span>)(i1 == i2)).toString());</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i3</span> <span class="operator">=</span> Integer.valueOf((<span class="type">int</span>)<span class="number">128</span>);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">i4</span> <span class="operator">=</span> Integer.valueOf((<span class="type">int</span>)<span class="number">128</span>);</span><br><span class="line">        System.out.println((String)<span class="keyword">new</span> <span class="title class_">StringBuilder</span>().append((String)<span class="string">&quot;i3\u548ci4\u5bf9\u8c61\u662f\u5426\u662f\u540c\u4e00\u4e2a\u5bf9\u8c61\uff1f&quot;</span>).append((<span class="type">boolean</span>)(i3 == i4)).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码可以看到，直接给Integer类型的变量赋值基本数据类型数据的操作底层使用的是 <code>valueOf()</code> ，所以只需要看该方法即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Integer</span> <span class="keyword">extends</span> <span class="title class_">Number</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;Integer&gt; &#123;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Integer <span class="title function_">valueOf</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)</span><br><span class="line">            <span class="keyword">return</span> IntegerCache.cache[i + (-IntegerCache.low)];</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Integer</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">IntegerCache</span> &#123;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> -<span class="number">128</span>;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> high;</span><br><span class="line">        <span class="keyword">static</span> <span class="keyword">final</span> Integer cache[];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">127</span>;</span><br><span class="line">            <span class="type">String</span> <span class="variable">integerCacheHighPropValue</span> <span class="operator">=</span></span><br><span class="line">                sun.misc.VM.getSavedProperty(<span class="string">&quot;java.lang.Integer.IntegerCache.high&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (integerCacheHighPropValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> parseInt(integerCacheHighPropValue);</span><br><span class="line">                    i = Math.max(i, <span class="number">127</span>);</span><br><span class="line">                    <span class="comment">// Maximum array size is Integer.MAX_VALUE</span></span><br><span class="line">                    h = Math.min(i, Integer.MAX_VALUE - (-low) -<span class="number">1</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span>( NumberFormatException nfe) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            high = h;</span><br><span class="line">            cache = <span class="keyword">new</span> <span class="title class_">Integer</span>[(high - low) + <span class="number">1</span>];</span><br><span class="line">            <span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> low;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">k</span> <span class="operator">=</span> <span class="number">0</span>; k &lt; cache.length; k++)</span><br><span class="line">                cache[k] = <span class="keyword">new</span> <span class="title class_">Integer</span>(j++);</span><br><span class="line">            <span class="comment">// range [-128, 127] must be interned (JLS7 5.1.7)</span></span><br><span class="line">            <span class="keyword">assert</span> IntegerCache.high &gt;= <span class="number">127</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="title function_">IntegerCache</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 <code>Integer</code> 默认先创建并缓存 <code>-128 ~ 127</code> 之间数的 <code>Integer</code> 对象，当调用 <code>valueOf</code> 时如果参数在 <code>-128 ~ 127</code> 之间则计算下标并从缓存中返回，否则创建一个新的 <code>Integer</code> 对象。</p><h1>6，行为型模式</h1><p>行为型模式用于描述程序在运行时复杂的流程控制，即描述多个类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，它涉及算法与对象间职责的分配。</p><p>行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。</p><p>行为型模式分为：</p><ul><li>模板方法模式</li><li>策略模式</li><li>命令模式</li><li>职责链模式</li><li>状态模式</li><li>观察者模式</li><li>中介者模式</li><li>迭代器模式</li><li>访问者模式</li><li>备忘录模式</li><li>解释器模式</li></ul><p>以上 11 种行为型模式，除了模板方法模式和解释器模式是类行为型模式，其他的全部属于对象行为型模式。</p><h2 id="6-1-模板方法模式">6.1 模板方法模式</h2><h3 id="6-1-1-概述">6.1.1 概述</h3><p>在面向对象程序设计过程中，程序员常常会遇到这种情况：设计一个系统时知道了算法所需的关键步骤，而且确定了这些步骤的执行顺序，但某些步骤的具体实现还未知，或者说某些步骤的实现与具体的环境相关。</p><p>例如，去银行办理业务一般要经过以下4个流程：取号、排队、办理具体业务、对银行工作人员进行评分等，其中取号、排队和对银行工作人员进行评分的业务对每个客户是一样的，可以在父类中实现，但是办理具体业务却因人而异，它可能是存款、取款或者转账等，可以延迟到子类中实现。</p><p><strong>定义：</strong></p><p>定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。</p><h3 id="6-1-2-结构">6.1.2 结构</h3><p>模板方法（Template Method）模式包含以下主要角色：</p><ul><li><p>抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。</p><ul><li><p>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</p></li><li><p>基本方法：是实现算法各个步骤的方法，是模板方法的组成部分。基本方法又可以分为三种：</p><ul><li><p>抽象方法(Abstract Method) ：一个抽象方法由抽象类声明、由其具体子类实现。</p></li><li><p>具体方法(Concrete Method) ：一个具体方法由一个抽象类或具体类声明并实现，其子类可以进行覆盖也可以直接继承。</p></li><li><p>钩子方法(Hook Method) ：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</p><p>一般钩子方法是用于判断的逻辑方法，这类方法名一般为isXxx，返回值类型为boolean类型。</p></li></ul></li></ul></li><li><p>具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的组成步骤。</p></li></ul><h3 id="6-1-3-案例实现">6.1.3 案例实现</h3><p>【例】炒菜</p><p>炒菜的步骤是固定的，分为倒油、热油、倒蔬菜、倒调料品、翻炒等步骤。现通过模板方法模式来用代码模拟。类图如下：</p><p><img src="https://photo.459122.xyz/i/179b348953d313b75cc0a5407d1f113a.png" alt="模板方法模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">cookProcess</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//第一步：倒油</span></span><br><span class="line">        <span class="built_in">this</span>.pourOil();</span><br><span class="line">        <span class="comment">//第二步：热油</span></span><br><span class="line">        <span class="built_in">this</span>.heatOil();</span><br><span class="line">        <span class="comment">//第三步：倒蔬菜</span></span><br><span class="line">        <span class="built_in">this</span>.pourVegetable();</span><br><span class="line">        <span class="comment">//第四步：倒调味料</span></span><br><span class="line">        <span class="built_in">this</span>.pourSauce();</span><br><span class="line">        <span class="comment">//第五步：翻炒</span></span><br><span class="line">        <span class="built_in">this</span>.fry();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourOil</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;倒油&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二步：热油是一样的，所以直接实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">heatOil</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;热油&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第三步：倒蔬菜是不一样的（一个下包菜，一个是下菜心）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">pourVegetable</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//第四步：倒调味料是不一样</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">pourSauce</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第五步：翻炒是一样的，所以直接实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fry</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;炒啊炒啊炒到熟啊&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass_BaoCai</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourVegetable</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的蔬菜是包菜&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourSauce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的酱料是辣椒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConcreteClass_CaiXin</span> <span class="keyword">extends</span> <span class="title class_">AbstractClass</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourVegetable</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的蔬菜是菜心&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">pourSauce</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;下锅的酱料是蒜蓉&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//炒手撕包菜</span></span><br><span class="line">        <span class="type">ConcreteClass_BaoCai</span> <span class="variable">baoCai</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass_BaoCai</span>();</span><br><span class="line">        baoCai.cookProcess();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//炒蒜蓉菜心</span></span><br><span class="line">        <span class="type">ConcreteClass_CaiXin</span> <span class="variable">caiXin</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ConcreteClass_CaiXin</span>();</span><br><span class="line">        caiXin.cookProcess();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：为防止恶意操作，一般模板方法都加上 final 关键词。</p></blockquote><h3 id="6-1-3-优缺点">6.1.3 优缺点</h3><p><strong>优点：</strong></p><ul><li><p>提高代码复用性</p><p>将相同部分的代码放在抽象的父类中，而将不同的代码放入不同的子类中。</p></li><li><p>实现了反向控制</p><p>通过一个父类调用其子类的操作，通过对子类的具体实现扩展不同的行为，实现了反向控制 ，并符合“开闭原则”。</p></li></ul><p><strong>缺点：</strong></p><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li></ul><h3 id="6-1-4-适用场景">6.1.4 适用场景</h3><ul><li>算法的整体步骤很固定，但其中个别部分易变时，这时候可以使用模板方法模式，将容易变的部分抽象出来，供子类实现。</li><li>需要通过子类来决定父类算法中某个步骤是否执行，实现子类对父类的反向控制。</li></ul><h3 id="6-1-5-JDK源码解析">6.1.5 JDK源码解析</h3><p>InputStream类就使用了模板方法模式。在InputStream类中定义了多个 <code>read()</code> 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">InputStream</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span> &#123;<span class="comment">//抽象类</span></span><br><span class="line">    <span class="comment">//抽象方法，要求子类必须重写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[])</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">return</span> read(b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板f</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(<span class="type">byte</span> b[], <span class="type">int</span> off, <span class="type">int</span> len)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">if</span> (b == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NullPointerException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (off &lt; <span class="number">0</span> || len &lt; <span class="number">0</span> || len &gt; b.length - off) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (len == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">c</span> <span class="operator">=</span> read(); <span class="comment">//调用了无参的read方法，该方法是每次读取一个字节数据</span></span><br><span class="line">        <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        b[off] = (<span class="type">byte</span>)c;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (; i &lt; len ; i++) &#123;</span><br><span class="line">                c = read();</span><br><span class="line">                <span class="keyword">if</span> (c == -<span class="number">1</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                b[off + i] = (<span class="type">byte</span>)c;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException ee) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码可以看到，无参的 <code>read()</code> 方法是抽象方法，要求子类必须实现。而 <code>read(byte b[])</code> 方法调用了 <code>read(byte b[], int off, int len)</code> 方法，所以在此处重点看的方法是带三个参数的方法。</p><p>在该方法中第18行、27行，可以看到调用了无参的抽象的 <code>read()</code> 方法。</p><p>总结如下： 在InputStream父类中已经定义好了读取一个字节数组数据的方法是每次读取一个字节，并将其存储到数组的第一个索引位置，读取len个字节数据。具体如何读取一个字节数据呢？由子类实现。</p><h2 id="6-2-策略模式">6.2 策略模式</h2><h3 id="6-2-1-概述">6.2.1 概述</h3><p>先看下面的图片，我们去旅游选择出行模式有很多种，可以骑自行车、可以坐汽车、可以坐火车、可以坐飞机。</p><p><img src="https://photo.459122.xyz/i/dcb3c31622f7f5bad5b2d0cedda4e90b.png" alt="image-20200210143039168"></p><p>作为一个程序猿，开发需要选择一款开发工具，当然可以进行代码开发的工具有很多，可以选择Idea进行开发，也可以使用eclipse进行开发，也可以使用其他的一些开发工具。</p><p><img src="https://photo.459122.xyz/i/94f820407016ecc4b1a57568075cbc91.png" alt="image-20200210144457478"></p><p><strong>定义：</strong></p><p>​该模式定义了一系列算法，并将每个算法封装起来，使它们可以相互替换，且算法的变化不会影响使用算法的客户。策略模式属于对象行为模式，它通过对算法进行封装，把使用算法的责任和算法的实现分割开来，并委派给不同的对象对这些算法进行管理。</p><h3 id="6-2-2-结构">6.2.2 结构</h3><p>策略模式的主要角色如下：</p><ul><li>抽象策略（Strategy）类：这是一个抽象角色，通常由一个接口或抽象类实现。此角色给出所有的具体策略类所需的接口。</li><li>具体策略（Concrete Strategy）类：实现了抽象策略定义的接口，提供具体的算法实现或行为。</li><li>环境（Context）类：持有一个策略类的引用，最终给客户端调用。</li></ul><h3 id="6-2-3-案例实现">6.2.3 案例实现</h3><p>【例】促销活动</p><p>一家百货公司在定年度的促销活动。针对不同的节日（春节、中秋节、圣诞节）推出不同的促销活动，由促销员将促销活动展示给客户。类图如下：</p><p><img src="https://photo.459122.xyz/i/99c44f897733536c2bd43e996990f8b2.png" alt="策略模式"></p><p>代码如下：</p><p>定义百货公司所有促销活动的共同接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义具体策略角色（Concrete Strategy）：每个节日具体的促销活动</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//为春节准备的促销活动A</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyA</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;买一送一&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为中秋准备的促销活动B</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyB</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满200元减50元&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//为圣诞准备的促销活动C</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StrategyC</span> <span class="keyword">implements</span> <span class="title class_">Strategy</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;满1000元加一元换购任意200元以下商品&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>定义环境角色（Context）：用于连接上下文，即把促销活动推销给客户，这里可以理解为销售员</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SalesMan</span> &#123;                        </span><br><span class="line">    <span class="comment">//持有抽象策略角色的引用                              </span></span><br><span class="line">    <span class="keyword">private</span> Strategy strategy;                 </span><br><span class="line">                                               </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SalesMan</span><span class="params">(Strategy strategy)</span> &#123;       </span><br><span class="line">        <span class="built_in">this</span>.strategy = strategy;              </span><br><span class="line">    &#125;                                          </span><br><span class="line">                                               </span><br><span class="line">    <span class="comment">//向客户展示促销活动                                </span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">salesManShow</span><span class="params">()</span>&#123;                </span><br><span class="line">        strategy.show();                       </span><br><span class="line">    &#125;                                          </span><br><span class="line">&#125;                                              </span><br></pre></td></tr></table></figure><h3 id="6-2-4-优缺点">6.2.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>策略类之间可以自由切换</p><p>由于策略类都实现同一个接口，所以使它们之间可以自由切换。</p></li><li><p>易于扩展</p><p>增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合“开闭原则“</p></li><li><p>避免使用多重条件选择语句（if else），充分体现面向对象设计思想。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>客户端必须知道所有的策略类，并自行决定使用哪一个策略类。</li><li>策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。</li></ul><h3 id="6-2-5-使用场景">6.2.5 使用场景</h3><ul><li>一个系统需要动态地在几种算法中选择一种时，可将每个算法封装到策略类中。</li><li>一个类定义了多种行为，并且这些行为在这个类的操作中以多个条件语句的形式出现，可将每个条件分支移入它们各自的策略类中以代替这些条件语句。</li><li>系统中各算法彼此完全独立，且要求对客户隐藏具体算法的实现细节时。</li><li>系统要求使用算法的客户不应该知道其操作的数据时，可使用策略模式来隐藏与算法相关的数据结构。</li><li>多个类只区别在表现行为不同，可以使用策略模式，在运行时动态选择具体要执行的行为。</li></ul><h3 id="6-2-6-JDK源码解析">6.2.6 JDK源码解析</h3><p><code>Comparator</code> 中的策略模式。在Arrays类中有一个 <code>sort()</code> 方法，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Arrays</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="literal">null</span>) &#123;</span><br><span class="line">            sort(a);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (LegacyMergeSort.userRequested)</span><br><span class="line">                legacyMergeSort(a, c);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                TimSort.sort(a, <span class="number">0</span>, a.length, c, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Arrays就是一个环境角色类，这个sort方法可以传一个新策略让Arrays根据这个策略来进行排序。就比如下面的测试类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">demo</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        Integer[] data = &#123;<span class="number">12</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">1</span>&#125;;</span><br><span class="line">        <span class="comment">// 实现降序排序</span></span><br><span class="line">        Arrays.sort(data, <span class="keyword">new</span> <span class="title class_">Comparator</span>&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Integer o1, Integer o2)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> o2 - o1;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(Arrays.toString(data)); <span class="comment">//[12, 5, 4, 3, 2, 2, 1]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在调用Arrays的sort方法时，第二个参数传递的是Comparator接口的子实现类对象。所以Comparator充当的是抽象策略角色，而具体的子实现类充当的是具体策略角色。环境角色类（Arrays）应该持有抽象策略的引用来调用。那么，Arrays类的sort方法到底有没有使用Comparator子实现类中的 <code>compare()</code> 方法吗？让我们继续查看TimSort类的 <code>sort()</code> 方法，代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">TimSort</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">static</span> &lt;T&gt; <span class="keyword">void</span> <span class="title function_">sort</span><span class="params">(T[] a, <span class="type">int</span> lo, <span class="type">int</span> hi, Comparator&lt;? <span class="built_in">super</span> T&gt; c,</span></span><br><span class="line"><span class="params">                         T[] work, <span class="type">int</span> workBase, <span class="type">int</span> workLen)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> c != <span class="literal">null</span> &amp;&amp; a != <span class="literal">null</span> &amp;&amp; lo &gt;= <span class="number">0</span> &amp;&amp; lo &lt;= hi &amp;&amp; hi &lt;= a.length;</span><br><span class="line"></span><br><span class="line">        <span class="type">int</span> <span class="variable">nRemaining</span>  <span class="operator">=</span> hi - lo;</span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">return</span>;  <span class="comment">// Arrays of size 0 and 1 are always sorted</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// If array is small, do a &quot;mini-TimSort&quot; with no merges</span></span><br><span class="line">        <span class="keyword">if</span> (nRemaining &lt; MIN_MERGE) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">initRunLen</span> <span class="operator">=</span> countRunAndMakeAscending(a, lo, hi, c);</span><br><span class="line">            binarySort(a, lo, hi, lo + initRunLen, c);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">    &#125;   </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="type">int</span> <span class="title function_">countRunAndMakeAscending</span><span class="params">(T[] a, <span class="type">int</span> lo, <span class="type">int</span> hi,Comparator&lt;? <span class="built_in">super</span> T&gt; c)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> lo &lt; hi;</span><br><span class="line">        <span class="type">int</span> <span class="variable">runHi</span> <span class="operator">=</span> lo + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (runHi == hi)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Find end of run, and reverse range if descending</span></span><br><span class="line">        <span class="keyword">if</span> (c.compare(a[runHi++], a[lo]) &lt; <span class="number">0</span>) &#123; <span class="comment">// Descending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &lt; <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">            reverseRange(a, lo, runHi);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;                              <span class="comment">// Ascending</span></span><br><span class="line">            <span class="keyword">while</span> (runHi &lt; hi &amp;&amp; c.compare(a[runHi], a[runHi - <span class="number">1</span>]) &gt;= <span class="number">0</span>)</span><br><span class="line">                runHi++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> runHi - lo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码中最终会跑到 <code>countRunAndMakeAscending()</code> 这个方法中。我们可以看见，只用了compare方法，所以在调用Arrays.sort方法只传具体compare重写方法的类对象就行，这也是Comparator接口中必须要子类实现的一个方法。</p><h2 id="6-3-命令模式">6.3 命令模式</h2><h3 id="6-3-1-概述">6.3.1 概述</h3><p>日常生活中，我们出去吃饭都会遇到下面的场景。</p><p><img src="https://photo.459122.xyz/i/9a76c60409004b022680b1f285fcd1ea.png" alt="image-20200211130313251"></p><p><strong>定义：</strong></p><p>将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。这样两者之间通过命令对象进行沟通，这样方便将命令对象进行存储、传递、调用、增加与管理。</p><h3 id="6-3-2-结构">6.3.2 结构</h3><p>命令模式包含以下主要角色：</p><ul><li>抽象命令类（Command）角色： 定义命令的接口，声明执行的方法。</li><li>具体命令（Concrete  Command）角色：具体的命令，实现命令接口；通常会持有接收者，并调用接收者的功能来完成命令要执行的操作。</li><li>实现者/接收者（Receiver）角色： 接收者，真正执行命令的对象。任何类都可能成为一个接收者，只要它能够实现命令要求实现的相应功能。</li><li>调用者/请求者（Invoker）角色： 要求命令对象执行请求，通常会持有命令对象，可以持有很多的命令对象。这个是客户端真正触发命令并要求命令执行相应操作的地方，也就是说相当于使用命令对象的入口。</li></ul><h3 id="6-3-3-案例实现">6.3.3 案例实现</h3><p>将上面的案例用代码实现，那我们就需要分析命令模式的角色在该案例中由谁来充当。</p><p>服务员： 就是调用者角色，由她来发起命令。</p><p>资深大厨： 就是接收者角色，真正命令执行的对象。</p><p>订单： 命令中包含订单。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/43e061fa4782061729f618b6d5914e2d.png" alt="命令模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Command</span> &#123;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>;<span class="comment">//只需要定义一个统一的执行方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderCommand</span> <span class="keyword">implements</span> <span class="title class_">Command</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//持有接受者对象</span></span><br><span class="line">    <span class="keyword">private</span> SeniorChef receiver;</span><br><span class="line">    <span class="keyword">private</span> Order order;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">OrderCommand</span><span class="params">(SeniorChef receiver, Order order)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">        <span class="built_in">this</span>.order = order;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">execute</span><span class="params">()</span>  &#123;</span><br><span class="line">        System.out.println(order.getDiningTable() + <span class="string">&quot;桌的订单：&quot;</span>);</span><br><span class="line">        Set&lt;String&gt; keys = order.getFoodDic().keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : keys) &#123;</span><br><span class="line">            receiver.makeFood(order.getFoodDic().get(key),key);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">100</span>);<span class="comment">//停顿一下 模拟做饭的过程</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(order.getDiningTable() + <span class="string">&quot;桌的饭弄好了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="comment">// 餐桌号码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> diningTable;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 用来存储餐名并记录份数</span></span><br><span class="line">    <span class="keyword">private</span> Map&lt;String, Integer&gt; foodDic = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;String, Integer&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getDiningTable</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> diningTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDiningTable</span><span class="params">(<span class="type">int</span> diningTable)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.diningTable = diningTable;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Integer&gt; <span class="title function_">getFoodDic</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> foodDic;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFoodDic</span><span class="params">(String name, <span class="type">int</span> num)</span> &#123;</span><br><span class="line">        foodDic.put(name,num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 资深大厨类 是命令的Receiver</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SeniorChef</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">makeFood</span><span class="params">(<span class="type">int</span> num,String foodName)</span> &#123;</span><br><span class="line">        System.out.println(num + <span class="string">&quot;份&quot;</span> + foodName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Waitor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ArrayList&lt;Command&gt; commands;<span class="comment">//可以持有很多的命令对象</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Waitor</span><span class="params">()</span> &#123;</span><br><span class="line">        commands = <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCommand</span><span class="params">(Command cmd)</span>&#123;</span><br><span class="line">        commands.add(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发出命令 喊 订单来了，厨师开始执行</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">orderUp</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;美女服务员：叮咚，大厨，新订单来了.......&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; commands.size(); i++) &#123;</span><br><span class="line">            <span class="type">Command</span> <span class="variable">cmd</span> <span class="operator">=</span> commands.get(i);</span><br><span class="line">            <span class="keyword">if</span> (cmd != <span class="literal">null</span>) &#123;</span><br><span class="line">                cmd.execute();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//创建2个order</span></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order1.setDiningTable(<span class="number">1</span>);</span><br><span class="line">        order1.getFoodDic().put(<span class="string">&quot;西红柿鸡蛋面&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        order1.getFoodDic().put(<span class="string">&quot;小杯可乐&quot;</span>,<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Order</span> <span class="variable">order2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Order</span>();</span><br><span class="line">        order2.setDiningTable(<span class="number">3</span>);</span><br><span class="line">        order2.getFoodDic().put(<span class="string">&quot;尖椒肉丝盖饭&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        order2.getFoodDic().put(<span class="string">&quot;小杯雪碧&quot;</span>,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建接收者</span></span><br><span class="line">        SeniorChef receiver=<span class="keyword">new</span> <span class="title class_">SeniorChef</span>();</span><br><span class="line">        <span class="comment">//将订单和接收者封装成命令对象</span></span><br><span class="line">        <span class="type">OrderCommand</span> <span class="variable">cmd1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderCommand</span>(receiver, order1);</span><br><span class="line">        <span class="type">OrderCommand</span> <span class="variable">cmd2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OrderCommand</span>(receiver, order2);</span><br><span class="line">        <span class="comment">//创建调用者 waitor</span></span><br><span class="line">        <span class="type">Waitor</span> <span class="variable">invoker</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Waitor</span>();</span><br><span class="line">        invoker.setCommand(cmd1);</span><br><span class="line">        invoker.setCommand(cmd2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将订单带到柜台 并向厨师喊 订单来了</span></span><br><span class="line">        invoker.orderUp();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-4-优缺点">6.3.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li><li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”，对扩展比较灵活。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li><li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li></ul><p><strong>2，缺点：</strong></p><ul><li>使用命令模式可能会导致某些系统有过多的具体命令类。</li><li>系统结构更加复杂。</li></ul><h3 id="6-3-5-使用场景">6.3.5 使用场景</h3><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队和执行请求。</li><li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作。</li></ul><h3 id="6-3-6-JDK源码解析">6.3.6 JDK源码解析</h3><p>Runable是一个典型命令模式，Runnable担当命令的角色，Thread充当的是调用者，start方法就是其执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//命令接口(抽象命令角色)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Thread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Runnable target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (threadStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalThreadStateException</span>();</span><br><span class="line"></span><br><span class="line">        group.add(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">started</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            start0();</span><br><span class="line">            started = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">                    group.threadStartFailed(<span class="built_in">this</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable ignore) &#123;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">start0</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会调用一个native方法start0(),调用系统方法，开启一个线程。而接收者是对程序员开放的，可以自己定义接收者。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * jdk Runnable 命令模式</span></span><br><span class="line"><span class="comment"> *TurnOffThread ： 属于具体命令角色</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TurnOffThread</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line">     <span class="keyword">private</span> Receiver receiver;<span class="comment">//接收者</span></span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span> <span class="title function_">TurnOffThread</span><span class="params">(Receiver receiver)</span> &#123;</span><br><span class="line">     <span class="built_in">this</span>.receiver = receiver;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">     receiver.turnOFF();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Demo</span> &#123;</span><br><span class="line">     <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">         <span class="type">Receiver</span> <span class="variable">receiver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Receiver</span>();</span><br><span class="line">         <span class="type">TurnOffThread</span> <span class="variable">turnOffThread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TurnOffThread</span>(receiver);</span><br><span class="line">         <span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(turnOffThread);</span><br><span class="line">         thread.start();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-4-责任链模式">6.4 责任链模式</h2><h3 id="6-4-1-概述">6.4.1 概述</h3><p>在现实生活中，常常会出现这样的事例：一个请求有多个对象可以处理，但每个对象的处理条件或权限不同。例如，公司员工请假，可批假的领导有部门负责人、副总经理、总经理等，但每个领导能批准的天数不同，员工必须根据自己要请假的天数去找不同的领导签名，也就是说员工必须记住每个领导的姓名、电话和地址等信息，这增加了难度。这样的例子还有很多，如找领导出差报销、生活中的“击鼓传花”游戏等。</p><p><strong>定义：</strong></p><p>又名职责链模式，为了避免请求发送者与多个请求处理者耦合在一起，将所有请求的处理者通过前一对象记住其下一个对象的引用而连成一条链；当有请求发生时，可将请求沿着这条链传递，直到有对象处理它为止。</p><h3 id="6-4-2-结构">6.4.2 结构</h3><p>职责链模式主要包含以下角色:</p><ul><li>抽象处理者（Handler）角色：定义一个处理请求的接口，包含抽象处理方法和一个后继连接。</li><li>具体处理者（Concrete Handler）角色：实现抽象处理者的处理方法，判断能否处理本次请求，如果可以处理请求则处理，否则将该请求转给它的后继者。</li><li>客户类（Client）角色：创建处理链，并向链头的具体处理者对象提交请求，它不关心处理细节和请求的传递过程。</li></ul><h3 id="6-4-3-案例实现">6.4.3 案例实现</h3><p>现需要开发一个请假流程控制系统。请假一天以下的假只需要小组长同意即可；请假1天到3天的假还需要部门经理同意；请求3天到7天还需要总经理同意才行。</p><p>类图如下：</p><p><img src="https://photo.459122.xyz/i/8c3a267540660d32f051697fab4f6cb1.png" alt="责任链模式"></p><p>代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//请假条</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LeaveRequest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//姓名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> num;<span class="comment">//请假天数</span></span><br><span class="line">    <span class="keyword">private</span> String content;<span class="comment">//请假内容</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">LeaveRequest</span><span class="params">(String name, <span class="type">int</span> num, String content)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.num = num;</span><br><span class="line">        <span class="built_in">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getNum</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContent</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//处理者抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_ONE</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_THREE</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">NUM_SEVEN</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该领导处理的请假天数区间</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numStart;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> numEnd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//领导上面还有领导</span></span><br><span class="line">    <span class="keyword">private</span> Handler nextHandler;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请假天数范围 上不封顶</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="type">int</span> numStart)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numStart = numStart;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置请假天数范围</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(<span class="type">int</span> numStart, <span class="type">int</span> numEnd)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.numStart = numStart;</span><br><span class="line">        <span class="built_in">this</span>.numEnd = numEnd;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置上级领导</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setNextHandler</span><span class="params">(Handler nextHandler)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.nextHandler = nextHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提交请假条</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">submit</span><span class="params">(LeaveRequest leave)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">0</span> == <span class="built_in">this</span>.numStart)&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//如果请假天数达到该领导者的处理要求</span></span><br><span class="line">        <span class="keyword">if</span>(leave.getNum() &gt;= <span class="built_in">this</span>.numStart)&#123;</span><br><span class="line">            <span class="built_in">this</span>.handleLeave(leave);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//如果还有上级 并且请假天数超过了当前领导的处理范围</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="literal">null</span> != <span class="built_in">this</span>.nextHandler &amp;&amp; leave.getNum() &gt; numEnd)&#123;</span><br><span class="line">                <span class="built_in">this</span>.nextHandler.submit(leave);<span class="comment">//继续提交</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;流程结束&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//各级领导处理请假条方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//小组长</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GroupLeader</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GroupLeader</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//小组长处理1-3天的请假</span></span><br><span class="line">        <span class="built_in">super</span>(Handler.NUM_ONE, Handler.NUM_THREE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span> &#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天,&quot;</span> + leave.getContent() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;小组长审批：同意。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//部门经理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Manager</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Manager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//部门经理处理3-7天的请假</span></span><br><span class="line">        <span class="built_in">super</span>(Handler.NUM_THREE, Handler.NUM_SEVEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span> &#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天,&quot;</span> + leave.getContent() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;部门经理审批：同意。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//总经理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GeneralManager</span> <span class="keyword">extends</span> <span class="title class_">Handler</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">GeneralManager</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//部门经理处理7天以上的请假</span></span><br><span class="line">        <span class="built_in">super</span>(Handler.NUM_SEVEN);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleLeave</span><span class="params">(LeaveRequest leave)</span> &#123;</span><br><span class="line">        System.out.println(leave.getName() + <span class="string">&quot;请假&quot;</span> + leave.getNum() + <span class="string">&quot;天,&quot;</span> + leave.getContent() + <span class="string">&quot;。&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;总经理审批：同意。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//测试类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//请假条来一张</span></span><br><span class="line">        <span class="type">LeaveRequest</span> <span class="variable">leave</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LeaveRequest</span>(<span class="string">&quot;小花&quot;</span>,<span class="number">5</span>,<span class="string">&quot;身体不适&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//各位领导</span></span><br><span class="line">        <span class="type">GroupLeader</span> <span class="variable">groupLeader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GroupLeader</span>();</span><br><span class="line">        <span class="type">Manager</span> <span class="variable">manager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Manager</span>();</span><br><span class="line">        <span class="type">GeneralManager</span> <span class="variable">generalManager</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GeneralManager</span>();</span><br><span class="line"></span><br><span class="line">        groupLeader.setNextHandler(manager);<span class="comment">//小组长的领导是部门经理</span></span><br><span class="line">        manager.setNextHandler(generalManager);<span class="comment">//部门经理的领导是总经理</span></span><br><span class="line">        <span class="comment">//之所以在这里设置上级领导，是因为可以根据实际需求来更改设置，如果实战中上级领导人都是固定的，则可以移到领导实现类中。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//提交申请</span></span><br><span class="line">        groupLeader.submit(leave);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-4-4-优缺点">6.4.4 优缺点</h3><p><strong>1，优点：</strong></p><ul><li><p>降低了对象之间的耦合度</p><p>该模式降低了请求发送者和接收者的耦合度。</p></li><li><p>增强了系统的可扩展性</p><p>可以根据需要增加新的请求处理类，满足开闭原则。</p></li><li><p>增强了给对象指派职责的灵活性</p><p>当工作流程发生变化，可以动态地改变链内的成员或者修改它们的次序，也可动态地新增或者删除责任。</p></li><li><p>责任链简化了对象之间的连接</p><p>一个对象只需保持一个指向其后继者的引用，不需保持其他所有处理者的引用，这避免了使用众多的 if 或者 if···else 语句。【针对于客户端】</p></li><li><p>责任分担</p><p>每个类只需要处理自己该处理的工作，不能处理的传递给下一个对象完成，明确各类的责任范围，符合类的单一职责原则。</p></li></ul><p><strong>2，缺点：</strong></p><ul><li>不能保证每个请求一定被处理。由于一个请求没有明确的接收者，所以不能保证它一定会被处理，该请求可能一直传到链的末端都得不到处理。</li><li>对比较长的职责链，请求的处理可能涉及多个处理对象，系统性能将受到一定影响。</li><li>职责链建立的合理性要靠客户端来保证，增加了客户端的复杂性，可能会由于职责链的错误设置而导致系统出错，如可能会造成循环调用。</li></ul><h3 id="6-4-5-源码解析">6.4.5 源码解析</h3><p>在javaWeb应用开发中，FilterChain是职责链（过滤器）模式的典型应用，以下是Filter的模拟实现分析:</p><ul><li><p>模拟web请求Request以及web响应Response</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Request</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Response</span>&#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟web过滤器Filter</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request req,Response res,FilterChain c)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟实现具体过滤器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FirstFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器1 前置处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先执行所有request再倒序执行所有response</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器1 后置处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SecondFilter</span>  <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request request, Response response, FilterChain chain)</span> &#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器2 前置处理&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 先执行所有request再倒序执行所有response</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器2 后置处理&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>模拟实现过滤器链FilterChain</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterChain</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Filter&gt; filters = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Filter&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">index</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 链式调用</span></span><br><span class="line">    <span class="keyword">public</span> FilterChain <span class="title function_">addFilter</span><span class="params">(Filter filter)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.filters.add(filter);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(Request request, Response response)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (index == filters.size()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Filter</span> <span class="variable">filter</span> <span class="operator">=</span> filters.get(index);</span><br><span class="line">        index++;</span><br><span class="line">        filter.doFilter(request, response, <span class="built_in">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Request</span>  <span class="variable">req</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Response</span> <span class="variable">res</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line"></span><br><span class="line">        <span class="type">FilterChain</span> <span class="variable">filterChain</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FilterChain</span>();</span><br><span class="line">        filterChain.addFilter(<span class="keyword">new</span> <span class="title class_">FirstFilter</span>()).addFilter(<span class="keyword">new</span> <span class="title class_">SecondFilter</span>());</span><br><span class="line">        filterChain.doFilter(req,res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>过滤器1 前置处理</p><p>过滤器2 前置处理</p></li></ul><p>​       过滤器1 后置处理</p><p>​       过滤器2 后置处理</p>]]></content>
    
    
    <summary type="html">java设计模式</summary>
    
    
    
    <category term="java" scheme="https://yjyrichard.github.io/categories/java/"/>
    
    
    <category term="java" scheme="https://yjyrichard.github.io/tags/java/"/>
    
  </entry>
  
</feed>
